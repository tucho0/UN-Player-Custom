/// 				INCLUDES
#include <a_samp>
#include <streamer>
#include <a_mysql>
#include <a_http>
#include <sscanf2>
#include <natives_custom>

/// 				DEFINE
#define LOGO_UNPLAYER						"{FFFFFF}Bienvenido a la comunidad de {00A5FF}Old {2E6140}P{178527}layer{242F61}!"
#define URL_WEB								"~w~www.~b~Old~g~player~w~.com"
#define URL_WEB_SHADOW						URL_WEB
#define WEBPAGE 							"www.empty.com"
#define	GAMEMODE_VERSION					"RolePlay | 0.3.DL"
#define PASSWORD_EMAIL                      "SetPassword"

#define COLOR_TITULO_DIALOGS				"006CAA"
#define COLOR_TEXTO_DIALOGS					"F0F0F0"
#define COLOR_CREMA							"E6E6E6"
#define COLOR_AZUL							"00A5FF"
#define COLOR_VERDE							"00F50A"
#define COLOR_AMARILLO						"F5FF00"
#define COLOR_ROJO							"F50000"
#define COLOR_ROSA							"BE00FF"
#define COLOR_AZUL_OSCURO					"0037FF"
#define COLOR_TITULO_DE_AYUDA				0x778899FF
#define COLOR_OOC_CHANNEL					0xFFA000FF
#define LOCK_FACCION_CAR                    true
#define MAX_INTERIORS                       20
#define COLOR_DUDAS                     	0x93A6FFFF
#define COLOR_CHEATS_REPORTES				0xFF4600FF
#define COLOR_RADIO							0x0069FFFF
#define COLOR_DE_TRANSMISION                0x00FFB4FF
#define COLOR_DE_NARRACION 	                0xFF8200FF
#define COLOR_FAMILY						0x00EBFFFF
#define COLOR_3DLABEL_PISTAS				0xFFC800FF
#define COLOR_DM       						0xFF0055FF
#define COLOR_DM_TEAM  						0x0087FFFF
#define COLOR_OWNED_CHAT                    0x2587CEFF
#define COLOR_HELPER_CHAT                   0x00EBFFFF
#define COLOR_MENSAJES_DE_AVISOS 			0x8C8C8CFF
#define COLOR_MALETERO_ARMARIO_CAJA_FUERTE  0xC3FF00FF
#define	COLOR_KICK_JAIL_BAN                 0xFFBE00FF
#define COLOR_DE_WISPEO                     0xF5FF00FF
#define COLOR_INFO_MOVIL                    0xFFF000FF
#define COLOR_COLGAR_DESCOLGAR              0x828282FF
#define MAX_GUANTERA_GAVETA_SLOTS           8
#define VIDA_CRACK                          15
#define MAX_RADIO_STREAM                    300
#define MAX_RADIO_STREAM_MIN                150
#define MAX_RADIO_STREAM_MAP_ICON           600
#define WORLD_DEFAULT_INTERIOR              4
#define MAX_ALMACENES                       2
#define WORLD_NORMAL			            0
#define MAX_OBJECTS_PLAYERS                 9
#define TITULO_AYUDA "|»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»» Centro de Ayuda ««««««««««««««««««««««««««««««««««««««««««««««««|"
#define MAX_PLAYER_DATA           			510
#define MAX_HOUSE_DATA           			700
#define MAX_AGENDA_DATA                     1700
#define MAX_PLAYER_CONTACT                  50
#define MAX_AGENDA_NAME                     20
#define MAX_ROBOS_COUNT                     4
#define INFINITY_HEALTH 					(Float:0x7F800000)
#define MAX_FACCION_NAME       				30
#define MAX_FACCION_COUNT      				25
#define MAX_FACCION_SLOT                    61
#define MAX_FACCION_RANGOS                  10
#define MAX_FACCION_SKIN                    15
#define MAX_TIME_VEHICLE_HIDDEN             1200000
#define MAX_TEXT_CHAT                       150
#define NAME_TAG_DISTANCE_DEFAULT			15.0
#define VELOCITY_DOORS_TIME                 30
#define VELOCITY_DOORS_PORCENT              2
#define VELOCITY_PEAJE_TIME                 30
#define VELOCITY_PEAJE_PORCENT              2
#define MAX_VEHICLE_COUNT                   700
#define MAX_GARAGES_DESING                  5
#define MAX_VEHICLE_SLOT                    64
#define RACE_STATE_ESPERANDO                1
#define RACE_STATE_CONTEO                   2
#define RACE_STATE_COMPITIENDO              3
#define MAX_ACCOUNT_BANK_SLOT               66
#define MAX_VEHICLE_TIME                    168
#define MAX_GAS_VEHICLE						131 // + 488
#define MAX_DAMAGE_VEHICLE  				107 // + 512
#define MAX_OIL_VEHICLE  					113 // + 506
#define MAX_CANSANSIO						54 	// + 550
#define MAX_BIZZ_COUNT                      100
#define MAX_BIZZ_SLOTS                      19
#define MAX_BIZZ_TYPE_COUNT                 50
#define TYPE_NADA	                    	0
#define TYPE_MALETIN                   		1
#define TYPE_GAFAS                          2
#define TYPE_PELO                           3
#define TYPE_BOINA                          4
#define TYPE_GORRAS                         5
#define TYPE_RELOJES                        6
#define TYPE_CASCO                          7
#define TYPE_TASER                          8
#define TYPE_BANDANA                        9
#define MAX_BIIZ_NAME   	  				35
#define MAX_GASOLINERAS_COUNT               50
#define MAX_CAJEROS_COUNT                   20
#define MAX_HOUSE_TYPE_COUNT                40
#define MAX_GARAGE_TYPE_COUNT               40
#define MAX_HOUSE_COUNT	    	           	400
#define MAX_HOUSE_SLOT                      78
#define MAX_HOUSE_FRIENDS                   5
#define MAX_GARAGE_FOR_HOUSE                5
#define MAX_OBJECTS_VALLAS_CONOS_PINCHOS    100
#define MAX_JOB                             3
#define MAX_PICKUP_INFO_COUNT	            50
#define MAX_TAXIS_COUNT                     10
#define MAX_TRAINS                          5
#define PLAYERS_COLOR   	  				0xFEFEFEFF
#define SOUND_TUNNING                       1133
#define MAX_TEXT_SMS	                    100
#define	MAX_SMS_COUNT                       15
#define	MAX_COUNT_PISTAS                    20
#define MAX_COUNT_PISTAS_CAMERAS            20
#define	MAX_COUNT_PISTAS_POS                80
#define	MAX_COUNT_PISTAS_POS_PLAYERS        40
#define	MAX_COUNT_PISTAS_TOP                10
#define MAX_TEXT_DESCRIPTION                130
#define STATE_RACE_EXIT_DISCONNECT          0
#define STATE_RACE_EXIT_EXPULSADO           1
#define STATE_RACE_EXIT_FINISH              2
#define STATE_RACE_EXIT_DEATH               3
#define TIME_CHECK_GAS_VEHICLES             15000
#define STATE_RACE_EXIT_EXPLOTO             4
#define STATE_RACE_EXIT_SALIDA              5
#define SOUND_START_RACE					1056
#define SOUND_VUELTA_VRACE					1057
#define SECONDS_TAXI                        3
#define SOUND_END_RACE						1133
#define MAX_SOUNDS_FOR_PLAYERS              5
#define MAX_CALL_POLICE_COUNT               30
#define MAX_CAMERAS_COUNT                   50
#define CONO                       			1238
#define VALLA                          		3091 // 1459
#define PINCHO                  			2899
#define SOUND_ALARM_CAR						1190
#define MAX_REFRIGERADOR_SLOTS_COUNT	    10
#define MAX_ARTICULOS_COUNT				    50
#define MAX_INCENDIOS                       10
#define FIRE_OBJECT                         18691
#define LINE_FIRE                           2
#define MAX_GARAGES_EX_COUNT                200
#define MAX_BOMBAS_COUNT	                30
#define BOMBA_TYPE_NONE						0
#define BOMBA_TYPE_FOOT      				1
#define BOMBA_TYPE_CAR						2
//Defines
#define LOGO_STAFF "Administracion:"
#define MAX_COUNT_CARTERA                   6
#define MAX_COUNT_CHEQUES                   15

#define MAX_FRENO_DISTANCE 					1.0
#define MAX_PICKUP_DISTANCE                 300.0

#define PICKUP_TYPE_NINGUNO                 0
#define PICKUP_TYPE_FACCION                 1
#define PICKUP_TYPE_FACCION_ALMACEN         2
#define PICKUP_TYPE_TELE                    3
#define PICKUP_TYPE_NEGOCIO                 4
#define PICKUP_TYPE_NEGOCIO_TYPE            5
#define PICKUP_TYPE_CASA            		6
#define PICKUP_TYPE_CASA_TYPE            	7
#define PICKUP_TYPE_GARAGE_CASA             8
#define PICKUP_TYPE_GARAGE_CASA_TYPE        9
#define PICKUP_TYPE_INFO				    10
#define PICKUP_TYPE_GARAGE_EX			    11
#define PICKUP_TYPE_LOCAL				    12
#define PICKUP_TYPE_LOCAL_TYPE			    13
#define PICKUP_TYPE_PINCHO				    14

#define DIR_PISTAS "Pistas/"
#define DIR_USERS "users"
#define DIR_FACCIONES "Facciones/"
#define DIR_VEHICLES "vehicles"
#define DIR_VEHICLESF "vehiclesf"
#define DIR_VEHICLESP "vehiclesp"
#define DIR_NEGOCIOS "negocios"
#define DIR_MISC "Misc/"
#define DIR_HOUSES "casas"
#define DIR_CONTACTS "Contacts/"
#define DIR_SMS "SMS/"
#define DIR_GARAGES_EX "GaragesEx/"
#define DIR_BOMBAS "Bombas/"
#define DIR_VCP "VCP/"
#define DIR_ACCOUNT_BANK "users_banco"

#define CARTERA_TYPE_NADA                   0
#define CARTERA_TYPE_CHEQUE                 1
#define CARTERA_TYPE_TICKET                 2
#define CARTERA_TYPE_CONDONES               3

#define A_NADA	                            0
#define A_CERVEZA                           1
#define A_VODKA                             2
#define A_REFRESCO                          3
#define A_POLLO                             4
#define A_POLLO_C                           5
#define A_PAPAS                             6
#define A_PAPAS_C                           7
#define A_ARROZ                             8
#define A_ARROZ_C                           9

#define BICI         	0
#define COCHE           1
#define CAMION          2
#define MOTO            3
#define VUELO           4
#define BOTE            5
#define TREN            6

#define CIVIL			0
#define GOBIERNO  		1
#define LICENCIEROS		2
#define TRAFICANTES     3
#define LCN             4
#define YKZ             5
#define TAXI            6
#define SFPD            7
#define NFS             8
#define SFMD            9
#define CNN             10
#define ADP             11
#define CAMIONEROS      12
#define TALLER_SF       13
#define LSPD            14
#define CONTRABANDISTAS 15
#define SICARIOS        16
#define TALLER_LS       17
#define COLTS	        18
#define AK		        19
#define VELTRAN         20
#define HEORS           21
#define LSMD            22
#define MAX_FACCION    LSMD

#define COLTS_R         0
#define AK_R            1
#define VELTRAN_R       2
#define HEORS_R         3

#define TIME_R_READY    10800

#define NINGUNO         0
#define PESCA           1
#define VENDEDOR_MOVIL  2

/////////////////// END DEFINES ///////////////////

/// 				FORWARDS
forward MySQLConnect();
forward LoadLastOptionsServer(); // LOAD SPECIAL OPTION SERVER
forward DataUserClean(playerid);
forward DataUserLoad(playerid);
forward DataUserSave(playerid);
forward LoadDataFaccion(faccionid);
forward SaveDataFaccion(faccionid);
forward GetSpawnInfo(playerid);
forward GetPlayerStats(playerid, playeridshow);
forward SetSpawnInfoEx(playerid);
forward SendInfoMessage(playerid, type, const optional[], const message[]);
forward SendSyntaxError(playerid, const command[], const example[]);
forward SendAccessError(playerid, const command[]);
forward SendAdviseMessage(playerid, const advise[]);
forward Acciones(playerid, type, const text[]);
forward SendChatStream(playerid, const text[]);
forward SendChatStreamNormal(playerid, const text[], const type[]);
forward SendChatStreamIdioma(playerid, const text[], idiomaid);
forward SendChatStreamAnonymous(const text[], WorldStream, Float:X, Float:Y, Float:Z);
forward SendChatStreamAnonymousPlayerid(playerid, const text[], WorldStream, Float:X, Float:Y, Float:Z);
forward SendChatStreamGritar(playerid, const text[]);
forward IsPlayerNearEx(myplayerid, playerid, const iderror1[], const iderror2[], const iderror3[], const stringerror1[], const stringerror2[], const stringerror3[]);
forward IsPlayerLogued(playerid);
forward IsPlayerLoguedEx(playerid, playeridCheck);
forward IsPlayerNear(myplayerid, playerid);
forward GetMaxFaccionRango(faccionid);
forward GetMaxFaccionRangoSkin(faccionid, rangoid);
forward SendMessageFamily(playerid, const text[]);
forward SendMessageDM(playerid, const text[]);
forward SendMessageRadio(playerid, frecuencia, const text[]);
forward Comandos_Admin(Comando, playerid, playeridAC, LV, Cantidad_o_Tipo, const String[]);
forward MostrarHora(Accion ,playerid);
forward SetPlayerJail(playerid);
forward SetTimerGlobal();
forward SetPlayerSelectedTypeSkin(playerid, option);
forward SetPlayerSelectedSkin(playerid);
forward SetPlayerRowSkin(playerid, response);
forward IsPlayerInNearVehicle(playerid);
forward IsPlayerInNearVehicleEx(playerid);
forward LoadDataVehicle(vehicleid, const dir[], type);
forward SaveDataVehicle(vehicleid, const dir[]);
forward AparcarVehicle(playerid, vehicleid);
forward LockVehicle(playerid);
forward LockMaletero(playerid);
forward LockAlarma(playerid);
forward IsVehicleMyVehicle(playerid, vehicleid);
forward IsVehicleMyFaccion(playerid, vehicleid);
forward SetPlayerLockAllVehicles(playerid);
forward IsFixBikeEnter(playerid, vehicleid);
forward LoadCarsFaccion();
forward LoadCarsPublic();
forward DataLoadBizz(bizzid);
forward DataSaveBizz(bizzid, bool:update);
forward LoadPriceAndNameVehicles();
forward IsMaleteroOpen(playerid);
forward RemovePlayerWeapond(playerid, weaponsid);
forward LoadTelesPublics();
forward LoadDataBizzType();
forward SetFunctionsForBizz(playerid, bizzid);
forward LoadCajeros();
forward IsPlayerNearCajero(playerid);
forward IsMyBizz(playerid, bizzid, msg);
forward IsMyExtorsion(playerid, bizzid);
forward UpdateTextLabelNegocio(bizzid);
forward LoadMenuStatic();
forward CleanDataDeath(playerid);
forward SetMoneyExtorsion(bizzid, money);
forward PlayStreamSound(Float:x, Float:y, Float:z, Float:Ratio, soundid);
forward PlayPlayerStreamSound(playerid, soundid);
forward LoadAllAnims();
forward ApplyPlayerAnimCustom(playerid, const animlib[], const animid[], loop);
forward LoadTypeObjectsBolsillos();
forward IsNotFullBolsillo(playeridError, playerid, const error[]);
forward IsObjectInBolsillo(playerid, objectid);
forward RemoveObjectBolsillo(playerid, objectid);
forward AddObjectBolsillo(playerid, objectid);
forward GetNearFaccion(playerid);
forward SetPlayerColgar(playerid);
forward SetPlayerDescolgar(playerid);
forward ShowBolsillosToPlayer(playerid, playeridshow);
forward ShowCarteraToPlayer(playerid, playeridshow);
forward ShowBolsaToPlayer(playerid, playeridshow);
forward ShowPasaporteToPlayer(playerid, playeridshow);
forward ShowPapelesToPlayer(playerid, playeridshow);
forward ShowLicenciasToPlayer(playerid, playeridshow);
forward ShowIdiomasToPlayer(playerid, playeridshow);
forward ShowTextDrawFijosVelocimentros(playerid);
forward HideTextDrawFijosVelocimentros(playerid);
forward CreateTextDrawFijosVelocimetros();
forward IntentarAccion(playerid, const text[], rndNum);
forward UpdateTextDrawVehicle(playerid, vehicleid);
forward LoadGasolineras();
forward SaveGasolineras();
forward SetMenuTraficante(playerid);
forward GetMySecondNearVehicle(playerid);
forward GetMyNearGas(playerid);
forward LoadIconsPlayers();
forward RemoveDuenoOfVehicle(vehicleid, option);
forward RemoveDuenoOfHouse(houseid);
forward RemoveDuenoOfBizz(bizzid);
forward VerificarCochesVencidos();
forward LoadTypeJails();
forward GetPosSpace(const text[], option);
forward LoadTypeHouse();
forward LoadGarageType();
forward LoadGarages();
forward ExistGarageInHouse(houseid);
forward LoadHouse(houseid);
forward SaveHouse(houseid, bool:update);
forward UpdateTextLabelCasa(houseid);
forward CheckIsPlayerRentAndRemove(playerid, houseid);
forward IsMyHouse(playerid, houseid);
forward UnBanUser(playerid_admin, const playeridname[], option);
forward IsTunnigContinue(playerid);
forward IsPlayerInTaller(playerid);
forward IsPlayerInTallerEx(playerid);
forward IsPlayerInConcencionario(playerid);
forward IsPlayerInAlmacen(playerid, option);
forward IsPlayerNearAlmacen(playerid);
forward UpdateFaccionTextLabel(faccionid, update);
forward LoadPickupsAlmacenes(faccionid);
forward SendAlertCallRequest(faccionid, const text[]);
forward SendAlertCallRequestSAMD(type, const text[], faccionid);
forward GetMyNearDoor(playerid, key);
forward LoadPointsExtraction();
forward CleanVCP();
forward AddVCP(playerid, objectid, Float:Xv, Float:Yv, Float:Zv, Float:ZZv);
forward RemoveVCP(objectid);
forward IsNearVCP(playerid);
forward SetPlayerTutorial(playerid, tutorialid);
forward LoadTexDrawsTutorial();
forward SetTextDrawTutorial(textdrawid, const text[]);
forward EncenderVehicle(playerid);
forward ApagarVehicle(playerid);
forward ShowDialogAccount(playerid);
forward IsNotZero(playerid, number);
forward SetVehicleHidden(vehicleid);
forward SetVehicleShow(vehicleid);
forward RemoveVehicleHidden(vehicleid);
forward GetPlayerScoreEx(playerid);
forward GetPlayerScoreMax(playerid);
forward GetPlayerScoreMin(playerid);
forward CheckPlayersAFK();
forward LoadAgenda(playerid);
forward SaveAgenda(playerid);
forward CleanAgenda(playerid);
forward ShowHomeAgenda(playerid);
forward ShowContactosAgenda(playerid);
forward ShowAgregarAgenda(playerid, option);
forward ShowEliminarAgenda(playerid);
forward ShowContactosBloqueados(playerid);
forward ShowAgregarBloqueado(playerid);
forward ShowEliminarBloqueado(playerid);
forward AddContactToBlock(playerid, agendaid);
forward RemoveContactToBlock(playerid, agendaid);
forward AddNumberToAgenda(playerid, const name[], number);
forward RemoveNumberToAgenda(playerid, agendaid);
forward IsNotPhoneInBlackList(playerid, number);
forward SetPlayerCall(playerid, numberphone);
forward IsPlayerInCall(playerid);
forward IsInAgendaNumber(playerid, number);
forward IsNotMax100(Float:number, option);
forward IsVehicleWithInterior(playerid);
forward RemoveRallaName(playerid);
forward SendMessageToCallCNN(playerid);
forward UpdateSpawnPlayer(playerid);
forward IsVehicleNotBici(playerid, vehicleid);
forward IsValidName(const name[]);
forward SetPlayerFaccion(playerid, const cmdfaccion[]);
forward SetPlayerFaccionEx(playerid, const command[]);
forward IsPlayerConnectedEx(const playername[]);
forward LoadJobs();
forward LoadInfoPickups();
forward IsCheatMoney(playerid, lastmoney);
forward CheckWeapondCheat(playerid);
forward UpdateWeapon(playerid);
forward GivePlayerWeaponEx(playerid, weaponid, ammo);
forward GivePlayerWeaponReturn(playerid);
forward ResetPlayerWeaponsEx(playerid);
forward SetVehicleTaxi(vehicleid);
forward SetTaxiReadyTextDraw(taxiid, textdrawid);
forward UpdateTaximetroSeat(playerid);
forward IsVehicleTaxi(vehicleid);
forward IsReadyCallPublic(playerid);
forward ShowPlayerMenuSelectWalk(playerid);
forward ShowPlayerMenuSelectSprint(playerid);
forward ShowPlayerMenuSelectTalk(playerid);
forward IsNotFullMaterialsPlayer(playerid, newamount);
forward IsNotOneWeapon(weaponid);
forward SetVehicleAllVehicles();
forward CreateVehicleEx(model, Float:Xc, Float:Yc, Float:Zc, Float:ZZc, color1, color2, vehicleid);
forward SetPlateToCarFaccion(vehicleid, faccionid);
forward SetAlarmToVehicle(vehicleid);
forward RemoveAlarmToVehicle(vehicleid);
forward IsVehicleOff(vehicleid);
forward IsPlayerFoundWeapon(playerid, weaponid);
forward CheckVehicleGas();
forward SetBuyBares(playerid, option, IsBizz);
forward IsBizzBar(playerid, bizzid);
forward ShowDialogBar(playerid, listview);
forward PayCall(playerid);
forward SetGameTextMoneyMin(playerid, money);
forward SaveDatosPlayerDisconnect(playerid);
forward IsPlayerNotVehicleWeapondAction(playerid, playeridtwo);
forward GetOriginalHours(hour);
forward GetOriginalMinute(minute);
forward SetPlayerOrginalTime(playerid);
forward ShowHomeBanco(playerid);
forward ShowConsultarBanco(playerid);
forward ShowRetirarBanco(playerid);
forward ShowRetirarBancoFunction(playerid, option, amount);
forward ShowDepositarBanco(playerid);
forward ShowDepositarBancoFunction(playerid, option, amount);
forward encode_lights(light1, light2, light3, light4);
forward TimerIntermitentes(vehicleid);
forward SetPlayerHealthEx(playerid, Float:Health);
forward SetPlayerArmourEx(playerid, Float:Armour);
forward UpdateArmourAndArmour(playerid, Float:Health, Float:Armour);
forward FillVehicleGas(vehicleid);
forward IsValidWeapon(playerid, weaponid);
forward LoadCameras();
forward IsValidVehicle(playerid, vehiclemodel);
forward IsValidVehiclePaintJob(vehiclemodel);
forward ShowDialogAccountOptions(playerid);
forward IntermitenteIzquierdo(playerid);
forward IntermitenteDerecho(playerid);
forward IntermitenteEstacionamiento(playerid);
forward IntermitenteEncendido(playerid);
forward RemoveCall(callid, departament);
forward AddCall(number, const name[], const reason[], departament);
forward IsFoundCall(number, departament);
forward IsFoundCallSAMD(number, type, samdid);
forward ShowCallPolice(playerid);
forward ShowDetailsCall(playerid, callid);
forward ShowConnectedPolice(playerid);
forward ShowNamePolice(playerid);
forward ShowReasonPolice(playerid);
forward AddCallPublics(playerid, number, departament);
forward RemoveCallPublics(callid, departament);
forward ShowCallPublics(playerid);
forward GetNumberID(number);
forward UpdatePlayerVehicleStatus(vehicleid, Float:Healt);
forward ApplyPlayerAnimAccident(playerid);
forward ApplyPlayerAnimAccidentD(playerid);
forward ReturnPlayerNormalState(playerid);
forward IsOpenCloset(playerid, houseid);
forward IsOpenRefrigerador(playerid, houseid);
forward LoadPlayerSMS(playerid);
forward SavePlayerSMS(playerid);
forward AddSMS(playerid, number, const text[]);
forward RemoveSMS(playerid, smsid);
forward ShowSMSToPlayer(playerid);
forward ShowSMSOptionsToPlayer(playerid, smsid);
forward ShowReadSMS(playerid, smsid);
forward ShowReplySMS(playerid, smsid);
forward ShowRemoveSMS(playerid, smsid);
forward SendSMS(playerid, number, const text[]);
forward CleanSMS(playerid);
forward SendMessageDeathMatch(playerid);
forward SendMessageToPlayerDeathMatch(playerid, killerid, weaponid);
forward CreateDynamicObjectExULP(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid, interior, playerid, Float:distance);
forward IsVehicleOpen(playerid, vehicleid, ispassenger);
forward SetPlayerSleep(playerid);
forward CreateTextDrawGas();
forward CreateTextDrawDamage();
forward CreateTextDrawNumbers();
forward CreateTextDrawOil();
forward AbsVel(numberAscci);
forward ResetServer();
forward OnGameModeExitEx();
forward ConfirmDeletedAllSMS(playerid);
forward IsTunningForVehicle(modelid);
forward CleanTunningSlots(vehicleid);
forward SetLastSettingVehicle(vehicleid);
forward AddVehicleComponentEx(vehicleid, componentid);
forward RemoveVehicleComponentEx(vehicleid, componentid);
forward GetVehicleComponentInSlotEx(vehicleid, slotid);
forward GetMyNearCity(playerid);
forward SetVehicleToRespawnEx(vehicleid);
forward SetVehicleBugToRespawn(vehicleid);
forward ShowMenuDMWeapon(playerid);
forward Reverse(&bool:number);
forward ReverseEx(&number);
forward IsWeaponDmExist(weaponid);
forward UpdateTextDrawDM(teamid);
forward SetPlayerSpectateToPlayer(playerid, spectateplayerid);
forward RemoveSpectatePlayer(playerid);
forward CheckSpectToPlayer(playerid);
forward UpdateSpectatedPlayers(playerid, death, interiorid, world);
forward NextPlayerSpect(playerid);
forward LastPlayerSpect(playerid);
forward CreateDynamicMapIconULP(Float:x, Float:y, Float:z, type);
forward GetMyNextBizz();
forward GetMyNextHouse();
forward PlayerRestoreVarExitedVehicle(playerid);
forward IsPlayerOff(playerid);
forward LockTrain(vehicleid, LockV);
forward IsPlayerNearTram(playerid);
forward KickEx(playerid, option);
forward CreateGarage(playerid, houseid, desingid, TypeGarageEC);
forward GetMyNextGarage(houseid);
forward IsEmptyDesing();
forward CheckGarageRemove(houseid);
forward RemoveGarage(houseid, garageid);
forward RemoveAllGarage(houseid);
forward ShowGarages(playerid, houseid);
forward ShowDetailsGarage(playerid, houseid, garageid);
forward IsPlayerInGarageFun(playerid, &housesave, &garagesave);
forward LinkVehicleToInteriorEx(vehicleid, interiorid);
forward SetVehicleVirtualWorldEx(vehicleid, worldid);
forward IsPlayerNearGarage(vehicleid, playerid);
forward IsPassager(vehicleid);
forward ExistGarageForHouse(houseid, garageid);
forward CheckAsignados(playerid);
forward AddAsignados(playerid, vehicleid);
forward RemoveAsignados(playerid, asignarid);
forward IsMyCarAsignados(playerid, vehicleid);
forward ShowAsignados(playerid, playeridshow);
forward ShowHouseFriends(playerid, houseid);
forward IsPlayerInHouseFriend(playerid, houseid);
forward RemovePlayerHouseFriend(houseid, housefriendid);
forward AddPlayerHouseFriend(playerid, houseid);
forward LoadTypeArticulosR();
forward AddArticuloBolsa(playerid, articuloid, cantidad);
forward RemoveArticuloBolsa(playerid, bolsaid);
forward IsArticuloInBolsa(playerid, articuloid);
forward CleanArticulosBolsa(playerid);
forward AddArticleRefrigeradorFun(playerid, houseid, bolsaid);
forward AddArticleRefrigeradorCocinar(playerid, houseid, lastrefrigeradorid, articleid);
forward RemoveArticleRefrigeradorFun(playerid, houseid, refrigeradorid);
forward GiveArticlePlayerToPlayer(playerid, playeridtogive, bolsaid);
forward DropArticlePlayerToPlayer(playerid, bolsaid);
forward IsNotFullBolsa(playerid, bolsaid);
forward EatArticle(playerid, bolsaid);
forward EatArticleRefrigerador(playerid, houseid, refrigeradorid);
forward UseAritcle(playerid, articleid);
forward Cocinar(playerid, houseid, refrigeradorid);
forward LoadGaragesExLock();
forward SaveGaragesExLock();
forward LoadIncendios();
forward SaveIncendios();
forward CreateFire(houseid, fireid);
forward DestroyFire(fireid);
forward IsPlayerNearFire(playerid);
forward DestroyParticleFire(fireid);
forward GetFireNext();
forward ShowIncendios(playerid);
forward HideTextDrawsTelesAndInfo(playerid);
forward CheckFire(playerid);
forward RandomFire();
forward MsgCheatsReportsToAdmins(const text[]);
forward MsgCheatsReportsToAdminsEx(const text[], level);
forward MsgAdminUseCommands(level, playerid, const commands[]);
forward MsgKBJWReportsToAdmins(playerid, const text[]);
forward MsgHelperChat(const text[]);
forward ShowConnectedSAMD(playerid);
forward ShowConnectedRequest(playerid);
forward RemoveCallSAMD(callid, samdid);
forward AddCallSAMD(departament, city, number, type);
forward ShowCallSAMD(playerid);
forward LoadGaragesEx();
forward IsPlayerNearGarageEx(vehicleid, playerid);
forward UpdateLockDoorForPlayer(pickupid, lock, pickup2);
forward ShowDialogBarra(playerid, listview);
forward IsBizzBarra(playerid);
forward GetTrainByVehicleID(vehicleid);
forward GetVagonByVehicleID(vehicleid);
forward IsPlayerInTrain(playerid);
forward GetVagonIDByVagonID(vagonid);
forward GetHouseidIdByWorld(world);
forward GetGarageIdByWorld(houseid, world);
forward IsPointFromPoint(Float:RadioE, Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo);
forward Float:GetPointFromPoint(Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo);
forward IsVehicleInGarageEx(vehicleid);
forward AddVehicleCommponentTaller(vehicleid, componentid);
forward AddBomba(playerid, type, vehicleid, Float:Xbom, Float:Ybom, Float:Zbom, objectid);
forward RemoveBomba(bombaid);
forward IsPlayerNearBomba(playerid, Float:Range, option);
forward IsVehicleHaveBomba(vehicleid);
forward DesactivarBomba(playerid, bombaid);
forward ActivarBomba(bombaid, count);
forward ShowBombas(playerid);
forward SaveBombas();
forward LoadBombas();
forward IsPlayerNearBombaEx(playerid, bombaid, Float:Range);
forward SaveVCP();
forward LoadVCP();
forward IsWorldOfGarage(world);
forward RemoveAllHouseFriend(houseid);
forward GivePlayerMoneyEx(playerid, money);
forward ShowServerStats(playerid);
forward Text:TextDrawCreateEx(Float:Xt, Float:Yt, const text[]);
forward ExistPlate(plate);
forward ChangeVehicle(playerid, vehicleid, modelid, worldid, interiorid);
forward ShowChangePlate(playerid);
forward ChangeVehiclePlate(vehicleid, newplate);
forward TogglePlayerControllableEx(playerid, toogle);
forward RemoveObjectToCartera(playerid, carteraid);
forward AddObjectToCartera(playerid, objectid, carteraC, carteraT, carteraI);
forward IsPlayerHaveCondones(playerid);
forward IsNotFullCartera(playeridError, playerid, const error[]);
forward CreateAccountBank(playerid);
forward LoadAccountBanking(playerid);
forward SaveAccountBanking(playerid);
forward strvalEx(const string[]);
forward IsPlayerAccountBankConnected(accountcheck);
forward PayCheckToPlayer(playerid, carteraid);
forward RemoveCheque(playerid, chequeid);
forward ShowVerCheques(playerid);
forward ShowManejarCuentas(playerid);
forward CrearCheque(playerid, giveplayerid, type, amount, chequeid);
forward IsNotChequesFull(playerid);
forward CleanPlayerAccountBank(playerid);
forward ShowPayCheque(playerid);
forward TransferirMoney(playerid, account, amount);
forward ShowBankConfiguration(playerid);
forward ShowBankTransferencia(playerid);
forward ShowBankTransferenciaResumen(playerid);
forward ShowBankTransferenciaCantidad(playerid);
forward AddPlayerToDM(playerid, teamid);
forward RemovePlayerToDM(playerid);
forward IsVehicleExplotion(playerid, vehicleid, Float:damage, seat);
forward IsVehicleBug(vehicleid, SpawnBug);
forward SetCameraLogin(playerid, nextcamera, avanze);
forward LoadCamerasLogin();
forward IsAlarmaBug(vehicleid);
forward SetCameraPresent(playerid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ, min, max);
forward RecoveryEmailPlayer(playerid, response_code, const data[]);
forward IsValidEmail(playerid, const email[]);
forward ShowPlayerLogin(playerid, option);
forward ShowPlayerRegister(playerid, option);
forward ShowPlayerVerifiquedEmail(playerid, option);
forward SendRequestPasswordRecovery(playerid);
forward ShowPlayerDialogEx(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[]);
forward ShowPlayerEmailChange(playerid, option);
forward ValidingEmail(playerid, response_code, const data[]);
forward IsValidStringServer(playerid, const string[]);
forward IsValidStringServerOther(playerid, const string[]);
forward ChangeEnfermedad(playerid, newenfermedad);
forward RemovePlayerFromVehicleEx(playerid, seat, time);
forward OnPlayerExitVehicleEx(playerid, vehicleid, ispassenger);
forward OnPlayerEnterVehicleEx(playerid, vehicleid, ispassenger);
forward LoadDataPistas();
forward SaveDataPistas();
forward ValidingPista(pistaid, option);
forward CreateObjectEx(modelid, Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ, Float:DrawDistance);
forward CleanPista(pistaid);
forward CleanPistaPos(pistaid, posid);
forward CleanPistaPosPlayers(pistaid, posplayersid);
forward ShowEditorPistas(playerid);
forward GetMaxCountPistas();
forward GetMaxCountPistasPlayers(pistaid);
forward GetMaxCountPistasCarPointsExit(pistaid);
forward GetMaxCountPistasCamPoints(pistaid);
forward GetMaxCountPistasPos(pistaid);
forward GetNextPista();
forward ShowNewPista(playerid);
forward ShowListPistas(playerid);
forward ShowListPistasOptions(playerid, pistaid);
forward PistaExist(playerid, pistaid);
forward ShowPistaChangeName(playerid, pistaid);
forward ShowPistaShowCheckPoints(playerid, pistaid);
forward ShowPistaShowCheckPointsOptions(playerid, pistaid, posid);
forward ShowPistaShowPosPlayers(playerid, pistaid);
forward ShowPistaSelectCheckPoint(playerid, pistaid);
forward ShowPistaShowPosPlayersOptions(playerid, pistaid, posid);
forward ShowPistaValidar(playerid, pistaid);
forward ShowPistaRemove(playerid, pistaid);
forward CreatePistaPlayers(playerid, pistaid, posid);
forward CreatePistaPos(playerid, pistaid, posid);
forward CreatePistaCameras(playerid, pistaid, posid);
forward ShowOrHideTagPistaPlayers(pistaid);
forward ShowOrHideTagPistaPos(pistaid);
forward UpdateTagPistaPlayers(pistaid, posid);
forward UpdateTagPistaPos(pistaid, posid);
forward RemoveTagPistaPos(pistaid, posid);
forward RemoveTagPistaPlayers(pistaid, posid);
forward ShowOrHideTagPistaCarPointsExit(pistaid);
forward ShowOrHideTagPistaCam(pistaid);
forward UpdateTagPistaCameras(pistaid, posid);
forward RemoveTagPistaCameras(pistaid, posid);
forward ShowPistaShowCarPointsExit(playerid, pistaid);
forward ShowPistaShowCam(playerid, pistaid);
forward ShowPistaCarPointsExitOptions(playerid, pistaid, posid);
forward UpdateTagPistaCarPointsExit(pistaid, posid);
forward RemoveTagPistaCarPointsExit(pistaid, posid);
forward CleanPistaCarPointsExit(pistaid, posplayersid);
forward CleanPistaCameras(pistaid, posplayersid);
forward CreatePistaCarPoints(playerid, pistaid, posid);
forward CleanPistaRecords(pistaid, posid);
forward ShowPistas(playerid);
forward ShowPistasOptions(playerid, pistaid);
forward ShowPistasSelectVueltas(playerid, pistaid);
forward ShowPistasSelectVelocidad(playerid, pistaid, posid);
forward ShowPistasSelectCompetidores(playerid, pistaid);
forward ShowPistasSelectConteo(playerid, pistaid);
forward ShowPistasSelectTiempoAntes(playerid, pistaid);
forward ShowPistasUnirJugador(playerid, pistaid);
forward ShowPistasVerJugadores(playerid, pistaid);
forward ShowPistasComenzar(playerid, pistaid);
forward ShowPistasCochesPermitidos(playerid, pistaid);
forward CleanPistaForRace(pistaid);
forward RemovePlayerToRace(playerid, option, optiontwo, reason);
forward AddPlayerToRace(playerid, pistaid, option);
forward ConteoRace(pistaid, count);
forward StartRace(pistaid, option);
forward CancelRace(pistaid);
forward ShowPistasVerJugadoresOptions(playerid, pistaid, posid);
forward GetNextCheckPoint(pistaid, checkpointid, option);
forward ShowPistaPlayerPublics(playerid);
forward GetMaxPlayerCurrentPista(pistaid);
forward GetValidCheckPoint(pistaid, checkpointid, option);
forward SendMessageToRaceChat(raceid, const text[], option);
forward IsVehiceInRace(vehicleid);
forward SetPlayerNextCheckPointRace(playerid);
forward GetMaxPistaRace(raceid);
forward GetMinPistaRace(raceid);
forward ShowPistasSelectRadio(playerid, pistaid);
forward ShowStatsRace(raceid);
forward AddPlayerToRecordsLive(raceid, posid);
forward GetTimeBySeconds(seconds, &hour, &minute, &second);
forward GetVehicleVelocityEx(vehicleid);
forward UpdateGasAndOil(vehicleid);
forward UpdateDamage(playerid, &Float:newdamage);
forward UpdateTextDrawRacePositions(pistaid);
forward Float:GetPlayerProgressRace(playerid, &progress);
forward GetMaxCheckPointCurrentPista(pistaid, countvuelta, checkpointcount);
forward ComparePlayersRaceProgress(progress1, progress2, Float:Distance1, Float:Distance2);
forward ForcePutPlayerInVehicle(playerid, vehicleid, seat);
forward ShowPistaCamOptions(playerid, pistaid, posid);
forward SetCameraPresentRace(playerid, raceid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ);
forward DetectSpam(playerid, text[]);
forward ShowHomeAgendaOptions(playerid, agendaid);
forward ShowBuscarAgenda(playerid);
forward ShowBuscarResultAgenda(playerid, const text[]);
forward ShowSendSMSAgenda(playerid, agendaid);
forward UpdatePlayerDescrription(playerid);
forward AddPlayerDescription(playerid, option);
forward RemovePlayerDescription(playerid, option, optiontwo);
forward ShowMenuDescription(playerid);
forward ShowMenuDescriptionChange(playerid);
forward ShowMenuDescriptionChangePer(playerid);
forward SetPlayerVirtualWorldEx(playerid, wolrdid);
forward ShowMenuDescriptionChangeText(playerid);
forward ShowMenuDescriptionChangeColors(playerid);
forward ShowMenuDescriptionChangeText(playerid);
forward Delete3DTextLabelEx(playerid, Text3D:id);
forward SetVehicleToRespawnExTwo(vehicleid);
forward PlayAudioPlayerHouse(playerid);
forward ShowStations(playerid, selected, option);
forward ChangePasswordUser(playerid_admin, const playeridname[], const newpassword[]);
forward BuyPhone24_7(playerid);
forward CheckNumberAvalible(number);
forward BuyPhoneNow(playerid, number);
forward AreHelpersOnline();
forward ShowDudasDialog(playerid);
//forward getdateEx(&ano, &mes, &dia);
forward IsPlayerInGarageEx(playerid);
forward LoadRobosInfo();
forward AddRobo(roboid, bizzid);
forward CancelRobo(roboid);
forward SendMessageRobosFaccion(faccionid, const text[]);
forward	GetMaxPlayersByFaccion(faccionid);
forward	SendAvisoRobo(roboid);
forward	RobarConteo(roboid);
forward	IsBizzOnRobo(playerid, bizzid);
forward ShowAlarmas(playerid);
forward SendMessageRadioGeneral(playerid, const text[]);
forward SendMessageRadioGeneralSAMD(playerid, const text[]);
forward IsGarageToHouse(playerid, pickupid);
forward IsValidSeatTaxi(seatid);
forward SetPlayerTaxi(playerid, taxiid, seat);
forward CheckValidPlayerToTaxi(playerid, taxiid);
forward PayTaxi(playerid, option);
forward CalcularTaxiMoney(playerid);
forward SetVehicleHealthEx(vehicleid, Float:health);
forward OnPlayerExitHouse(playerid);
forward OnPlayerEnterInHouse(playerid);
forward ChangeMusicOnHouse(houseid);
forward StopMusicOnHouse(houseid);
forward StopMusicOnVehicle(vehicleid);
forward ChangeHouseOrOther(playerid, newhouse);
forward ChangeMusicOnVehicle(vehicleid);
forward PlayAudioPlayerVehicle(playerid, vehicleid);
forward IsPlayerNotFullObjects(playerid, msg);
forward ShowLockTextDraws(vehicleid, last);
forward HaveObjectPlayer(playerid, objectid);
forward HaveObjectByTypeAndShow(playerid, type);
forward ReturnObjetsToPlayer(playerid);
forward SetObjectHoldToPlayer(playerid, objectid, index);
forward GetTypeObject(objectid);
forward GetTypeObjectEx(objectid);
forward AddObjectHoldToPlayer(playerid, objectid);
forward RemoveObjectHoldToPlayer(playerid, objectid, index);
forward SpawnPlayerEx(playerid);
forward SetPlayerSkinEx(playerid, skinid);
forward IsNotOcupedObject(playerid, objectid);
forward IsAllowItSkinForHair(skinid);
forward NextHairSelect(playerid);
forward SetPlayerSelectedTypeHair(playerid);
forward GetObjectByType(playerid, type);
forward ShowObjectos(playerid);
forward ShowObjetosOpciones(playerid);
forward ShowDarObjeto(playerid);
forward ShowDejarObjeto(playerid);
forward ShowDejarObjetoInput(playerid);
forward ShowAndHideSirena(playerid, vehicleid);
forward IsAllowItSkinForBoina(skinid);
forward IsAllowItSkinForCasco(skinid);
forward AllowForItSkin(skinid, type);
forward IsAllowItSkinForRelojes(skinid);
forward IsAllowItSkinForGorras(skinid);
forward IsAllowItSkinForGafas(skinid);
forward LockGuantera(playerid);
forward IsPlayerInsideVehicle(playerid);
forward IsOpenGaveta(playerid, houseid);
forward IsGuanteraOpen(playerid);
forward SetPlayerInteriorEx(playerid, newinterior);
forward GetPlayerInteriorEx(playerid);

forward CreatePickupEx(modelid, type, Float:x, Float:y, Float:z, worldid, interiorid);

forward CreateFaccionDynamicPickup(modelid, faccionid, Float:x, Float:y, Float:z, worldid, interiorid, playerid, Float:streamdistance);
forward CreateNegocioDynamicPickup(modelid, negociotipo, Float:x, Float:y, Float:z, worldid);
forward CreateCasaTipoDynamicPickup(modelid, casatipo, Float:x, Float:y, Float:z, worldid);
forward CreateGarageTipoDynamicPickup(modelid, garagetipo, Float:x, Float:y, Float:z, worldid);
forward CreateInfoPickup(modelid, pickupinfoid, Float:x, Float:y, Float:z, worldid, interiorid);
forward CreateGarageExPickup(modelid, garageid, Float:x, Float:y, Float:z, worldid, interiorid);

forward IsPlayerInPickup(playerid);
forward ShowDialog247(playerid);
/////////////////// END FORWARDS ///////////////////

/// 				ENUMS
enum RobosInfoEnum
{
	FaccionIDR,
	TimeLast,
	BizzIDR,
	RoboState,
	City,
	ConteoR,
	TimerID
}
enum CamerasLoginEnum
{
	Float:PlayerPosLogin[3],
	Float:CamerasPosLogin[3],
	Float:CamerasLookLogin[3]
}
enum AccountBankEnum
{
	Owner[MAX_PLAYER_NAME],
	Balance,
	LockIn,
	LockOut
}
enum ChequesEnum
{
	UniqueID,
	Type,
	NombreCh[MAX_PLAYER_NAME],
	Ammount
}
enum BombasEnum
{
	TypeBomba,
	ObjectID,
	ObjectIDO,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	TimerID
}
enum PistasEnum
{
	NamePista[35],
	Valid,
	ValidR,
	ShowTagPos,
	ShowTagPlayers,
	ShowTagCarPointsExit,
	ShowTagCamPoints,
	Lock,
	Interior,
	World,
	Used,
	ConteoPlayers,
	TimeStart,
	MaxCheckPointsTotal,
	IsCameras,
	Repair,


/* Configuración de la Carrera */
	Vueltas,
	Competidores,
	SaveRecord,
	ConteoR,
	TiempoAntes,
	Tipo,
	EstadoR,
	CochesP,
	AlReves,
	CheckPointFinal,
	RaceTimer,
	MinPP,
	MaxPP,
	MaxCameras,
	Float:Radio
}
enum PistasPosEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Text3D:Text3DPista,
	Text3DPistaB
}
enum PistasPosPlayersEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Float:ZZpos,
	Text3D:Text3DPista,
	Text3DPistaB,

	/* Configuración de la Carrera */
	ExitReason,
	VehicleIDR,
	PlayerIDR,
	VueltaR,
	LastCheckPoint,
	TimeFinish,
	PosFinish,

	/* Info Vuelta */
	NameR[MAX_PLAYER_NAME],
	PistaIDR,
}
enum PistasCarPointsExitEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Float:ZZpos,
	Text3D:Text3DPista,
	Text3DPistaB
}
enum PistasTopEnum
{
    PlayerName[MAX_PLAYER_NAME],
	Time,
	Empty_1,
	Empty_2,
	Vueltas,
    DateHour,
    DateMinute,
    DateSecond,
    DateMonth,
    DateDay,
    DateYear,
	CarModel
}
enum PistasCamerasEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Float:Vel,

	Text3D:Text3DPista,
	Text3DPistaB
}
enum RefrigeradorEnum
{
	Articulo[MAX_REFRIGERADOR_SLOTS_COUNT],
	Cantidad[MAX_REFRIGERADOR_SLOTS_COUNT]
}
enum IncendiosEnum
{
	Damage,
	HouseidI,
	ObjectsIDOut[15],
	ObjectsIDIn[15]
}
enum ArticulosEnum
{
	NameA[MAX_PLAYER_NAME],
	Float:Vida
}
enum SMSEnum
{
    Number,
	SMSText[MAX_TEXT_SMS]
}
enum CallPublicsEnum
{
    Number,
	TimeCall[3],
	City
}
enum CallPoliceEnum
{
    Number,
    NameC[MAX_PLAYER_NAME],
	ReasonC[MAX_TEXT_CHAT],
	TimeCall[3]
}
enum CallSAMDEnum
{
    Number,
	TimeCall[3],
	Type,
	City
}
enum CamerasEnum
{
    Interior,
    World,
	Page,
	Float:PosXLook,
	Float:PosYLook,
	Float:PosZLook,
	Float:PosXAt,
	Float:PosYAt,
	Float:PosZAt
}
enum TaxisTaximetroEnum
{
	TaxiOn,
	TaxiTime[3],
	TaxiVehicleid,
	Text:Seats[3]
}
enum PickupInfoEnum
{
	Float:PosInfoX,
	Float:PosInfoY,
	Float:PosInfoZ,
	PickupId
}
enum JobsDataEnum
{
	PESCA_PickupidPescar,
	PESCA_PickupidVender
}
enum JobsEnum
{
	NameJob[MAX_FACCION_NAME],
	pickupidGet
}
enum VCPEnum
{
	objectid_vcp,
	objectmodel,
	Float:ObjX,
	Float:ObjY,
	Float:ObjZ,
	Float:ObjZRot,
	pickupidVCP
}
enum FaccionGetMercanciaEnum
{
	Float:PosX,
	Float:PosY,
	Float:PosZ
}
enum TypeHouseEnums
{
	TypeName[MAX_PLAYER_NAME],
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosZZ,
	Interior,
	PickupId
}
enum TypeGarageEnums
{
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosZZ,
	Float:PosXh,
	Float:PosYh,
	Float:PosZh,
	Float:PosZZh,
	Float:PosXc,
	Float:PosYc,
	Float:PosZc,
	Float:PosZZc,
	Interior,
	PickupId,
	PickupIdh
}
enum HouseEnums
{
	Dueno[MAX_PLAYER_NAME],
	ArmarioWeapon[7],
	ArmarioAmmo[7],
	Float:Chaleco,
	Drogas,
	Ganzuas,
	Bombas,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosZZ,
	Interior,
	TypeHouseId,
	PickupId,
	Text3D:TextLabel,
	PriceRent,
	Level,
	World,
	Lock,
	Price,
	Deposito,
	Materiales,
	ArmarioLock,
	RefrigeradorLock,
	RingHouseTime,
	StationID,
    GavetaObjects[MAX_GUANTERA_GAVETA_SLOTS],
    GavetaLock,
    ArmarioData[500],
    RefrigeradorData[200]
}
enum HouseFriendsEnum
{
    Name[MAX_PLAYER_NAME],
}
enum GaragesDesingEnum
{
    Float:Xg,
    Float:Yg,
    Float:Zg,
    Float:ZZg,
    Float:XgIn,
    Float:YgIn,
    Float:ZgIn,
    Float:ZZgIn,
    Float:XgOut,
    Float:YgOut,
    Float:ZgOut,
    Float:ZZgOut,
	TypeGarageE
}
enum GaragesEnum
{
    Float:Xg,
    Float:Yg,
    Float:Zg,
    Float:ZZg,
    Float:XgIn,
    Float:YgIn,
    Float:ZgIn,
    Float:ZZgIn,
    Float:XgOut,
    Float:YgOut,
    Float:ZgOut,
    Float:ZZgOut,
    LockIn,
    LockOut,
	PickupidIn,
	PickupidOut,
	TypeGarageE,
	WorldG,
	bool:DeletedG
}
enum GasolinerasEnum
{
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Fuel
}
enum CajerosEnum
{
	Float:PosX,
	Float:PosY,
	Float:PosZ
}
enum NegociosTypeEnum
{
	Float:PosInX,	          	// 00 - Pos X Adentro del Negocio
	Float:PosInY,          		// 01 - Pos Y Adentro del Negocio
	Float:PosInZ,          		// 02 - Pos Z Adentro del Negocio
	Float:PosInZZ,         		// 03 - Pos ZZ Adentro del Negocio
	Float:PosInX_PC,	        // 04 - Pos X PC Adentro del Negocio
	Float:PosInY_PC,          	// 05 - Pos Y PC Adentro del Negocio
	Float:PosInZ_PC,          	// 06 - Pos Z PC Adentro del Negocio
	Float:PosInZZ_PC,         	// 07 - Pos ZZ PC Adentro del Negocio
	InteriorId,         		// 08 - ID del interior del negocio
	TypeName[MAX_PLAYER_NAME],	// 09 - Nombre del tipo de negocio
	TypePickupOrCheckponit,		// 10 - Si será un pickup o checkpoint | 0 = pickupid 1 = checkpoint
	PickupId,					// 11 - I ID del pickupp
	IdMapIcon                   // 12 - IdMapIcon
};
enum NegociosEnum
{
	Float:PosOutX,          	// 00 - Pos X Afuera del Negocio
	Float:PosOutY,          	// 01 - Pos Y Afuera del Negocio
	Float:PosOutZ,          	// 02 - Pos Z Afuera del Negocio
	Float:PosOutZZ,         	// 03 - Pos ZZ Afuera del Negocio
	PickupOutId,          	 	// 04 - ID Del Pickup de afuera del negocio
	InteriorOut,          	 	// 05 - ID del enterior de afuera del negocio
	Text3D:TextLabel,
	Deposito,           		// 06 - Deposito del negocio
	Precio,           			// 07 - Precio del negocio
	Lock,           			// 08 - Cerrado o abierto
	Type,           			// 09 - Tipo de negocio
	PriceJoin,           		// 10 - Precio de entrada por defecto
	PricePiece,           		// 11 - Precio que pagaría por el producto
	NameBizz[MAX_BIIZ_NAME], 	// 12 - Nombre del negocio
	Dueno[MAX_PLAYER_NAME], 	// 13 - Nombre del dueño del negocio
	Extorsion[MAX_PLAYER_NAME], // 14 - Nombre del extorsionista
	Materiales, 				// 15 - Nombre del extorsionista
	World,                      // 16 - Mundo del negocio
	DepositoExtorsion,          // 17 - Dinero Extorsión
	Level			            // 18 - NIvel mínimo para comprar el negocio
};
enum DataCarsEnum
{
	Float:PosX,       			// 00 - Coordenadas X
	Float:PosY,       			// 01 - Coordenadas Y
	Float:PosZ,       			// 02 - Coordenadas Z
	Float:PosZZ,      			// 03 - Coordenadas ZZ
	Float:LastX,
	Float:LastY,
	Float:LastZ,
	Float:LastZZ,
	PanelS,
	DoorS,
	LightS,
	TiresS,
	IsLastSpawn,
	Modelo,     				// 04 - Modelo
	Color1,     				// 05 - Color 1
	Color2,     				// 06 - Color 2
	Dueno[MAX_PLAYER_NAME], 	// 07 - Dueño
	Lock,						// 08 - Lock
	Time,       				// 09 - Time
	Matricula,     				// 10 - Matrícula
	MatriculaString[32],     	// 10.1 - Matrícula String
	Puente,      				// 11 - Puente
	Gas,	      				// 12 - Gas
	ConteoOil,                  // 13 - ConteoOil
	GasNotShow,                 // 14 - GasNotShow
	OilNotShow,
	TimeGas,                    // 15 - Time Gas
//	Text:TextDrawGas,	      	// 16 - Gas Text
//	Text:TextDrawEstado,	    // 17 - Daño Text
//	Text:TextDrawVelocidad,	    // 18 - Velocidad Text
	StateEncendido,			    // 19 - Apagado o encendido
	LockPolice,                 // 20 - Candado de la policía
	ReasonLock[50],           	// 21 - Razón del candado
	MaleteroState,              // 22 - Estado del Maletero
	SlotsTunning[14],           // 23 Slots de Tunning
	Vinillo,
	CapoState,
	LightState,
	RespawnTimerId,
	IsIntermitente,             // 0 = Descativado | 1 = Izquiredo | 2 = Derecho
	ConteoIntermitente,
	AlarmOn,
	Oil,
	TemperaturaC,
	EngineState,
	Float:LastDamage,
//	LastVelocityInt,
	Interior,
	InteriorLast,
	World,
	WorldLast,
	AttachObjectID,
	TimeCalentamiento,
	LlenandoGas,
	StationID,
    GuanteraObjects[MAX_GUANTERA_GAVETA_SLOTS],
    GuanteraLock,
    TimerIdBug,
    VehicleDeath,
	VehicleAnticheat,
	Freno
};
enum GaragesExEnum
{
	Float:PosXOne,
	Float:PosYOne,
	Float:PosZOne,
	Float:PosZZOne,
	Float:PosXOneP,
	Float:PosYOneP,
	Float:PosZOneP,
	Float:PosZZOneP,
	Float:PosXTwo,
	Float:PosYTwo,
	Float:PosZTwo,
	Float:PosZZTwo,
	Float:PosXTwoP,
	Float:PosYTwoP,
	Float:PosZTwoP,
	Float:PosZZTwoP,
	PickupIDOneP,
	PickupIDTwoP,
	Interior,
	World,
	Lock,
	Dueno
};
enum DataUsers
{
	EmailTime,
	Email[60],           // Email
	Password[25],       // 2
	AccountState,       // 3
	Float:Spawn_X,  	// 4
	Float:Spawn_Y, 		// 5
	Float:Spawn_Z, 	 	// 6
	Float:Spawn_ZZ, 	// 7
	HoursPlaying, 		// 8
	DeahtCount, 		// 9
	KilledCount, 		// 10
	Phone, 				// 11
	House, 				// 12
	Car,				// 13
	Faccion,			// 14
	Rango,				// 15
	GirlFreind[MAX_PLAYER_NAME],// 16
	Bolsillos[5],		// 17
	Habilidad,			// 18
	Warn,				// 19
	Ciudad,				// 20
	Float:Vida,			// 21
	Float:Chaleco,		// 22
	Cansansio, 			// 23
	Dinero, 			// 24
	Banco, 				// 25
	Jail, 				// 26
	Admin,				// 27
	World,				// 28
	Interior,			// 29
	Skin,				// 30
	Drogas,				// 31
	Materiales,			// 32
    Lata,				// 33
	Ganzuas,			// 34
	Alquiler,			// 35
	Bombas,				// 36
	Sexo,				// 37
	Idiomas[6],			// 38
	Licencias[7],       // 39
	IsInJail,			// 40
	Nacer,				// 41
	TimeRequestBank,	// 42
	MyBonus,			// 43
	InTutorial,			// 44
	Edad,				// 45
	IsPlayerInHouse,	// 46
	TimeEquipo,			// 47
	SpawnAmigo,			// 48
	IsPaga,				// 50
	MyIP[16],			// 51
	Job,				// 52
	MyStyleWalk,		// 53
	Saldo,				// 55
	LicenciaPesca,		// 56
	IntermitentState,	// 57
	MyStyleTalk,		// 59
	IsPlayerInBizz,		// 60
	IsPlayerInGarage,	// 62
	WeaponS[13],
	AmmoS[13],
	Asignados[3],
    Bolsa[4],
    BolsaC[4],
    HaveBolsa,
    IsPlayerInVehInt,
    Cartera[MAX_COUNT_CARTERA],
    CarteraC[MAX_COUNT_CARTERA],
    CarteraT[MAX_COUNT_CARTERA],
    AccountBankingOpen,
    CarteraI[MAX_COUNT_CARTERA],
   	IsPlayerInBank,
    AlertSMSBank,
    HorasWork,
	CameraLogin,
	Enfermedad,
	Description,
	EnableDescription,
	DescriptionString[MAX_TEXT_DESCRIPTION],
	DescriptionColor,
	DescriptionSelect,
	SpawnFac,
	Objetos[MAX_OBJECTS_PLAYERS],
	ObjetosVision[MAX_OBJECTS_PLAYERS],
	TypePhone,
	Ayudante,
	Mapper,
	Local,
	InLocal
};
enum Agenda
{
	NameC[MAX_AGENDA_NAME],
	NumberC,
	bool:IsBlackList
};
enum DataUsersOnline
{
	State,
	/*
	    0 - Conectando...
		1 - Login
		2 - Registro
		3 - Logueado
	*/
	CurrentDialog,
	LoginTime,
	Spawn,
	Espectando,
	NameOnline[MAX_PLAYER_NAME],
	NameOnlineFix[MAX_PLAYER_NAME],
	Intentar,
	StateMoneyPass,
	StateWeaponPass,
	StateChannelOOC,
	StateChannelFamily,
	StateChannelRadio,
	StateChannelCNN,
	StateJob,
	Paga,
	InPickup,
	InPickupFaccion,
	InPickupTele,
	InPickupNegocio,
	InPickupCasa,
	InPickupLocal,
	Float:MyPickupX,
	Float:MyPickupY,
	Float:MyPickupZ,
	Float:MyPickupZZ,
	MyPickupWorld,
	MyPickupLock,
	Float:MyPickupX_Now,
	Float:MyPickupY_Now,
	Float:MyPickupZ_Now,
	MyPickupInterior,
	Text:MyTextDrawShow,
	InvitePlayer,
	InviteFaccion,
	Frecuencia,
	AdminOn,
	Freeze,
	Wispers,
	Level,
	IsPagaO,
	Menu:InMenu,
	MyIDVehicleTunning,
	TypeSkinList,
	RowHair,
	TypeBuy,
	RowSkin,
	IsPlayerInHotel,
	AfterMenuRow,
	IsTaxi,
	SeatTaxi,
	SubAfterMenuRow,
	MyAmmoSelect,
	Float:VidaOn,
	Float:ChalecoOn,
	ChangeVC,
	InAnim,
	InCall,
	SendCommands,
	Altavoz,
	IsDescolgado,
	PhoneOnline,
	InSleep,
	CansansioConteo,
	InCarId,
	InVehicle,
	MyLastIdReport,
	TimeCallPublics,
	// Dar con Dialog
	IsEntrevistado,
	IsAtado,
	IsEsposas,
	IsTeazer,
	MarcaZZ,
	DarLlaves,
	StateDeath,
	TimerTutorialId,
	TimerCamaraId,
	TimerCamaraIdRace,
	IsNotSilenciado,
	ModeDM,
	TeamDM,
	ModeRace,
	Text3D:Description3D,
	IsAFK,
	Float:CoordenadasAFK[4],
	SaveAfterAgenda[60],
	SaveNameContact[10],
	JobBonus,
	IsCheckCheat,
	CountCheat,
	InWalk,
	TimeCall,
	ICall,
	InSpecialAnim,
	IsCheckUser,
	IsEspectando,
	EspectVehOrPlayer,
	IsCleanAnimCar,
	LastWeapondRow,
	IsAutorizado,
	NameProject[MAX_PLAYER_NAME],
	TimeLata,
	InCamera,
	NumberCallPublic,
	LastVel[3],
	LastTextDrawTemperatura,
	LastDamageInt,
	LastGas,
	LastOil,
	LicenciaTest,
	PointDm,
	ExitedVehicle,
	TimerLoginId,
	DesignGarageId,
	CallTime,
	PistaIDp,
	PosIDp,
	// Vender:       0 = playerid      1 = tipo
	PlayerSexo,
	VPhone[3],
	VCoche[2],
	VFactura[2],
	VServicio[2],
	VMulta[2],
	VRepair[2],
	VAceite[2],
	Contrato[2],
	VArma[2],
	VDrogas[3],
	VGanzuas[2],
	VProteger[2],
	CountIntentarVehicle,
	Float:CurrentHealth,
	Float:CurrentArmour,
	LastInterior,
	//Mapeos
	EditingType,//0: Nada | 1: Mapeo
	EditingMapeo,
	EditingObjectID,
	EditingIndex,
	EditingOption,//Index Material Option
	EditingMovement
};
enum FaccionesData
{
	NameFaccion[MAX_FACCION_NAME],
	Lider[MAX_PLAYER_NAME],
	Precio,
	Deposito,
	Paga[MAX_FACCION_RANGOS],
	Extorsion,
	Almacen[MAX_ALMACENES],
	LockA[MAX_ALMACENES],
	Float:AlmacenX[MAX_ALMACENES],
	Float:AlmacenY[MAX_ALMACENES],
	Float:AlmacenZ[MAX_ALMACENES],
	AlmacenWorld[MAX_ALMACENES],
	Float:Spawn_X[2],
	Float:Spawn_Y[2],
	Float:Spawn_Z[2],
	Float:Spawn_ZZ[2],
	Drogas[MAX_ALMACENES],
	Ganzuas[MAX_ALMACENES],
	Bombas[MAX_ALMACENES],
	InteriorSpawn,
	Float:PickupOut_X,
	Float:PickupOut_Y,
	Float:PickupOut_Z,
	Float:PickupOut_ZZ,
	Float:PickupIn_X,
	Float:PickupIn_Y,
	Float:PickupIn_Z,
	Float:PickupIn_ZZ,
	PickupidOutF,
	PickupidInF,
	Text3D:TextLabelOut,
	Text3D:TextLabelIn,
	PrecioFaccion,
	InteriorFaccion,
	Lock,
	World,
	Family,
	Radio
};
enum JailType
{
	Float:PosX_Preso,
	Float:PosY_Preso,
	Float:PosZ_Preso,
	Float:PosZZ_Preso,
	Float:PosX_Liberado,
	Float:PosY_Liberado,
	Float:PosZ_Liberado,
	Float:PosZZ_Liberado,
	Interior_Preso,
	Interior_Liberado,
	WorldLiberado
};
enum PickupsEnum
{
	Tipo,
	Tipoid,
	Tipoidextra
};
/// 				NEWS
new LlaveTipoName[3][10] = {"Faccion","Casa","Local"};
new MapperRangos[2][20] = {"Mapper Ayudante", "Mapper Oficial"};
new MySQL:dataBase;
new ResetGM;
new Bonus;
new PickupIndex[MAX_PICKUPS][PickupsEnum];
new TramSFID;
new TimeTren;
new bool:WeaponEnableDM[47];
//new Text:LockVehicleText[2];
new Text:ModeDMTextDraw[2];
new Text:WideScreen;
new Text:WideScreen2;
new IsDMTeam;
new SkinDM[2];
new InteriorDM[2];
new WorldDM[2];
new ReasonReset[150];
new MAX_ROBOS;
new RobosInfo[MAX_ROBOS_COUNT][RobosInfoEnum];
new Float:PosDM[2][4] = {{-1496.1182,2600.6624,55.6875,358.7807}, {-1496.1182,2600.6624,55.6875,358.7807}};
new TrainGroups[MAX_TRAINS][4];
new Text:ScoreRaceBox;
new Text:ScorePosRace[MAX_COUNT_PISTAS];
new PistasTop[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_TOP][PistasTopEnum];
new Pistas[MAX_COUNT_PISTAS][PistasEnum];
new PistasPosPlayers[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_POS_PLAYERS][PistasPosPlayersEnum];
new PistasCameras[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_CAMERAS][PistasCamerasEnum];
new PistasCarPointsExit[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_POS_PLAYERS][PistasCarPointsExitEnum];
new PistasPos[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_POS][PistasPosEnum];
new AgendaData[MAX_PLAYERS][MAX_PLAYER_CONTACT][Agenda];
new SMS[MAX_PLAYERS][MAX_SMS_COUNT][SMSEnum];
new TaxisTaximetro[MAX_TAXIS_COUNT][TaxisTaximetroEnum];
new JailsType[3][JailType];
new Text:TexdrawsTutorial[20];
new Text:Url_Web;
new Text:Url_WebShadow;
new Text:VelocimetroFijos[9];
new SuperMercadosPickupid[2];
new MAX_TAXIS;
new MAX_OBJECT_FIJOS;
new MAX_PICKUP_INFO;
new MAX_BIZZ;
new MAX_BIZZ_TYPE;
new MAX_HOUSE_TYPE;
new MAX_GARAGE_TYPE;
new MAX_HOUSE;
new MAX_CAJEROS;
new MAX_GARAGES;
new MAX_CAR;
new MAX_TRAIN = -1;
new MAX_CAR_DUENO;
new MAX_CAR_FACCION;
new MAX_CAR_PUBLIC;
new MAX_GASOLINERAS;
new MAX_CAMERAS;
new MAX_GARAGES_EX;
new MAX_TEXT_DRAW;
new MAX_CAMERAS_LOGIN;
new PickupidPoliceFurgo;
new PickupidAmbulance;
new PickupidFurgoCNN;
new PickupExitVagones[3];
new TimerAd;
new TimerDrogas;
new CamerasLogin[10][CamerasLoginEnum];
new WeatherCurrent;
new Banking[MAX_PLAYERS][AccountBankEnum];
new Cheques[MAX_PLAYERS][MAX_COUNT_CHEQUES][ChequesEnum];
new BombasO[MAX_BOMBAS_COUNT][BombasEnum];
new Incendios[MAX_INCENDIOS][IncendiosEnum];
new CallPolice[MAX_CALL_POLICE_COUNT][2][CallPoliceEnum];
new CallPublics[MAX_CALL_POLICE_COUNT][3][CallPublicsEnum];
new CallSAMD[2][MAX_CALL_POLICE_COUNT][CallSAMDEnum];
new VCP[MAX_OBJECTS_VALLAS_CONOS_PINCHOS][VCPEnum];
new FaccionesMercancias[MAX_FACCION_COUNT][FaccionGetMercanciaEnum];
new HouseData[MAX_HOUSE_COUNT][HouseEnums];
new Refrigerador[MAX_HOUSE_COUNT][RefrigeradorEnum];
new Articulos[MAX_ARTICULOS_COUNT][ArticulosEnum];
new HouseFriends[MAX_HOUSE_COUNT][MAX_HOUSE_FRIENDS][HouseFriendsEnum];
new Garages[MAX_HOUSE_COUNT][MAX_GARAGE_FOR_HOUSE][GaragesEnum];
new GaragesEx[MAX_GARAGES_EX_COUNT][GaragesExEnum];
new GaragesDesing[MAX_GARAGES_DESING][GaragesDesingEnum];
new TypeHouse[MAX_HOUSE_TYPE_COUNT][TypeHouseEnums];
new TypeGarage[MAX_GARAGE_TYPE_COUNT][TypeGarageEnums];
new PlayersData[MAX_PLAYERS][DataUsers];
new PlayersDataOnline[MAX_PLAYERS][DataUsersOnline];
new FaccionData[MAX_FACCION_COUNT][FaccionesData];
new FaccionesRangos[MAX_FACCION_COUNT][MAX_FACCION_RANGOS][MAX_FACCION_NAME];
new NegociosData[MAX_BIZZ_COUNT][NegociosEnum];
new RangosSkins[MAX_FACCION_COUNT][MAX_FACCION_RANGOS][MAX_FACCION_SKIN];
new Cajeros[MAX_CAJEROS_COUNT][CajerosEnum];
new PickupInfo[MAX_PICKUP_INFO_COUNT][PickupInfoEnum];
new Jobs[MAX_JOB][JobsEnum];
new JobsData[JobsDataEnum];
new DataCars[MAX_VEHICLE_COUNT][DataCarsEnum];
new CanalOOC;
new CanalDudas = true;
new CallCNN = -1;
new EntrevistaState;
new SKIN_CIVILES[118];
new coches_Todos_Precios			[212];
new coches_Todos_Velocidad			[212];
new coches_Todos_Type               [212];
new coches_Todos_Nombres            [212][MAX_PLAYER_NAME];
new coches_Todos_Maleteros          [MAX_VEHICLE_COUNT][12][2]; // 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS
new	WeaponsFaccion[MAX_FACCION_COUNT][MAX_ALMACENES][10];
new AmmoFaccion[MAX_FACCION_COUNT][MAX_ALMACENES][10];
new Float:FaccionesChaleco[MAX_FACCION_COUNT][MAX_ALMACENES][4];
new NegociosType[MAX_BIZZ_TYPE_COUNT][NegociosTypeEnum];
new ObjetosBolsillosNombres[5][MAX_PLAYER_NAME];
new Menu:TallerPrincipal;
new Text:BarsGas[MAX_GAS_VEHICLE + 1];
new Text:BarsDamage[MAX_DAMAGE_VEHICLE + 1];
new Text:BarsOil[MAX_OIL_VEHICLE + 1];
new Text:VelocimetroNumber1[10];
new Text:VelocimetroNumber2[10];
new Text:VelocimetroNumber3[10];
new Text:TemperaturaTextDraws[42];
//
new Menu:Principal_Sultan;
new Menu:XFlowYAlien_Sultan[2];
new XFlowYAlien_SultanID[2][7];
//
new Menu:Principal_Elegy;
new Menu:XFlowYAlien_Elegy[2];
new XFlowYAlien_ElegyID[2][7];
//
new Menu:Principal_Flash;
new Menu:XFlowYAlien_Flash[2];
new XFlowYAlien_FlashID[2][7];
//
new Menu:Principal_Stratum;
new Menu:XFlowYAlien_Stratum[2];
new XFlowYAlien_StratumID[2][2];
//
new Menu:Principal_Jester;
new Menu:XFlowYAlien_Jester[2];
new XFlowYAlien_JesterID[2][7];
//
new Menu:Principal_Uranus;
new Menu:XFlowYAlien_Uranus[2];
new XFlowYAlien_UranusID[2][7];
//
new Menu:Principal_Savanna;
new Menu:Opciones_Savanna[4];
new Opciones_SavannaID[4][4];
//
new Menu:Principal_Remington;
new Menu:Opciones_Remington[4];
new Opciones_RemingtonID[4][4];
//
new Menu:Principal_Slamvan;
new Menu:Opciones_Slamvan[3];
new Opciones_SlamvanID[3][7];
//
new Menu:Principal_Blade;
new Menu:Opciones_Blade[4];
new Opciones_BladeID[4][4];
//

new ListTRANSFENDEREscape[23] = {419, 409, 402, 422, 438, 445, 458, 466, 467, 474, 475, 477, 478, 479, 480, 500, 506, 507, 526, 533, 545, 575, 600};
new Menu:XFlowYAlien_Escape;
new XFlowYAlien_EscapeID[6];

new ListTRANSFENDERSentinel[16] = {415, 418, 405, 410, 404, 421, 436, 491, 517, 527, 542, 547, 579, 580, 585, 603};
new Menu:XFlowYAlien_Sentinel;
new XFlowYAlien_SentinelID[10];

new ListTRANSFENDER[17] = {587, 401, 589, 420, 426, 489, 492, 496, 505, 516, 518, 529, 540, 546, 549, 550, 551};
new Menu:XFlowYAlien_Euros;
new XFlowYAlien_EurosID[12];
//
new Cameras[MAX_CAMERAS_COUNT][CamerasEnum];
new Menu:CamerasM[2];
new Menu:Nitro;
new Menu:Llantas1;
new Menu:Llantas2;
new Menu:Vinilos;
new NitrosID[3];
new LlantasID1[16];
new LlantasID2[16];
new Menu:CluckinBell;
new CluckinBellPrecios[7];
new Menu:BurgerShot;
new BurgerShotPrecios[8];
new Menu:PizzaStack;
new PizzaStackPrecios[7];
new Menu:JaysDiner;
new JaysDinerPrecios[8];
new Menu:RingDonuts;
new RingDonutsPrecios[8];
new Menu:Menu_Principal_Armas;
new Gasolineras[MAX_GASOLINERAS_COUNT][GasolinerasEnum];
new Menu:Menues_Armas		[9];
new Armas_Clases    		[9][25];
new Armas_Nombre			[9][5][30];
new Armas_Precios			[9][5][6];
new Armas_Precios_Num		[9][5];
new Armas_Municion          [9][5];
new Armas_ID				[9][5];
new M24_7_Precios[11] =
{
	200,//Camara de Fotos
	150,//Patines
	60,//Dados
	300,//Movil
	100,//Agenda
	50,//Flores
    1,//Saldo
	150,//Bolsa
	80,//Condones
	150,//Maleta
	200,//Modelo de Moviles
};
new Menu:SupermercadoArticulos;
new SupermercadoArticulosPrecios[6];
new SlotIDWeapon[47] =
{
	0, // 0 - Unarmed
	0, // 1 - Brass Knuckles
	1, // 2 - Golf Club
	1, // 3 - Nite Stick
	1, // 4 - Knife
	1, // 5 - Baseball Bat
	1, // 6 - Shovel
	1, // 7 - Pool Cue
	1, // 8 - Katana
	1, // 9 - Chainsaw
	10, // 10 - Purple Dildo
	10, // 11 - Small White Vibrator
	10, // 12 - Large White Vibrator
	10, // 13 - Silver Vibrator
	10, // 14 - Flowers
	10, // 15 - Cane
	8, // 16 - Grenade
	8, // 17 - Tear Gas *
	8, // 18 - Molotov Cocktail
	-1, // 19 -
	-1, // 20 -
	-1, // 21 -
	2, // 22 - 9mm
	2, // 23 - Silenced 9mm
	2, // 24 - Desert Eagle
	3, // 25 - Shotgun
	3, // 26 - Sawn-off Shotgun
	3, // 27 - Combat Shotgun
	4, // 28 - Micro SMG
	4, // 29 - MP5
	5, // 30 - AK-47
	5, // 31 - M4
	4, // 32 - Tec9
	6, // 33 - Country Rifle
	6, // 34 - Sniper Rifle
	7, // 35 - Rocket Launcher
	7, // 36 - HS Rocket Launcher **
	7, // 37 - Flamethrower
	7, // 38 - Minigun
	8, // 39 - Satchel Charge ***
	12, // 40 - Detonator
	9, // 41 - Spraycan
	9, // 42 - Fire Extinguisher
	9, // 43 - Camera
	11, // 44 - Nightvision Goggles ****
	11, // 45 - Thermal Goggles ****
	11 // 46 - Parachute
};
new SlotNameWeapon[47][25] =
{
	"Nada", 					// 0 - Unarmed
	"Manopla", 					// 1 - Brass Knuckles
	"Palo de Golf", 			// 2 - Golf Club
	"Bastón policial", 			// 3 - Nite Stick
	"Cuchillo", 				// 4 - Knife
	"Bate", 					// 5 - Baseball Bat
	"Pala", 					// 6 - Shovel
	"Palo de Billar",			// 7 - Pool Cue
	"Sable", 					// 8 - Katana
	"Motosierra", 				// 9 - Chainsaw
	"Consolador Rosado", 		// 10 - Purple Dildo
	"Consolador Pequeño", 		// 11 - Small White Vibrator
	"Consolador Largo", 		// 12 - Large White Vibrator
	"Consolador Plateado", 		// 13 - Silver Vibrator
	"Flores", 					// 14 - Flowers
	"Bastón", 					// 15 - Cane
	"Granadas", 				// 16 - Grenade
	"Granadas de Gas",		 	// 17 - Tear Gas *
	"Cóctel Molotov", 			// 18 - Molotov Cocktail
	-1, // 19 -
	-1, // 20 -
	-1, // 21 -
	"Pistola 9mm", 				// 22 - 9mm
	"Silenciada 9mm", 			// 23 - Silenced 9mm
	"Desert Eagle", 			// 24 - Desert Eagle
	"Escopeta", 				// 25 - Shotgun
	"Recortada", 				// 26 - Sawn-off Shotgun
	"Escopeta de Combate", 		// 27 - Combat Shotgun
	"Micro SMG", 				// 28 - Micro SMG
	"MP5", 						// 29 - MP5
	"AK-47", 					// 30 - AK-47
	"M4", 						// 31 - M4
	"Tec9", 					// 32 - Tec9
	"Rifle Corto Alcance", 		// 33 - Country Rifle
	"Rifle Largo Alcance", 		// 34 - Sniper Rifle
	"Cohete", 					// 35 - Rocket Launcher
	"RPG Cohete", 				// 36 - HS Rocket Launcher **
	"Lanzallamas", 				// 37 - Flamethrower
	"Minigun", 					// 38 - Minigun
	"Explosivos", 				// 39 - Satchel Charge ***
	"Detonador", 				// 40 - Detonator
	"Spray Policial", 			// 41 - Spraycan
	"Extintor de incendios", 	// 42 - Fire Extinguisher
	"Cámara Fotográfica", 		// 43 - Camera
	"Gafas de visión nocturna", // 44 - Nightvision Goggles ****
	"Gafas térmicas", 			// 45 - Thermal Goggles ****
	"Paracaídas" 				// 46 - Parachute
};
new NameConfigutionUser[2][20] =
{
	"{00F50A}Automático",
	"{F5FF00}Manual"
};
new Stations[41][2][60] =
{
    {"Un Player - Radio Oficial{BE00FF}\t\t(Variado)",	""},
    
	{"TruckersFM{BE00FF}\t\t\t\t(Variado)",					"http://live.truckers.fm/"},
	{"TruckersSimFM{BE00FF}\t\t\t(Variado)", 				"http://live.trucksim.fm/"},
	{"DubPlateFM{BE00FF}\t\t\t\t(Dub y Bass)", 				"http://sc2.dubplate.fm/radio/8000/dubandbass/uhifi?hi.mp3"},
	{"DubPlateFM{BE00FF}\t\t\t\t(Urban Boogie)", 			"http://sc2.dubplate.fm/radio/8010/urbanboogie/uhifi?hi.mp3"},
	{"DubPlateFM{BE00FF}\t\t\t\t(5 Pointz)", 				"http://sc2.dubplate.fm/radio/8020/hiphop/uhifi?hi.mp3"},
	{"DubPlateFM{BE00FF}\t\t\t\t(Drum and Bass)", 			"http://sc2.dubplate.fm/radio/8030/dnb/uhifi?hi.mp3"},
	{"SomaFM{BE00FF}\t\t\t(Underground 80s)", 				"http://ice2.somafm.com/u80s-128-mp3"},
	{"SomaFM{BE00FF}\t\t\t\t(Black Rock FM)", 				"http://ice6.somafm.com/brfm-128-mp3"},
	{"Ranchera 106.5FM{BE00FF}\t\t(Ranchera)",				"http://sp4.colombiatelecom.com.co/8024/stream"},
	
	{"El mero mero radio{BE00FF}\t\t\t(Reggaeton)", 		"http://listen.radionomy.com/el-mero-mero-radio"},
	{"Fiesta Mexicana{BE00FF}\t\t\t(Canciones Mexicanas)", 	"http://174.123.136.130:8888/"},
	{"Renovación y Evolución{BE00FF}\t\t(Metal)",		 	"http://65.254.42.234:15060/"},
	{"Rockarolla{BE00FF}\t\t\t\t(Rock)",		 			"http://shout.streamwithq.gr:4042/"},
	{"Z Rock & Pop{BE00FF}\t\t\t(Rock and Pop)",		 	"http://servistream.pe:8116/"},
	{"Hard Base FM{BE00FF}\t\t\t(Hardbase)",		 		"http://listen.hardbase.fm/tunein-dsl-pls"},
	{"Dubstep{BE00FF}\t\t\t\t(Dubstep)",		 			"http://cp.internet-radio.org.uk:15634/"},
	{"Top Hits Music{BE00FF}\t\t\t(Pop)",		 			"http://scfire-mtc-aa01.stream.aol.com:80/stream/1014"},
	{"La Radio Tropical{BE00FF}\t\t\t(Cumbia)",		 		"http://67.205.76.173:8136"},
	{"Max Dance{BE00FF}\t\t\t\t(House Variado)",		 	"http://cp.internet-radio.org.uk:15114/"},
	{"The Hot 100{BE00FF}\t\t\t(Variado)",		 			"http://cp2.internet-radio.org.uk:30115/"},
	{"Big Radio Warm{BE00FF}\t\t\t(Variado)",		 		"http://74.86.211.35/101point6"},
	{"Grunge FM{BE00FF}\t\t\t\t(Grunge)",		 			"http://livestream2.bigrradio.com/grungefm"},
	{"Energy FM{BE00FF}\t\t\t\t(Electrónica)",		 		"http://cp.internet-radio.org.uk:15614/"},
	{"XTraFM{BE00FF}\t\t\t\t(Variado)",		 				"http://stream.xtra.fm:8006/"},
	{"Europa FM Gipuzkoa{BE00FF}\t\t(Rock/Pop)",		 	"http://stream.europafmgipuzkoa.com:80/"},
	{"The Buzz{BE00FF}\t\t\t\t(Alternative & Grunge)",		"http://scfire-mtc-aa03.stream.aol.com:80/stream/1022"},
	{"ChroniX Agression{BE00FF}\t\t\t(Metal)",		 		"http://scfire-mtc-aa05.stream.aol.com:80/stream/1039"},
	{"S K Y FM{BE00FF}\t\t\t\t(Salsa)",		 				"http://205.188.215.231:8010"},
	{"M2 Sunshine{BE00FF}\t\t\t(Reggae & Dance Hall)",		"http://91.121.120.152:8000"},
	{"RaggaKings{BE00FF}\t\t\t(Reggaeton)",		 			"http://205.234.220.66:7970"},
	{"STRM Soundtrack{BE00FF}\t\t\t(Soundtrack)",		 	"http://83.145.128.37:9000"},
	{"Country 101 FM{BE00FF}\t\t\t(Country)",		 		"http://uplink.181.fm:8018/"},
	{"Old School 101 FM{BE00FF}\t\t\t(HipHop /Rnb)",		"http://uplink.181.fm:8068/"},
	{"The Beatles 101 FM{BE00FF}\t\t(Rock)",		 		"http://uplink.181.fm:8062/"},
	{"Real Punk Radio{BE00FF}\t\t\t(Punk)",		 			"http://174.122.26.45:80/"},
	{"Friends or Enemies{BE00FF}\t\t(Punk)",		 		"http://s1.voscast.com:7364/"},
	{"Panda Show{BE00FF}\t\t\t(Humor)",		 				"http://208.85.242.77:80"},
	{"Dnb Real Radio{BE00FF}\t\t\t(Drum and bass)",		 	"http://deppy.dnbradio.com:8016"},
	{"Estudio 92{BE00FF}\t\t\t\t(Variado)",		 			"http://94.23.67.172:9112/"},
	{"Panamericana{BE00FF}\t\t\t(Salsa)",		 			"http://76.10.222.35:8300/"}

//	{"Soundtrack{BE00FF}\t\t\t\t(Soundtrack)",		 	"Soundtrack"},
};
new Meses[12][11] =
{
	{"Enero"},
	{"Febrero"},
	{"Marzo"},
	{"Abril"},
	{"Mayo"},
	{"Junio"},
	{"Julio"},
	{"Agosto"},
	{"Septiembre"},
	{"Octubre"},
	{"Noviembre"},
	{"Diciembre"}
};
new AdminsRangos[9][30] =
{
	{"{23FF00}Moderador (1)"},
	{"{23C100}Moderador (2)"},
	{"{238900}Moderador (3)"},
	{"{FFDD00}Moderador (4)"},
	{"{FF9600}Moderador (5)"},
	{"{0019FF}Moderador Global (6)"},
	{"{FF3C00}Co-Admin (7)"},
	{"{FF1E00}Administrador (8)"},
	{"{000000}Líder"}
};
new AdminsRangosColors[9] =
{
	0x23FF00FF,
	0x23C100FF,
	0x238900FF,
	0xFFDD00FF,
	0xFF9600FF,
	0x0019FFFF,
	0xFF3C00FF,
	0xFF0000FF,
	0x000000FF
};
new DescriptionsPerType[2][14] =
{
	{"Estático"},
	{"Personalizada"}
};
new DescriptionsText[13][11] =
{
	{"Felíz"},
	{"Enojado"},
	{"Triste"},
	{"Aburrido"},
	{"Amargado"},
	{"Molesto"},
	{"Furioso"},
	{"Relajado"},
	{"Nostálgico"},
	{"Serio"},
	{"Deprimido"},
	{"Nervioso"},
	{"Emocionado"}
};
new DescriptionsPerNames[14][15] =
{
	{"Celeste"},
	{"Rojo Oscuro"},
	{"Azul Claro"},
	{"Violeta"},
	{"Marrón"},
	{"Rojo"},
	{"Rojo Claro"},
	{"Azul"},
	{"Amarillo"},
	{"Gris"},
	{"Púrpura"},
	{"Naranja"},
	{"Menta"},
	{"Verde Oscuro"}
};
new ObjectsNames[9][30] =
{
	"Nada",
	"Maletín",
	"Lentes",
	"Peluca",
	"Boina",
	"Gorra",
	"Reloj",
	"Casco",
	"Táser"
};
new ObjectsVisibleOrInvisible[9] =
{
	false,
	true,
	false,
	false,
	false,
	false,
	false,
	false
};
new ObjectPlayersInt[75][3] =
{
	{1210,5, TYPE_MALETIN},  // 00 - Maletín
	{19006,2, TYPE_GAFAS}, // 01 - Nada
	{19007,2, TYPE_GAFAS}, // 02 - Nada
	{19008,2, TYPE_GAFAS}, // 03 - Nada
	{19009,2, TYPE_GAFAS}, // 04 - Nada
	{19010,2, TYPE_GAFAS}, // 05 - Nada
	{19011,2, TYPE_GAFAS}, // 06 - Nada
	{19012,2, TYPE_GAFAS}, // 07 - Nada
	{19013,2, TYPE_GAFAS}, // 08 - Nada
	{19014,2, TYPE_GAFAS}, // 09 - Nada
	{19015,2, TYPE_GAFAS}, // 10 - Nada
	{19016,2, TYPE_GAFAS}, // 11 - Nada
	{19017,2, TYPE_GAFAS}, // 12 - Nada
	{19018,2, TYPE_GAFAS}, // 13 - Nada
	{19019,2, TYPE_GAFAS}, // 14 - Nada
	{19020,2, TYPE_GAFAS}, // 15 - Nada
	{19021,2, TYPE_GAFAS}, // 16 - Nada
	{19022,2, TYPE_GAFAS}, // 17 - Nada
	{19023,2, TYPE_GAFAS}, // 18 - Nada
	{19024,2, TYPE_GAFAS}, // 19 - Nada
	{19025,2, TYPE_GAFAS}, // 20 - Nada
	{19026,2, TYPE_GAFAS}, // 21 - Nada
	{19027,2, TYPE_GAFAS}, // 22 - Nada
	{19028,2, TYPE_GAFAS}, // 23 - Nada
	{19029,2, TYPE_GAFAS}, // 24 - Nada
	{19030,2, TYPE_GAFAS}, // 25 - Nada
	{19031,2, TYPE_GAFAS}, // 26 - Nada
	{19053,5, TYPE_RELOJES}, // 27 - Nada
	{19032,2, TYPE_GAFAS}, // 28 - Nada
	{19033,2, TYPE_GAFAS}, // 29 - Nada
	{19034,2, TYPE_GAFAS}, // 30 - Nada
	{19035,2, TYPE_GAFAS}, // 31 - Nada
	{19138,2, TYPE_GAFAS}, // 32 - Nada
	{19139,2, TYPE_GAFAS}, // 33 - Nada
	{18640,2, TYPE_PELO},  // 34 - Nada
	{18975,2, TYPE_PELO},  // 35 - Nada
	{19077,2, TYPE_PELO},  // 36 - Nada
	{19136,2, TYPE_PELO},  // 37 - Nada
	{19136,2, TYPE_PELO},  // 38 - Nada
	{19274,2, TYPE_PELO},   // 39 - Nada
	{18921,2, TYPE_BOINA},  // 40 - Nada
	{18922,2, TYPE_BOINA},  // 41 - Nada
	{18923,2, TYPE_BOINA},  // 42 - Nada
	{18924,2, TYPE_BOINA},  // 43 - Nada
	{18925,2, TYPE_BOINA},   // 44 - Nada
	{18926,2, TYPE_GORRAS},   // 45 - Nada
	{18927,2, TYPE_GORRAS},   // 46 - Nada
	{18928,2, TYPE_GORRAS},   // 47 - Nada
	{18929,2, TYPE_GORRAS},   // 48 - Nada
	{18930,2, TYPE_GORRAS},   // 49 - Nada
	{18931,2, TYPE_GORRAS},   // 50 - Nada
	{18932,2, TYPE_GORRAS},   // 51 - Nada
	{18933,2, TYPE_GORRAS},   // 52 - Nada
	{18934,2, TYPE_GORRAS},   // 53 - Nada
	{18935,2, TYPE_GORRAS},    // 54 - Nada
	{19039,5, TYPE_RELOJES},   // 55 - Nada
	{19040,5, TYPE_RELOJES},   // 56 - Nada
	{19041,5, TYPE_RELOJES},   // 57 - Nada
	{19042,5, TYPE_RELOJES},   // 58 - Nada
	{19043,5, TYPE_RELOJES},   // 59 - Nada
	{19044,5, TYPE_RELOJES},   // 60 - Nada
	{19045,5, TYPE_RELOJES},   // 61 - Nada
	{19046,5, TYPE_RELOJES},   // 62- Nada
	{19047,5, TYPE_RELOJES},   // 63 - Nada
	{19048,5, TYPE_RELOJES},   // 64 - Nada
	{19049,5, TYPE_RELOJES},   // 65 - Nada
	{19050,5, TYPE_RELOJES},   // 66 - Nada
	{19051,5, TYPE_RELOJES},   // 67 - Nada
	{19052,5, TYPE_RELOJES},   // 68 - Nada
	{18645,2, TYPE_CASCO},    // 69 - Nada
	{18976,2, TYPE_CASCO},    // 70 - Nada
	{18977,2, TYPE_CASCO},    // 71 - Nada
	{18978,2, TYPE_CASCO},    // 72 - Nada
	{18979,2, TYPE_CASCO},     // 73 - Nada
	{18642,6, TYPE_TASER}     // 74 - Nada
};
new Float:ObjectsPlayers[2][9]     =
{
	{0.3,0.05,-0.08,-10.0,-80.0,10.0,1.0,1.0,1.0},		// 00 - Maletín // /update 1210 5 0.3 0.05 -0.08 -10 -80 10 1 1 1
	{0.06, 0.01, 0.08, 180.0, 0.0, 0.0, 1.0,1.0,1.0}	// 01 - Taser  // /update 18642 6 0.06 0.01 0.08 180.0 0.0 0.0
};
new MovilesObjects[11] = {
    330,
	18865,
	18866,
	18867,
	18868,
	18869,
	18870,
	18871,
	18872,
	18873,
	18874
};
new Float:SkinesCascos[300][9] = {
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || MotorcycleHelmet1 - NO
	{ 0.063893, 0.008419, 0.000000, 69.264198, 87.430633, 11.827832, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.010075, 0.000000, 0.000000, 78.229309, 99.866622, 1.330634, 1.000000, 1.099319 }, // SKINID 2 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || MotorcycleHelmet1 - SI
	{0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 7 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 8 || MotorcycleHelmet1 - NO
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 9 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 10 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 11 || MotorcycleHelmet1 - SI
	{ 0.036347, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 12 || MotorcycleHelmet1 - SI
	{ 0.025228, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 13 || MotorcycleHelmet1 - SI
	{ 0.069039, 0.033799, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 14 || MotorcycleHelmet1 - SI
	{ 0.045800, -0.005477, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 15 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 16 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 17 || MotorcycleHelmet1 - SI
	{ 0.043310, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 18 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 19 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 20 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 21 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 22 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.015231, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 23 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 24 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 25 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 26 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 27 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 28 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 29 || MotorcycleHelmet1 - NO
	{ 0.065071, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 30 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 31 || MotorcycleHelmet1 - NO
	{ 0.028938, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 32 || MotorcycleHelmet1 - SI
	{ -0.000755, 0.005750, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 33 || MotorcycleHelmet1 - SI
	{ 0.096637, 0.028542, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 34 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 35 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 36 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 37 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 38 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 39 || MotorcycleHelmet1 - SI
	{ 0.047616, -0.011005, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 40 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 41 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 42 || MotorcycleHelmet1 - NO
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 43 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 44 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 45 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 46 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 47 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 48 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 49 || MotorcycleHelmet1 - SI
	{ 0.071502, -0.010506, 0.000000, 89.715873, 96.486831, 6.367833, 1.220247, 1.000000, 1.000000 }, // SKINID 50 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 51 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 52 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 53 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 54 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 55 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 56 || MotorcycleHelmet1 - SI.
	{ 0.089573, 0.026238, -0.003702, 89.715873, 96.486831, 6.367833, 0.950863, 1.000000, 0.981081 }, // SKINID 57 || MotorcycleHelmet1 - SI
	{ 0.037543, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 0.884217, 1.000000, 0.981081 }, // SKINID 58 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 59 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 60 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.017691, -0.003702, 89.715873, 96.486831, 6.367833, 1.176779, 1.000000, 1.078135 }, // SKINID 61 || MotorcycleHelmet1 - SI.
	{ 0.059154, 0.029714, -0.003702, 89.715873, 96.486831, 6.367833, 0.926730, 1.000000, 1.078135 }, // SKINID 62 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 63 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 64 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 65 || MotorcycleHelmet1 - NO.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 66 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 67 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 68 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 69 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.020542, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 70 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 71 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 72 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 73 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 74 || MotorcycleHelmet1 - NO.
	{ 0.042678, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 75 || MotorcycleHelmet1 - SI.
	{ 0.042678, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 76 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 77 || MotorcycleHelmet1 - NO.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 78 || MotorcycleHelmet1 - SI.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 79 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 80 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 81 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 82 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 83 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 84 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 85 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 86 || MotorcycleHelmet1 - NO.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 87 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 0.966517, 1.000000, 1.059899 }, // SKINID 88 || MotorcycleHelmet1 - SI.
	{ 0.083799, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 89 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 90 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 91 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 92 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 93 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 0.958088, 1.000000, 0.873182 }, // SKINID 94 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.029447, 1.000000, 0.873182 }, // SKINID 95 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.023028, 1.000000, 0.937115 }, // SKINID 96 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.121912, 1.000000, 1.005367 }, // SKINID 97 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.020644, 1.000000, 1.005367 }, // SKINID 98 || MotorcycleHelmet1 - SI.
	{ 0.074331, 0.006538, -0.003702, 89.715873, 96.486831, 6.367833, 1.125367, 1.000000, 1.005367 }, // SKINID 99 || MotorcycleHelmet1 - SI.
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 100 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 101 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.004189, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 102 || MotorcycleHelmet1 - SI
	{ 0.071147, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 103 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 104 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 105 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 106 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 107 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 108 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 109 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 110 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 113 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 111 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 112 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 114 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 115 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 116 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 117 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 118 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 119 || MotorcycleHelmet1 - NO
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 120 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 121 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 122 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 123 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 124 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 125 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 126 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 127 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 128 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 129 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 130 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 131 || MotorcycleHelmet1 - SI
	{ -0.025336, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 132 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 133 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 134 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 135 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 136 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 137 || MotorcycleHelmet1 - NO
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 138 || MotorcycleHelmet1 - SI
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 139 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 140 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 141 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 142 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.006312, 0.003282, 0.917846, 81.798553, 77.744796, 1.442516, 1.000000, 1.000000 }, // SKINID 143 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 144 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 145 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 146 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 147 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 148 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 149 || MotorcycleHelmet1 - NO
	{ 0.058838, -0.001575, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 150 || MotorcycleHelmet1 - SI
	{ 0.058838, 0.014999, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 151 || MotorcycleHelmet1 - SI
	{ 0.028017, -0.002800, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 152 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 153 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 154 || MotorcycleHelmet1 - SI
	{ 0.076935, 0.037744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 155 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 156 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 157 || MotorcycleHelmet1 - SI
	{ 0.0, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 158 || MotorcycleHelmet1 - NO
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 159 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 160 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 161 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 162 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 163 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 164 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 165 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 166 || MotorcycleHelmet1 - SI
	{ 0.0, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 167 || MotorcycleHelmet1 - NO
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 168 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 169 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 170 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 171 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 172 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 173 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 174 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 175 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 176 || MotorcycleHelmet1 - SI
	{ 0.093134, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 177 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 178 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 179 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 180 || MotorcycleHelmet1 - SI
	{ 0.111742, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 181 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 182 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 183 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 184 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 185 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 186 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 187 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 188 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 189 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 190 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.022189, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 191 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 192 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 193 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 194 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 195 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 196 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 197 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 198 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 199 || MotorcycleHelmet1 - SI
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.223210, 1.000000, 1.110052 }, // SKINID 200 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.105433, 1.000000, 1.110052 }, // SKINID 201 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 202 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 203 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 204 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 205 || MotorcycleHelmet1 - NO.
	{ 0.086275, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 206 || MotorcycleHelmet1 - SI.
	{ 0.040006, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 207 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 208 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 209 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 210 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.009842, -0.003702, 89.715873, 96.486831, 6.367833, 1.019046, 1.000000, 1.021481 }, // SKINID 211 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.029749, -0.003702, 89.715873, 96.486831, 6.367833, 0.909220, 1.000000, 1.021481 }, // SKINID 212 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.022352, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 213 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 214 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 215 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 216 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030664, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 217 || MotorcycleHelmet1 - SI.
	{ 0.071801, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 218 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 219 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.023454, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 220 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.008899, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 221 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.004834, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 222 || MotorcycleHelmet1 - SI.
	{ 0.086894, 0.025422, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 223 || MotorcycleHelmet1 - SI.
	{ 0.039299, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 224 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 225 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.005189, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 226 || MotorcycleHelmet1 - SI.
	{ 0.069509, 0.028704, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 227 || MotorcycleHelmet1 - SI.
	{ 0.070585, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.101840, 1.000000, 1.021481 }, // SKINID 228 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 229 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 230 || MotorcycleHelmet1 - SI.
	{ 0.072018, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 231 || MotorcycleHelmet1 - SI.
	{ 0.047198, 0.002333, 0.000000, 84.169067, 66.729423, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 233 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 234 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 235 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 236 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 237 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 238 || MotorcycleHelmet1 - SI.
	{ 0.051785, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 239 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 240 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 241 || MotorcycleHelmet1 - NO.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 242 || MotorcycleHelmet1 - NO.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 243 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.036559, -0.004551, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 244 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016950, 0.010980, 89.715873, 96.486831, 6.367833, 1.263960, 1.000000, 1.021481 }, // SKINID 245 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.045513, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 246 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 247 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 248 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.022424, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 249 || MotorcycleHelmet1 - NO.
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 250 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 251 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 252 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 253 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 254 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 255 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 256 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 257 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 258 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 259 || MotorcycleHelmet1 - SI
	{ 0.086501, 0.030875, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 260 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 261 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 262 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 263 || MotorcycleHelmet1 - SI
	{ 0.0, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 264 || MotorcycleHelmet1 - NO
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 265 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 266 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 267 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 268 || MotorcycleHelmet1 - SI
	{ 0.090989, 0.007476, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 269 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.028286, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 270 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 271 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 272 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 273 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 274 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 275 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 276 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 277 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 278 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 279 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 280 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 281 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 282 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 283 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 284 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 285 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 286 || MotorcycleHelmet1 - SI
	{ 0.0, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 287 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 288 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 289 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 290 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 291 || MotorcycleHelmet1 - SI
	{ 0.033589, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 292 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 293 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 294 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 295 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 296 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 297 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 298 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.035112, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }  // SKINID 299 || MotorcycleHelmet1 - SI
};
new Float:SkinesRelojes[300][9] = {
	{ -0.019999, -0.014000, -0.006000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 0 || WatchType1 -
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || WatchType1 - 
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 2 || WatchType1 - NO
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.299999, 1.100000, 1.100000 }, // SKINID 3 || WatchType1 - NO
	{ 0.009999, 0.002000, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.004999, 0.000000, 90.000000, 180.000000, 1.399999, 1.700000, 1.100000 }, // SKINID 5 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 6 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 7 || WatchType1 - NO
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 8 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 9 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 10 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 0.699999, 0.800000, 0.0 }, // SKINID 12 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || WatchType1 -
	{ -0.009999, -0.009999, 0.009999, 10.000000, 90.000000, 170.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 14 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 15 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 16 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 17 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 18 || WatchType1 -
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 19 || WatchType1 - NO
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 20 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 21 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 0.0 }, // SKINID 22 || WatchType1 - NO
	{ 0.000000, 0.000000, -0.009999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 23 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 24 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 25 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 1.000000 }, // SKINID 26 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 0.0 }, // SKINID 27 || WatchType1 - NO
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 28 || WatchType1 -
	{ 0.009999, 0.000000, -0.008000, 0.000000, 90.000000, 180.000000, 1.399999, 1.399999, 1.000000 }, // SKINID 29 || WatchType1 -
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 30 || WatchType1 -
	{ 0.000000, -0.050000, 0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 31 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 32 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 0.0 }, // SKINID 33 || WatchType1 - NO
	{ 0.000000, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 34 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 0.0 }, // SKINID 39 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 0.899999, 1.049999, 1.000000 }, // SKINID 40 || WatchType1 -
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 1.000000 }, // SKINID 41 || WatchType1 -
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 42 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 0.0 }, // SKINID 43 || WatchType1 - NO
	{ -0.017999, 0.000000, 0.000000, 0.000000, 90.000000, 190.000000, 0.800000, 1.000000, 1.000000 }, // SKINID 44 || WatchType1 -
	{ -0.017999, -0.014999, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 45 || WatchType1 -
	{ -0.004999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 46 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 47 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 48 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 49 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 0.0 }, // SKINID 50 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 51 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 52 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 54 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || WatchType1 -
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 56 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 57 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || WatchType1 -
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.100000, 1.000000 }, // SKINID 59 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 60 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 61 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 62 || WatchType1 - NO
	{ -0.007000, -0.010999, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || WatchType1 -
	{ -0.009999, -0.014999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 65 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 66 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 67 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 0.0 }, // SKINID 68 || WatchType1 - NO
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || WatchType1 -
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 70 || WatchType1 - NO
	{ -0.007000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 71 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 74 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 75 || WatchType1 -
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 76 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 77 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 78 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 79 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 80 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 81 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 82 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 83 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 84 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 85 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 86 || WatchType1 - NO
	{ -0.007000, -0.007000, -0.002000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 87 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 88 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 0.0 }, // SKINID 89 || WatchType1 - NO
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 94 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 95 || WatchType1 -
	{ -0.007000, -0.017999, 0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 96 || WatchType1 -
	{ -0.007000, -0.050000, 0.009999, 180.000000, 270.000000, 0.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 97 || WatchType1 -
	{ -0.019999, -0.008000, -0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.370000, 1.000000 }, // SKINID 98 || WatchType1 -
	{ -0.019999, -0.008000, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 99 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 100 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 101 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 102 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 103 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 104 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 105 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 106 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 107 || WatchType1 -
	{ -0.009999, 0.000000, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 108 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 109 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 110 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 111 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 112 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 113 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 114 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 115 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 116 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 117 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 118 || WatchType1 - NO
	{ -0.009999, -0.014999, 0.004999, 0.000000, 90.000000, 180.000000, 1.149999, 1.149999, 1.100000 }, // SKINID 119 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 120 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 121 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 122 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 123 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 124 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 0.0 }, // SKINID 125 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 126 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 127 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 128 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 129 || WatchType1 - NO
	{ -0.019999, -0.029999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 130 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || WatchType1 -
	{ 0.000000, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 133 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 135 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 136 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 137 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 138 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 139 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 140 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 141 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 142 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 143 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 144 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 146 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 147 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 148 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.399999, 1.100000 }, // SKINID 149 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 150 || WatchType1 - NO
	{ 0.000000, -0.025000, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 151 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 153 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 154 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 155 || WatchType1 -
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 156 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 157 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 158 || WatchType1 - NO
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 159 || WatchType1 -
	{ -0.009999, -0.009998, 0.014999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 160 || WatchType1 -
	{ -0.009999, -0.009998, -0.009999, 90.000000, 90.000000, 90.000000, 1.500000, 1.299999, 1.000000 }, // SKINID 161 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 162 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 163 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 164 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 165 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 166 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 167 || WatchType1 - NO
	{ -0.039999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 168 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 169 || WatchType1 -
	{ -0.019999, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 170 || WatchType1 -
	{ 0.000000, -0.003000, 0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 171 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 173 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 174 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 175 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 176 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 177 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 179 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 180 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 181 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 182 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 183 || WatchType1 - NO
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 184 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 185 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 186 || WatchType1 - NO
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 187 || WatchType1 - NO
	{ 0.000000, -0.001500, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 188 || WatchType1 -
	{ 0.000000, -0.001500, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 189 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 190 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 191 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 192 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 193 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 194 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 195 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 196 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 197 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 198 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 199 || WatchType1 -
	{ 0.019999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 200 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 1.000000 }, // SKINID 202 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 203 || WatchType1 - NO
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 204 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 205 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 206 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 207 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 0.0 }, // SKINID 208 || WatchType1 - NO
	{ -0.009999, -0.008999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 214 || WatchType1 -
	{ -0.009999, -0.008999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 215 || WatchType1 -
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 216 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 217 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 218 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 219 || WatchType1 - NO
	{ 0.001000, -0.004999, 0.002000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 220 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 221 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 222 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 223 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 224 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 225 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 226 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 227 || WatchType1 - NO
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 228 || WatchType1 - NO
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 229 || WatchType1 -
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 230 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 231 || WatchType1 -
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 232 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 233 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 234 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 235 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 236 || WatchType1 -
	{ 0.000000, -0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 238 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 239 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 240 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 241 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 242 || WatchType1 -
	{ 0.000000, -0.012000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.350000, 1.000000 }, // SKINID 243 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 244 || WatchType1 -
	{ 0.000000, -0.019999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.450000, 1.000000 }, // SKINID 245 || WatchType1 -
	{ 0.000000, -0.014999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 246 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 247 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 248 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 249 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 250 || WatchType1 -
	{ 0.000000, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 252 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 0.0 }, // SKINID 253 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.350000, 1.600000, 1.000000 }, // SKINID 254 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 255 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 256 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 257 || WatchType1 - 
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 258 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 259 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 260 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 261 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 262 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.002499, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 263 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.500000, 1.500000, 1.000000 }, // SKINID 264 || WatchType1 -
	{ 0.000000, 0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 265 || WatchType1 -
	{ 0.000000, -0.008999, 0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 266 || WatchType1 -
	{ 0.000000, -0.003000, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 267 || WatchType1 -
	{ -0.029999, -0.003000, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 268 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 269 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 1.000000 }, // SKINID 270 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 271 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 272 || WatchType1 - NO
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.200000, 1.100000 }, // SKINID 273 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 274 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 275 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 276 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 277 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 278 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 279 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 280 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 281 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 282 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 283 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 284 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 285 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 286 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 287 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 288 || WatchType1 -
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 289 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 290 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 291 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 292 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 293 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 294 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 295 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 296 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 297 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 } // SKINID 299 || WatchType1 - NO
};
new Float:SkinesGorras[300][9] = {
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Hat1 - NO
	{ 0.147006, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Hat1 - SI
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Hat1 - NO
	{ 0.150000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.100000, 1.100000 }, // SKINID 3 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 5 || Hat1 - NO
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Hat1 - NO
	{ 0.157924, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Hat1 - SI
	{ 0.0, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Hat1 - NO
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Hat1 - SI
	{ 0.0, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Hat1 - NO
	{ 0.157687, 0.007467, -0.001244, 0.000000, 0.000000, 0.000000, 1.116931, 1.000000, 1.096179 }, // SKINID 14 || Hat1 - SI
	{ 0.117256, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Hat1 - SI
	{ 0.0, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Hat1 - NO
	{ 0.141728, 0.004894, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Hat1 - SI
	{ 0.109599, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Hat1 - SI
	{ 0.0, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Hat1 - NO
	{ 0.161143, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Hat1 - SI
	{ 0.145060, 0.010652, -0.005882, 0.000000, 0.000000, 0.000000, 1.067082, 1.000000, 1.057644 }, // SKINID 21 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Hat1 - NO
	{ 0.125074, 0.010768, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.059803 }, // SKINID 25 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 26 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 27 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 28 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 29 || Hat1 - NO
	{ 0.155565, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 30 || Hat1 - SI
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 31 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 32 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 33 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 34 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || Hat1 - NO
	{ 0.117316, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 39 || Hat1 - SI
	{ 0.140639, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 40 || Hat1 - SI
	{ 0.0, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 41 || Hat1 - NO
	{ 0.119999, -0.009999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.049999, 1.100000 }, // SKINID 42 || Hat1 - NO
	{ 0.079176, 0.007249, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 43 || Hat1 - SI
	{ 0.108785, 0.028155, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.929156 }, // SKINID 44 || Hat1 - SI
	{ 0.098622, 0.004937, -0.011623, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Hat1 - SI
	{ 0.167671, -0.013713, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 48 || Hat1 - SI
	{ 0.138361, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Hat1 - SI
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Hat1 - NO
	{ 0.126658, 0.032032, 0.000709, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.100494 }, // SKINID 54 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 55 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 56 || Hat1 - SI
	{ 0.180383, -0.003232, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.036939 }, // SKINID 57 || Hat1 - SI
	{ 0.125167, -0.003232, -0.004390, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.930845 }, // SKINID 58 || Hat1 - SI
	{ 0.173983, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Hat1 - SI
	{ 0.150744, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Hat1 - SI
	{ 0.0, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Hat1 - NO
	{ 0.141376, 0.002625, -0.000497, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Hat1 - SI
	{ 0.153904, -0.003380, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Hat1 - SI
	{ 0.129322, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Hat1 - SI
	{ 0.0, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Hat1 - NO
	{ 0.129322, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Hat1 - SI
	{ 0.0, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Hat1 - NO
	{ 0.130530, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Hat1 - SI
	{ 0.148960, -0.012263, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Hat1 - SI
	{ 0.148960, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Hat1 - SI
	{ 0.0, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Hat1 - NO
	{ 0.130530, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Hat1 - SI
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Hat1 - NO
	{ 0.153769, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Hat1 - SI
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Hat1 - NO
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Hat1 - SI
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Hat1 - SI
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Hat1 - NO
	{ 0.109999, -0.019999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Hat1 - NO
	{ 0.158553, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Hat1 - SI
	{ 0.0, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Hat1 - NO
	{ 0.138744, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Hat1 - SI
	{ 0.0, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Hat1 - NO
	{ 0.117933, -0.031610, -0.002152, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Hat1 - SI
	{ 0.133088, -0.005893, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Hat1 - SI
	{ 0.121521, -0.029133, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Hat1 - SI
	{ 0.147238, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Hat1 - SI
	{ 0.0, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Hat1 - NO
	{ 0.168932, -0.050146, -0.004789, 0.000000, 0.000000, 331.010528, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Hat1 - SI
	{ 0.145517, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 101 || Hat1 - SI.
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 102 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 103 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 104 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 105 || Hat1 - NO
	{ 0.152731, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 106 || Hat1 - SI.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 107 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 108 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 109 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 110 || Hat1 - NO.
	{ 0.129386, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 111 || Hat1 - SI.
	{ 0.0, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 112 || Hat1 - NO.
	{ 0.161488, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 113 || Hat1 - SI.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 114 || Hat1 - NO.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 115 || Hat1 - NO
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 116 || Hat1 - NO
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 117 || Hat1 - SI.
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 118 || Hat1 - SI.
	{ 0.129999, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 119 || Hat1 - SI.
	{ 0.146318, -0.025716, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036702 }, // SKINID 120 || Hat1 - SI.
	{ 0.139072, -0.015518, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 121 || Hat1 - SI
	{ 0.127783, -0.009892, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 122 || Hat1 - SI.
	{ 0.157737, -0.028794, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.151306 }, // SKINID 123 || Hat1 - SI.
	{ 0.157737, -0.017608, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036304 }, // SKINID 124 || Hat1 - SI.
	{ 0.131404, -0.002766, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 0.941077 }, // SKINID 125 || Hat1 - SI.
	{ 0.144064, -0.039942, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.010850 }, // SKINID 126 || Hat1 - SI.
	{ 0.139717, -0.024194, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.074444 }, // SKINID 127 || Hat1 - SI.
	{ 0.147450, -0.033581, -0.007789, 0.000000, 0.000000, 326.999328, 0.937113, 1.000000, 1.132529 }, // SKINID 128 || Hat1 - SI.
	{ 0.088559, 0.001517, -0.007789, 0.000000, 0.000000, 326.999328, 1.338058, 1.000000, 0.888771 }, // SKINID 129 || Hat1 - SI.
	{ 0.058958, -0.002415, -0.010912, 0.000000, 0.000000, 326.999328, 0.988968, 1.000000, 1.128769 }, // SKINID 130 || Hat1 - SI.
	{ 0.123863, -0.002415, -0.010912, 0.000000, 0.000000, 350.770904, 0.988968, 1.000000, 1.073865 }, // SKINID 131 || Hat1 - SI.
	{ 0.056407, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 132 || Hat1 - SI.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 133 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 134 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 135 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 136 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 137 || Hat1 - NO.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 138 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 139 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 140 || Hat1 - SI.
	{ 0.137335, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 141 || Hat1 - SI.
	{ 0.137335, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 142 || Hat1 - SI.
	{ 0.0, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 143 || Hat1 - NO.
	{ 0.193302, -0.027388, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.279586 }, // SKINID 144 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 145 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 146 || Hat1 - SI.
	{ 0.130529, -0.019639, -0.001685, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 147 || Hat1 - SI.
	{ 0.143284, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 148 || Hat1 - SI.
	{ 0.0, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 149 || Hat1 - NO:
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 150 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 151 || Hat1 - NO
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 152 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 153 || Hat1 - NO
	{ 0.120277, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 154 || Hat1 - SI
	{ 0.0, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 155 || Hat1 - NO
	{ 0.166981, -0.054828, -0.002724, 0.000000, 0.000000, 338.964263, 1.143386, 1.000000, 1.244510 }, // SKINID 156 || Hat1 - SI
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Hat1 - NO
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Hat1 - NO
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Hat1 - NO
	{ 0.141787, -0.010452, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Hat1 - SI
	{ 0.120976, 0.001487, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Hat1 - SI
	{ 0.120976, 0.001487, -0.012019, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 165 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 166 || Hat1 - SI
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 167 || Hat1 - NO
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 168 || Hat1 - NO
	{ 0.138399, -0.023877, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 169 || Hat1 - SI
	{ 0.138676, -0.000109, -0.007213, 0.000000, 0.000000, 352.167907, 1.000000, 1.000000, 1.037200 }, // SKINID 170 || Hat1 - SI
	{ 0.164229, -0.012904, 0.000000, 0.000000, 0.000000, 351.712768, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Hat1 - SI
	{ 0.139651, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 172 || Hat1 - SI
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 173 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 174 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 175 || Hat1 - NO
	{ 0.139651, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 176 || Hat1 - SI
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 177 || Hat1 - NO
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 178 || Hat1 - NO
	{ 0.135375, -0.027852, -0.006265, 0.000000, 0.000000, 336.751373, 1.000000, 1.000000, 1.146476 }, // SKINID 179 || Hat1 - SI
	{ 0.164620, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 180 || Hat1 - SI
	{ 0.0, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 181 || Hat1 - NO
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 356.219146, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Hat1 - SI
	{ 0.131250, -0.027798, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Hat1 - SI
	{ 0.131250, -0.013544, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Hat1 - SI
	{ 0.178727, -0.021390, -0.004000, 2.357612, 0.000000, 356.365539, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.147821 }, // SKINID 191 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 192 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 193 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 194 || Hat1 - SI
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 195 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 196 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 197 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 198 || Hat1 - NO
	{ 0.130440, -0.004786, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 199 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 200 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 201 || Hat1 - NO
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 202 || Hat1 - NO
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 203 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 204 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 205 || Hat1 - NO
	{ 0.146635, 0.005633, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 206 || Hat1 - SI
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 207 || Hat1 - SI
	{ 0.125000, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Hat1 - NO
	{ 0.0, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 209 || Hat1 - NO
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 210 || Hat1 - SI
	{ 0.147418, -0.025857, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 211 || Hat1 - SI
	{ 0.0, 0.010434, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 212 || Hat1 - NO
	{ 0.146859, -0.020953, -0.004423, 2.357612, 0.000000, 337.401458, 1.000000, 1.000000, 0.937262 }, // SKINID 213 || Hat1 - SI
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Hat1 - SI
	{ 0.0, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Hat1 - NO
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Hat1 - SI
	{ 0.142205, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Hat1 - SI
	{ 0.0, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Hat1 - NO
	{ 0.142205, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Hat1 - SI
	{ 0.0, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Hat1 - NO
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Hat1 - SI
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Hat1 - SI
	{ 0.190951, -0.007435, 0.000000, 0.000000, 0.000000, 352.024505, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Hat1 - SI
	{ 0.142912, -0.033056, 0.000000, 0.000000, 0.000000, 347.592559, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Hat1 - SI
	{ 0.147534, -0.003579, -0.010556, 0.000000, 0.000000, 341.749206, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Hat1 - SI
	{ 0.163885, -0.027008, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Hat1 - SI
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Hat1 - SI
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Hat1 - NO
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Hat1 - NO
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Hat1 - SI
	{ 0.146466, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Hat1 - SI
	{ 0.120998, -0.027749, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Hat1 - SI
	{ 0.081188, -0.025296, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Hat1 - SI
	{ 0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Hat1 - NO
	{0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 248 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 249 || Hat1 - NO
	{ 0.143284, -0.006071, -0.011766, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.019091 }, // SKINID 250 || Hat1 - SI.
	{ 0.129524, -0.022446, -0.010617, 0.000000, 0.000000, 336.387725, 0.969615, 1.000000, 1.063670 }, // SKINID 251 || Hat1 - SI.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Hat1 - NO.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 254 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 255 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 256 || Hat1 - NO.
	{ 0.139914, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.984799 }, // SKINID 257 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 258 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 259 || Hat1 - SI.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 260 || Hat1 - NO.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 261 || Hat1 - NO.
	{ 0.108261, 0.001541, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.998337 }, // SKINID 262 || Hat1 - SI.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 263 || Hat1 - SI.
	{ 0.0, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 264 || Hat1 - NO.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.987667 }, // SKINID 265 || Hat1 - SI.
	{ 0.134032, -0.014307, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 266 || Hat1 - SI.
	{ 0.131089, -0.031620, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 267 || Hat1 - SI.
	{ 0.131089, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 268 || Hat1 - SI.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 269 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 270 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 271 || Hat1 - NO.
	{ 0.148665, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.108956 }, // SKINID 272 || Hat1 - SI.
	{ 0.125000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Hat1 - NO.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.919670 }, // SKINID 274 || Hat1 - SI.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 275 || Hat1 - SI.
	{ 0.132041, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 276 || Hat1 - SI.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 277 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 278 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 279 || Hat1 - NO.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 280 || Hat1 - SI.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 281 || Hat1 - SI.
	{ 0.133876, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 282 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 283 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 284 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 285 || Hat1 - NO.
	{ 0.129142, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 286 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 287 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 288 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 289 || Hat1 - NO.
	{ 0.122872, -0.007010, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.099102 }, // SKINID 290 || Hat1 - SI.
	{ 0.164891, -0.023199, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.062029 }, // SKINID 291 || Hat1 - SI.
	{ 0.111781, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 292 || Hat1 - SI.
	{ 0.0, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 293 || Hat1 - No.
	{ 0.180277, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.018012 }, // SKINID 294 || Hat1 - SI.
	{ 0.140434, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.071541 }, // SKINID 295 || Hat1 - SI.
	{ 0.152344, -0.055147, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 296 || Hat1 - SI.
	{ 0.152344, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 297 || Hat1 - SI.
	{ 0.136437, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 298 || Hat1 - SI.
	{ 0.153677, -0.028657, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }  // SKINID 299 || Hat1 - SI.
};
new Float:SkinesBoina[300][9] = {
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Beret1 - || BARET ||
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Beret1 - || BARET ||
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 14 || Beret1 -
	{ 0.149783, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Beret1 -
	{ 0.0, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Beret1 - NOOOOOOOOO
	{ 0.156457, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Beret1 -
	{ 0.118533, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Beret1 - NOOOOOOOOO
	{ 0.183444, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Beret1 -
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 21 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Beret1 - NOOOOOOOOO
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 25 || Beret1
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 26 || Beret1
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 27 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 28 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 29 || Beret1 - NOOOOOOOOO
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 30 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 31 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 32 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 33 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 34 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 35 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 36 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 37 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 38 || Beret1 - NOOOOOOOOO
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 39 || Beret1 -
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 40 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 41 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 42 || Beret1 - NOOOOOOOOO
	{ 0.104019, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 43 || Beret1 -
	{ 0.128697, 0.022019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 44 || Beret1 -
	{ 0.128697, -0.008573, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Beret1 -
	{ 0.164191, 0.018399, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Beret1 -
	{ 0.164305, 0.020698, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Beret1 -
	{ 0.175181, -0.010091, 0.000000, 0.000000, 0.000000, 0.000000, 1.104145, 1.000000, 1.121630 }, // SKINID 48 || Beret1 -
	{ 0.146655, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Beret1 - NOOOOOOOOO
	{ 0.146655, 0.027900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 54 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 56 || Beret1 -
	{ 0.171912, 0.008824, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 57 || Beret1 -
	{ 0.151101, -0.008750, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Beret1 -
	{ 0.0, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Beret1 - NOOOOOOOOO
	{ 0.151390, 0.028324, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Beret1 -
	{ 0.170077, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Beret1 -
	{ 0.140552, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Beret1 - NOOOOOOOOO
	{ 0.140552, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Beret1 -
	{ 0.0, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Beret1 - NOOOOOOOOO
	{ 0.151242, 0.019900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Beret1 -
	{ 0.159290, -0.005815, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Beret1 -
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Beret1 - NOOOOOOOOO
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Beret1 - NOOOOOOOOO
	{ 0.159290, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Beret1 -
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Beret1 - NOOOOOOOOO
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Beret1 -
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Beret1 -
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Beret1 - NOOOOOOOOO
	{ 0.160671, -0.019439, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Beret1 -
	{ 0.181481, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Beret1 -
	{ 0.164224, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Beret1 -
	{ 0.177388, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Beret1 -
	{ 0.0, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Beret1 - NOOOOOOOOO
	{ 0.173578, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Beret1 -
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 101 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 102 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 103 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 104 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 105 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 106 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 107 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 108 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 109 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 110 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 111 || Beret1 -
	{ 0.135964, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 112 || Beret1 -
	{ 0.176390, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 113 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 114 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 115 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 116 || Beret1 - NOOOOOOOOO
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 117 || Beret1 -
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 118 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 119 || Beret1 - NOOOOOOOOO
	{ 0.160884, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 120 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 121 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 122 || Beret1 - NOOOOOOOOO
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 123 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 124 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 125 || Beret1 -
	{ 0.168759, -0.009978, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 126 || Beret1 -
	{ 0.168759, 0.001810, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 127 || Beret1 -
	{ 0.168759, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 128 || Beret1 -
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 129 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 130 || Beret1 - NOOOOOOOOO
	{ 0.146233, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || Beret1 -
	{ 0.062156, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || Beret1 -
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 133 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 135 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 136 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 137 || Beret1 - NOOOOOOOOO
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 138 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 139 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 140 || Beret1 -
	{ 0.169024, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 141 || Beret1 -
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 142 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 143 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 144 || Beret1 - NOOOOOOOOO
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || Beret1 -
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 146 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 147 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 148 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 149 || Beret1 - NOOOOOOOOO
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 150 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 151 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 153 || Beret1 - NOOOOOOOOO
	{ 0.119687, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 154 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 155 || Beret1 - NOOOOOOOOO
	{ 0.180860, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 156 || Beret1 -
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Beret1 - NOOOOOOOOO
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Beret1 - NOOOOOOOOO
	{ 0.163098, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 165 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 166 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 167 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 168 || Beret1 - NOOOOOOOOO
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 169 || Beret1 -
	{ 0.156033, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 170 || Beret1 -
	{ 0.178052, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 173 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 174 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 175 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 176 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 177 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 179 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 180 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 181 || Beret1 - NOOOOOOOOO
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Beret1 -
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Beret1 -
	{ 0.150111, 0.011443, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 191 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 192 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 193 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 194 || Beret1 -
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 195 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 196 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 197 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 198 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 199 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 200 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 202 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 203 || Beret1 -
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 204 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 205 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 206 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 207 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || Beret1 - NOOOOOOOOO
	{ 0.138910, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || Beret1 -
	{ 0.163572, 0.004481, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Beret1 -
	{ 0.159425, 0.018406, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Beret1 -
	{ 0.175773, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Beret1 -
	{ 0.157342, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Beret1 - NOOOOOOOOO
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Beret1 -
	{ 0.102910, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Beret1 -
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Beret1 - NOOOOOOOOO
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Beret1 -
	{ 0.171015, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Beret1 -
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 248 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 249 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 250 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 254 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 255 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 256 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 257 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 258 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 259 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 260 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 261 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 262 || Beret1 -
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 263 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 264 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 265 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 266 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 267 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 268 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 269 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 270 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 271 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 272 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 274 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 275 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 276 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 277 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 278 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 279 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 280 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 281 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 282 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 283 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 284 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 285 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 286 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 287 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 288 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 289 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 290 || Beret1 -
	{ 0.170883, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 291 || Beret1 -
	{ 0.133509, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 292 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 293 || Beret1 - NOOOOOOOOO
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 294 || Beret1 -
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 295 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 296 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 297 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || Beret1 -
	{ 0.155528, 0.024484, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 } // SKINID 299 || Beret1 -
};
new Float:SkinesGlasesPos[300][7] = {
	{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.000000}, // - 0
	{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 1
	{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 2
	{0.099500, 0.047703, 0.000558, 280.687683, 90.938697, 169.126358, 1.000000}, // - 3
	{0.126660, 0.017465, -0.004450, 281.516479, 103.193008, 168.312896, 1.167009}, // - 4
	{0.109650, 0.017465, -0.004712, 281.516479, 106.686439, 168.312896, 1.167009}, // - 5
	{0.101269, 0.028933, 0.000001, 281.516479, 91.839576, 168.312896, 1.000000}, // - 6
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968, 1.000000}, // - 7
	{0.087873, 0.038192, -0.003603, 281.516479, 91.839576, 168.312896, 1.020467}, // - 8
	{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968, 1.000000},  // - 9
	{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968, 1.000000}, // - 10
	{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 11
	{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 12
	{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 13
	{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 14
	{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968, 1.000000}, // - 15
	{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968, 1.000000},  // - 16
	{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968, 1.000000}, // - 17
	{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968, 1.000000}, // - 18
	{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968, 1.000000}, // - 19
	{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968, 1.000000}, // - 20
	{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 21
	{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 22
	{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968, 1.000000}, // - 23
	{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968, 1.000000}, // - 24
	{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968, 1.000000}, // - 25
	{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968, 1.000000}, // - 26
	{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968, 1.000000}, // - 27
	{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968, 1.000000}, // - 28
	{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968, 1.000000},  // - 29
	{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968, 1.000000}, // - 30
	{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968, 1.000000}, // - 31
	{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968, 1.000000},// - 32
	{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968, 1.000000}, // - 33
	{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968, 1.000000}, // - 34
	{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 35
	{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 36
	{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 37
	{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 38
	{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 39
	{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 40
	{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968, 1.000000}, // - 41
	{0.087873, 0.037386, -0.003603, 281.516479, 91.839576, 168.312896, 1.093392}, // - 42
	{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968, 1.000000}, // - 43
	{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968, 1.000000}, // - 44
	{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 45
	{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 46
	{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968, 1.000000}, // - 47
	{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968, 1.000000}, // - 48
	{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968, 1.000000}, // - 49
	{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 50
	{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 51
	{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 52
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 53
	{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 54
	{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 55
	{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968, 1.000000}, // - 56
	{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968, 1.000000}, // - 57
	{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968, 1.000000}, // - 58
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 59
	{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968, 1.000000}, // - 60
	{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000, 1.000000}, // - 61
	{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000, 1.000000},  // - 62
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 63
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 64
	{0.087873, 0.032505, -0.003603, 281.516479, 91.839576, 168.312896, 0.965358}, // - 65
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 66
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 67
	{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000, 1.000000}, // - 68
	{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000, 1.000000}, // - 69
	{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000, 1.000000},  // - 70
	{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 71
	{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 72
	{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 73
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 74
	{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 75
	{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 76
	{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 77
	{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 78
	{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 79
	{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000, 1.000000}, // - 80
	{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000, 1.000000}, // - 81
	{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 82
	{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 83
	{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 84
	{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 85
	{0.025608, -0.003408, 281.516479, 106.686721, 167.551193, 0.965358}, // - 86
	{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000, 1.000000}, // - 87
	{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 88
	{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 89
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 90
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 91
	{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 92
	{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 93
	{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 94
	{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 95
	{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 96
	{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 97
	{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 98
	{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 99
	{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000, 1.000000}, // - 100
	{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000, 1.000000}, // - 101
	{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 102
	{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 103
	{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 104
	{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 105
	{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 106
	{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000, 1.000000}, // - 107
	{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000, 1.000000},  // - 108
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 109
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 110
	{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 111
	{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 112
	{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000, 1.000000}, // - 113
	{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 114
	{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 115
	{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 116
	{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000, 1.000000}, // - 117
	{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000, 1.000000}, // - 118
	{0.093011, 0.037032, -0.001987, 281.516479, 94.968688, 167.551193, 1.051324}, // - 119
	{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000, 1.000000}, // - 120
	{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000, 1.000000}, // - 121
	{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000, 1.000000}, // - 122
	{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000, 1.000000}, // - 123
	{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000, 1.000000},  // - 124
	{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 125
	{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 126
	{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 127
	{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 128
	{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000, 1.000000},  // - 129
	{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000, 1.000000},  // - 130
	{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000, 1.000000}, // - 131
	{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000, 1.000000}, // - 132
	{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000, 1.000000}, // - 133
	{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000, 1.000000}, // - 134
	{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000, 1.000000}, // - 135
	{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 136
	{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 137
	{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000, 1.000000}, // - 138
	{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000, 1.000000}, // - 139
	{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000, 1.000000}, // - 140
	{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000, 1.000000}, // - 141
	{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000, 1.000000}, // - 142
	{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000, 1.000000}, // - 143
	{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000, 1.000000}, // - 144
	{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000, 1.000000},  // - 145
	{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000, 1.000000}, // - 146
	{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000, 1.000000},  // - 147
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 148
	{0.099901, 0.011976, 0.001273, 281.516479, 97.607620, 167.551193, 1.190787}, // - 149
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 150
	{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000, 1.000000}, // - 151
	{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000, 1.000000}, // - 152
	{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000, 1.000000},  // - 153
	{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000, 1.000000}, // - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 155
	{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000, 1.000000}, // - 156
	{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000, 1.000000}, // - 157
	{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000, 1.000000}, // - 158
	{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000, 1.000000}, // - 159
	{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000, 1.000000}, // - 160
	{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000, 1.000000},  // - 161
	{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000, 1.000000}, // - 162
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 163
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 164
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 165
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 166
	{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000, 1.000000},  // - 167
	{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 168
	{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 169
	{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000, 1.000000}, // - 170
	{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000, 1.000000}, // - 171
	{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000, 1.000000}, // - 172
	{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 173
	{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 174
	{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 175
	{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000, 1.000000}, // - 176
	{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000, 1.000000}, // - 177
	{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000, 1.000000}, // - 178
	{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 179
	{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 180
	{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000, 1.000000}, // - 181
	{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000, 1.000000}, // - 182
	{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000, 1.000000}, // - 183
	{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000, 1.000000}, // - 184
	{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000, 1.000000}, // - 185
	{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000, 1.000000}, // - 186
	{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000, 1.000000},  // - 187
	{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000, 1.000000},  // - 188
	{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 189
	{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 190
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 191
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 192
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 193
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 194
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 195
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 196
	{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 197
	{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 198
	{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 199
	{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 200
	{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 201
	{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000, 1.000000}, // - 202
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 203
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 204
	{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000, 1.000000}, // - 205
	{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000, 1.000000}, // - 206
	{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000, 1.000000}, // - 207
	{0.088610, 0.043561, 0.001273, 281.516479, 89.674781, 167.551193, 1.000000}, // - 208
	{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000, 1.000000}, // - 209
	{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000, 1.000000}, // - 210
	{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000, 1.000000}, // - 211
	{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000, 1.000000},  // - 212
	{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 213
	{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 214
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 215
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 216
	{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 217
	{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000, 1.000000}, // - 218
	{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000, 1.000000}, // - 219
	{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000, 1.000000}, // - 220
	{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000, 1.000000},  // - 221
	{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000, 1.000000}, // - 222
	{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000, 1.000000}, // - 223
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 224
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 225
	{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 226
	{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000, 1.000000}, // - 227
	{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000, 1.000000}, // - 228
	{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 229
	{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 230
	{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 231
	{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 232
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 233
	{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 234
	{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 235
	{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000, 1.000000}, // - 236
	{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000, 1.000000}, // - 237
	{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000, 1.000000}, // - 238
	{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000, 1.000000},  // - 239
	{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 240
	{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 241
	{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 242
	{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 243
	{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000, 1.000000}, // - 244
	{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000, 1.000000},  // - 245
	{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000, 1.000000}, // - 246
	{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000, 1.000000},  // - 247
	{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000, 1.000000}, // - 248
	{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000, 1.000000},  // - 249
	{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000, 1.000000}, // - 250
	{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000, 1.000000}, // - 251
	{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 252
	{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 253
	{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 254
	{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000, 1.000000},  // - 255
	{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 256
	{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 257
	{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 258
	{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 259
	{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000, 1.000000}, // - 260
	{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000, 1.000000}, // - 261
	{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 262
	{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 263
	{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 264
	{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 265
	{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000, 1.000000}, // - 266
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 267
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 268
	{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 269
	{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000, 1.000000},  // - 270
	{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 271
	{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 272
	{0.080779, 0.028227, -0.001415, 281.516479, 91.776855, 167.551193, 1.061396}, // - 273
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 274
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 275
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 276
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 277
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 278
	{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 279
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 280
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 281
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 282
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 283
	{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000, 1.000000},  // - 284
	{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000, 1.000000},  // - 285
	{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000, 1.000000}, // - 286
	{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000, 1.000000},  // - 287
	{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000, 1.000000}, // - 288
	{0.081684, 0.015000, 0.001780, 281.516479, 108.106758, 169.790878, 1.042815}, // - 289
	{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000, 1.000000}, // - 290
	{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000, 1.000000}, // - 291
	{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000, 1.000000}, // - 292
	{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000, 1.000000}, // - 293
	{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000, 1.000000},  // - 294
	{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000, 1.000000}, // - 295
	{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000, 1.000000}, // - 296
	{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000, 1.000000},  // - 297
	{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000, 1.000000}, // - 298
	{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000, 1.000000}  // - 299
};
new Float:SkinesHairPos[300][9] = {
	{0.108588, -0.004280, 0.000000, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.000000 }, // Hair3 - 0
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 1
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 2
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.399999, 1.500000, 1.200000 }, // Hair3 - 3
	{0.108999, 0.004999, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.100000, 1.200000 }, // Hair3 - 4
	{0.093999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.200000, 1.200000 }, // Hair3 - 5
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 6
	{0.099690, 0.006124, -0.003632, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.178597 }, // Hair3 - 7
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 8
	{0.075812, 0.007086, -0.003632, 0.000000, 0.000000, 0.504608, 2.675273, 1.004458, 1.130290 }, // Hair3 - 9
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 10
	{0.073011, -0.000845, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 11
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 12
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 13
	{0.088216, 0.009086, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 14
	{0.069295, -0.023192, -0.001476, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 0.998685 }, // Hair3 - 15
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 16
	{0.100861, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.033313 }, // Hair3 - 17
	{0.062683, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.022677 }, // Hair3 - 18
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 19
	{0.097281, -0.006789, 0.000686, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.089968 }, // Hair3 - 20
	{0.080904, -0.002786, -0.005819, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.118435 }, // Hair3 - 21
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 22
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 23
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 24
	{0.080904, 0.002488, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.043299 }, // Hair3 - 25
	{0.062522, 0.013497, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.175585 }, // Hair3 - 26
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 27
	{0.087827, 0.022751, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 28
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 29
	{0.077708, 0.011525, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 30
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 31
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 32
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 33
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 34
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 35
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 36
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 37
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 38
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 39
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 40
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 41
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 42
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 43
	{0.079044, 0.014414, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.900948 }, // Hair3 - 44
	{0.060674, 0.006197, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.019663 }, // Hair3 - 45
	{0.087941, 0.018147, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.139707 }, // Hair3 - 46
	{0.084668, 0.006726, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 47
	{0.099493, -0.017821, -0.002006, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 48
	{0.079672, 0.012987, -0.001040, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.986149 }, // Hair3 - 49
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 50
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 51
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 52
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 53
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 54
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 55
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 56
	{0.119527, 0.015450, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.060347 }, // Hair3 - 57
	{0.075583, -0.001295, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.948482 }, // Hair3 - 58
	{0.095139, 0.003601, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.128250 }, // Hair3 - 59
	{0.095139, 0.003562, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.100457 }, // Hair3 - 60
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 61
	{0.093398, 0.018343, 0.006919, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.009026 }, // Hair3 - 62
	{0.084164, -0.001245, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.179215 }, // Hair3 - 63
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 64
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 65
	{0.095307, 0.009252, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.051705 }, // Hair3 - 66
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 67
	{0.101020, 0.016734, -0.003369, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 0.997687 }, // Hair3 - 68
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 69
	{0.087212, 0.017980, 0.007104, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.049646 }, // Hair3 - 70
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 71
	{0.089513, 0.014271, -0.001790, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.032754 }, // Hair3 - 72
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 73
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 74
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 75
	{0.077374, -0.010765, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 76
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 77
	{0.079938, 0.012189, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 78
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 79
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 80
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 81
	{0.104624, 0.014979, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 82
	{0.093609, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 83
	{0.106974, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 84
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 85
	{0.070000, -0.009999, 0.000000, 0.000000, 0.000000, 350.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 86
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 87
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 88
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 89
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 90
	{0.076668, -0.010447, -0.003085, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.169261 }, // Hair3 - 91
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 92
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 93
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 94
	{0.070631, -0.016430, 0.000185, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.079532 }, // Hair3 - 95
	{0.085213, 0.007071, -0.002542, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.094804 }, // Hair3 - 96
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 97
	{0.081412, 0.025877, 0.000684, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.156216 }, // Hair3 - 98
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 99
	{0.096130, -0.002822, 0.002127, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.156216 }, // Hair3 - 100
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 101
	{0.088931, 0.009656, -0.003107, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.042739 }, // Hair3 - 102
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 103
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 104
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 105
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 106
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 107
	{0.111707, 0.012517, 0.000836, 1.349158, 0.000000, 349.588562, 1.004458, 1.004458, 0.861656 }, // Hair3 - 108
	{0.111707, 0.024860, 0.000836, 1.349158, 0.000000, 355.732360, 1.004458, 1.004458, 0.893029 }, // Hair3 - 109
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 110
	{0.091159, 0.003268, -0.001098, 1.349158, 0.000000, 359.983459, 1.004458, 1.004458, 1.003022 }, // Hair3 - 111
	{0.083389, 0.004525, -0.001098, 1.349158, 0.000000, 6.963862, 1.004458, 1.004458, 0.915353 }, // Hair3 - 112
	{0.098555, -0.000253, -0.001098, 1.349158, 0.000000, 2.182152, 1.004458, 1.004458, 1.080508 }, // Hair3 - 113
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 114
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 115
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 116
	{0.073719, 0.011567, -0.001081, 1.349158, 0.000000, 358.537384, 1.004458, 1.004458, 1.053219 }, // Hair3 - 117
	{0.078061, 0.011567, -0.001081, 1.349158, 0.000000, 2.812902, 1.004458, 1.004458, 1.053219 }, // Hair3 - 118
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 119
	{0.088413, -0.004958, -0.001081, 1.349158, 0.000000, 356.769927, 1.004458, 1.004458, 1.134856 }, // Hair3 - 120
	{0.098040, -0.013431, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.165797 }, // Hair3 - 121
	{0.097684, -0.008173, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.069886 }, // Hair3 - 122
	{0.082243, -0.000975, -0.003736, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.270665 }, // Hair3 - 123
	{0.083105, -0.000273, -0.001209, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.167312 }, // Hair3 - 124
	{0.089598, 0.003350, -0.001209, 1.349158, 0.000000, 7.936543, 1.004458, 1.004458, 1.055302 }, // Hair3 - 125
	{0.107306, -0.014673, 0.000547, 1.162765, 0.000000, 0.930281, 1.004458, 1.004458, 1.133381 }, // Hair3 - 126
	{0.097297, 0.002157, 0.000547, 1.162765, 0.000000, 356.993957, 1.004458, 1.004458, 1.132299 }, // Hair3 - 127
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 128
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 129
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 130
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 131
	{-0.000896, 0.005557, 0.000547, 1.162765, 0.000000, 349.529785, 1.004458, 1.004458, 0.975846 }, // Hair3 - 132
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 133
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 134
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 135
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 136
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 137
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 138
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 139
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 140
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 141
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 142
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 143
	{0.089415, -0.005394, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.377530 }, // Hair3 - 144
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 145
	{0.084664, -0.005025, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.063808 }, // Hair3 - 146
	{0.068039, -0.006231, 0.003438, 1.162765, 0.000000, 348.373596, 1.004458, 1.004458, 1.091637 }, // Hair3 - 147
	{0.077481, -0.006293, 0.003438, 1.162765, 0.000000, 3.232684, 1.004458, 1.004458, 1.143243 }, // Hair3 - 148
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 149
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 150
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 151
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 152
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 153
	{0.061059, -0.000941, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.064656 }, // Hair3 - 154
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 155
	{0.088869, -0.006497, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.322631 }, // Hair3 - 156
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 157
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 158
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 159
	{0.080472, -0.006497, 0.000619, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.024554 }, // Hair3 - 160
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 161
	{0.099750, -0.004397, 0.000619, 1.162765, 0.000000, 357.063781, 1.004458, 1.004458, 1.093557 }, // Hair3 - 162
	{0.085568, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 163
	{0.085617, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 164
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 165
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 166
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 167
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 168
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 169
	{0.082516, 0.004471, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.126474 }, // Hair3 - 170
	{0.095091, -0.004251, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.145727 }, // Hair3 - 171
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 172
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 173
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 174
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 175
	{0.110327, -0.012279, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.138159 }, // Hair3 - 176
	{0.096507, -0.004908, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.256144 }, // Hair3 - 177
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 178
	{0.093613, 0.001893, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.097507 }, // Hair3 - 179
	{0.097174, -0.011787, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.176252 }, // Hair3 - 180
	{0.098671, 0.026786, -0.000061, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.074810 }, // Hair3 - 181
	{0.077510, 0.012967, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.132787 }, // Hair3 - 182
	{0.086433, 0.000554, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.167121 }, // Hair3 - 183
	{0.101167, -0.003799, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 184
	{0.088131, -0.001998, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 185
	{0.101592, -0.012444, -0.001830, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.129892 }, // Hair3 - 186
	{0.079601, -0.016813, 0.007176, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.090405 }, // Hair3 - 187
	{0.090677, -0.000343, 0.002180, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.055292 }, // Hair3 - 188
	{0.095982, -0.001331, 0.002180, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.142861 }, // Hair3 - 189
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 190
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 191
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 192
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 193
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 194
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 195
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 196
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 197
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 198
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 199
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 200
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 201
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 202
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 203
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 204
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 205
	{0.110781, 0.006567, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.007790 }, // Hair3 - 206
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 207
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 208
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 209
	{0.082535, -0.005237, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 0.995132 }, // Hair3 - 210
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 211
	{0.062871, -0.001359, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.048056 }, // Hair3 - 212
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 213
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 214
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 215
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 216
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 217
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 218
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 219
	{0.059144, 0.013152, -0.001230, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.073572 }, // Hair3 - 220
	{0.094527, -0.006164, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.247534 }, // Hair3 - 221
	{0.094527, -0.011945, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.226916 }, // Hair3 - 222
	{0.089071, 0.014463, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.192765 }, // Hair3 - 223
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 224
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 225
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 226
	{0.101175, 0.014766, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.126656 }, // Hair3 - 227
	{0.092572, 0.007272, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.235207 }, // Hair3 - 228
	{0.079486, -0.015010, 0.000872, 1.162765, 0.000000, 350.970611, 1.004458, 1.004458, 1.098212 }, // Hair3 - 229
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 230
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 231
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 232
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 233
	{0.078231, -0.017629, 0.000872, 1.162765, 0.000000, 351.789215, 1.004458, 1.004458, 1.018379 }, // Hair3 - 234
	{0.049378, -0.001035, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 0.966751 }, // Hair3 - 235
	{0.080933, -0.007481, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 1.095109 }, // Hair3 - 236
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 237
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 238
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 239
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 240
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 241
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 242
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 243
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 244
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 245
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 246
	{0.087829, -0.001369, 0.000872, 1.162765, 0.000000, 3.899056, 1.004458, 1.004458, 1.201375 }, // Hair3 - 247
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 248
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 249
	{0.078370, 0.009865, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.166651 }, // Hair3 - 250
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 251
	{0.088582, -0.006075, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.210478 }, // Hair3 - 252
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 253
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 254
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 255
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 256
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 257
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 258
	{0.072341, -0.001438, 0.002612, 1.162765, 0.000000, 352.128753, 1.004458, 1.004458, 1.218888 }, // Hair3 - 259
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 260
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 261
	{0.075398, 0.005842, 0.002612, 1.162765, 0.000000, 357.731414, 1.004458, 1.004458, 1.057977 }, // Hair3 - 262
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 263
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 264
	{0.074374, -0.003570, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.109009 }, // Hair3 - 265
	{0.080137, -0.009302, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.131146 }, // Hair3 - 266
	{0.067543, 0.001360, 0.002612, 1.162765, 0.000000, 349.140075, 1.004458, 1.004458, 1.146864 }, // Hair3 - 267
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 270
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 271
	{0.084866, 0.000078, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.146864 }, // Hair3 - 272
	{0.059999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 273
	{0.082516, 0.006275, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.090817 }, // Hair3 - 274
	{0.088237, 0.005707, -0.000952, 1.162765, 0.000000, 354.032653, 1.004458, 1.004458, 1.042391 }, // Hair3 - 275
	{0.093156, 0.002306, -0.000952, 1.162765, 0.000000, 357.562286, 1.004458, 1.004458, 0.996686 }, // Hair3 - 276
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 277
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 278
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 279
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 280
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 281
	{0.084915, 0.003095, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.104662 }, // Hair3 - 282
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 283
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 284
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 285
	{0.086468, 0.001470, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.092748 }, // Hair3 - 286
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 287
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 288
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 289
	{0.066092, -0.004346, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.234344 }, // Hair3 - 290
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 291
	{0.074633, 0.006723, -0.000952, 1.162765, 0.000000, 354.744812, 1.004458, 1.004458, 1.020303 }, // Hair3 - 292
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 293
	{0.091338, 0.011203, -0.000952, 1.162765, 0.000000, 7.673956, 1.004458, 1.004458, 1.129834 }, // Hair3 - 294
	{0.077449, 0.006221, 0.002460, 1.162765, 0.000000, 355.039520, 1.004458, 1.004458, 1.108941 }, // Hair3 - 295
	{0.069757, -0.014896, 0.002460, 1.162765, 0.000000, 339.120452, 1.004458, 1.004458, 1.179332 }, // Hair3 - 296
	{0.086319, -0.014856, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.285995 }, // Hair3 - 297
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 298
	{0.091403, 0.024850, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.193961 } // Hair3 - 299
};
new DescriptionsPerColors[14] =
{
	0x00CDFFFF, //Celeste
	0xCA3022FF, //Rojo oscuro
	0x4A4AFFFF, //Azul Claro
	0xAA00FFFF, //Violeta
	0x7D0000FF, //Marrón
	0xC00000FF, //Rojo
	0xD40000FF, //Rojo Claro
	0x0000E0FF, //Azul
	0xD4D438FF, //Amarillo
	0x686884FF, //Gris
	0x7650A8FF, //Púrpura
	0xD46C00FF, //Naranja
	0x00D4A1FF,  //Menta
	0x008228FF  //Verde Oscuro

};
new DescriptionsPerColorsHTML[14][7] =
{
	"00CDFF",
	"C33022",
	"4A4AAF",
	"AA00FF",
	"7D0000",
	"C00000",
	"D40000",
	"0000E0",
	"D4D438",
	"686884",
	"7650A8",
	"D46C00",
	"00D4A1",
	"008228"
};
new DescriptionsColors[13] =
{
	0x00CDFFFF, //Felíz
	0xCA3022FF, //Enojado
	0x4A4AFFFF, //Triste
	0x0000A8FF, //Aburrido
	0x006238FF, //Amargado
	0xC00000FF, //Molesto
	0xD40000FF, //Furioso
	0x0000E0FF, //Relajado
	0xD4D438FF, //Nostálgico
	0x686884FF, //Serio
	0x7650A8FF, //Deprimido
	0xD46C00FF, //Nervioso
	0x00D4A1FF  //Emocionado
};
/*new SlotPickupWeapon[47][25] =
{
	"Nada", 					// 0 - Unarmed
	"Manopla", 					// 1 - Brass Knuckles
	"Palo de Golf", 			// 2 - Golf Club
	"Bastón policial", 			// 3 - Nite Stick
	"Cuchillo", 				// 4 - Knife
	"Bate", 					// 5 - Baseball Bat
	"Pala", 					// 6 - Shovel
	"Palo de Billar",			// 7 - Pool Cue
	"Sable", 					// 8 - Katana
	"Motosierra", 				// 9 - Chainsaw
	"Consolador Rosado", 		// 10 - Purple Dildo
	"Consolador Pequeño", 		// 11 - Small White Vibrator
	"Consolador Largo", 		// 12 - Large White Vibrator
	"Consolador Plateado", 		// 13 - Silver Vibrator
	"Flores", 					// 14 - Flowers
	"Bastón", 					// 15 - Cane
	"Granadas", 				// 16 - Grenade
	"Granadas de Gas",		 	// 17 - Tear Gas *
	"Cóctel Molotov", 			// 18 - Molotov Cocktail
	-1, // 19 -
	-1, // 20 -
	-1, // 21 -
	"Pistola 9mm", 				// 22 - 9mm
	"Silenciada 9mm", 			// 23 - Silenced 9mm
	"Desert Eagle", 			// 24 - Desert Eagle
	"Escopeta", 				// 25 - Shotgun
	"Recortada", 				// 26 - Sawn-off Shotgun
	"Escopeta de Combate", 		// 27 - Combat Shotgun
	"Micro SMG", 				// 28 - Micro SMG
	"MP5", 						// 29 - MP5
	"AK-47", 					// 30 - AK-47
	"M4", 						// 31 - M4
	"Tec9", 					// 32 - Tec9
	"Rifle Corto Alcance", 		// 33 - Country Rifle
	"Rifle Largo Alcance", 		// 34 - Sniper Rifle
	"Cohete", 					// 35 - Rocket Launcher
	"RPG Cohete", 				// 36 - HS Rocket Launcher **
	"Lanzallamas", 				// 37 - Flamethrower
	"Minigun", 					// 38 - Minigun
	"Explosivos", 				// 39 - Satchel Charge ***
	"Detonador", 				// 40 - Detonator
	"Spray Policial", 			// 41 - Spraycan
	"Extintor de incendios", 	// 42 - Fire Extinguisher
	"Cámara Fotográfica", 		// 43 - Camera
	"Gafas de visión nocturna", // 44 - Nightvision Goggles ****
	"Gafas térmicas", 			// 45 - Thermal Goggles ****
	"Paracaídas" 				// 46 - Parachute
};*/
new ModeWalkID[15] =
{
	263,                  // 00 - WALK_player
	257,                  // 01 - WALK_drunk
	254,                  // 02 - WALK_civi
	258,                  // 03 - WALK_fat
	260,                  // 04 - WALK_gang1
	261,                 // 05 - WALK_gang2
	262,                 // 06 - WALK_old
	265,                 // 07 - WALK_shuffle
	264,                 // 08 - WALK_rocket
	270,                 // 09 - Walk_Wuzi
	275,                 // 10 - WOMAN_runfatold
	278,                  // 11 - WOMAN_walkbusy
	280,                  // 12 - WOMAN_walkpro
	283,                  // 13 - WOMAN_walksexy
	279                  // 14 - WOMAN_walkfatold
};
new BombasOjectsID[8] =
{
	1654, // 0
	1265, // 1
	1580, // 2
	1210, // 3
	1576, // 4
	1577, // 5
	11745, // 6
	1752  // 7
};
new ModeWalkName[15][MAX_PLAYER_NAME] =
	{
		"Normal",       // 00 -
		"Borracho",     // 01 -
		"Civil",        // 02 -
		"Chambado",     // 03 -
		"Pandillero 1", // 04 -
		"Pandillero 2", // 05 -
		"Viejo 1",      // 06 -
		"Viejo 2",      // 07 -
		"Lesionado",    // 08 -
		"Ciego",        // 09 -
		"Cansado",      // 10 -
		"Mujer 1",      // 11 -
		"Mujer 2",      // 12 -
		"Mujer Sexy",   // 13 -
		"Vieja"         // 14 -
};
new EnfermedadName[7][16] =
	{
		"Ninguna",      // 00 -
		"Dengue",     	// 01 -
		"Gripe A",  	// 02 -
		"Sífilis",     	// 03 -
		"Conjunctivitis",// 04 -
		"Fiebre", 		// 05 -
		"Gonorrea"      // 06 -
};
new EnfermedadColores[7][10]=
{
	"{FFFFFF}",     // 00 - Ninguna
	"{1D4BA1}",     // 01 - Dengue-
	"{00D400}",  	// 02 - Gripe A -
	"{6F00D6}",    	// 03 - Sida -
	"{EE6F00}", 	// 04 - Cancer -
	"{38CAE0}", 	// 05 - Fiebre
	"{CDE000}"      // 06 - Gonorrea
};
new EnfermedadTiempo[7]=
	{
		80,     // 00 - Ninguna
		50,     // 01 - Dengue
		60,  	// 02 - Gripe A
		40,    	// 03 - Sida
		30, 	// 04 - Cancer
		45, 	// 05 - Fiebre
		70      // 06 - Gonorrea
};
new ModeTalkLibraryAnim[7][8] =
{
		"PED",
		"RAPPING",
		"GANGS",
		"GANGS",
		"GANGS",
		"GANGS",
		"GANGS"
};
new ModeTalkNameAnim[7][15] =
{
		"IDLE_chat",
		"RAP_A_Loop",
		"prtial_gngtlkB",
		"prtial_gngtlkE",
		"prtial_gngtlkF",
		"prtial_gngtlkG",
		"prtial_gngtlkH"
};
new ModeTalkName[7][11] =
	{
		"Normal",       // 00 -
		"Bárbaro",     // 01 -
		"Guapo",        // 02 -
		"Rapero",     // 03 -
		"Pandillero", // 04 -
		"Negociante", // 05 -
		"Expresivo" // 06 -
};
new CarteraNames[4][9] =
{
		"Nada",
		"Cheque",
		"Ticket",
		"Condones"
};
new CarteraChequeType[2][9] =
{
		"Efectivo",
		"Personal"
};
new PistasType[2][10] =
{
	"Vehículos",
	"Aereos"
};
new PistasTypeEstados[2][8] =
{
	"Pública",
	"Privada"
};
new PistasTypeUses[4][13] =
{
	"Detenida",
	"Esperando...",
	"Conteo...",
	"En Uso"
};
new PistasTypeFinal[6][20] =
{
	"Desconectó",
	"Expulsado",
	"Terminó",
	"Murió",
	"Explotó",
	"Salida Voluntaria"
};
/*new ModeSprintLibraryAnim[4][MAX_PLAYER_NAME] =
{
		"FAT",
		"PED",
		"PED",
		"PED"
};
new ModeSprintNameAnim[4][MAX_PLAYER_NAME] =
{
		"FatSprint",
		"sprint_civi",
		"sprint_panic",
		"Sprint_Wuzi"
};
new ModeSprintName[4][MAX_PLAYER_NAME] =
	{
		"Civil",     // 00 -
		"Atlético",     // 01 -
		"Miedo",     // 02 -
		"Ciego"     // 03 -
};*/
new IdArmasTraficantes[16] =
{
	1,                  // 00 - ID: 0 | Nombre: Brass Knuckles
	4,                  // 01 - ID: 0 | Nombre: Cuchillo
	5,                  // 02 - ID: 0 | Nombre: Bate
	6,                  // 03 - ID: 0 | Nombre: Pala
	8,                  // 04 - ID: 0 | Nombre: Katana
	22,                 // 05 - ID: 0 | Nombre: 9mm
	23,                 // 06 - ID: 0 | Nombre: Silenciada 9mm
	24,                 // 07 - ID: 0 | Nombre: Desert Eagle
	25,                 // 08 - ID: 0 | Nombre: Shotgun
	29,                 // 09 - ID: 0 | Nombre: MP5
	30,                 // 10 - ID: 0 | Nombre: AK-47
	31,                 // 11 - ID: 0 | Nombre: M4
	33,                 // 12 - ID: 0 | Nombre: Country Rifle
	34                  // 13 - ID: 0 | Nombre: Sniper Rifle
};
new MaterialesArmasTraficantes[16] =
{
	50,                  // 00 - ID: 0 | Nombre: Brass Knuckles
	100,                 // 01 - ID: 0 | Nombre: Cuchillo
	50,                  // 02 - ID: 0 | Nombre: Bate
	75,                  // 03 - ID: 0 | Nombre: Pala
	100,                 // 04 - ID: 0 | Nombre: Katana
	175,                 // 05 - ID: 0 | Nombre: 9mm
	150,                 // 06 - ID: 0 | Nombre: Silenciada 9mm
	300,                 // 07 - ID: 0 | Nombre: Desert Eagle
	250,                 // 08 - ID: 0 | Nombre: Shotgun
	350,                 // 09 - ID: 0 | Nombre: MP5
	400,                 // 10 - ID: 0 | Nombre: AK-47
	425,                 // 11 - ID: 0 | Nombre: M4
	500,                 // 12 - ID: 0 | Nombre: Country Rifle
	600,                  // 13 - ID: 0 | Nombre: Sniper Rifle
	1000                 // 14 - ID: 0 | Nombre: Bomba
};
new MunicionArmasTraficantes[16] =
{
	1,                  // 00 - ID: 0 | Nombre: Brass Knuckles
	1,                  // 01 - ID: 0 | Nombre: Cuchillo
	1,                  // 02 - ID: 0 | Nombre: Bate
	1,                  // 03 - ID: 0 | Nombre: Pala
	1,  	            // 04 - ID: 0 | Nombre: Katana
	50,                 // 05 - ID: 0 | Nombre: 9mm
	50,                 // 06 - ID: 0 | Nombre: Silenciada 9mm
	50,                 // 07 - ID: 0 | Nombre: Desert Eagle
	50,                 // 08 - ID: 0 | Nombre: Shotgun
	280,                // 09 - ID: 0 | Nombre: MP5
	280,                // 10 - ID: 0 | Nombre: AK-47
	280,                // 11 - ID: 0 | Nombre: M4
	50,                 // 12 - ID: 0 | Nombre: Country Rifle
	50	                // 13 - ID: 0 | Nombre: Sniper Rifle
};
new NamesLook[2][10] =
	{
		"Abrió",
		"Cerró"
	};
new NamesLookReverse[2][10] =
	{
		"Cerró",
		"Abrió"
	};
new NamesAlarma[2][10] =
	{
		"Desactivó",
		"Activó"
	};
new SiOrNo[2][3] =
	{
		"No",
		"Si"
	};
new SiOrNoBank[2][11] =
	{
		"{F50000}No",
		"{00F50A}Si"
	};
new Ciudades[2][11] =
	{
		"Los Santos",
		"San Fierro"
	};
new Sexos[2][20] =
	{
		"Hombre",
		"Mujer"
	};
new LataName[3][MAX_PLAYER_NAME] =
	{
		"Vacía",         // 1
		"Gas",           // 2
		"Aceíte"         // 3
	};
new HabilidadesID[6] =
	{
	    4,
	    5,
	    7,
	    6,
	    26,
	    15
	};
new HabilidadesName[6][MAX_PLAYER_NAME] =
	{
		"Normal",           // 1
		"Boxeo",            // 2
		"Kneehead",         // 3
		"Kungfu",           // 4
		"Elbow",            // 5
		"Grabkick"          // 6
	};
new SendChatStreamColors[6] =
	{
		0xF0F0F0FA,     // 1
	    0xDCDCDCFA,     // 2
	    0xC8C8C8FA,     // 3
	    0xAFAFAFC8,     // 4
	    0x9696A096,     // 5
	    0x7D7D7D64      // 6
	};
new COLOR_MESSAGES[4] =
	{   0xFFA97FFF,      // 0 - COLOR ERROR
		0xFFD97FFF,      // 1 - COLOR AYUDA
		0xC8C8C8CD,      // 2 - COLOR INFORMACIÓN
		0x33CCFFAA       // 3 - COLOR AFIRMATIVO
	};
new AccionesColors[20] =
	{
	    0xACC97F22A,        // 0 - ME - LILA
	    0xFFFF00FF,         // 1 - AME - AMARILLO
	    0x00FF00FF,         // 2 - INTENTAR OK - VERDE
	    0xE10000FF,         // 3 - INTENTAR FAIL - ROJO
	    0xFFFFFFFF,         // 4 - GRITAR - BLANCO
	    0xE600FFFF,         // 5 - SUSURRAR - BLANCO
	    0xF0F0F0FF,         // 6 - CANAL OOC - MEDIO GRIS
	    0xFFFF00FF,         // 7 - AME FIX - AMARILLO
	    0xACC97F22A,        // 8 - ME FIX - 0xACC97F22A
	    0xFFFF00FF         // 9 - MEGAFONO
	};
new Float:AccionesRadios[20] =
	{
	    30.0,        // 0 - ME
	    30.0,        // 1 - AME
	    30.0,        // 2 - INTENTAR OK
	    30.0,        // 3 - INTENTAR FAIL
	    50.0,        // 4 - GRITAR
	    3.0,         // 5 - SUSURRAR
	    30.0,        // 6 - CANAL OOC
	    30.0,        // 7 - AME
	    30.0,         // 8 - ME
	    60.0         // 9 - MEGAFONO
	};
new IdiomasNames[6][MAX_PLAYER_NAME] =
	{
		"Alemán",           // 00 - Alemán
		"Francés",          // 01 - Francés
		"Portugués",        // 02 - Portugués
		"Italiano",         // 03 - Italiano
		"Inglés",           // 04 - Inglés
		"Japonés"           // 05 - Japonés
	};
new LicenciasNames[8][7] =
	{
		"Armas", 	          // 00 - Armas
		"Coche",           	  // 01 - Coche
		"Camión",             // 02 - Camión
		"Moto",          	  // 03 - Moto
		"Vuelo",        	  // 04 - Vuelo
		"Botes",         	  // 05 - Bote
		"Tren",	    	      // 06 - Tren
		"Pesca"    	          // 07 - Pesca
	};
new CochesPistaNames[6][10] =
	{
		"TODOS",
		"Coches",
		"Camiones",
		"Motos",
		"Aviones",
		"Bote"
	};
new Float:CamerasPresent[58][7] =
{
	{148.2775,-1940.7916,41.1581, 0.001, 154.1154,-1952.1362,51.3438},
	{158.4620,-1952.5027,60.7858, 0.001, 154.1154,-1952.1362,51.3438},
	{157.5774,-1960.6683,60.7858, 0.001, 154.1154,-1952.1362,51.3438},
	{157.6724,-1960.7848,47.9010, 0.001, 154.1154,-1952.1362,51.3438},
	{140.3312,-1957.0142,47.9010, 0.001, 154.1154,-1952.1362,51.3438},
	{163.0442,-1938.8516,53.2219, 0.001, 154.1154,-1952.1362,51.3438},
	{164.0951,-1937.9269,60.8537, 0.001, 154.1154,-1952.1362,51.3438},
	{149.1857,-1960.2377,60.8537, 0.001, 154.1154,-1952.1362,51.3438},
	{169.3949,-1985.1768,16.9529, 0.001, 154.1154,-1952.1362,51.3438},
	{175.9827,-1934.3521,59.2550, 0.04, 154.1154,-1952.1362,51.3438},
	{139.1381,-1977.8539,59.2550, 0.04, 154.1154,-1952.1362,51.3438},
	{132.6389,-1923.6466,59.2550, 0.01, 154.1154,-1952.1362,51.3438},
	{186.8577,-1976.6010,59.2550, 0.01, 154.1154,-1952.1362,51.3438},
	{152.6268,-2006.2003,59.2550, 0.01, 154.1154,-1952.1362,51.3438},
	{153.5124,-1944.0731,51.5831, 0.04, 154.1154,-1952.1362,51.3438}, // 14 - Tutorial

	{1552.7028,-1736.9661,22.7690, 0.01, 1476.5753,-1693.8572,14.0469},
	{1422.2134,-1653.6403,22.7690, 0.01, 1476.5753,-1693.8572,14.0469},
	{1577.7903,-1638.8691,36.5066, 0.01, 1476.5753,-1693.8572,14.0469},
	{1422.0381,-1743.0465,13.5469, 0.01, 1476.5753,-1693.8572,14.0469}, // 18 - Ayuntamiento

	{-468.3676,-489.1411,25.5178, 0.01, -537.0579,-489.6430,25.5234},
	{-604.5347,-487.9308,25.5178, 0.01, -537.0579,-489.6430,25.5234},
	{-543.1189,-566.5915,75.8019, 0.01, -537.0579,-489.6430,25.5234},
	{-508.0062,-439.7100,42.6914, 0.01, -537.0579,-489.6430,25.5234},
	{-473.1769,-536.4239,34.0925, 0.01, -537.0579,-489.6430,25.5234}, // 23 - Camioneros

	{1833.1136,-1862.4054,22.0158, 0.01, 1772.3267,-1925.0500,13.5531},
	{1799.9946,-1962.3739,22.0158, 0.01, 1772.3267,-1925.0500,13.5531},
	{1753.2750,-1888.0272,14.0089, 0.01, 1772.3267,-1925.0500,13.5531},
	{1836.8906,-1926.1384,35.0145, 0.01, 1772.3267,-1925.0500,13.5531},
	{-1986.5505,-59.5914,53.6414, 0.01, 1772.3267,-1925.0500,13.5531}, // 28 - Taxís


	{-1957.5889,-58.2921,25.8763, 0.01, -2052.3401,-121.0279,35.2839},
	{-1982.0291,-92.4851,45.9537, 0.01, -2052.3401,-121.0279,35.2839},
	{-2084.8523,-90.1077,45.9537, 0.01, -2052.3401,-121.0279,35.2839},
	{-2078.4849,-205.9824,45.9537, 0.01, -2052.3401,-121.0279,35.2839},
	{-2007.9824,-57.5748,53.0982, 0.01, -2052.3401,-121.0279,35.2839}, // 33 - Licencieros

	{-2852.0374,464.9544,4.0999, 0.01, -2933.6436,470.1097,10.2238},
	{-3033.6431,474.5834,24.5588, 0.01, -2933.6436,470.1097,10.2238},
	{-2974.8450,478.0240,5.9347, 0.01, -2933.6436,470.1097,10.2238},
	{-2869.7942,420.7149,39.4711, 0.01, -2933.6436,470.1097,10.2238},
	{-2946.9832,540.7787,8.8698, 0.01, -2933.6436,470.1097,10.2238}, // 38 - Taller

	{-2145.3135,1311.4968,53.4459, 0.01, -2075.9697,1422.3066,10.5946},
	{-2053.8140,1343.1326,10.4069, 0.01, -2075.9697,1422.3066,10.5946},
	{-2042.5265,1443.1073,30.2435, 0.04, -2075.9697,1422.3066,10.5946},
	{-2093.3276,1370.9908,6.5817, 0.01, -2075.9697,1422.3066,10.5946},
	{-2064.6157,1389.7963,7.6273, 0.009, -2075.9697,1422.3066,10.5946},
	{-2089.9099,1342.4470,26.3686, 0.01, -2075.9697,1422.3066,10.5946}, // 44 - Detectives

	{742.4728,-1387.9087,13.6842, 0.01, 740.4363,-1347.4310,13.5120},
	{585.3113,-1327.5784,204.9761, 0.01, 740.4363,-1347.4310,13.5120},
	{773.4609,-1334.0858,13.5413, 0.04, 740.4363,-1347.4310,13.5120},
	{776.6302,-1398.9143,19.0551, 0.01, 740.4363,-1347.4310,13.5120},
	{599.7180,-1375.1670,42.9928, 0.04, 740.4363,-1347.4310,13.5120},
	{744.0721,-1286.2228,42.9928, 0.01, 740.4363,-1347.4310,13.5120},
	{756.7815,-1402.7537,32.0593, 0.01, 740.4363,-1347.4310,13.5120}, // 51 - CNN

	{1228.2329,2025.8304,17.0191, 0.01, 1228.2788,1954.7325,6.7344}, // Pruebas Race
	{1237.0281,1843.9073,6.0734, 0.01, 1228.2788,1954.7325,6.7344},
	{1258.5016,1956.2878,11.5732, 0.01, 1228.2788,1954.7325,6.7344},
	{1223.6178,1958.3763,6.7344, 0.01, 1228.2788,1954.7325,6.7344},
	{1231.4329,1964.6942,9.7664, 0.01, 1228.2788,1954.7325,6.7344},
	{1216.5686,1931.3027,21.1213, 0.01, 1228.2788,1954.7325,6.7344} // 57 - Pruebas
};

new ATTRACTORS_ANIMATIONS   [3][30];	// ATTRACTORS - 2
new BAR_ANIMATIONS      	[12][30];	// BAR - 11
new BAT_ANIMATIONS      	[11][30];	// BAT - 10
new FIRE_ANIMATIONS      	[13][30];	// FIRE - 12
new PLAYA_ANIMATIONS      	[5][30];	// PLAYA - 4
new GYM_ANIMATIONS      	[7][30];	// GYM - 6
new BFINJECT_ANIMATIONS     [4][30];	// BFINJECT - 3
new BICID_ANIMATIONS      	[19][30];	// BICID - 18
new BICIH_ANIMATIONS      	[18][30];	// BICIH - 17
new BICIL_ANIMATIONS      	[9][30];	// BICIL - 8
new BICIS_ANIMATIONS      	[20][30];	// BICIS - 19
new BICIV_ANIMATIONS      	[18][30];	// BICIV - 17
new BICI_ANIMATIONS      	[4][30];	// BICI - 3
new GOLPE_ANIMATIONS      	[12][30];	// GOLPE - 11
new BMX_ANIMATIONS      	[18][30];	// BMX - 17
new BOMBER_ANIMATIONS      	[6][30];	// BOMBER - 5
new BOX_ANIMATIONS      	[10][30];	// BOX - 9
new BALL_ANIMATIONS      	[41][30];	// BALL - 40
new BUDDY_ANIMATIONS      	[5][30];	// BUDDY - 4
new BUS_ANIMATIONS      	[9][30];	// BUS - 8
new CAM_ANIMATIONS      	[14][30];	// CAM - 13
new CAR_ANIMATIONS      	[11][30];	// CAR - 10
new CARRY_ANIMATIONS      	[7][30];	// CARRY - 6
new CARCHAT_ANIMATIONS     	[21][30];	// CARCHAT - 20
new CASINO_ANIMATIONS      	[25][30];	// CASINO - 24
new CHAINSAW_ANIMATIONS     [11][30];	// CHAINSAW - 10
new CHOPA_ANIMATIONS      	[18][30];	// CHOPA - 17
new CLOTHES_ANIMATIONS     	[13][30];	// CLOTHES - 12
new COACH_ANIMATIONS      	[6][30];	// COACH - 5
new COLT_ANIMATIONS      	[7][30];	// COLT - 6
new COP_ANIMATIONS      	[12][30];	// COP - 11
new COPD_ANIMATIONS      	[4][30];	// COPD - 3
new CRACK_ANIMATIONS      	[10][30];	// CRACK - 9
new CRIB_ANIMATIONS      	[5][30];	// CRIB - 4
new DAM_ANIMATIONS      	[5][30];	// DAM - 4
new DANCE_ANIMATIONS      	[13][30];	// DANCE - 12
new DEALER_ANIMATIONS      	[7][30];	// DEALER - 6
new DILDO_ANIMATIONS      	[9][30];	// DILDO - 8
new DODGE_ANIMATIONS      	[4][30];	// DODGE - 3
new DOZER_ANIMATIONS      	[10][30];	// DOZER - 9
new DRIVE_ANIMATIONS      	[8][30];	// DRIVE - 7
new FAT_ANIMATIONS      	[18][30];	// FAT - 17
new FIGHTB_ANIMATIONS      	[10][30];	// FIGHTB - 9
new FIGHTC_ANIMATIONS      	[12][30];	// FIGHTC - 11
new FIGHTD_ANIMATIONS      	[10][30];	// FIGHTD - 9
new FIGHTE_ANIMATIONS      	[4][30];	// FIGHTE - 3
new FINALE_ANIMATIONS      	[16][30];	// FINALE - 15
new FINALE2_ANIMATIONS      [8][30];	// FINALE2 - 7
new FLAME_ANIMATIONS      	[1][30];	// FLAME - 0
new FLOWERS_ANIMATIONS     	[3][30];	// FLOWERS - 2
new FOOD_ANIMATIONS      	[33][30];	// FOOD - 32
new GYMA_ANIMATIONS      	[9][30];	// GYMA - 8
new GANGS_ANIMATIONS      	[33][30];	// GANGS - 32
new GHANDS_ANIMATIONS      	[20][30];	// GHANDS - 19
new GHETTO_ANIMATIONS      	[7][30];	// GHETTO - 6
new GOGGLES_ANIMATIONS     	[1][30];	// GOGGLES - 0
new GRAFFITI_ANIMATIONS     [2][30];	// GRAFFITI - 1
new GRAVE_ANIMATIONS      	[3][30];	// GRAVE - 2
new GRENADE_ANIMATIONS     	[3][30];	// GRENADE - 2
new GYMB_ANIMATIONS      	[24][30];	// GYMB - 23
new HAIR_ANIMATIONS      	[13][30];	// HAIR - 12
new HEIST_ANIMATIONS      	[10][30];	// HEIST - 9
new HOUSE_ANIMATIONS      	[10][30];	// HOUSE - 9
new OFFICE_ANIMATIONS      	[10][30];	// OFFICE - 9
new INTSHOP_ANIMATIONS     	[8][30];	// SHOP - 7
new BUISNESS_ANIMATIONS     [4][30];	// BUISNESS - 3
new KART_ANIMATIONS      	[4][30];	// KART - 3
new KISSING_ANIMATIONS     	[15][30];	// KISSING - 14
new KNIFE_ANIMATIONS      	[16][30];	// KNIFE - 15
new LAPDAN1_ANIMATIONS      [2][30];	// LAPDAN - 1
new LAPDAN2_ANIMATIONS     	[2][30];	// LAPDAN - 2
new LAPDAN3_ANIMATIONS     	[2][30];	// LAPDAN - 3
new LOWRIDER_ANIMATIONS    	[39][30];	// LOWRIDER - 38
new CHASE_ANIMATIONS      	[25][30];	// CHASE - 24
new END_ANIMATIONS      	[8][30];	// END - 7
new MEDIC_ANIMATIONS      	[1][30];	// MEDIC - 0
new MISC_ANIMATIONS      	[41][30];	// MISC - 40
new MTB_ANIMATIONS      	[18][30];	// MTB - 17
//new MUSCULAR_ANIMATIONS     [17][30];	// MUSCULAR - 16
//new NEVADA_ANIMATIONS      	[2][30];	// NEVADA - 1
new LOOKERS_ANIMATIONS     	[29][30];	// LOOKERS - 28
new OTB_ANIMATIONS      	[11][30];	// OTB - 10
new PARA_ANIMATIONS      	[22][30];	// PARA - 21
new PARK_ANIMATIONS      	[3][30];	// PARK - 2
new PAUL_ANIMATIONS      	[12][30];	// PAUL - 11
new PLAYER_ANIMATIONS      	[4][30];	// PLAYER - 3
new PLAYID_ANIMATIONS      	[5][30];	// PLAYID - 4
new POLICE_ANIMATIONS      	[10][30];	// POLICE - 9
new POOL_ANIMATIONS      	[21][30];	// POOL - 20
new POOR_ANIMATIONS      	[2][30];	// POOR - 1
new PYTHON_ANIMATIONS      	[5][30];	// PYTHON - 4
new QUAD_ANIMATIONS      	[17][30];	// QUAD - 16
new QUADD_ANIMATIONS      	[4][30];	// QUADD - 3
new RAP_ANIMATIONS      	[8][30];	// RAP - 7
new RIFLE_ANIMATIONS      	[5][30];	// RIFLE - 4
new RIOT_ANIMATIONS      	[7][30];	// RIOT - 6
new ROB_ANIMATIONS      	[5][30];	// ROB - 4
new ROCKET_ANIMATIONS      	[5][30];	// ROCKET - 4
new RUSTLER_ANIMATIONS     	[5][30];	// RUSTLER - 4
new RYDER_ANIMATIONS      	[16][30];	// RYDER - 15
new SCRAT_ANIMATIONS      	[12][30];	// SCRAT - 11
new SHAMAL_ANIMATIONS      	[4][30];	// SHAMAL - 3
new SHOP_ANIMATIONS      	[25][30];	// SHOP - 24
new SHOTGUN_ANIMATIONS     	[3][30];	// SHOTGUN - 2
new SILENCED_ANIMATIONS    	[4][30];	// SILENCED - 3
new SKATE_ANIMATIONS      	[3][30];	// SKATE - 2
new SMOK_ANIMATIONS      	[8][30];	// SMOK - 7
new SNIPER_ANIMATIONS      	[1][30];	// SNIPER - 0
new SPRAY_ANIMATIONS      	[2][30];	// SPRAY - 1
new STRIP_ANIMATIONS      	[20][30];	// STRIP - 19
new SUNBA_ANIMATIONS      	[18][30];	// SUNBA - 17
new SWAT_ANIMATIONS      	[23][30];	// SWAT - 22
new SWEET_ANIMATIONS      	[7][30];	// SWEET - 6
new SWIM_ANIMATIONS      	[7][30];	// SWIM - 6
new SWORD_ANIMATIONS      	[10][30];	// SWORD - 9
new TANK_ANIMATIONS      	[6][30];		// TANK - 5
new TATTOO_ANIMATIONS      	[57][30];	// TATTOO - 56
new TEC_ANIMATIONS      	[4][30];	// TEC - 3
new TRAIN_ANIMATIONS      	[4][30];	// TRAIN - 3
new TRUCK_ANIMATIONS      	[17][30];	// TRUCK - 16
new UZI_ANIMATIONS      	[5][30];	// UZI - 4
new VAN_ANIMATIONS      	[8][30];	// VAN - 7
new VENDING_ANIMATIONS      [6][30];	// VENDING - 5
new VORTEX_ANIMATIONS      	[4][30];	// VORTEX - 3
new WAYFA_ANIMATIONS      	[18][30];	// WAYFA - 17
new ARMA_ANIMATIONS      	[17][30];	// ARMA - 16
new WUZI_ANIMATIONS      	[12][30];	// WUZI - 11
new PED_ANIMATIONS      	[286][30]; 	// PED - 285

//      Modulos
#include "Modulos/locales.pwn"
#include "Modulos/Mapeos.pwn"
#include "Modulos/Teles.pwn"

new InvalidSting[2];

main()
{
    format(InvalidSting,2, "%c", 92);//
}

public OnGameModeInit()
{
	SendRconCommand("reloadfs mapfix"); 
	SendRconCommand("reloadfs mapeos");
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		PlayersDataOnline[i][MarcaZZ] = true;
	}
	print("\n\n\n\n\n\n\n___________________ INICIANDO GAMEMODE ___________________");
	MySQLConnect();

	SetGameModeText(GAMEMODE_VERSION);


	// LOGO
	Url_WebShadow = TextDrawCreateEx(32.1, 428.1, URL_WEB_SHADOW);
	TextDrawColor(Url_WebShadow, 0xFFFEFFFF);
	TextDrawSetShadow(Url_WebShadow ,1);
	TextDrawFont(Url_WebShadow, 2);
	TextDrawLetterSize(Url_WebShadow, 0.3 , 0.9);

	Url_Web = TextDrawCreateEx(32.0, 428.0, URL_WEB);
	TextDrawColor(Url_Web, 0xFFFEFFFF);
	TextDrawSetShadow(Url_Web ,1);
	TextDrawFont(Url_Web, 2);
	TextDrawLetterSize(Url_Web, 0.3 , 0.9);

/////////////////////// OTROS
	ManualVehicleEngineAndLights();
	SetNameTagDrawDistance(NAME_TAG_DISTANCE_DEFAULT);
    DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	Streamer_TickRate(10);
	ShowPlayerMarkers(0);
    UsePlayerPedAnims();
	SetWeather(14);
	WeatherCurrent = 14;
	LoadPriceAndNameVehicles();
	LoadCajeros();
	LoadMapeos();
//	LoadTelesPublics();
	LoadTeles();
	LoadMenuStatic();
	LoadTypeObjectsBolsillos();
	LoadAllAnims();
	CreateTextDrawFijosVelocimetros();
	LoadGasolineras();
	LoadTypeJails();
	LoadTypeHouse();
	LoadGarageType();
	LoadPointsExtraction();
	CleanVCP();
	LoadDataPistas();
	LoadTexDrawsTutorial();
	LoadGaragesEx();
	LoadGaragesExLock();
	LoadInfoPickups();
	LoadJobs();
	LoadCameras();
	CreateTextDrawDamage();
	LoadCamerasLogin();
	CreateTextDrawGas();
	CreateTextDrawNumbers();
	CreateTextDrawOil();
	LoadIconsPlayers();
	LoadTypeArticulosR();
	LoadRobosInfo();
/////////// NEGOCIOS
	LoadDataBizzType();
	for (new i = 1; i < MAX_BIZZ_COUNT; i++)
	{
		if (!DataLoadBizz(i))
		{
		    MAX_BIZZ = i - 1;
		    break;
		}
	}
/////////// CASAS
	for (new i = 1; i < MAX_HOUSE_COUNT; i++)
	{
		if (!LoadHouse(i))
		{
		    MAX_HOUSE = i - 1;
		    break;
		}
	}
	LoadGarages();
	LoadIncendios();
	LoadBombas();
	LoadVCP();
/////////// VEHICLES
	// NORMALES
	for (new i = 1; i < MAX_VEHICLE_COUNT; i++)
	{
		DataCars[i][StationID]     		= -1;

		if (!LoadDataVehicle(i, DIR_VEHICLES, true))
		{
		    MAX_CAR_DUENO = i - 1;
		    MAX_CAR = MAX_CAR_DUENO;
		    break;
		}
		else
		{
			if ( DataCars[i][IsLastSpawn] )
			{
				SetLastSettingVehicle(i);
			}
			else
			{
				CreateVehicleEx(DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2], i);
			}
		}
		DataCars[i][IsLastSpawn] = false;
	}
	// FACCIONES
	LoadCarsFaccion();
	for ( new i = MAX_CAR_DUENO + 1; i <= MAX_CAR_FACCION; i++)
	{
		SetPlateToCarFaccion(i, DataCars[i][Time]);
	    if ( LoadDataVehicle(i, DIR_VEHICLESF, false) && DataCars[i][IsLastSpawn] )
	    {
			SetLastSettingVehicle(i);
	    }
	    else
	    {
			CreateVehicleEx(DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2], i);
			DataCars[i][Gas] = MAX_GAS_VEHICLE;
			DataCars[i][Oil] = MAX_OIL_VEHICLE;
			DataCars[i][Lock] = LOCK_FACCION_CAR;
		}
		DataCars[i][IsLastSpawn] = false;
//		printf("%i -- %i - %f - %f - %f - %f - %i - %i", DataCars[i][Time], DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2]);
	}
	// PÚBLICOS
	LoadCarsPublic();
	for ( new i = MAX_CAR_FACCION + 1; i <= MAX_CAR_PUBLIC; i++)
	{
	    if ( LoadDataVehicle(i, DIR_VEHICLESP, false) && DataCars[i][IsLastSpawn] )
	    {
			SetLastSettingVehicle(i);
	    }
	    else
	    {
			CreateVehicleEx(DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2], i);
			DataCars[i][Gas] = MAX_GAS_VEHICLE;
			DataCars[i][Oil] = MAX_OIL_VEHICLE;
		}
		DataCars[i][IsLastSpawn] = false;
//		printf("%i -- %i - %f - %f - %f - %f - %i - %i", DataCars[i][Time], DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2]);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////// FACCIONES
	for (new i = 0; i < MAX_FACCION_COUNT; i++)
	{
	    for (new s = 0; s < MAX_FACCION_RANGOS; s++)
	    {
		    FaccionData[i][Paga][s] = 0;
			format(FaccionesRangos[i][s], MAX_FACCION_NAME, "0");
			for ( new h; h < MAX_FACCION_SKIN; h++)
			{
				RangosSkins[i][s][h] = 0;
			}
		}
	}
// CIVIL ID - 0
	format(FaccionData[CIVIL][NameFaccion], MAX_FACCION_NAME, "Civil");
	FaccionData[CIVIL][Spawn_X][0] 		= 1726.7014;
	FaccionData[CIVIL][Spawn_Y][0] 		= -1687.1825;
	FaccionData[CIVIL][Spawn_Z][0] 		= 13.5164;
	FaccionData[CIVIL][Spawn_ZZ][0]		= 178.1227;
	FaccionData[CIVIL][Family] 			= false;
	FaccionData[CIVIL][Radio] 			= false;

	FaccionesRangos[CIVIL][7]  = "Ninguno"; 			RangosSkins[CIVIL][7][0] 	= 0; FaccionData[CIVIL][Paga][7] = 250;

// GOBIERNO ID - 1
	format(FaccionData[GOBIERNO][NameFaccion], MAX_FACCION_NAME, "Gobierno");
	FaccionData[GOBIERNO][Extorsion] = 0;
	FaccionData[GOBIERNO][Spawn_X][0] = -2769.2700;
	FaccionData[GOBIERNO][Spawn_Y][0] = 388.8144;
	FaccionData[GOBIERNO][Spawn_Z][0] = 4.4591;
	FaccionData[GOBIERNO][Spawn_ZZ][0] = 270.0;
	FaccionData[GOBIERNO][PickupOut_X] = -2766.5518;
	FaccionData[GOBIERNO][PickupOut_Y] = 375.5982;
	FaccionData[GOBIERNO][PickupOut_Z] = 6.3347;
	FaccionData[GOBIERNO][PickupOut_ZZ] = 270.0;
	FaccionData[GOBIERNO][PickupIn_X] = 390.6746;
	FaccionData[GOBIERNO][PickupIn_Y] = 173.8038;
	FaccionData[GOBIERNO][PickupIn_Z] = 1008.3828;
	FaccionData[GOBIERNO][PickupIn_ZZ] = 91.3626;
	FaccionData[GOBIERNO][InteriorFaccion] = 3;
	FaccionData[GOBIERNO][PickupidOutF] = CreateFaccionDynamicPickup(1239, GOBIERNO, FaccionData[GOBIERNO][PickupOut_X], FaccionData[GOBIERNO][PickupOut_Y], FaccionData[GOBIERNO][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[GOBIERNO][PickupidInF] = CreateFaccionDynamicPickup(1239, GOBIERNO, FaccionData[GOBIERNO][PickupIn_X], FaccionData[GOBIERNO][PickupIn_Y], FaccionData[GOBIERNO][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[GOBIERNO][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[GOBIERNO][PrecioFaccion] = 0;
	FaccionData[GOBIERNO][Lock] = 0;
	FaccionData[GOBIERNO][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[GOBIERNO][Family] = false;
	FaccionData[GOBIERNO][Radio] = true;

	FaccionesRangos[GOBIERNO][0]  = "Presidente"; 		RangosSkins[GOBIERNO][0][0] 	= 147; 	RangosSkins[GOBIERNO][0][1] 	= 216;  RangosSkins[GOBIERNO][0][2] 	= 228; 	FaccionData[GOBIERNO][Paga][0] = 1200;
	FaccionesRangos[GOBIERNO][1]  = "Vicepresidente"; 	RangosSkins[GOBIERNO][1][0] 	= 17;  	RangosSkins[GOBIERNO][1][1] 	= 216;  RangosSkins[GOBIERNO][1][2] 	= 228;	FaccionData[GOBIERNO][Paga][1] = 950;
	FaccionesRangos[GOBIERNO][2]  = "Gobernador"; 	    RangosSkins[GOBIERNO][2][0] 	= 57;  	RangosSkins[GOBIERNO][2][1] 	= 216;  RangosSkins[GOBIERNO][2][2] 	= 228;	FaccionData[GOBIERNO][Paga][2] = 850;
	FaccionesRangos[GOBIERNO][3]  = "Secretario"; 		RangosSkins[GOBIERNO][3][0] 	= 227;  RangosSkins[GOBIERNO][3][1] 	= 216;  RangosSkins[GOBIERNO][3][2] 	= 148;	FaccionData[GOBIERNO][Paga][3] = 630;
	FaccionesRangos[GOBIERNO][4]  = "Escolta"; 		    RangosSkins[GOBIERNO][4][0] 	= 163;  RangosSkins[GOBIERNO][4][1] 	= 172;  RangosSkins[GOBIERNO][4][2] 	= 148;	FaccionData[GOBIERNO][Paga][4] = 550;
	FaccionesRangos[GOBIERNO][5]  = "Asistente"; 	    RangosSkins[GOBIERNO][5][0] 	= 189; 	RangosSkins[GOBIERNO][5][1]		= 150;  RangosSkins[GOBIERNO][5][2] 	= 148;  FaccionData[GOBIERNO][Paga][5] = 500;

// LICENCIEROSID - 2
	format(FaccionData[LICENCIEROS][NameFaccion], MAX_FACCION_NAME, "Licencieros");
	FaccionData[LICENCIEROS][Extorsion] = 0;
	FaccionData[LICENCIEROS][Spawn_X][0] = -2045.7384;
	FaccionData[LICENCIEROS][Spawn_Y][0] = -108.8351;
	FaccionData[LICENCIEROS][Spawn_Z][0] = 35.2307;
	FaccionData[LICENCIEROS][Spawn_ZZ][0] = 177.6654;
	FaccionData[LICENCIEROS][Spawn_X][1] = -1494.6835;
	FaccionData[LICENCIEROS][Spawn_Y][1] = 936.5883;
	FaccionData[LICENCIEROS][Spawn_Z][1] = 7.1875;
	FaccionData[LICENCIEROS][Spawn_ZZ][1] = 89.4762;
	FaccionData[LICENCIEROS][PickupOut_X] = -2026.6021;
	FaccionData[LICENCIEROS][PickupOut_Y] = -101.7902;
	FaccionData[LICENCIEROS][PickupOut_Z] = 35.1641;
	FaccionData[LICENCIEROS][PickupOut_ZZ] = 7.1465;
	FaccionData[LICENCIEROS][PickupIn_X] = -2027.0356;
	FaccionData[LICENCIEROS][PickupIn_Y] = -103.7437;
	FaccionData[LICENCIEROS][PickupIn_Z] = 1035.1719;
	FaccionData[LICENCIEROS][PickupIn_ZZ] = 183.3053;
	FaccionData[LICENCIEROS][InteriorFaccion] = 3;
	FaccionData[LICENCIEROS][PickupidOutF] = CreateFaccionDynamicPickup(1239, LICENCIEROS, FaccionData[LICENCIEROS][PickupOut_X], FaccionData[LICENCIEROS][PickupOut_Y], FaccionData[LICENCIEROS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[LICENCIEROS][PickupidInF] = CreateFaccionDynamicPickup(1239, LICENCIEROS, FaccionData[LICENCIEROS][PickupIn_X], FaccionData[LICENCIEROS][PickupIn_Y], FaccionData[LICENCIEROS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[LICENCIEROS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[LICENCIEROS][PrecioFaccion] = 0;
	FaccionData[LICENCIEROS][Lock] 				= 0;
	FaccionData[LICENCIEROS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[LICENCIEROS][Family] = true;
	FaccionData[LICENCIEROS][Radio] = true;

	FaccionesRangos[LICENCIEROS][0]  = "Director"; 				RangosSkins[LICENCIEROS][0][0] = 171; 	RangosSkins[LICENCIEROS][0][1] = 194; RangosSkins[LICENCIEROS][0][2] = 172; 	FaccionData[LICENCIEROS][Paga][0] = 500;
	FaccionesRangos[LICENCIEROS][1]  = "Sub Director"; 			RangosSkins[LICENCIEROS][1][0] = 59;  	RangosSkins[LICENCIEROS][1][1] = 60;  RangosSkins[LICENCIEROS][1][2] = 194;	FaccionData[LICENCIEROS][Paga][1] = 450;
	FaccionesRangos[LICENCIEROS][2]  = "Jefe de Licencieros"; 	RangosSkins[LICENCIEROS][2][0] = 59;  	RangosSkins[LICENCIEROS][2][1] = 60;  RangosSkins[LICENCIEROS][2][2] = 194;	FaccionData[LICENCIEROS][Paga][2] = 450;
	FaccionesRangos[LICENCIEROS][3]  = "Jefe de Profesores"; 	RangosSkins[LICENCIEROS][3][0] = 59;  	RangosSkins[LICENCIEROS][3][1] = 60;  RangosSkins[LICENCIEROS][3][2] = 194;	FaccionData[LICENCIEROS][Paga][3] = 450;
	FaccionesRangos[LICENCIEROS][4]  = "Licenciero"; 			RangosSkins[LICENCIEROS][4][0] = 59; 	RangosSkins[LICENCIEROS][4][1]	= 60;  RangosSkins[LICENCIEROS][4][2] = 194;  FaccionData[LICENCIEROS][Paga][4] = 400;
	FaccionesRangos[LICENCIEROS][5]  = "Profesor"; 				RangosSkins[LICENCIEROS][5][0] = 59; 	RangosSkins[LICENCIEROS][5][1] = 60;  RangosSkins[LICENCIEROS][5][2] = 194;	FaccionData[LICENCIEROS][Paga][5] = 400;

// TRAFICANTES ID - 3
	format(FaccionData[TRAFICANTES][NameFaccion], MAX_FACCION_NAME, "Traficantes");
	FaccionData[TRAFICANTES][Extorsion] = 0;
	FaccionData[TRAFICANTES][AlmacenX][0] = 2811.0068;
	FaccionData[TRAFICANTES][AlmacenY][0] = 1995.9684;
	FaccionData[TRAFICANTES][AlmacenZ][0] = 16.7722;
	FaccionData[TRAFICANTES][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[TRAFICANTES][AlmacenX][1] = 0;
	FaccionData[TRAFICANTES][AlmacenY][1] = 0;
	FaccionData[TRAFICANTES][AlmacenZ][1] = 0;
	FaccionData[TRAFICANTES][Spawn_X][0] = 1070.0868;
	FaccionData[TRAFICANTES][Spawn_Y][0] = -342.7817;
	FaccionData[TRAFICANTES][Spawn_Z][0] = 73.9922;
	FaccionData[TRAFICANTES][Spawn_ZZ][0] = 0;
	FaccionData[TRAFICANTES][PickupOut_X] = 1073.1631;
	FaccionData[TRAFICANTES][PickupOut_Y] = -345.3519;
	FaccionData[TRAFICANTES][PickupOut_Z] = 73.9922;
	FaccionData[TRAFICANTES][PickupOut_ZZ] = 360;
	FaccionData[TRAFICANTES][PickupIn_X] = 2532.2322;
	FaccionData[TRAFICANTES][PickupIn_Y] = -1281.7468;
	FaccionData[TRAFICANTES][PickupIn_Z] = 1048.2891;
	FaccionData[TRAFICANTES][PickupIn_ZZ] = 271.4886;
	FaccionData[TRAFICANTES][InteriorFaccion] = 2;
	FaccionData[TRAFICANTES][PickupidOutF] = CreateFaccionDynamicPickup(1279, TRAFICANTES, FaccionData[TRAFICANTES][PickupOut_X], FaccionData[TRAFICANTES][PickupOut_Y], FaccionData[TRAFICANTES][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[TRAFICANTES][PickupidInF] = CreateFaccionDynamicPickup(1279, TRAFICANTES, FaccionData[TRAFICANTES][PickupIn_X], FaccionData[TRAFICANTES][PickupIn_Y], FaccionData[TRAFICANTES][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[TRAFICANTES][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[TRAFICANTES][PrecioFaccion] = 0;
	FaccionData[TRAFICANTES][Lock] 				= 0;
	FaccionData[TRAFICANTES][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[TRAFICANTES][Family] = true;
	FaccionData[TRAFICANTES][Radio] = false;

	FaccionesRangos[TRAFICANTES][0]  = "Patron"; 				RangosSkins[TRAFICANTES][0][0] = 72; 																																																																									FaccionData[TRAFICANTES][Paga][0] = 430;
	FaccionesRangos[TRAFICANTES][1]  = "Mano Derecha"; 			RangosSkins[TRAFICANTES][1][0] = 73;  	RangosSkins[TRAFICANTES][1][1] = 261;	RangosSkins[TRAFICANTES][1][2] = 183;	RangosSkins[TRAFICANTES][1][3] = 131;	RangosSkins[TRAFICANTES][1][4] = 133;	RangosSkins[TRAFICANTES][1][5] = 4;		RangosSkins[TRAFICANTES][1][6] = 5;		RangosSkins[TRAFICANTES][1][7] = 6;	FaccionData[TRAFICANTES][Paga][1] = 400;
	FaccionesRangos[TRAFICANTES][2]  = "Vendedor de Armas"; 	RangosSkins[TRAFICANTES][2][0] = 73; 	RangosSkins[TRAFICANTES][2][1]	= 261; 	RangosSkins[TRAFICANTES][2][2] = 183;	RangosSkins[TRAFICANTES][2][3] = 131;	RangosSkins[TRAFICANTES][2][4] = 133;	RangosSkins[TRAFICANTES][2][5] = 4;		RangosSkins[TRAFICANTES][2][6] = 5;		RangosSkins[TRAFICANTES][2][7] = 6;	FaccionData[TRAFICANTES][Paga][2] = 370;
	FaccionesRangos[TRAFICANTES][3]  = "Vendedor de Drogas"; 	RangosSkins[TRAFICANTES][3][0] = 73; 	RangosSkins[TRAFICANTES][3][1]	= 261; 	RangosSkins[TRAFICANTES][3][2] = 183;	RangosSkins[TRAFICANTES][3][3] = 131;	RangosSkins[TRAFICANTES][3][4] = 133;	RangosSkins[TRAFICANTES][3][5] = 4;		RangosSkins[TRAFICANTES][3][6] = 5;		RangosSkins[TRAFICANTES][3][7] = 6;	FaccionData[TRAFICANTES][Paga][3] = 370;
	FaccionesRangos[TRAFICANTES][4]  = "Pichón"; 				RangosSkins[TRAFICANTES][4][0] = 73;   RangosSkins[TRAFICANTES][4][1]	= 261; 	RangosSkins[TRAFICANTES][4][2] = 183;	RangosSkins[TRAFICANTES][4][3] = 131;	RangosSkins[TRAFICANTES][4][4] = 133;	RangosSkins[TRAFICANTES][4][5] = 4;		RangosSkins[TRAFICANTES][4][6] = 5;		RangosSkins[TRAFICANTES][4][7] = 6;	FaccionData[TRAFICANTES][Paga][4] = 370;

// LA COSA NOSTRA ID - 4
	format(FaccionData[LCN][NameFaccion], MAX_FACCION_NAME, "LCN");
	FaccionData[LCN][Extorsion] = 0;
	FaccionData[LCN][AlmacenX][0] = 679.22473144531;
	FaccionData[LCN][AlmacenY][0] = 1843.6361083984;
	FaccionData[LCN][AlmacenZ][0] = 5.5982542037964;
	FaccionData[LCN][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[LCN][Spawn_X][0] = 1132.9468;
	FaccionData[LCN][Spawn_Y][0] = -2036.7697;
	FaccionData[LCN][Spawn_Z][0] = 69.0078;
	FaccionData[LCN][Spawn_ZZ][0] = 269.1363;
	FaccionData[LCN][PickupOut_X] = 1124.0889;
	FaccionData[LCN][PickupOut_Y] = -2037.1730;
	FaccionData[LCN][PickupOut_Z] = 69.8851;
	FaccionData[LCN][PickupOut_ZZ] = 263.7051;
	FaccionData[LCN][PickupIn_X] = 1261.6130;
	FaccionData[LCN][PickupIn_Y] = -785.2961;
	FaccionData[LCN][PickupIn_Z] = 1091.9063;
	FaccionData[LCN][PickupIn_ZZ] = 272.4865;
	FaccionData[LCN][InteriorFaccion] = 5;
	FaccionData[LCN][PickupidOutF] = CreateFaccionDynamicPickup(1254, LCN, FaccionData[LCN][PickupOut_X], FaccionData[LCN][PickupOut_Y], FaccionData[LCN][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[LCN][PickupidInF] = CreateFaccionDynamicPickup(1254, LCN, FaccionData[LCN][PickupIn_X], FaccionData[LCN][PickupIn_Y], FaccionData[LCN][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[LCN][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[LCN][PrecioFaccion] = 0;
	FaccionData[LCN][Lock] 				= 0;
	FaccionData[LCN][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[LCN][Family] = true;
	FaccionData[LCN][Radio] = false;

	FaccionesRangos[LCN][0]  = "Capi di tutti capi"; 	RangosSkins[LCN][0][0] = 113; 	RangosSkins[LCN][0][1] = 216;	RangosSkins[LCN][0][2] = 3;	FaccionData[LCN][Paga][0] = 430;
	FaccionesRangos[LCN][1]  = "Don"; 					RangosSkins[LCN][1][0] = 126;  RangosSkins[LCN][1][1] = 216;	RangosSkins[LCN][1][2] = 3;	FaccionData[LCN][Paga][1] = 450;
	FaccionesRangos[LCN][2]  = "Sottocapo"; 			RangosSkins[LCN][2][0] = 111; 	RangosSkins[LCN][2][1]	= 141;  								FaccionData[LCN][Paga][2] = 400;
	FaccionesRangos[LCN][3]  = "Consigliere"; 			RangosSkins[LCN][3][0] = 98; 	RangosSkins[LCN][3][1] = 141;									FaccionData[LCN][Paga][3] = 400;
	FaccionesRangos[LCN][4]  = "Capo"; 					RangosSkins[LCN][4][0] = 125; 	RangosSkins[LCN][4][1] = 141;									FaccionData[LCN][Paga][4] = 370;
	FaccionesRangos[LCN][5]  = "Soldado"; 				RangosSkins[LCN][5][0] = 124; 	RangosSkins[LCN][5][1] = 141;									FaccionData[LCN][Paga][5] = 370;
	FaccionesRangos[LCN][6]  = "Asociado"; 				RangosSkins[LCN][6][0] = 127; 	RangosSkins[LCN][6][1] = 141;									FaccionData[LCN][Paga][6] = 370;

// YAKUZA ID - 5
	format(FaccionData[YKZ][NameFaccion], MAX_FACCION_NAME, "Yakuza");
	FaccionData[YKZ][Extorsion] = 0;
	FaccionData[YKZ][AlmacenX][0] = -2178.54296875;
	FaccionData[YKZ][AlmacenY][0] = 715.53643798828;
	FaccionData[YKZ][AlmacenZ][0] = 53.890625;
	FaccionData[YKZ][AlmacenX][1] = 0;
	FaccionData[YKZ][AlmacenY][1] = 0;
	FaccionData[YKZ][AlmacenZ][1] = 0;
	FaccionData[YKZ][Spawn_X][0] = -2279.9204;
	FaccionData[YKZ][Spawn_Y][0] = 2300.8733;
	FaccionData[YKZ][Spawn_Z][0] = 4.9637;
	FaccionData[YKZ][Spawn_ZZ][0] = 272.4753;
	FaccionData[YKZ][PickupOut_X] = -2281.6987;
	FaccionData[YKZ][PickupOut_Y] = 2288.2117;
	FaccionData[YKZ][PickupOut_Z] = 4.9706;
	FaccionData[YKZ][PickupOut_ZZ] = 265.5353;
	FaccionData[YKZ][PickupIn_X] = 2317.8542;
	FaccionData[YKZ][PickupIn_Y] = -1026.7068;
	FaccionData[YKZ][PickupIn_Z] = 1050.2178;
	FaccionData[YKZ][PickupIn_ZZ] = 0.7340;
	FaccionData[YKZ][InteriorFaccion] = 9;
	FaccionData[YKZ][PickupidOutF] = CreateFaccionDynamicPickup(1254, YKZ, FaccionData[YKZ][PickupOut_X], FaccionData[YKZ][PickupOut_Y], FaccionData[YKZ][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[YKZ][PickupidInF] = CreateFaccionDynamicPickup(1254, YKZ, FaccionData[YKZ][PickupIn_X], FaccionData[YKZ][PickupIn_Y], FaccionData[YKZ][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[YKZ][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[YKZ][PrecioFaccion] = 0;
	FaccionData[YKZ][Lock] 				= 0;
	FaccionData[YKZ][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[YKZ][Family] = true;
	FaccionData[YKZ][Radio] = false;

	FaccionesRangos[YKZ][0]  = "Oyabun"; 			RangosSkins[YKZ][0][0] = 208; 	RangosSkins[YKZ][0][1] = 228;	 RangosSkins[YKZ][0][2] = 263; 	FaccionData[YKZ][Paga][0] = 500;
	FaccionesRangos[YKZ][1]  = "Wakashu"; 			RangosSkins[YKZ][1][0] = 186;  RangosSkins[YKZ][1][1] = 263;										FaccionData[YKZ][Paga][1] = 480;
	FaccionesRangos[YKZ][2]  = "Wakagashira"; 		RangosSkins[YKZ][2][0] = 120;  RangosSkins[YKZ][2][1] = 224;										FaccionData[YKZ][Paga][2] = 450;
	FaccionesRangos[YKZ][3]  = "Shateigashira"; 	RangosSkins[YKZ][3][0] = 123; 	RangosSkins[YKZ][3][1]	= 169; 										FaccionData[YKZ][Paga][3] = 420;
	FaccionesRangos[YKZ][4]  = "Kyodai"; 			RangosSkins[YKZ][4][0] = 122; 	RangosSkins[YKZ][4][1] = 169;										FaccionData[YKZ][Paga][4] = 400;
	FaccionesRangos[YKZ][5]  = "Shatei"; 			RangosSkins[YKZ][5][0] = 121; 	RangosSkins[YKZ][5][1] = 169;										FaccionData[YKZ][Paga][5] = 370;

// TAXIS ID - 6
	format(FaccionData[TAXI][NameFaccion], MAX_FACCION_NAME, "Taxistas");
	FaccionData[TAXI][Extorsion] = 0;
	FaccionData[TAXI][Spawn_X][0] = 1754.0756;
	FaccionData[TAXI][Spawn_Y][0] = -1912.3319;
	FaccionData[TAXI][Spawn_Z][0] = 13.5679;
	FaccionData[TAXI][Spawn_ZZ][0] = 269.3793;
	FaccionData[TAXI][Spawn_X][1] = -1973.7559;
	FaccionData[TAXI][Spawn_Y][1] = 162.0670;
	FaccionData[TAXI][Spawn_Z][1] = 27.6940;
	FaccionData[TAXI][Spawn_ZZ][1] = 180.3988;
	FaccionData[TAXI][PickupOut_X] = 1743.0270;
	FaccionData[TAXI][PickupOut_Y] = -1864.1876;
	FaccionData[TAXI][PickupOut_Z] = 13.5742;
	FaccionData[TAXI][PickupOut_ZZ] = 1.1633;
	FaccionData[TAXI][PickupIn_X] = 2215.1392;
	FaccionData[TAXI][PickupIn_Y] = -1150.6198;
	FaccionData[TAXI][PickupIn_Z] = 1025.7969;
	FaccionData[TAXI][PickupIn_ZZ] = 268.8355;
	FaccionData[TAXI][InteriorFaccion] = 15;
	FaccionData[TAXI][PickupidOutF] = CreateFaccionDynamicPickup(1239, TAXI, FaccionData[TAXI][PickupOut_X], FaccionData[TAXI][PickupOut_Y], FaccionData[TAXI][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[TAXI][PickupidInF] = CreateFaccionDynamicPickup(1239, TAXI, FaccionData[TAXI][PickupIn_X], FaccionData[TAXI][PickupIn_Y], FaccionData[TAXI][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[TAXI][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[TAXI][PrecioFaccion] = 0;
	FaccionData[TAXI][Lock] = 0;
	FaccionData[TAXI][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[TAXI][Family] = false;
	FaccionData[TAXI][Radio] = true;

	FaccionesRangos[TAXI][0]  = "Director"; 			RangosSkins[TAXI][0][0] = 61;	RangosSkins[TAXI][0][1] = 69;  	FaccionData[TAXI][Paga][0] = 700;
	FaccionesRangos[TAXI][1]  = "Sub Director"; 		RangosSkins[TAXI][1][0] = 240;	RangosSkins[TAXI][1][1] = 69;  	FaccionData[TAXI][Paga][1] = 650;
	FaccionesRangos[TAXI][2]  = "Instructor";	RangosSkins[TAXI][2][0] = 240;	RangosSkins[TAXI][2][1] = 69;  	FaccionData[TAXI][Paga][2] = 600;
	FaccionesRangos[TAXI][3]  = "Conductor de Taxí";	RangosSkins[TAXI][3][0] = 255; 	RangosSkins[TAXI][3][1] = 69;  	FaccionData[TAXI][Paga][3] = 550;
	FaccionesRangos[TAXI][4]  = "Conductor de Autobús"; RangosSkins[TAXI][4][0] = 255; 	RangosSkins[TAXI][4][1] = 69;  	FaccionData[TAXI][Paga][4] = 500;
	FaccionesRangos[TAXI][5]  = "Conductor de Tren"; 	RangosSkins[TAXI][5][0] = 253; 	RangosSkins[TAXI][5][1] = 69;  	FaccionData[TAXI][Paga][5] = 450;
	FaccionesRangos[TAXI][6]  = "Principiante";	RangosSkins[TAXI][6][0] = 36; 	RangosSkins[TAXI][6][1] = 69;  	FaccionData[TAXI][Paga][6] = 350;

// SFPD ID - 7
	format(FaccionData[SFPD][NameFaccion], MAX_FACCION_NAME, "SFPD");
	FaccionData[SFPD][Extorsion] = 0;
	FaccionData[SFPD][Spawn_X][0] = -1605.7463;
	FaccionData[SFPD][Spawn_Y][0] = 676.1434;
	FaccionData[SFPD][Spawn_Z][0] = -5.2422;
	FaccionData[SFPD][Spawn_ZZ][0] = 359.9802;
	FaccionData[SFPD][PickupOut_X] = -1605.4266;
	FaccionData[SFPD][PickupOut_Y] = 711.5508;
	FaccionData[SFPD][PickupOut_Z] = 13.8672;
	FaccionData[SFPD][PickupOut_ZZ] = 0.3981;
	FaccionData[SFPD][PickupIn_X] = 246.2979;
	FaccionData[SFPD][PickupIn_Y] = 108.0498;
	FaccionData[SFPD][PickupIn_Z] = 1003.2188;
	FaccionData[SFPD][PickupIn_ZZ] = 358.3208;
	FaccionData[SFPD][InteriorFaccion] = 10;
	FaccionData[SFPD][PickupidOutF] = CreateFaccionDynamicPickup(1247, SFPD, FaccionData[SFPD][PickupOut_X], FaccionData[SFPD][PickupOut_Y], FaccionData[SFPD][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[SFPD][PickupidInF] = CreateFaccionDynamicPickup(1247, SFPD, FaccionData[SFPD][PickupIn_X], FaccionData[SFPD][PickupIn_Y], FaccionData[SFPD][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[SFPD][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[SFPD][PrecioFaccion] = 0;
	FaccionData[SFPD][Lock] 				= 0;
	FaccionData[SFPD][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[SFPD][Family] = false;
	FaccionData[SFPD][Radio] = true;

	FaccionesRangos[SFPD][0]  = "Comisario";	RangosSkins[SFPD][0][0]     = 283; 	RangosSkins[SFPD][0][1]     = 285; 	RangosSkins[SFPD][0][2]     = 284;  RangosSkins[SFPD][0][3]     = 150; 	RangosSkins[SFPD][0][4]     = 101; 	RangosSkins[SFPD][0][5]     = 250; 	RangosSkins[SFPD][0][6]     = 60;    RangosSkins[SFPD][0][7]    = 170; 	RangosSkins[SFPD][0][8]     = 184; 	RangosSkins[SFPD][0][9]     = 148; 	RangosSkins[SFPD][0][10]    = 191;		FaccionData[SFPD][Paga][0] = 600;
	FaccionesRangos[SFPD][1]  = "Sub-Comisario";RangosSkins[SFPD][1][0] 	= 288;  RangosSkins[SFPD][1][1] 	= 285; 	RangosSkins[SFPD][1][2] 	= 284;	RangosSkins[SFPD][1][3] 	= 150; 	RangosSkins[SFPD][1][4] 	= 101; 	RangosSkins[SFPD][1][5] 	= 250; 	RangosSkins[SFPD][1][6] 	= 60; 	RangosSkins[SFPD][1][7] 	= 170; 	RangosSkins[SFPD][1][8] 	= 184;	RangosSkins[SFPD][1][9] 	= 148; 	RangosSkins[SFPD][1][10] 	= 191;	 	FaccionData[SFPD][Paga][1] = 550;
    FaccionesRangos[SFPD][2]  = "Capitan"; 		RangosSkins[SFPD][2][0] 	= 282; 	RangosSkins[SFPD][2][1]		= 285; 	RangosSkins[SFPD][2][2] 	= 284;  RangosSkins[SFPD][2][3] 	= 150; 	RangosSkins[SFPD][2][4] 	= 101; 	RangosSkins[SFPD][2][5] 	= 250; 	RangosSkins[SFPD][2][6] 	= 60; 	RangosSkins[SFPD][2][7] 	= 170; 	RangosSkins[SFPD][2][8] 	= 184;  RangosSkins[SFPD][2][9] 	= 148; 	RangosSkins[SFPD][2][10] 	= 191;	 	FaccionData[SFPD][Paga][2] = 500;
	FaccionesRangos[SFPD][3]  = "Teniente"; 	RangosSkins[SFPD][3][0] 	= 265; 	RangosSkins[SFPD][3][1]		= 285; 	RangosSkins[SFPD][3][2] 	= 284; 	RangosSkins[SFPD][3][3] 	= 150; 	RangosSkins[SFPD][3][4] 	= 101; 	RangosSkins[SFPD][3][5] 	= 250; 	RangosSkins[SFPD][3][6] 	= 60; 	RangosSkins[SFPD][3][7] 	= 170; 	RangosSkins[SFPD][3][8] 	= 184;  RangosSkins[SFPD][3][9] 	= 148; 	RangosSkins[SFPD][3][10] 	= 191;	 	FaccionData[SFPD][Paga][3] = 500;
	FaccionesRangos[SFPD][4]  = "Sargento"; 	RangosSkins[SFPD][4][0] 	= 267; 	RangosSkins[SFPD][4][1] 	= 285; 	RangosSkins[SFPD][4][2] 	= 284;	RangosSkins[SFPD][4][3] 	= 150; 	RangosSkins[SFPD][4][4] 	= 101; 	RangosSkins[SFPD][4][5] 	= 250; 	RangosSkins[SFPD][4][6] 	= 60; 	RangosSkins[SFPD][4][7] 	= 170; 	RangosSkins[SFPD][4][8] 	= 184;	RangosSkins[SFPD][4][9] 	= 148; 	RangosSkins[SFPD][4][10] 	= 191;	 	FaccionData[SFPD][Paga][4] = 500;
	FaccionesRangos[SFPD][5]  = "Cabo";			RangosSkins[SFPD][5][0] 	= 281; 	RangosSkins[SFPD][5][1] 	= 285; 	RangosSkins[SFPD][5][2] 	= 284; 	RangosSkins[SFPD][5][3] 	= 150; 	RangosSkins[SFPD][5][4] 	= 101; 	RangosSkins[SFPD][5][5] 	= 250; 	RangosSkins[SFPD][5][6] 	= 60; 	RangosSkins[SFPD][5][7] 	= 170; 	RangosSkins[SFPD][5][8] 	= 184; 	RangosSkins[SFPD][5][9] 	= 148; 	RangosSkins[SFPD][5][10] 	= 191;	 	FaccionData[SFPD][Paga][5] = 400;
	FaccionesRangos[SFPD][6]  = "Oficial"; 		RangosSkins[SFPD][6][0] 	= 280; 	RangosSkins[SFPD][6][1] 	= 285; 	RangosSkins[SFPD][6][2] 	= 284;	RangosSkins[SFPD][6][3] 	= 150; 	RangosSkins[SFPD][6][4] 	= 101; 	RangosSkins[SFPD][6][5] 	= 250; 	RangosSkins[SFPD][6][6] 	= 60; 	RangosSkins[SFPD][6][7] 	= 170; 	RangosSkins[SFPD][6][8] 	= 184;  RangosSkins[SFPD][6][9] 	= 148; 	RangosSkins[SFPD][6][10] 	= 191;	 	FaccionData[SFPD][Paga][6] = 400;
	FaccionesRangos[SFPD][7]  = "Cadete";		RangosSkins[SFPD][7][0] 	= 71; 	RangosSkins[SFPD][7][1] 	= 285; 	RangosSkins[SFPD][8][2] 	= 284;	RangosSkins[SFPD][7][3] 	= 150; 	RangosSkins[SFPD][7][4] 	= 101; 	RangosSkins[SFPD][7][5] 	= 250; 	RangosSkins[SFPD][7][6] 	= 60; 	RangosSkins[SFPD][7][7] 	= 170; 	RangosSkins[SFPD][7][8] 	= 184; 	RangosSkins[SFPD][7][9] 	= 148; 	RangosSkins[SFPD][7][10] 	= 191;	 	FaccionData[SFPD][Paga][7] = 350;

// NFS ID - 8
	format(FaccionData[NFS][NameFaccion], MAX_FACCION_NAME, "NFS");
	FaccionData[NFS][Extorsion] = 0;
	FaccionData[NFS][Spawn_X][0] = 561.3279;
	FaccionData[NFS][Spawn_Y][0] = -1289.2629;
	FaccionData[NFS][Spawn_Z][0] = 17.2482;
	FaccionData[NFS][Spawn_ZZ][0] = 24.4206;
	FaccionData[NFS][Spawn_X][1] = -1954.0232;
	FaccionData[NFS][Spawn_Y][1] = 301.1528;
	FaccionData[NFS][Spawn_Z][1] = 35.4688;
	FaccionData[NFS][Spawn_ZZ][1] = 131.0429;
	FaccionData[NFS][PickupOut_X] = 535.2281;
	FaccionData[NFS][PickupOut_Y] = -1293.8947;
	FaccionData[NFS][PickupOut_Z] = 17.2422;
	FaccionData[NFS][PickupOut_ZZ] = 4.3904;
	FaccionData[NFS][PickupIn_X] = 1494.3948;
	FaccionData[NFS][PickupIn_Y] = 1309.5096;
	FaccionData[NFS][PickupIn_Z] = 1093.2820;
	FaccionData[NFS][PickupIn_ZZ] = 175.4568;
	FaccionData[NFS][InteriorFaccion] = 3;
	FaccionData[NFS][PickupidOutF] = CreateFaccionDynamicPickup(1239, NFS, FaccionData[NFS][PickupOut_X], FaccionData[NFS][PickupOut_Y], FaccionData[NFS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[NFS][PickupidInF] = CreateFaccionDynamicPickup(1239, NFS, FaccionData[NFS][PickupIn_X], FaccionData[NFS][PickupIn_Y], FaccionData[NFS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[NFS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[NFS][PrecioFaccion] = 0;
	FaccionData[NFS][Lock] 				= 0;
	FaccionData[NFS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[NFS][Family] = true;
	FaccionData[NFS][Radio] = false;

	FaccionesRangos[NFS][0]  = "Jefe"; 			RangosSkins[NFS][0][0] = 185; 	RangosSkins[NFS][0][1] = 29; RangosSkins[NFS][0][2] = 170; RangosSkins[NFS][0][3] = 192; 	FaccionData[NFS][Paga][0] = 350;
	FaccionesRangos[NFS][1]  = "Encargado"; 	RangosSkins[NFS][1][0] = 185;  RangosSkins[NFS][1][1]	= 29; RangosSkins[NFS][1][2] = 170; RangosSkins[NFS][1][3] = 192;	FaccionData[NFS][Paga][1] = 340;
	FaccionesRangos[NFS][2]  = "Vendedor"; 		RangosSkins[NFS][2][0] = 185; 	RangosSkins[NFS][2][1]	= 29; RangosSkins[NFS][2][2] = 170; RangosSkins[NFS][2][3] = 192;  FaccionData[NFS][Paga][2] = 320;
	FaccionesRangos[NFS][3]  = "Conductor"; 	RangosSkins[NFS][3][0] = 185; 	RangosSkins[NFS][3][1] = 29; RangosSkins[NFS][3][2] = 170; RangosSkins[NFS][3][3] = 192;	FaccionData[NFS][Paga][3] = 320;

// SFMD ID - 9
	format(FaccionData[SFMD][NameFaccion], MAX_FACCION_NAME, "SFMD");
	FaccionData[SFMD][Extorsion] = 0;
	FaccionData[SFMD][Spawn_X][0] = -2682.5623;
	FaccionData[SFMD][Spawn_Y][0] = 637.0119;
	FaccionData[SFMD][Spawn_Z][0] = 14.4531;
	FaccionData[SFMD][Spawn_ZZ][0] = 179.4986;
	FaccionData[SFMD][Spawn_X][1] = -2060.1667;
	FaccionData[SFMD][Spawn_Y][1] = 95.2241;
	FaccionData[SFMD][Spawn_Z][1] = 28.3906;
	FaccionData[SFMD][Spawn_ZZ][1] = 176.9378;
	FaccionData[SFMD][PickupOut_X] = -2655.1401;
	FaccionData[SFMD][PickupOut_Y] = 640.1343;
	FaccionData[SFMD][PickupOut_Z] = 14.4545;
	FaccionData[SFMD][PickupOut_ZZ] = 181.8197;
	FaccionData[SFMD][PickupIn_X] = 1673.9072;
	FaccionData[SFMD][PickupIn_Y] = 731.5582;
	FaccionData[SFMD][PickupIn_Z] = 10.8768;
	FaccionData[SFMD][PickupIn_ZZ] = 180;
	FaccionData[SFMD][InteriorFaccion] = 11;
	FaccionData[SFMD][PickupidOutF] = CreateFaccionDynamicPickup(1239, SFMD, FaccionData[SFMD][PickupOut_X], FaccionData[SFMD][PickupOut_Y], FaccionData[SFMD][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[SFMD][PickupidInF] = CreateFaccionDynamicPickup(1239, SFMD, FaccionData[SFMD][PickupIn_X], FaccionData[SFMD][PickupIn_Y], FaccionData[SFMD][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[SFMD][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[SFMD][PrecioFaccion] = 0;
	FaccionData[SFMD][Lock] = 0;
	FaccionData[SFMD][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[SFMD][Family] = false;
	FaccionData[SFMD][Radio] = true;

	FaccionesRangos[SFMD][0]  = "Director"; 		RangosSkins[SFMD][0][0] = 70; 	RangosSkins[SFMD][0][1] = 150; 	RangosSkins[SFMD][0][2] = 277; 	RangosSkins[SFMD][0][3] = 278; 	RangosSkins[SFMD][0][4]	= 279;		FaccionData[SFMD][Paga][0] = 700;
	FaccionesRangos[SFMD][1]  = "Sub Director"; 	RangosSkins[SFMD][1][0] = 223;  RangosSkins[SFMD][1][1] = 191;  RangosSkins[SFMD][1][2] = 277; 	RangosSkins[SFMD][1][3] = 278; 	RangosSkins[SFMD][1][4]	= 279;FaccionData[SFMD][Paga][1] = 600;
	FaccionesRangos[SFMD][2]  = "Jefe de Bomberos";	RangosSkins[SFMD][2][0] = 279; 	RangosSkins[SFMD][2][1]	= 191;																										FaccionData[SFMD][Paga][2] = 650;
	FaccionesRangos[SFMD][3]  = "Doctor"; 			RangosSkins[SFMD][3][0] = 156; 	RangosSkins[SFMD][3][1]	= 191; 	RangosSkins[SFMD][3][2]	= 274; 	RangosSkins[SFMD][3][3]	= 275; 	RangosSkins[SFMD][3][4]	= 276;		FaccionData[SFMD][Paga][3] = 500;
	FaccionesRangos[SFMD][4]  = "Paramédico"; 		RangosSkins[SFMD][4][0] = 274; 	RangosSkins[SFMD][4][1] = 191; 	RangosSkins[SFMD][4][2]	= 274; 	RangosSkins[SFMD][4][3]	= 275; 	RangosSkins[SFMD][4][4]	= 276;FaccionData[SFMD][Paga][4] = 450;
	FaccionesRangos[SFMD][5]  = "Bombero"; 			RangosSkins[SFMD][5][0] = 277; 	RangosSkins[SFMD][5][1] = 278; 	RangosSkins[SFMD][5][2]	= 191; 																		FaccionData[SFMD][Paga][5] = 550;
	FaccionesRangos[SFMD][6]  = "Apréndiz"; 		RangosSkins[SFMD][6][0] = 275; 	RangosSkins[SFMD][6][1] = 191; 																								FaccionData[SFMD][Paga][6] = 400;

// CNN ID - 10
	format(FaccionData[CNN][NameFaccion], MAX_FACCION_NAME, "CNN");
	FaccionData[CNN][Extorsion] = 0;
	FaccionData[CNN][Spawn_X][0] = 742.8419;
	FaccionData[CNN][Spawn_Y][0] = -1343.8962;
	FaccionData[CNN][Spawn_Z][0] = 13.5198;
	FaccionData[CNN][Spawn_ZZ][0] = 268.8462;
	FaccionData[CNN][PickupOut_X] = 647.8735;
	FaccionData[CNN][PickupOut_Y] = -1359.2740;
	FaccionData[CNN][PickupOut_Z] = 13.5826;
	FaccionData[CNN][PickupOut_ZZ] = 91.5791;
	FaccionData[CNN][PickupIn_X] = 2150.8496;
	FaccionData[CNN][PickupIn_Y] = 1602.8657;
	FaccionData[CNN][PickupIn_Z] = 1001.9693;
	FaccionData[CNN][PickupIn_ZZ] = 272.0121;
	FaccionData[CNN][InteriorFaccion]	= 1;
	FaccionData[CNN][PickupidOutF] = CreateFaccionDynamicPickup(1239, CNN, FaccionData[CNN][PickupOut_X], FaccionData[CNN][PickupOut_Y], FaccionData[CNN][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[CNN][PickupidInF] = CreateFaccionDynamicPickup(1239, CNN, FaccionData[CNN][PickupIn_X], FaccionData[CNN][PickupIn_Y], FaccionData[CNN][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[CNN][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[CNN][PrecioFaccion] = 0;
	FaccionData[CNN][Lock] 				= 0;
	FaccionData[CNN][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[CNN][Family] = false;
	FaccionData[CNN][Radio] = true;

	FaccionesRangos[CNN][0]  = "Director"; 			RangosSkins[CNN][0][0] = 290; 	RangosSkins[CNN][0][1] = 40; 	RangosSkins[CNN][0][2] = 219; 	FaccionData[CNN][Paga][0] = 500;
	FaccionesRangos[CNN][1]  = "Sub Director";		RangosSkins[CNN][1][0] = 223;  RangosSkins[CNN][1][1]	= 40;	RangosSkins[CNN][1][2] = 219; 	FaccionData[CNN][Paga][1] = 450;
	FaccionesRangos[CNN][2]  = "Supervisor";		RangosSkins[CNN][2][0] = 223;  RangosSkins[CNN][2][1]	= 40;	RangosSkins[CNN][2][2] = 219; 	FaccionData[CNN][Paga][2] = 450;
	FaccionesRangos[CNN][3]  = "Cronísta";			RangosSkins[CNN][3][0] = 223;  RangosSkins[CNN][3][1]	= 40;	RangosSkins[CNN][3][2] = 219; 	FaccionData[CNN][Paga][3] = 400;
	FaccionesRangos[CNN][4]  = "Auxiliar"; 			RangosSkins[CNN][4][0] = 188; 	RangosSkins[CNN][4][1]	= 40; 	RangosSkins[CNN][4][2] = 219; 	FaccionData[CNN][Paga][4] = 350;


// DETECTIVES ID - 11
	format(FaccionData[ADP][NameFaccion], MAX_FACCION_NAME, "Detectives");
	FaccionData[ADP][Extorsion] = 0;
	FaccionData[ADP][Spawn_X][0] = -2081.1680;
	FaccionData[ADP][Spawn_Y][0] = 1418.5831;
	FaccionData[ADP][Spawn_Z][0] = 7.1007;
	FaccionData[ADP][Spawn_ZZ][0] = 177.9662;
	FaccionData[ADP][PickupOut_X] = -2076.1250;
	FaccionData[ADP][PickupOut_Y] = 1421.0328;
	FaccionData[ADP][PickupOut_Z] = 7.1295;
	FaccionData[ADP][PickupOut_ZZ] = 178.4612;
	FaccionData[ADP][PickupIn_X] = 2602.4689941406;
	FaccionData[ADP][PickupIn_Y] = 1352.4586181641;
	FaccionData[ADP][PickupIn_Z] = 78.476387023926;
	FaccionData[ADP][PickupIn_ZZ] = 171.9440;
	FaccionData[ADP][InteriorFaccion]	= 9;
	FaccionData[ADP][PickupidOutF] = CreateFaccionDynamicPickup(1239, ADP, FaccionData[ADP][PickupOut_X], FaccionData[ADP][PickupOut_Y], FaccionData[ADP][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[ADP][PickupidInF] = CreateFaccionDynamicPickup(1239, ADP, FaccionData[ADP][PickupIn_X], FaccionData[ADP][PickupIn_Y], FaccionData[ADP][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[ADP][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[ADP][PrecioFaccion] = 0;
	FaccionData[ADP][Lock] = 0;
	FaccionData[ADP][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[ADP][Family] = false;
	FaccionData[ADP][Radio] = true;

	FaccionesRangos[ADP][0]  = "Director"; 				RangosSkins[ADP][0][0] = 187; 	RangosSkins[ADP][0][1]  = 91; 									FaccionData[ADP][Paga][0] = 450;
	FaccionesRangos[ADP][1]  = "Sub Director";			RangosSkins[ADP][1][0] = 166;  RangosSkins[ADP][1][1]	= 165;  RangosSkins[ADP][1][2]	= 91;	FaccionData[ADP][Paga][1] = 430;
	FaccionesRangos[ADP][2]  = "Jefe de Detectives"; 	RangosSkins[ADP][2][0] = 166; 	RangosSkins[ADP][2][1]	= 165; 	RangosSkins[ADP][2][2]	= 93; 	FaccionData[ADP][Paga][2] = 400;
	FaccionesRangos[ADP][3]  = "Jefe de Guardaespaldas";RangosSkins[ADP][3][0] = 164; 	RangosSkins[ADP][3][1]  = 163; 	RangosSkins[ADP][3][2]	= 93;	FaccionData[ADP][Paga][3] = 370;
	FaccionesRangos[ADP][4]  = "Detective";				RangosSkins[ADP][4][0] = 164; 	RangosSkins[ADP][4][1]  = 163; 	RangosSkins[ADP][4][2]	= 93;	FaccionData[ADP][Paga][4] = 350;
	FaccionesRangos[ADP][5]  = "Guardaespaldas"; 		RangosSkins[ADP][5][0] = 164; 	RangosSkins[ADP][5][1] = 163; 	RangosSkins[ADP][5][2]	= 93;	FaccionData[ADP][Paga][5] = 350;

// CAMIONEROS ID - 12
	format(FaccionData[CAMIONEROS][NameFaccion], MAX_FACCION_NAME, "Camioneros");
	FaccionData[CAMIONEROS][Extorsion] = 0;
	FaccionData[CAMIONEROS][AlmacenX][0] = -557.5335;
	FaccionData[CAMIONEROS][AlmacenY][0] = -539.6166;
	FaccionData[CAMIONEROS][AlmacenZ][0] = 25.5234;
	FaccionData[CAMIONEROS][AlmacenX][1] = 0;
	FaccionData[CAMIONEROS][AlmacenY][1] = 0;
	FaccionData[CAMIONEROS][AlmacenZ][1] = 0;
	FaccionData[CAMIONEROS][Spawn_X][0] = -481.5168;
	FaccionData[CAMIONEROS][Spawn_Y][0] = -525.3063;
	FaccionData[CAMIONEROS][Spawn_Z][0] = 25.5178;
	FaccionData[CAMIONEROS][Spawn_ZZ][0] = 357.6488;
	FaccionData[CAMIONEROS][PickupOut_X] = -516.1653;
	FaccionData[CAMIONEROS][PickupOut_Y] = -506.0323;
	FaccionData[CAMIONEROS][PickupOut_Z] = 25.5234;
	FaccionData[CAMIONEROS][PickupOut_ZZ] = 1.8267;
	FaccionData[CAMIONEROS][PickupIn_X] = 948.5826;
	FaccionData[CAMIONEROS][PickupIn_Y] = 2177.1912;
	FaccionData[CAMIONEROS][PickupIn_Z] = 1011.0234;
	FaccionData[CAMIONEROS][PickupIn_ZZ] = 173.6383;
	FaccionData[CAMIONEROS][InteriorFaccion]= 1;
	FaccionData[CAMIONEROS][PickupidOutF] = CreateFaccionDynamicPickup(1239, CAMIONEROS, FaccionData[CAMIONEROS][PickupOut_X], FaccionData[CAMIONEROS][PickupOut_Y], FaccionData[CAMIONEROS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[CAMIONEROS][PickupidInF] = CreateFaccionDynamicPickup(1239, CAMIONEROS, FaccionData[CAMIONEROS][PickupIn_X], FaccionData[CAMIONEROS][PickupIn_Y], FaccionData[CAMIONEROS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[CAMIONEROS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[CAMIONEROS][PrecioFaccion] = 0;
	FaccionData[CAMIONEROS][Lock] = 0;
	FaccionData[CAMIONEROS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[CAMIONEROS][Family] = true;
	FaccionData[CAMIONEROS][Radio] = false;

	FaccionesRangos[CAMIONEROS][0]  = "Empresario"; 		RangosSkins[CAMIONEROS][0][0] = 187; 											FaccionData[CAMIONEROS][Paga][0] = 450;
	FaccionesRangos[CAMIONEROS][1]  = "Encargado";			RangosSkins[CAMIONEROS][1][0] = 182;											FaccionData[CAMIONEROS][Paga][1] = 400;
	FaccionesRangos[CAMIONEROS][2]  = "Camionero Experto"; 	RangosSkins[CAMIONEROS][2][0] = 234; 	RangosSkins[CAMIONEROS][2][1] = 15; 		FaccionData[CAMIONEROS][Paga][2] = 370;
	FaccionesRangos[CAMIONEROS][3]  = "Camionero Novato"; 	RangosSkins[CAMIONEROS][3][0] = 206; 	RangosSkins[CAMIONEROS][3][1] = 15; 	FaccionData[CAMIONEROS][Paga][3] = 350;
	FaccionesRangos[CAMIONEROS][4]  = "Marinero"; 			RangosSkins[CAMIONEROS][4][0] = 95; 	RangosSkins[CAMIONEROS][4][1] = 15; 	FaccionData[CAMIONEROS][Paga][4] = 350;
	FaccionesRangos[CAMIONEROS][5]  = "Ayudante"; 			RangosSkins[CAMIONEROS][5][0] = 202; 	RangosSkins[CAMIONEROS][5][1] = 15; 	FaccionData[CAMIONEROS][Paga][5] = 300;

// TALLER_SF ID - 13
	format(FaccionData[TALLER_SF][NameFaccion], MAX_FACCION_NAME, "Taller SF");
	FaccionData[TALLER_SF][Extorsion] = 0;
	FaccionData[TALLER_SF][Spawn_X][0] = -2886.9814;
	FaccionData[TALLER_SF][Spawn_Y][0] = 491.8529;
	FaccionData[TALLER_SF][Spawn_Z][0] = 4.9066;
	FaccionData[TALLER_SF][Spawn_ZZ][0] = 175.1927;
	FaccionData[TALLER_SF][PickupOut_X] = -2880.8650;
	FaccionData[TALLER_SF][PickupOut_Y] = 493.2147;
	FaccionData[TALLER_SF][PickupOut_Z] = 4.9066;
	FaccionData[TALLER_SF][PickupOut_ZZ] = 179.5445;
	FaccionData[TALLER_SF][PickupIn_X] = 627.0047;
	FaccionData[TALLER_SF][PickupIn_Y] = -11.8298;
	FaccionData[TALLER_SF][PickupIn_Z] = 1000.9219;
	FaccionData[TALLER_SF][PickupIn_ZZ] = 80.4997;
	FaccionData[TALLER_SF][InteriorFaccion]= 1;
	FaccionData[TALLER_SF][PickupidOutF] = CreateFaccionDynamicPickup(1239, TALLER_SF, FaccionData[TALLER_SF][PickupOut_X], FaccionData[TALLER_SF][PickupOut_Y], FaccionData[TALLER_SF][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[TALLER_SF][PickupidInF] = CreateFaccionDynamicPickup(1239, TALLER_SF, FaccionData[TALLER_SF][PickupIn_X], FaccionData[TALLER_SF][PickupIn_Y], FaccionData[TALLER_SF][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[TALLER_SF][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[TALLER_SF][PrecioFaccion] = 0;
	FaccionData[TALLER_SF][Lock] = 0;
	FaccionData[TALLER_SF][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[TALLER_SF][Family] = false;
	FaccionData[TALLER_SF][Radio] = true;

	FaccionesRangos[TALLER_SF][0]  = "Empresario"; 			RangosSkins[TALLER_SF][0][0] = 42;	RangosSkins[TALLER_SF][0][1]	= 55; 																					FaccionData[TALLER_SF][Paga][0] = 460;
	FaccionesRangos[TALLER_SF][1]  = "Encargado";			RangosSkins[TALLER_SF][1][0] = 268;	RangosSkins[TALLER_SF][1][1]	= 55;	RangosSkins[TALLER_SF][1][2] = 58; 											FaccionData[TALLER_SF][Paga][1] = 430;
	FaccionesRangos[TALLER_SF][2]  = "Maquinista"; 			RangosSkins[TALLER_SF][2][0] = 16; 	RangosSkins[TALLER_SF][2][1] = 55;	RangosSkins[TALLER_SF][2][2] = 8;	RangosSkins[TALLER_SF][2][3]	= 55; 	FaccionData[TALLER_SF][Paga][2] = 400;
	FaccionesRangos[TALLER_SF][3]  = "Mecánico"; 			RangosSkins[TALLER_SF][3][0] = 50; 	RangosSkins[TALLER_SF][3][1] = 55;	RangosSkins[TALLER_SF][3][2] = 8;											FaccionData[TALLER_SF][Paga][3] = 370;
	FaccionesRangos[TALLER_SF][4]  = "Mecánico Novato"; 	RangosSkins[TALLER_SF][4][0] = 50; 	RangosSkins[TALLER_SF][4][1] = 55; 	RangosSkins[TALLER_SF][4][2] = 8;									FaccionData[TALLER_SF][Paga][4] = 350;

// LSPD ID - 14
	format(FaccionData[LSPD][NameFaccion], MAX_FACCION_NAME, "LSPD");
	FaccionData[LSPD][Extorsion] = 0;
	FaccionData[LSPD][Spawn_X][0] = 1568.3663;
	FaccionData[LSPD][Spawn_Y][0] = -1692.7303;
	FaccionData[LSPD][Spawn_Z][0] = 5.8906;
	FaccionData[LSPD][Spawn_ZZ][0] = 179.8354;
	FaccionData[LSPD][PickupOut_X] = 1555.3457;
	FaccionData[LSPD][PickupOut_Y] = -1675.6763;
	FaccionData[LSPD][PickupOut_Z] = 16.1953;
	FaccionData[LSPD][PickupOut_ZZ] = 88.9913;
	FaccionData[LSPD][PickupIn_X] = 246.8211;
	FaccionData[LSPD][PickupIn_Y] = 62.4470;
	FaccionData[LSPD][PickupIn_Z] = 1003.6406;
	FaccionData[LSPD][PickupIn_ZZ] = 0.6504;
	FaccionData[LSPD][InteriorFaccion]	= 6;
	FaccionData[LSPD][PickupidOutF] = CreateFaccionDynamicPickup(1247, LSPD, FaccionData[LSPD][PickupOut_X], FaccionData[LSPD][PickupOut_Y], FaccionData[LSPD][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[LSPD][PickupidInF] = CreateFaccionDynamicPickup(1247, LSPD, FaccionData[LSPD][PickupIn_X], FaccionData[LSPD][PickupIn_Y], FaccionData[LSPD][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[LSPD][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[LSPD][PrecioFaccion] = 0;
	FaccionData[LSPD][Lock] = 0;
	FaccionData[LSPD][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[LSPD][Family] = false;
	FaccionData[LSPD][Radio] = true;

    FaccionesRangos[LSPD][0]  = "Comisario";	RangosSkins[LSPD][0][0] = 283;	RangosSkins[LSPD][0][1]	= 150; 	RangosSkins[LSPD][0][2] = 101; 	RangosSkins[LSPD][0][3] = 250; 	RangosSkins[LSPD][0][4] = 60; 	RangosSkins[LSPD][0][5] = 170; 	RangosSkins[LSPD][0][6] = 184;  RangosSkins[LSPD][0][7] = 285; 	RangosSkins[LSPD][0][8] = 287;  	RangosSkins[LSPD][0][9] = 148;   	RangosSkins[LSPD][0][10] = 191; FaccionData[LSPD][Paga][0] = 600;
	FaccionesRangos[LSPD][1]  = "Sub-Comisario";RangosSkins[LSPD][1][0] = 288;  RangosSkins[LSPD][1][1]	= 150; 	RangosSkins[LSPD][1][2] = 101; 	RangosSkins[LSPD][1][3] = 250; 	RangosSkins[LSPD][1][4] = 60; 	RangosSkins[LSPD][1][5] = 170; 	RangosSkins[LSPD][1][6] = 184;  RangosSkins[LSPD][1][7] = 285; 	RangosSkins[LSPD][1][8] = 287;  	RangosSkins[LSPD][1][9] = 148;   	RangosSkins[LSPD][1][10] = 191; FaccionData[LSPD][Paga][1] = 550;
	FaccionesRangos[LSPD][2]  = "Capitán";		RangosSkins[LSPD][2][0] = 282; 	RangosSkins[LSPD][2][1]	= 150; 	RangosSkins[LSPD][2][2] = 101; 	RangosSkins[LSPD][2][3] = 250; 	RangosSkins[LSPD][2][4] = 60; 	RangosSkins[LSPD][2][5] = 170; 	RangosSkins[LSPD][2][6] = 184;  RangosSkins[LSPD][2][7] = 285; 	RangosSkins[LSPD][2][8] = 287;  	RangosSkins[LSPD][2][9] = 148;   	RangosSkins[LSPD][2][10] = 191; FaccionData[LSPD][Paga][2] = 500;
	FaccionesRangos[LSPD][3]  = "Teniente";		RangosSkins[LSPD][3][0] = 281; 	RangosSkins[LSPD][3][1] = 150;	RangosSkins[LSPD][3][2] = 101; 	RangosSkins[LSPD][3][3] = 250; 	RangosSkins[LSPD][3][4] = 60; 	RangosSkins[LSPD][3][5] = 170; 	RangosSkins[LSPD][3][6] = 184;  RangosSkins[LSPD][3][7] = 285; 	RangosSkins[LSPD][3][8] = 287;  	RangosSkins[LSPD][3][9] = 148;   	RangosSkins[LSPD][3][10] = 191; FaccionData[LSPD][Paga][3] = 500;
	FaccionesRangos[LSPD][4]  = "Sargento";		RangosSkins[LSPD][4][0] = 281; 	RangosSkins[LSPD][4][1] = 150;	RangosSkins[LSPD][4][2] = 101; 	RangosSkins[LSPD][4][3] = 250; 	RangosSkins[LSPD][4][4] = 60; 	RangosSkins[LSPD][4][5] = 170; 	RangosSkins[LSPD][4][6] = 184;  RangosSkins[LSPD][4][7] = 285; 	RangosSkins[LSPD][4][8] = 287;  	RangosSkins[LSPD][4][9] = 148;   	RangosSkins[LSPD][4][10] = 191; FaccionData[LSPD][Paga][4] = 500;
	FaccionesRangos[LSPD][5]  = "Cabo";			RangosSkins[LSPD][5][0] = 280; 	RangosSkins[LSPD][5][1] = 150;	RangosSkins[LSPD][5][2] = 101; 	RangosSkins[LSPD][5][3] = 250; 	RangosSkins[LSPD][5][4] = 60; 	RangosSkins[LSPD][5][5] = 170; 	RangosSkins[LSPD][5][6] = 184;  RangosSkins[LSPD][5][7] = 285; 	RangosSkins[LSPD][5][8] = 287;  	RangosSkins[LSPD][5][9] = 148;   	RangosSkins[LSPD][5][10] = 191; FaccionData[LSPD][Paga][5] = 450;
	FaccionesRangos[LSPD][6]  = "Oficial";		RangosSkins[LSPD][6][0] = 280; 	RangosSkins[LSPD][6][1] = 150;	RangosSkins[LSPD][6][2] = 101; 	RangosSkins[LSPD][6][3] = 250; 	RangosSkins[LSPD][6][4] = 60; 	RangosSkins[LSPD][6][5] = 170; 	RangosSkins[LSPD][6][6] = 184; 	RangosSkins[LSPD][6][7] = 285; 	RangosSkins[LSPD][6][8] = 287;  	RangosSkins[LSPD][6][9] = 148;   	RangosSkins[LSPD][6][10] = 191; FaccionData[LSPD][Paga][6] = 400;
	FaccionesRangos[LSPD][7]  = "Cadete";		RangosSkins[LSPD][7][0] = 71; 	RangosSkins[LSPD][7][1] = 150;	RangosSkins[LSPD][7][2] = 101; 	RangosSkins[LSPD][7][3] = 250; 	RangosSkins[LSPD][7][4] = 60; 	RangosSkins[LSPD][7][5] = 170; 	RangosSkins[LSPD][7][6] = 184;  RangosSkins[LSPD][7][7] = 285; 	RangosSkins[LSPD][7][8] = 287;  	RangosSkins[LSPD][7][9] = 148;   	RangosSkins[LSPD][7][10] = 191; FaccionData[LSPD][Paga][7] = 350;

// CONTRABANDISTAS ID - 15
	format(FaccionData[CONTRABANDISTAS][NameFaccion], MAX_FACCION_NAME, "Contrabandistas");
	FaccionData[CONTRABANDISTAS][Extorsion] = 0;
	FaccionData[CONTRABANDISTAS][AlmacenX][0] = 1893.3990;
	FaccionData[CONTRABANDISTAS][AlmacenY][0] = 1018.0084;
	FaccionData[CONTRABANDISTAS][AlmacenZ][0] = 31.8828;
	FaccionData[CONTRABANDISTAS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[CONTRABANDISTAS][Spawn_X][0] = 724.5375;
	FaccionData[CONTRABANDISTAS][Spawn_Y][0] = -1475.2960;
	FaccionData[CONTRABANDISTAS][Spawn_Z][0] = 17.6891;
	FaccionData[CONTRABANDISTAS][Spawn_ZZ][0] = 181.4021;
	FaccionData[CONTRABANDISTAS][PickupOut_X] = 725.6380;
	FaccionData[CONTRABANDISTAS][PickupOut_Y] = -1439.9681;
	FaccionData[CONTRABANDISTAS][PickupOut_Z] = 13.5318;
	FaccionData[CONTRABANDISTAS][PickupOut_ZZ] = 355.9068;
	FaccionData[CONTRABANDISTAS][PickupIn_X] = -2171.1570;
	FaccionData[CONTRABANDISTAS][PickupIn_Y] = 645.3072;
	FaccionData[CONTRABANDISTAS][PickupIn_Z] = 1057.5938;
	FaccionData[CONTRABANDISTAS][PickupIn_ZZ] = 269.4647;
	FaccionData[CONTRABANDISTAS][InteriorFaccion]	= 1;
	FaccionData[CONTRABANDISTAS][PickupidOutF] = CreateFaccionDynamicPickup(1212, CONTRABANDISTAS, FaccionData[CONTRABANDISTAS][PickupOut_X], FaccionData[CONTRABANDISTAS][PickupOut_Y], FaccionData[CONTRABANDISTAS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[CONTRABANDISTAS][PickupidInF] = CreateFaccionDynamicPickup(1212, CONTRABANDISTAS, FaccionData[CONTRABANDISTAS][PickupIn_X], FaccionData[CONTRABANDISTAS][PickupIn_Y], FaccionData[CONTRABANDISTAS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[CONTRABANDISTAS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[CONTRABANDISTAS][PrecioFaccion] = 0;
	FaccionData[CONTRABANDISTAS][Lock] = 0;
	FaccionData[CONTRABANDISTAS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[CONTRABANDISTAS][Family] = true;
	FaccionData[CONTRABANDISTAS][Radio] = false;

	FaccionesRangos[CONTRABANDISTAS][0]  = "Narco";				RangosSkins[CONTRABANDISTAS][0][0] = 120; 	RangosSkins[CONTRABANDISTAS][0][1] = 141; RangosSkins[CONTRABANDISTAS][0][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][0] = 410;
	FaccionesRangos[CONTRABANDISTAS][1]  = "Mano derecha"; 		RangosSkins[CONTRABANDISTAS][1][0] = 120;  RangosSkins[CONTRABANDISTAS][1][1] = 141; RangosSkins[CONTRABANDISTAS][1][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][1] = 400;
	FaccionesRangos[CONTRABANDISTAS][2]  = "Contrabandista";	RangosSkins[CONTRABANDISTAS][2][0] = 118; 	RangosSkins[CONTRABANDISTAS][2][1] = 141; RangosSkins[CONTRABANDISTAS][2][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][2] = 370;
	FaccionesRangos[CONTRABANDISTAS][3]  = "Comerciante";		RangosSkins[CONTRABANDISTAS][3][0] = 118; 	RangosSkins[CONTRABANDISTAS][3][1] = 141; RangosSkins[CONTRABANDISTAS][3][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][3] = 370;
	FaccionesRangos[CONTRABANDISTAS][4]  = "Aliado";			RangosSkins[CONTRABANDISTAS][4][0] = 117; 	RangosSkins[CONTRABANDISTAS][4][1] = 141; RangosSkins[CONTRABANDISTAS][4][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][4] = 350;
	FaccionesRangos[CONTRABANDISTAS][5]  = "Pupilo";			RangosSkins[CONTRABANDISTAS][5][0] = 117; 	RangosSkins[CONTRABANDISTAS][5][1] = 141; RangosSkins[CONTRABANDISTAS][5][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][5] = 350;

// SICARIOS ID - 16
	format(FaccionData[SICARIOS][NameFaccion], MAX_FACCION_NAME, "Sicarios");
	FaccionData[SICARIOS][Extorsion] = 0;
	FaccionData[SICARIOS][AlmacenX][0] = 1041.1677246094;
	FaccionData[SICARIOS][AlmacenY][0] = 1279.3204345703;
	FaccionData[SICARIOS][AlmacenZ][0] = 20.464794158936;
	FaccionData[SICARIOS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[SICARIOS][Spawn_X][0] = 1549.6040039063;
	FaccionData[SICARIOS][Spawn_Y][0] = 25.535907745361;
	FaccionData[SICARIOS][Spawn_Z][0] = 24.140625;
	FaccionData[SICARIOS][Spawn_ZZ][0] = 283.095703125;
	FaccionData[SICARIOS][PickupOut_X] = 1566.8322753906;
	FaccionData[SICARIOS][PickupOut_Y] = 23.247451782227;
	FaccionData[SICARIOS][PickupOut_Z] = 24.1640625;
	FaccionData[SICARIOS][PickupOut_ZZ] = 90;
	FaccionData[SICARIOS][PickupIn_X] = 2807.5412597656;
	FaccionData[SICARIOS][PickupIn_Y] = -1174.7557373047;
	FaccionData[SICARIOS][PickupIn_Z] = 1025.5703125;
	FaccionData[SICARIOS][PickupIn_ZZ] = 0;
	FaccionData[SICARIOS][InteriorFaccion]	= 8;
	FaccionData[SICARIOS][PickupidOutF] = CreateFaccionDynamicPickup(1314, SICARIOS, FaccionData[SICARIOS][PickupOut_X], FaccionData[SICARIOS][PickupOut_Y], FaccionData[SICARIOS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[SICARIOS][PickupidInF] = CreateFaccionDynamicPickup(1314, SICARIOS, FaccionData[SICARIOS][PickupIn_X], FaccionData[SICARIOS][PickupIn_Y], FaccionData[SICARIOS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[SICARIOS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[SICARIOS][PrecioFaccion] = 0;
	FaccionData[SICARIOS][Lock] = 0;
	FaccionData[SICARIOS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[SICARIOS][Family] = true;
	FaccionData[SICARIOS][Radio] = false;

	FaccionesRangos[SICARIOS][0]  = "Capo";			RangosSkins[SICARIOS][0][0] = 294; 	RangosSkins[SICARIOS][0][1] = 68;   RangosSkins[SICARIOS][0][2] = 93; 	FaccionData[SICARIOS][Paga][0] = 650;
	FaccionesRangos[SICARIOS][1]  = "Mano derecha"; 		RangosSkins[SICARIOS][1][0] = 295;  RangosSkins[SICARIOS][1][1] = 93; 										FaccionData[SICARIOS][Paga][1] = 630;
	FaccionesRangos[SICARIOS][2]  = "Extorsionador";	RangosSkins[SICARIOS][2][0] = 165; 	RangosSkins[SICARIOS][2][1] = 93; 										FaccionData[SICARIOS][Paga][2] = 610;
	FaccionesRangos[SICARIOS][3]  = "Exterminador";		RangosSkins[SICARIOS][3][0] = 46; 	RangosSkins[SICARIOS][3][1] = 93; 										FaccionData[SICARIOS][Paga][3] = 590;
	FaccionesRangos[SICARIOS][4]  = "Matón";			RangosSkins[SICARIOS][4][0] = 272; 	RangosSkins[SICARIOS][4][1] = 93; 										FaccionData[SICARIOS][Paga][4] = 550;
	FaccionesRangos[SICARIOS][5]  = "Integrándose";		RangosSkins[SICARIOS][5][0] = 112; 	RangosSkins[SICARIOS][5][1] = 93; 										FaccionData[SICARIOS][Paga][5] = 430;

	// TALLER_LS ID - 17
	format(FaccionData[TALLER_LS][NameFaccion], MAX_FACCION_NAME, "Taller LS");
	FaccionData[TALLER_LS][Extorsion] = 0;
	FaccionData[TALLER_LS][Spawn_X][0] = 1809.9860;
	FaccionData[TALLER_LS][Spawn_Y][0] = -2053.1816;
	FaccionData[TALLER_LS][Spawn_Z][0] = 13.5557;
	FaccionData[TALLER_LS][Spawn_ZZ][0] = 359.7606;
	FaccionData[TALLER_LS][PickupOut_X] = 1764.5760;
	FaccionData[TALLER_LS][PickupOut_Y] = -2021.4382;
	FaccionData[TALLER_LS][PickupOut_Z] = 14.1501;
	FaccionData[TALLER_LS][PickupOut_ZZ] = 276.4366;
	FaccionData[TALLER_LS][PickupIn_X] = 1762.9645;
	FaccionData[TALLER_LS][PickupIn_Y] = -2023.0339;
	FaccionData[TALLER_LS][PickupIn_Z] = 20.6677;
	FaccionData[TALLER_LS][PickupIn_ZZ] = 84.5109;
	FaccionData[TALLER_LS][InteriorFaccion]= 15;
	FaccionData[TALLER_LS][PickupidOutF] = CreateFaccionDynamicPickup(1239, TALLER_LS, FaccionData[TALLER_LS][PickupOut_X], FaccionData[TALLER_LS][PickupOut_Y], FaccionData[TALLER_LS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[TALLER_LS][PickupidInF] = CreateFaccionDynamicPickup(1239, TALLER_LS, FaccionData[TALLER_LS][PickupIn_X], FaccionData[TALLER_LS][PickupIn_Y], FaccionData[TALLER_LS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[TALLER_LS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[TALLER_LS][PrecioFaccion] = 0;
	FaccionData[TALLER_LS][Lock] = 0;
	FaccionData[TALLER_LS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[TALLER_LS][Family] = false;
	FaccionData[TALLER_LS][Radio] = true;

	FaccionesRangos[TALLER_LS][0]  = "Empresario"; 			RangosSkins[TALLER_LS][0][0] = 42;	RangosSkins[TALLER_LS][0][1]	= 55; 																					FaccionData[TALLER_LS][Paga][0] = 460;
	FaccionesRangos[TALLER_LS][1]  = "Encargado";			RangosSkins[TALLER_LS][1][0] = 268;	RangosSkins[TALLER_LS][1][1]	= 55;	RangosSkins[TALLER_LS][1][2] = 58; 											FaccionData[TALLER_LS][Paga][1] = 430;
	FaccionesRangos[TALLER_LS][2]  = "Maquinista"; 			RangosSkins[TALLER_LS][2][0] = 16; 	RangosSkins[TALLER_LS][2][1] = 55;	RangosSkins[TALLER_LS][2][2] = 8;	RangosSkins[TALLER_LS][2][3]	= 55; 	FaccionData[TALLER_LS][Paga][2] = 400;
	FaccionesRangos[TALLER_LS][3]  = "Mecánico"; 			RangosSkins[TALLER_LS][3][0] = 50; 	RangosSkins[TALLER_LS][3][1] = 55;	RangosSkins[TALLER_LS][3][2] = 8;											FaccionData[TALLER_LS][Paga][3] = 370;
	FaccionesRangos[TALLER_LS][4]  = "Mecánico Aprendiz"; 	RangosSkins[TALLER_LS][4][0] = 50; 	RangosSkins[TALLER_LS][4][1] = 55; 	RangosSkins[TALLER_LS][4][2] = 8;									FaccionData[TALLER_LS][Paga][4] = 350;

	// COLTS ID - 18
	format(FaccionData[COLTS][NameFaccion], MAX_FACCION_NAME, "Colts");
	FaccionData[COLTS][Extorsion] = 0;
	FaccionData[COLTS][AlmacenX][0] = 1088.6768;
	FaccionData[COLTS][AlmacenY][0] = 1712.8599;
	FaccionData[COLTS][AlmacenZ][0] = 10.9153;
	FaccionData[COLTS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[COLTS][Spawn_X][0] = 2662.7495;
	FaccionData[COLTS][Spawn_Y][0] = -2028.8191;
	FaccionData[COLTS][Spawn_Z][0] = 13.5510;
	FaccionData[COLTS][Spawn_ZZ][0] = 175.8332;
	FaccionData[COLTS][PickupOut_X] = 2650.703125;
	FaccionData[COLTS][PickupOut_Y] = -2021.836059;
	FaccionData[COLTS][PickupOut_Z] = 14.1766281;
	FaccionData[COLTS][PickupOut_ZZ] = 90;
	FaccionData[COLTS][PickupIn_X] = 2352.930664;
	FaccionData[COLTS][PickupIn_Y] = -1180.936645;
	FaccionData[COLTS][PickupIn_Z] = 1027.9765625;
	FaccionData[COLTS][PickupIn_ZZ] = 90;
	FaccionData[COLTS][InteriorFaccion]= 5;
	FaccionData[COLTS][PickupidOutF] = CreateFaccionDynamicPickup(1314, COLTS, FaccionData[COLTS][PickupOut_X], FaccionData[COLTS][PickupOut_Y], FaccionData[COLTS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[COLTS][PickupidInF] = CreateFaccionDynamicPickup(1314, COLTS, FaccionData[COLTS][PickupIn_X], FaccionData[COLTS][PickupIn_Y], FaccionData[COLTS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[COLTS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[COLTS][PrecioFaccion] = 0;
	FaccionData[COLTS][Lock] = 0;
	FaccionData[COLTS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[COLTS][Family] = true;
	FaccionData[COLTS][Radio] = false;

	FaccionesRangos[COLTS][0]  = "Colt";		RangosSkins[COLTS][0][0] = 115;	RangosSkins[COLTS][0][1]	= 190; 	RangosSkins[COLTS][0][2]	= 114;	RangosSkins[COLTS][0][3] = 116;	FaccionData[COLTS][Paga][0] = 460;
	FaccionesRangos[COLTS][1]  = "El Menor";	RangosSkins[COLTS][1][0] = 116;	RangosSkins[COLTS][1][1]	= 190; 	RangosSkins[COLTS][1][2]	= 114;										FaccionData[COLTS][Paga][1] = 430;
	FaccionesRangos[COLTS][2]  = "Activo"; 		RangosSkins[COLTS][2][0] = 116; 	RangosSkins[COLTS][2][1]	= 190; 	RangosSkins[COLTS][2][2]	= 114;										FaccionData[COLTS][Paga][2] = 400;
	FaccionesRangos[COLTS][3]  = "Chismoso"; 	RangosSkins[COLTS][3][0] = 116; 	RangosSkins[COLTS][3][1] = 190; 																			FaccionData[COLTS][Paga][3] = 370;
	FaccionesRangos[COLTS][4]  = "Pibe"; 		RangosSkins[COLTS][4][0] = 116; 	RangosSkins[COLTS][4][1] = 190; 																			FaccionData[COLTS][Paga][4] = 350;

	// AK ID - 19
	format(FaccionData[AK][NameFaccion], MAX_FACCION_NAME, "AK");
	FaccionData[AK][Extorsion] = 0;
	FaccionData[AK][AlmacenX][0] = 2686.5295;
	FaccionData[AK][AlmacenY][0] = 819.5256;
	FaccionData[AK][AlmacenZ][0] = 10.9638;
	FaccionData[AK][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[AK][Spawn_X][0] = -2463.8672;
	FaccionData[AK][Spawn_Y][0] = -93.7012;
	FaccionData[AK][Spawn_Z][0] = 25.8586;
	FaccionData[AK][Spawn_ZZ][0]	= 179.7161;
	FaccionData[AK][PickupOut_X] = -2454.5942382813;
	FaccionData[AK][PickupOut_Y] = -135.9363861084;
	FaccionData[AK][PickupOut_Z] = 26.191596984863;
	FaccionData[AK][PickupOut_ZZ] = 90;
	FaccionData[AK][PickupIn_X] = 2674.3801269531;
	FaccionData[AK][PickupIn_Y] = 804.61590576172;
	FaccionData[AK][PickupIn_Z] = 10.963800430298;
	FaccionData[AK][PickupIn_ZZ] = 0;
	FaccionData[AK][InteriorFaccion]= 6;
	FaccionData[AK][PickupidOutF] = CreateFaccionDynamicPickup(1314, AK, FaccionData[AK][PickupOut_X], FaccionData[AK][PickupOut_Y], FaccionData[AK][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[AK][PickupidInF] = CreateFaccionDynamicPickup(1314, AK, FaccionData[AK][PickupIn_X], FaccionData[AK][PickupIn_Y], FaccionData[AK][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[AK][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[AK][PrecioFaccion] = 0;
	FaccionData[AK][Lock] = 0;
	FaccionData[AK][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[AK][Family] = true;
	FaccionData[AK][Radio] = false;

	FaccionesRangos[AK][0]  = "AK"; 		RangosSkins[AK][0][0] = 248;	RangosSkins[AK][0][1]	= 195; 	RangosSkins[AK][0][2]	= 254;	RangosSkins[AK][0][3] = 247;	RangosSkins[AK][0][4]	= 181;	RangosSkins[AK][0][4]	= 100; 	FaccionData[AK][Paga][0] = 460;
	FaccionesRangos[AK][1]  = "El Menor";	RangosSkins[AK][1][0] = 247;	RangosSkins[AK][1][1]	= 195; 	RangosSkins[AK][1][2]	= 254;	RangosSkins[AK][1][3]	= 181;																	FaccionData[AK][Paga][1] = 430;
	FaccionesRangos[AK][2]  = "Activo"; 	RangosSkins[AK][2][0] = 247; 	RangosSkins[AK][2][1]	= 195; 	RangosSkins[AK][2][2]	= 254;  RangosSkins[AK][2][3]	= 181;																	FaccionData[AK][Paga][2] = 400;
	FaccionesRangos[AK][3]  = "Chismoso"; 	RangosSkins[AK][3][0] = 247; 	RangosSkins[AK][3][1] = 195; 	RangosSkins[AK][3][2]	= 181;																									FaccionData[AK][Paga][3] = 370;
	FaccionesRangos[AK][4]  = "Pibe"; 		RangosSkins[AK][4][0] = 247; 	RangosSkins[AK][4][1] = 195; 	RangosSkins[AK][4][2]	= 181;																									FaccionData[AK][Paga][4] = 350;

	// VELTRAN ID - 20
	/////////////////////////////////////////////////////////////////////
	format(FaccionData[VELTRAN][NameFaccion], MAX_FACCION_NAME, "Veltran");
	FaccionData[VELTRAN][Extorsion] = 0;
	FaccionData[VELTRAN][AlmacenX][0] = 34.3752;
	FaccionData[VELTRAN][AlmacenY][0] = 2495.5813;
	FaccionData[VELTRAN][AlmacenZ][0] = 16.4937;
	FaccionData[VELTRAN][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[VELTRAN][Spawn_X][0] = -2088.4094;
	FaccionData[VELTRAN][Spawn_Y][0] = 903.1467;
	FaccionData[VELTRAN][Spawn_Z][0] = 65.5231;
	FaccionData[VELTRAN][Spawn_ZZ][0]	= 353.4789;
	FaccionData[VELTRAN][PickupOut_X] = -2099.6032714844;
	FaccionData[VELTRAN][PickupOut_Y] = 897.35711669922;
	FaccionData[VELTRAN][PickupOut_Z] = 76.7109375;
	FaccionData[VELTRAN][PickupOut_ZZ] = 0;
	FaccionData[VELTRAN][PickupIn_X] = 30.553499221802;
	FaccionData[VELTRAN][PickupIn_Y] = 2495.8635253906;
	FaccionData[VELTRAN][PickupIn_Z] = 16.494745254517;
	FaccionData[VELTRAN][PickupIn_ZZ] = 0;
	FaccionData[VELTRAN][InteriorFaccion]= 5;
	FaccionData[VELTRAN][PickupidOutF] = CreateFaccionDynamicPickup(1314, VELTRAN, FaccionData[VELTRAN][PickupOut_X], FaccionData[VELTRAN][PickupOut_Y], FaccionData[VELTRAN][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[VELTRAN][PickupidInF] = CreateFaccionDynamicPickup(1314, VELTRAN, FaccionData[VELTRAN][PickupIn_X], FaccionData[VELTRAN][PickupIn_Y], FaccionData[VELTRAN][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[VELTRAN][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[VELTRAN][PrecioFaccion] = 0;
	FaccionData[VELTRAN][Lock] = 0;
	FaccionData[VELTRAN][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[VELTRAN][Family] = true;
	FaccionData[VELTRAN][Radio] = false;

	FaccionesRangos[VELTRAN][0]  = "Veltran"; 	RangosSkins[VELTRAN][0][0] = 175;	RangosSkins[VELTRAN][0][1]	= 201; 	RangosSkins[VELTRAN][0][2]	= 173;		RangosSkins[VELTRAN][0][3] = 174;		FaccionData[VELTRAN][Paga][0] = 460;
	FaccionesRangos[VELTRAN][1]  = "El Menor";	RangosSkins[VELTRAN][1][0] = 174;	RangosSkins[VELTRAN][1][1]	= 201; 	RangosSkins[VELTRAN][1][2]	= 173;											FaccionData[VELTRAN][Paga][1] = 430;
	FaccionesRangos[VELTRAN][2]  = "Activo"; 	RangosSkins[VELTRAN][2][0] = 173; 	RangosSkins[VELTRAN][2][1]	= 201; 	RangosSkins[VELTRAN][2][2]	= 174;																				FaccionData[VELTRAN][Paga][2] = 400;
	FaccionesRangos[VELTRAN][3]  = "Chismoso"; 	RangosSkins[VELTRAN][3][0] = 173; 	RangosSkins[VELTRAN][3][1] = 201; 																				FaccionData[VELTRAN][Paga][3] = 370;
	FaccionesRangos[VELTRAN][4]  = "Pibe"; 		RangosSkins[VELTRAN][4][0] = 173; 	RangosSkins[VELTRAN][4][1] = 201; 																				FaccionData[VELTRAN][Paga][4] = 350;

	// HEORS ID - 21
	format(FaccionData[HEORS][NameFaccion], MAX_FACCION_NAME, "Heors");
	FaccionData[HEORS][Extorsion] = 0;
	FaccionData[HEORS][AlmacenX][0] = 1725.7097;
	FaccionData[HEORS][AlmacenY][0] = -2447.1138;
	FaccionData[HEORS][AlmacenZ][0] = 13.6246;
	FaccionData[HEORS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[HEORS][AlmacenX][1] = 2447.7646;
	FaccionData[HEORS][AlmacenY][1] = 2085.1616;
	FaccionData[HEORS][AlmacenZ][1] = 62.3593;
	FaccionData[HEORS][AlmacenWorld][1]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[HEORS][Spawn_X][0] = 2045.4813;
	FaccionData[HEORS][Spawn_Y][0] = -1111.6809;
	FaccionData[HEORS][Spawn_Z][0] = 26.3617;
	FaccionData[HEORS][Spawn_ZZ][0] = 175.9550;
	FaccionData[HEORS][Spawn_X][1] = 2793.3169;
	FaccionData[HEORS][Spawn_Y][1] = -1624.8368;
	FaccionData[HEORS][Spawn_Z][1] = 10.9219;
	FaccionData[HEORS][Spawn_ZZ][1] = 81.8914;
	FaccionData[HEORS][PickupOut_X] = 2045.5537;
	FaccionData[HEORS][PickupOut_Y] = -1116.4283;
	FaccionData[HEORS][PickupOut_Z] = 26.3617;
	FaccionData[HEORS][PickupOut_ZZ] = 0;
	FaccionData[HEORS][PickupIn_X] = 1781.7933349609;
	FaccionData[HEORS][PickupIn_Y] = -2454.0107421875;
	FaccionData[HEORS][PickupIn_Z] = 13.5546875;
	FaccionData[HEORS][PickupIn_ZZ] = 0;
	FaccionData[HEORS][InteriorFaccion] = 13;
	FaccionData[HEORS][PickupidOutF] = CreateFaccionDynamicPickup(1314, HEORS, FaccionData[HEORS][PickupOut_X], FaccionData[HEORS][PickupOut_Y], FaccionData[HEORS][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[HEORS][PickupidInF] = CreateFaccionDynamicPickup(1314, HEORS, FaccionData[HEORS][PickupIn_X], FaccionData[HEORS][PickupIn_Y], FaccionData[HEORS][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[HEORS][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[HEORS][PrecioFaccion] = 0;
	FaccionData[HEORS][Lock] = 0;
	FaccionData[HEORS][World] = WORLD_DEFAULT_INTERIOR;
	FaccionData[HEORS][Family] = true;
	FaccionData[HEORS][Radio] = false;

	FaccionesRangos[HEORS][0]  = "Heor";RangosSkins[HEORS][0][0] = 292;  RangosSkins[HEORS][0][1] = 110;	RangosSkins[HEORS][0][2]	= 207; 	RangosSkins[HEORS][0][3]	= 108;		RangosSkins[HEORS][0][3] = 109;		FaccionData[HEORS][Paga][0] = 460;
	FaccionesRangos[HEORS][1]  = "El Menor";	RangosSkins[HEORS][1][0] = 109;	RangosSkins[HEORS][1][1]	= 207; 	RangosSkins[HEORS][1][2]	= 108;																					FaccionData[HEORS][Paga][1] = 430;
	FaccionesRangos[HEORS][2]  = "Activo"; 		RangosSkins[HEORS][2][0] = 108; 	RangosSkins[HEORS][2][1]	= 207; 	RangosSkins[HEORS][2][2]	= 108;																					FaccionData[HEORS][Paga][2] = 400;
	FaccionesRangos[HEORS][3]  = "Chismoso"; 	RangosSkins[HEORS][3][0] = 108; 	RangosSkins[HEORS][3][1] = 207; 																														FaccionData[HEORS][Paga][3] = 370;
	FaccionesRangos[HEORS][4]  = "Pibe"; 		RangosSkins[HEORS][4][0] = 108; 	RangosSkins[HEORS][4][1] = 207; 																														FaccionData[HEORS][Paga][4] = 350;

// SFMD ID - 22
	format(FaccionData[LSMD][NameFaccion], MAX_FACCION_NAME, "LSMD");
	FaccionData[LSMD][Extorsion] = 0;
	FaccionData[LSMD][Spawn_X][0] = 1174.4027;
	FaccionData[LSMD][Spawn_Y][0] = -1307.2732;
	FaccionData[LSMD][Spawn_Z][0] = 19.4473;
	FaccionData[LSMD][Spawn_ZZ][0] = 178.7280;
	FaccionData[LSMD][Spawn_X][1] = 2036.5618;
	FaccionData[LSMD][Spawn_Y][1] = -1438.7203;
	FaccionData[LSMD][Spawn_Z][1] = 17.3176;
	FaccionData[LSMD][Spawn_ZZ][1] = 87.8400;
	FaccionData[LSMD][PickupOut_X] = 1172.0863037109;
	FaccionData[LSMD][PickupOut_Y] = -1323.3535;
	FaccionData[LSMD][PickupOut_Z] = 15.406188964844;
	FaccionData[LSMD][PickupOut_ZZ] = 270;
	FaccionData[LSMD][PickupIn_X] = 388.37915039063;
	FaccionData[LSMD][PickupIn_Y] = 1906.3463134766;
	FaccionData[LSMD][PickupIn_Z] = 17.715625762939;
	FaccionData[LSMD][PickupIn_ZZ] = 90;
	FaccionData[LSMD][InteriorFaccion] = 18;
	FaccionData[LSMD][PickupidOutF] = CreateFaccionDynamicPickup(1239, LSMD, FaccionData[LSMD][PickupOut_X], FaccionData[LSMD][PickupOut_Y], FaccionData[LSMD][PickupOut_Z], WORLD_NORMAL, 0, -1, MAX_PICKUP_DISTANCE);
	FaccionData[LSMD][PickupidInF] = CreateFaccionDynamicPickup(1239, LSMD, FaccionData[LSMD][PickupIn_X], FaccionData[LSMD][PickupIn_Y], FaccionData[LSMD][PickupIn_Z], WORLD_DEFAULT_INTERIOR, FaccionData[LSMD][InteriorFaccion], -1, MAX_PICKUP_DISTANCE);
	FaccionData[LSMD][PrecioFaccion] 	= 0;
	FaccionData[LSMD][Lock] 			= 0;
	FaccionData[LSMD][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[LSMD][Family] 			= false;
	FaccionData[LSMD][Radio] 			= true;

	FaccionesRangos[LSMD][0]  = "Director"; 		RangosSkins[LSMD][0][0] 	= 70; 	RangosSkins[LSMD][0][1] = 150; 	RangosSkins[LSMD][0][2] = 277; 	RangosSkins[LSMD][0][3] = 278; 	RangosSkins[LSMD][0][4]	= 279;		FaccionData[LSMD][Paga][0] = 700;
	FaccionesRangos[LSMD][1]  = "Sub Director"; 	RangosSkins[LSMD][1][0] 	= 223;  RangosSkins[LSMD][1][1] = 191;  RangosSkins[LSMD][1][2] = 277; 	RangosSkins[LSMD][1][3] = 278; 	RangosSkins[LSMD][1][4]	= 279;	 	FaccionData[LSMD][Paga][1] = 600;
	FaccionesRangos[LSMD][2]  = "Jefe de Bomberos";	RangosSkins[LSMD][2][0] 	= 279; 	RangosSkins[LSMD][2][1]	= 191;																										FaccionData[LSMD][Paga][2] = 650;
	FaccionesRangos[LSMD][3]  = "Doctor"; 			RangosSkins[LSMD][3][0] 	= 156; 	RangosSkins[LSMD][3][1]	= 191; 	RangosSkins[LSMD][3][2]	= 274; 	RangosSkins[LSMD][3][3]	= 275; 	RangosSkins[LSMD][3][4]	= 276;		FaccionData[LSMD][Paga][3] = 500;
	FaccionesRangos[LSMD][4]  = "Paramédico"; 		RangosSkins[LSMD][4][0] 	= 274; 	RangosSkins[LSMD][4][1] = 191; 	RangosSkins[LSMD][4][2]	= 274; 	RangosSkins[LSMD][4][3]	= 275; 	RangosSkins[LSMD][4][4]	= 276;	 	FaccionData[LSMD][Paga][4] = 450;
	FaccionesRangos[LSMD][5]  = "Bombero"; 			RangosSkins[LSMD][5][0] 	= 277; 	RangosSkins[LSMD][5][1] = 278; 	RangosSkins[LSMD][5][2]	= 191; 																		FaccionData[LSMD][Paga][5] = 550;
	FaccionesRangos[LSMD][6]  = "Apréndiz"; 		RangosSkins[LSMD][6][0] 	= 275; 	RangosSkins[LSMD][6][1] = 191; 		 																								FaccionData[LSMD][Paga][6] = 400;

//////////////////////////////// FACCIONES ////////////////////////////////
	for (new i = 0; i < MAX_FACCION_COUNT; i++ )
	{
	    new TempDirFaccion[25];
	    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, i);

		if ( fexist(TempDirFaccion) )
		{
			LoadDataFaccion(i);
		}
		else
		{
		    break;
		}
	}

	// AGREGAR CLASS
	SKIN_CIVILES[0]    = 1;
	SKIN_CIVILES[1]    = 2;
	SKIN_CIVILES[2]    = 7;
	SKIN_CIVILES[3]    = 9;
	SKIN_CIVILES[4]    = 10;
	SKIN_CIVILES[5]    = 12;
	SKIN_CIVILES[6]    = 18;
	SKIN_CIVILES[7]    = 19;
	SKIN_CIVILES[8]    = 20;
	SKIN_CIVILES[9]    = 21;
	SKIN_CIVILES[10]    = 22;
	SKIN_CIVILES[11]    = 23;
	SKIN_CIVILES[12]    = 24;
	SKIN_CIVILES[13]    = 25;
	SKIN_CIVILES[14]    = 26;
	SKIN_CIVILES[15]    = 27;
	SKIN_CIVILES[16]    = 30;
	SKIN_CIVILES[17]    = 32;
	SKIN_CIVILES[18]    = 33;
	SKIN_CIVILES[19]    = 34;
	SKIN_CIVILES[20]    = 41;
	SKIN_CIVILES[21]    = 45;
	SKIN_CIVILES[22]    = 38;
	SKIN_CIVILES[23]    = 47;
	SKIN_CIVILES[24]    = 49;
	SKIN_CIVILES[25]    = 56;
	SKIN_CIVILES[26]    = 62;
	SKIN_CIVILES[27]    = 63;
	SKIN_CIVILES[28]    = 64;
	SKIN_CIVILES[29]    = 66;
	SKIN_CIVILES[30]    = 67;
	SKIN_CIVILES[31]    = 75;
	SKIN_CIVILES[32]    = 76;
	SKIN_CIVILES[33]    = 77;
	SKIN_CIVILES[34]    = 78;
	SKIN_CIVILES[35]    = 79;
	SKIN_CIVILES[36]    = 80;
	SKIN_CIVILES[37]    = 81;
	SKIN_CIVILES[38]    = 82;
	SKIN_CIVILES[39]    = 83;
	SKIN_CIVILES[40]    = 84;
	SKIN_CIVILES[41]    = 85;
	SKIN_CIVILES[42]    = 87;
	SKIN_CIVILES[43]    = 90;
	SKIN_CIVILES[44]    = 92;
	SKIN_CIVILES[45]    = 94;
	SKIN_CIVILES[46]    = 96;
	SKIN_CIVILES[47]    = 97;
	SKIN_CIVILES[48]    = 99;
	SKIN_CIVILES[49]    = 119;
	SKIN_CIVILES[50]    = 128;
	SKIN_CIVILES[51]    = 134;
	SKIN_CIVILES[52]    = 136;
	SKIN_CIVILES[53]    = 137;
	SKIN_CIVILES[54]    = 138;
	SKIN_CIVILES[55]    = 139;
	SKIN_CIVILES[56]    = 140;
	SKIN_CIVILES[57]    = 142;
	SKIN_CIVILES[58]    = 143;
	SKIN_CIVILES[59]    = 144;
	SKIN_CIVILES[60]    = 151;
	SKIN_CIVILES[61]    = 152;
	SKIN_CIVILES[62]    = 153;
	SKIN_CIVILES[63]    = 154;
	SKIN_CIVILES[64]    = 155;
	SKIN_CIVILES[65]    = 156;
	SKIN_CIVILES[66]    = 157;
	SKIN_CIVILES[67]    = 160;
	SKIN_CIVILES[68]    = 161;
	SKIN_CIVILES[69]    = 162;
	SKIN_CIVILES[70]    = 167;
	SKIN_CIVILES[71]    = 168;
	SKIN_CIVILES[72]    = 178;
	SKIN_CIVILES[73]    = 179;
	SKIN_CIVILES[74]    = 180;
	SKIN_CIVILES[75]    = 181;
	SKIN_CIVILES[76]    = 193;
	SKIN_CIVILES[77]    = 198;
	SKIN_CIVILES[78]    = 199;
	SKIN_CIVILES[79]    = 200;
	SKIN_CIVILES[80]    = 203;
	SKIN_CIVILES[81]    = 204;
	SKIN_CIVILES[82]    = 205;
	SKIN_CIVILES[83]    = 209;
	SKIN_CIVILES[84]    = 210;
	SKIN_CIVILES[85]    = 211;
	SKIN_CIVILES[86]    = 212;
	SKIN_CIVILES[87]    = 213;
	SKIN_CIVILES[88]    = 214;
	SKIN_CIVILES[89]    = 215;
	SKIN_CIVILES[90]    = 217;
	SKIN_CIVILES[91]    = 218;
	SKIN_CIVILES[92]    = 220;
	SKIN_CIVILES[93]    = 222;
	SKIN_CIVILES[94]    = 224;
	SKIN_CIVILES[95]    = 225;
	SKIN_CIVILES[96]    = 226;
	SKIN_CIVILES[97]    = 229;
	SKIN_CIVILES[98]    = 230;
	SKIN_CIVILES[99]    = 231;
	SKIN_CIVILES[100]    = 232;
	SKIN_CIVILES[101]    = 235;
	SKIN_CIVILES[102]    = 237;
	SKIN_CIVILES[103]    = 238;
	SKIN_CIVILES[104]    = 239;
	SKIN_CIVILES[105]    = 241;
	SKIN_CIVILES[106]    = 242;
	SKIN_CIVILES[107]    = 246;
	SKIN_CIVILES[108]    = 249;
	SKIN_CIVILES[109]    = 251;
	SKIN_CIVILES[110]    = 252;
	SKIN_CIVILES[111]    = 260;
	SKIN_CIVILES[112]    = 264;
	SKIN_CIVILES[113]    = 291;
	SKIN_CIVILES[114]    = 293;
	SKIN_CIVILES[115]    = 297;
	SKIN_CIVILES[116]    = 299;
	SKIN_CIVILES[117]    = 999;

	LoadLastOptionsServer();

	LoadLocales();

	ShowServerStats(-1);
	print("___________________ GAMEMODE CARGADO CORRECTAMENTE! ___________________");
	return 1;
}

public MySQLConnect()
{
    print("___________________ CONECTANDO CON BASE DE DATOS... ___________________");
    new errno;
    dataBase = mysql_connect_file("mysql.ini");
    errno = mysql_errno(dataBase);
    if(errno != 0)
    {
        new error[100];
        mysql_error(error, 100, dataBase);
        print("\n\n\n ERROR AL CONECTAR CON LA BASE DE DATOS !!!!!!");
        printf("[MySQL]: Connection Error: #%d '%s'\n\n\n", errno, error);
        SendRconCommand("exit");
    }
    else print("________________ BASE DE DATOS CONECTADA CORRECTAMENTE! ________________");
	return 1;
}

public OnQueryError(errorid, const const error[], const const callback[], const const query[], MySQL:handle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			print("Lost connection to server");
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s",query);
		}
	}
	return 1;
}

public OnGameModeExit()
{
	if ( !ResetGM )
	{
		OnGameModeExitEx();
  	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if ( PlayersDataOnline[playerid][State] == 0 )
	{
	    SetPlayerOrginalTime(playerid);
	    PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
		for (new AE = 0; AE <= 20; AE++)
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "");
		}

		SendInfoMessage(playerid, 2, "0", LOGO_UNPLAYER);

		new query[100], Cache:cacheid, cuentaExiste;
		mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(cuentaExiste);
		cache_delete(cacheid);

		// LOGIN
		if ( cuentaExiste )
		{
		    PlayersDataOnline[playerid][State] = 1;
		    DataUserLoad(playerid);
 			ShowPlayerLogin(playerid, true);
		}
		// REGISTRO
		else
		{
		    PlayersDataOnline[playerid][State] = 2;
			ShowPlayerRegister(playerid, true);
		}

		PlayersData[playerid][CameraLogin]--;
		SetCameraLogin(playerid, PlayersData[playerid][CameraLogin], true);

		PlayersDataOnline[playerid][StateDeath] = 3;
	}
	else if ( !PlayersDataOnline[playerid][StateDeath] || PlayersDataOnline[playerid][State] == 3)
	{
		if ( PlayersData[playerid][InTutorial] )
		{
	    	PlayersDataOnline[playerid][StateDeath] = 5;
    	}
		UpdateSpawnPlayer(playerid);
	    SpawnPlayerEx(playerid);
	}
	else if ( PlayersDataOnline[playerid][State] )
	{
		SetCameraLogin(playerid, PlayersData[playerid][CameraLogin], true);
	}
	return 1;
}
public OnPlayerConnect(playerid)
{
	SetPlayerColor(playerid, 0xAAAAAAFF);
	TextDrawShowForPlayer(playerid, Url_WebShadow);
	TextDrawShowForPlayer(playerid, Url_Web);
	SetPlayerVirtualWorld(playerid, 1337);
	DataUserClean(playerid);
	GetPlayerName(playerid, PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME);
	PlayersDataOnline[playerid][TimerLoginId] = SetTimerEx("IsPlayerOff", 60000, false, "d", playerid);
	if (IsValidName(PlayersDataOnline[playerid][NameOnline]))
	{
		if ( RemoveRallaName(playerid) )
		{
			GivePlayerWeaponReturn(playerid);
		 	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
			{
				RemovePlayerAttachedObject(playerid, i);
			}
		}
		else
		{
				printf("Kickeado por Nick: %s", PlayersDataOnline[playerid][NameOnline]);
				SendClientMessage(playerid, 0x002DFFFF, "Has sido Kickedo del servidor.");
				SendClientMessage(playerid, 0x002DFFFF, "Para el servidor de Role Play es requerido que utilice el formato de nick name Nombre_Apellido.");
				SendClientMessage(playerid, 0x002DFFFF, "{F5FF00}Ejemplo: {00F50A}Alessandro_Valenti, Jorge_Pelaez");
				SendClientMessage(playerid, 0x002DFFFF, " ");
				SendClientMessage(playerid, 0x002DFFFF, "Cualquier duda al respecto sobre el regístro puede consultarlo en "WEBPAGE"");
				KickEx(playerid, 99);
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "100", "El nick que usa esta deshabilitado por cuestiones de seguridad.");
		print("Error 119");
		KickEx(playerid, 1);
	}
}
public OnPlayerDisconnect(playerid, reason)
{
	if ( !ResetGM )
	{
	    new Float:Pos[3];
	    new string[150];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	    if(reason == 1) 	 format(string, sizeof(string), "El usuario %s ha desconectado. Razon: Voluntariamente", PlayersDataOnline[playerid][NameOnline]);
		else if(reason == 0) format(string, sizeof(string), "El usuario %s ha desconectado. Razon: Perdida de Conexion/CRASH", PlayersDataOnline[playerid][NameOnline]);
		else if(reason == 2) format(string, sizeof(string), "El usuario %s ha desconectado. Razon: Un administrador le ha echado", PlayersDataOnline[playerid][NameOnline]);

		if(PlayersDataOnline[playerid][IsEspectando])
		{
			UpdateSpectatedPlayers(playerid, true, false, false);
		}
	    SaveDatosPlayerDisconnect(playerid);

	    for(new i = 0, maxid = GetPlayerPoolSize(); i <= maxid; i++)
	    {
	        if(IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && i != playerid && IsPlayerInRangeOfPoint(i, 20.0, Pos[0], Pos[1], Pos[2]))
	        {
	            SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, string);
	        }
	    }
    }
	return 1;
}
public OnPlayerSpawn(playerid)
{
	if ( PlayersDataOnline[playerid][StateDeath] && PlayersDataOnline[playerid][State] == 3 )
	{
		if ( PlayersDataOnline[playerid][StateDeath] == 5 )
		{
			SendInfoMessage(playerid, 0, "828", "Jugador Fuera de Lugar, reloguee y no vuelva a intentar retornar de class u otros inventos extraños");
		    KickEx(playerid, 0);
		    return 1;
		}
		if ( !PlayersDataOnline[playerid][ModeDM] )
		{
			UpdateSpawnPlayer(playerid);
		}
		//Streamer_UpdateEx(playerid, FaccionData[PlayersData[playerid][Faccion]][Spawn_X], FaccionData[PlayersData[playerid][Faccion]][Spawn_Y], FaccionData[PlayersData[playerid][Faccion]][Spawn_Z]);
		SetPlayerLockAllVehicles(playerid);
		new MoneyCount = 0;
		if ( PlayersDataOnline[playerid][StateDeath] == 2 && PlayersData[playerid][Jail] == 0)
		{
          	SetPlayerVirtualWorldEx(playerid, 0);
	        PlayersDataOnline[playerid][VidaOn] = 80.0;
	        PlayersDataOnline[playerid][ChalecoOn] = 0.0;
            if ( !PlayersDataOnline[playerid][ModeDM] )
            {
				SetPlayerTeam(playerid, -1);
				MoneyCount = 10;
				SendInfoMessage(playerid, 2, "0", "El hospital te ha costado $10");
				ResetPlayerWeaponsEx(playerid);
			}
			else if (PlayersDataOnline[playerid][ModeDM])
			{
				ResetPlayerWeapons(playerid);
                for (new i = 0; i < 47; i++)
				{
        			if ( WeaponEnableDM[i] )
				    {
					    GivePlayerWeapon(playerid, i, 9999);
					}
				}
				if ( IsDMTeam )
				{
					SetPlayerTeam(playerid, PlayersDataOnline[playerid][TeamDM] + 1);
				}
				SetPlayerVirtualWorldEx(playerid, WorldDM[PlayersDataOnline[playerid][TeamDM]]);
				SetPlayerInteriorEx(playerid, InteriorDM[PlayersDataOnline[playerid][TeamDM]]);
				if ( InteriorDM[PlayersDataOnline[playerid][TeamDM]] != 0 )
				{
					SetPlayerPos(playerid, PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2]);
				}
			}
		}
		if ( PlayersData[playerid][Jail] > 0 )
		{
		    SetPlayerJail(playerid);
	        PlayersDataOnline[playerid][VidaOn] = 80.0;
	        PlayersDataOnline[playerid][ChalecoOn] = 0.0;
		}
		GivePlayerMoneyEx(playerid, -MoneyCount);
	    SetPlayerWeather(playerid, WeatherCurrent);
		PlayersDataOnline[playerid][StateDeath] = false;

		SetPlayerDrunkLevel(playerid, 0);

		if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
		{
	        new PistasDialogText[MAX_TEXT_CHAT];
		    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Murió)).", PlayersDataOnline[playerid][NameOnlineFix]);
			SendMessageToRaceChat(PlayersDataOnline[playerid][PistaIDp], PistasDialogText, true);
			RemovePlayerToRace(playerid, true, true, STATE_RACE_EXIT_DEATH);
		}
		ReturnObjetsToPlayer(playerid);
	}
	else
	{
		SendInfoMessage(playerid, 0, "827", "Jugador Fuera de Lugar, reloguee y no vuelva a intentar retornar de class u otros inventos extraños");
	    KickEx(playerid, 2);
	}
	return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	PlayersDataOnline[playerid][StateDeath] = 2;
	if(PlayersDataOnline[playerid][IsEspectando])
	{
		UpdateSpectatedPlayers(playerid, true, false, false);
	}
	if ( PlayersDataOnline[playerid][ModeDM] )
	{
		if ( SkinDM[PlayersDataOnline[playerid][TeamDM]] )
		{
		    if ( IsDMTeam )
		    {
				SetSpawnInfo(playerid, PlayersDataOnline[playerid][TeamDM] + 1, SkinDM[PlayersDataOnline[playerid][TeamDM]],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
			else
			{
				SetSpawnInfo(playerid, -1, SkinDM[PlayersDataOnline[playerid][TeamDM]],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
		}
		else
		{
		    if ( IsDMTeam )
		    {
				SetSpawnInfo(playerid, PlayersDataOnline[playerid][TeamDM] + 1, PlayersData[playerid][Skin],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
			else
			{
				SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
		}
	}
	if ( IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID )
	{
		if ( PlayersDataOnline[playerid][ModeDM] )
		{
		    PlayersDataOnline[killerid][PointDm]++;
		    SendMessageDeathMatch(killerid);
			UpdateTextDrawDM(0);
			UpdateTextDrawDM(1);
			SendMessageToPlayerDeathMatch(playerid, killerid, reason);
		}
		else
		{
		    SendClientMessage(killerid, COLOR_MESSAGES[0], "  Has cometido un crimen!");
	    }
		PlayersData[killerid][KilledCount]++;

	}
    SetPlayerWeather(playerid, -45);
	PlayersData[playerid][DeahtCount]++;
	PlayersDataOnline[playerid][StateMoneyPass] 	= gettime() + 5;
	CleanDataDeath(playerid);
	return 1;
}
public OnVehicleSpawn(vehicleid)
{
	if ( coches_Todos_Type[DataCars[vehicleid][Modelo] - 400] != TREN )
	{
		new RaceIDR = IsVehiceInRace(vehicleid);
		if ( RaceIDR == -1)
		{
			DestroyVehicle(vehicleid);
			CleanTunningSlots(vehicleid);
			CreateVehicleEx(DataCars[vehicleid][Modelo],
			DataCars[vehicleid][PosX],
			DataCars[vehicleid][PosY],
			DataCars[vehicleid][PosZ],
			DataCars[vehicleid][PosZZ],
			DataCars[vehicleid][Color1],
			DataCars[vehicleid][Color2],
			vehicleid
			);
			if ( DataCars[vehicleid][VehicleDeath] )
			{
				DataCars[vehicleid][VehicleDeath] = false;
				KillTimer(DataCars[vehicleid][TimerIdBug]);
			}
			GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
			SetVehicleHidden(vehicleid);
			GetVehiclePos(vehicleid, DataCars[vehicleid][LastX], DataCars[vehicleid][LastY], DataCars[vehicleid][LastZ]);
    		GetVehicleZAngle(vehicleid, DataCars[vehicleid][LastZZ]);
		}
		else
		{
			RemovePlayerToRace(RaceIDR, true, true, STATE_RACE_EXIT_EXPLOTO);
	        new PistasDialogText[MAX_TEXT_CHAT];
		    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Le explotó el vehículo II)).", PlayersDataOnline[RaceIDR][NameOnlineFix]);
			SendMessageToRaceChat(PlayersDataOnline[RaceIDR][PistaIDp], PistasDialogText, true);
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	new RaceIDR = IsVehiceInRace(vehicleid);
	if ( RaceIDR == -1)
	{
	    DataCars[vehicleid][VehicleDeath] = true;
		DataCars[vehicleid][TimerIdBug] = SetTimerEx("SetVehicleBugToRespawn", 10000, false, "d", vehicleid);
		DataCars[vehicleid][Puente] = true;
	}
	else
	{
	    if ( PlayersDataOnline[RaceIDR][StateDeath] != 2 )
	    {
	        new PistasDialogText[MAX_TEXT_CHAT];
		    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Le explotó el vehículo)).", PlayersDataOnline[RaceIDR][NameOnlineFix]);
			SendMessageToRaceChat(PlayersDataOnline[RaceIDR][PistaIDp], PistasDialogText, true);
			RemovePlayerToRace(RaceIDR, true, true, STATE_RACE_EXIT_EXPLOTO);
		}
	}
	return 1;
}
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	new MsgAvisoBug[MAX_TEXT_CHAT];
    if(enterexit == 0)
    {
	    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Tunning´s Shop Owned - El jugador %s[%i] salió de una tienda de tunning", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
		MsgCheatsReportsToAdmins(MsgAvisoBug);
    }
    else
    {
	    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Tunning´s Shop Owned - El jugador %s[%i] entró a una tienda de tunning", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
    }
	MsgCheatsReportsToAdmins(MsgAvisoBug);
    return 1;
}
public OnPlayerText(playerid, text[])
{
	if (PlayersDataOnline[playerid][State] == 3 && PlayersDataOnline[playerid][IsNotSilenciado] )
	{
	    if ( !PlayersDataOnline[playerid][InCamera] )
	    {
			SendChatStream(playerid, text);
		}
		else
		{
			SendInfoMessage(playerid, 0, "1090", "No puede utilizar comandos mientras está en las cámaras de seguridad!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "850", "Debe ingresar a el servidor antes de utilizar cualquier comando o ha sido silenciado.");
	}
	PlayersDataOnline[playerid][IsAFK] = false;
	return 0;
}
public OnPlayerCommandText(playerid, cmdtext[])
{
    if (strfind(cmdtext, InvalidSting, true) != -1) return SendInfoMessage(playerid, 0, "1380", "Ha introducido un carácter inválido.");
	new LenGet = strlen(cmdtext);
	for ( new i = 0; i < LenGet; i++ )
	{
	    if ( cmdtext[i] == '}' || cmdtext[i] == '{' )
	    {
	        cmdtext[i] = ' ';
	    }
	}
	if (PlayersDataOnline[playerid][State] == 3 && PlayersDataOnline[playerid][IsNotSilenciado])
	{
	    if ( !PlayersDataOnline[playerid][InCamera] )
	    {
		    if ( strlen(cmdtext) > 1 )
		    {
		    	printf("%s[%i] || %s", PlayersDataOnline[playerid][NameOnline], playerid, cmdtext);

		        PlayersDataOnline[playerid][IsAFK] = false;

				// COMANDO: /Ayuda
				if (strfind(cmdtext, "/Ayuda", true) == 0)
				{
				  	if (strcmp("/Ayuda", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
	      				SendInfoMessage(playerid, 1, "/Copyright - /Reglas - /Duda - /Stats - /Cuenta - /Hora - /Hablar - /Caminar -  /Reportar o /Re", "Principales: ");
					    SendInfoMessage(playerid, 1, "/Ayuda {Básicos, Canales, Facción, Rangos, Banco, Crear, Coche, Móvil, Casa, Negocio, Local, Estados, Dar, Coger, Dejar, Usar, Otros}", "Info Extra: ");
					    SendInfoMessage(playerid, 1, "/Ayuda {Idiomas, Trabajo, Radio, Tirar, Móvil, Luces, Canales, Aceptar, Llaves, DeathMatch, Carreras, Animaciones 1 - 3}", "Info Extra: ");
						SendInfoMessage(playerid, 1, "Para más información visite nuestros foros en "WEBPAGE". Use /Duda o puede whispear a un admin con /W [ID] [Duda] (Ver /Staff)", " ");
			    	}
			    	// COMANDO: /Ayuda Canales
				  	else if (strcmp("/Ayuda Básicos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 ||
							 strcmp("/Ayuda Basicos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14					  )
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Pagar [ID] [Cantidad] - /Bolsa [ID] - /Bolsillos [ID] - /Pasaporte [ID] - /Licencias [ID] - /Idiomas [ID]", "Básicos: ");
					    SendInfoMessage(playerid, 1, "/Ad [Anuncio]- /Nacer - /Online - /Trabajar - /Bar - /Parqueo - /Contrato [ID] [Cantidad] - /Peaje", "Básicos: ");
					    SendInfoMessage(playerid, 1, "/Llamar 911 (LSPD) /Llamar 912 (SFPD) - /Llamar 105 (SFMD) - /Llamar 106 (LSMD) - /Llamar 145 (Taxí) - ", "Básicos: ");
					    SendInfoMessage(playerid, 1, "/Llamar 555 (Taller SF) - /Llamar 888 (CNN) - /Llamar 777 (Taller LS) - /Id [Parte del Nombre] - /Objetos", "Básicos: ");
			    	}
			    	// COMANDO: /Ayuda Canales
				  	else if (strcmp("/Ayuda Canales", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Me [Acción] - /Intentar [Acción] - /Ame [Efecto] - /G [Gritar] - /S [Susurrar]", "Canales: ");
			    	}
			    	// COMANDO: /Ayuda Otros
				  	else if (strcmp("/Ayuda Otros", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Dormir - /Nacer - /Nacer Amigo - /Cartera - /Sexo - /Estado - /Staff - /Ayudantes - /Mappers", "Otros: ");
			    	}
			    	// COMANDO: /Ayuda DeathMatch
				  	else if (strcmp("/Ayuda DeathMatch", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/P [General] - /E [Equipo] - /Online Dm", "DeathMatch: ");
				    }
			    	// COMANDO: /Ayuda Carreras
				  	else if (strcmp("/Ayuda Carreras", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Carreras - /Salir Carrera", "Carreras: ");
				    }
			    	// COMANDO: /Ayuda Animaciones 1
				  	else if (strcmp("/Ayuda Animaciones 1", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Anim [Opción] [Número] {1=Loop}", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Sentarse - /Acostarse - /Borracho - /Fuck - /Miedo - /Apuntar - /Rendirse - /Mear", "Animaciones Básicas: ");
					    SendInfoMessage(playerid, 1, "/Anim [ATTRACTORS - 2, BAR - 11, BAT - 10, FIRE - 12, PLAYA - 4, GYM - 6, BFINJECT - 3, BICID - 18]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [BICIH - 17, BICIL - 8, BICIS - 19, BICIV - 17, BICI - 3, GOLPE - 11, BMX - 17, BOMBER - 5]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [BOX - 9, BALL - 40, BUDDY - 4, BUS - 8, CAM - 13, CAR - 10, CARRY - 6, CARCHAT - 20, CASINO - 24]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [CHAINSAW - 10, CHOPA - 17, CLOTHES - 12, COACH - 5, COLT - 6, COP - 11, COPD - 3, CRACK - 9]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [CRIB - 4, DAM - 4, DANCE - 12, DEALER - 6, DILDO - 8, DODGE - 3, DOZER - 9, DRIVE - 7, FAT - 17]", "Animaciones: ");
					}
			    	// COMANDO: /Ayuda Animaciones 2
				  	else if (strcmp("/Ayuda Animaciones 2", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Anim [Opción] [Número] {1=Loop}", "Animaciones: ");
						SendInfoMessage(playerid, 1, "/Anim [FIGHTB - 9, FIGHTC - 11, FIGHTD - 9, FIGHTE - 3, FINALE - 15, FINALE2 - 7, FLAME - 0, FLOWERS - 2]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [FOOD - 32, GYMA - 8, GANGS - 32, GHANDS - 19, GHETTO - 6, GOGGLES - 0, GRAFFITI - 1, GRAVE - 2]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [GRENADE - 2, GYMB - 23, HAIR - 12, HEIST - 9, HOUSE - 9, OFFICE - 9, INTSHOP - 7, BUISNESS - 3]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [KART - 3, KISSING - 14, KNIFE - 15, LAPDAN - 1, LOWRIDER - 38, CHASE - 24, END - 7, MEDIC - 0]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [MISC - 40, MTB - 17, LOOKERS - 28, OTB - 10, PARA - 21, PARK - 2]", "Animaciones: "); // MUSCULAR - 16
			    	}
			    	// COMANDO: /Ayuda Animaciones 3
				  	else if (strcmp("/Ayuda Animaciones 3", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Anim [Opción] [Número] {1=Loop}", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [PAUL - 11, PLAYER - 3, PLAYID - 4, POLICE - 9, POOL - 20, POOR - 1, PYTHON - 4, QUAD - 16, QUADD - 3]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [RAP - 7, RIFLE - 4, RIOT - 6, ROB - 4, ROCKET - 4, RUSTLER - 4, RYDER - 15, SCRAT - 11, SHAMAL - 4]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [SHOP - 24, SHOTGUN - 2, SILENCED - 3, SMOK - 7, SNIPER - 0, SPRAY - 1, STRIP - 19, SUNBA - 17]", "Animaciones: "); // SKATE - 2
					    SendInfoMessage(playerid, 1, "/Anim [SWAT - 22, SWEET - 6, SWIM - 6, SWORD - 9, TANK - 5, TATTOO - 56, TEC - 3, TRAIN - 3, TRUCK - 16]", "Animaciones: ");
						SendInfoMessage(playerid, 1, "/Anim [UZI - 4, VAN - 7, VENDING - 5, VORTEX - 3, WAYFA - 17, ARMA - 16, WUZI - 11]", "Animaciones: ");
			    	}
			    	// COMANDO: /Ayuda Móvil
				  	else if (strcmp("/Ayuda Móvil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
					         strcmp("/Ayuda Movil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Agenda - /N [Normal] - /Tirar Móvil - /Dar Móvil [ID] - /Llamar [Número] - /C (Colgar) - /D (Descolgar)", "Móvil: ");
					    SendInfoMessage(playerid, 1, "/Estado Móvil - /Ver Saldo - /Numero - /Tirar Agenda - /Dar Agenda [ID] - /SMS [Número] - /Altavoz", "Móvil: ");
			    	}
			    	// COMANDO: /Ayuda Habilidades
				  	else if (strcmp("/Ayuda Habilidades", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "1 - Normal", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "2 - Boxeo", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "3 - Kneehead", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "4 - Kungfu", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "5 - Elbow", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "6 - Grabkick", "Habilidades: ");
			    	}
			    	// COMANDO: /Ayuda Idiomas
				  	else if (strcmp("/Ayuda Idiomas", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Al [Alemán] - /Fr [Francés] - /Po [Portugés] - /It [Italiano] - /In [Inglés] - /Ja [Japonés]", "Idiomas: ");
			    	}
		    	// COMANDO: /Ayuda Llaves
				  	else if (strcmp("/Ayuda Llaves", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Llaves Coche - /Llaves Puerta - /Llaves PuertaEx - /Llaves Facción - /Llaves Refrigerador - /Llaves Casa", "Llaves: ");
					    SendInfoMessage(playerid, 1, "/Llaves Armario - /Llaves Garage - /Llaves GarageEx - /Llaves Amigos - /Llaves Maletero - /Llaves Local", "Llaves: ");

			    	}
			    	// COMANDO: /Ayuda Estados
				  	else if (strcmp("/Ayuda Estados", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Estado OOC - /Estado Family - /Estado Radio - /Estado CNN - /Estado Móvil - /Estado Trabajo", "Estados: ");
			    	}
			    	// COMANDO: /Ayuda Tirar
				  	else if (strcmp("/Ayuda Tirar", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Tirar Coche [ID]- /Tirar Móvil - /Tirar Dados - /Tirar Patines - /Tirar Chaleco - /Tirar Arma - /Tirar Agenda", "Tirar: ");
					    SendInfoMessage(playerid, 1, "/Tirar Artículo [ID_Bolsa] - /Tirar Cartera [ID_Cartera]", "Tirar: ");
			    	}
			    	// COMANDO: /Ayuda Dar
				  	else if (strcmp("/Ayuda Dar", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Dar Arma [ID] - /Dar ArmaEx [ID] [Munición] - /Dar Chaleco [ID] - /Dar Drogas [ID] [Cantidad]", "Dar: ");
					    SendInfoMessage(playerid, 1, "/Dar Ganzúas [ID] [Cantidad] - /Dar Materiales [ID] [Cantidad] - /Dar Bombas [ID] [Cantidad] - /Dar Llaves [ID]", "Dar: ");
					    SendInfoMessage(playerid, 1, "/Dar Extorsión [ID] - /Dar Dados [ID] - /Dar Patines [ID] - /Dar Móvil [ID] - /Dar Agenda [ID] - /Dar Bolsa [ID]", "Dar: ");
					    SendInfoMessage(playerid, 1, "/Dar Artículo [ID] [ID_Bolsa] - /Dar Cartera [ID] [ID_Cartera]", "Dar: ");
			    	}
			    	// COMANDO: /Ayuda Radio
				  	else if (strcmp("/Ayuda Radio", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/R Radio] - /Cambiar Frecuencia - /Ver Frecuencia - /Estado Radio", "Radio: ");
			    	}
			    	// COMANDO: /Ayuda Trabajo
				  	else if (strcmp("/Ayuda Trabajo", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersData[playerid][Job] != NINGUNO )
			    	    {
						    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
			    	        if ( PlayersData[playerid][Job] == PESCA )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Pescar - /Vender Peces", "Pesca: ");
			    	        }
			    	        else if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Vender Móvil [ID] [Precio] [Número]", "Vendedor de Móviles: ");
							}
			    	    }
			    	    else
			    	    {
							SendInfoMessage(playerid, 0, "963", "Tú no tienes trabajo");
						}
			    	}
			    	// COMANDO: /Ayuda Facción
				  	else if (strcmp("/Ayuda Facción", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 ||
					         strcmp("/Ayuda Faccion", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersData[playerid][Faccion] != CIVIL )
			    	    {
						    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
			    	        if ( PlayersData[playerid][Rango] == 0 )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Consultar Facción - /Depositar Facción [Cantidad] - /Retirar Facción [Cantidad]", "Facción: ");
					    	}
			    	        if ( PlayersData[playerid][Rango] <= 1 )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Invitar [ID] - /Expulsar [ID] - /Rango [ID] [ID_RANGO] - /Escoger Spawn [ID] [Spawnid]", "Facción: ");
						    	SendInfoMessage(playerid, 1, "/Asignar [ID] - /Desasignar [ID] [SLOT] - /Ver Horas [ID] - /Reiniciar Horas [ID] - /Llaves Coche", "Facción: ");
			    	        }
						    // GOBIERNO
							if ( PlayersData[playerid][Faccion] == GOBIERNO )
							{
							    SendInfoMessage(playerid, 1, "/R [Radio]", "Facción: ");
                                //Gob-Vice-Presi
                                if ( PlayersData[playerid][Rango] <= 3 )
                                SendInfoMessage(playerid, 1, "/Gob [Texto]", "Facción: ");
                                //Secretario-Gob-Vice-Presi
                                if ( PlayersData[playerid][Rango] <= 3 )
                                SendInfoMessage(playerid, 1, "/Casar [ID] [ID]- /Divorciar [ID] [ID]", "Facción: ");
                                //Todos Excepto Escolta
                                if ( PlayersData[playerid][Rango] != 4 )
                                SendInfoMessage(playerid, 1, "/Cambiar Ciudad [ID]", "Facción: ");
                                //Escolta
                                if ( PlayersData[playerid][Rango] == 4 )
                                SendInfoMessage(playerid, 1, "/Poner Equipo [ID_Equipo]", "Facción: ");
							}
						    // LICENCIEROS
							else if ( PlayersData[playerid][Faccion] == LICENCIEROS )
							{
							    SendInfoMessage(playerid, 1, "/Dar Idioma Alemán [ID] - /Dar Idioma Francés [ID] - /Dar Idioma Portugués [ID] - /Dar Idioma Italiano [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Dar Idioma Inglés [ID] - /Dar Idioma Japonés [ID] - /Dar LicenciaArmas [ID] - /Dar Licencia Coche [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Dar Licencia Camión [ID] - /Dar Licencia Moto [ID] - /Dar Licencia Vuelo [ID] - /Dar Licencia Bote [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Dar Licencia Pesca [ID] - /Dar Licencia Tren [ID] - /Dar Habilidad [ID] [ID_Habilidad] - /Prueba [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/R [Radio] - /F [Family] - /Ayuda Habilidades", "Facción: ");
							}
						    // TRAFICANTES
							else if ( PlayersData[playerid][Faccion] == TRAFICANTES )
							{
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Almacén - /Vender Drogas [ID] [Cantidad] [Precio] - /Obtener Drogas", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad] - /Retirar Almacén [Cantidad]", "Facción: ");
							}
						    // LCN
							else if ( PlayersData[playerid][Faccion] == LCN )
							{
							    SendInfoMessage(playerid, 1, "/Crear Arma - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Atar [ID]", "Facción: ");
							}
							// YKZ
							else if ( PlayersData[playerid][Faccion] == YKZ )
							{
							    SendInfoMessage(playerid, 1, "/Crear Arma - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Atar [ID]", "Facción: ");
							}
							// TAXI
							else if ( PlayersData[playerid][Faccion] == TAXI )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Estado Trabajo - /Estado Taxí - /Tren [Anuncio] - /Informar [Informe]", "Facción: ");
							}
							// SFPD
							else if ( PlayersData[playerid][Faccion] == SFPD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Quitar Licencia Armas [ID] - /Quitar Licencia Coche [ID] - /Quitar Licencia Camión [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Vuelo [ID] - /Quitar Licencia Bote [ID] - /Quitar Licencia Pesca [ID] - /Quitar Licencia Moto [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Tren [ID] - /Multar [ID] [Precio] [Razón] - /Esposar [ID] - /Recoger - /Poner Uniforme - /Sirena", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Equipo [ID_EQUIPO] - /Chequear [ID] - /Arrestar [ID] [Tiempo] - /Poner Candado [Razón] - /Meg [Texto]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Decomisar [ID] - /Meter [ID] - /Autorizar [ID] - /Desactivar Bomba - /Alarmas - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Cono - /Poner Valla - /Poner Pincho - /Ver Candado", "Facción: ");
							}
							// NFS
							else if ( PlayersData[playerid][Faccion] == NFS )
							{
							    SendInfoMessage(playerid, 1, "/Vender Coche [ID] - /Precio Coche - /Aparcar NFS - /Dropear", "Facción: ");
							}
							// SFMD
							else if ( PlayersData[playerid][Faccion] == SFMD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Llamadas Bomberos - /Curar [ID] - /Estado Trabajo - /Obtener Extintor - /Debilitar Incendio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Curar Enfermedad [ID] - /Poner Cono - /Poner Valla - /Recoger - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Examinar Enfermedad [ID]", "Facción: ");
							}
							// CNN
							else if ( PlayersData[playerid][Faccion] == CNN )
							{
							    SendInfoMessage(playerid, 1, "/Na [Narrar] - /Tr [Transmitir] - /Entrevistar [ID] - /Sacar [ID] - /Finalizar Entrevista - /Obtener Cámara", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Conectar [Número] - /Desconectar - /En [Texto]", "Facción: ");
							}
							// ADP
							else if ( PlayersData[playerid][Faccion] == ADP )
							{
							    SendInfoMessage(playerid, 1, "/Localizar Coche [Matrícula] - /Localizar Persona [ID] - /Datos [ID] - /Proteger [ID] - /Servicio [ID] [Precio] [Razón]", "Facción: ");
							}
							// CAMIONEROS
							else if ( PlayersData[playerid][Faccion] == CAMIONEROS )
							{
							    SendInfoMessage(playerid, 1, "/Obtener Mercancía - /Depositar Mercancía - /Abastecer Gasolinera - /Abastecer Negocio - /Ver Precio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Abastecer Almacén - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Poner Cono - /Recoger - /Ver Deposito", "Facción: ");
							}
							// TALLER_SF
							else if ( PlayersData[playerid][Faccion] == TALLER_SF)
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Taller - /Reparar [ID] [Precio] - /Factura [ID] [Precio] [Razón] - /Echar Aceíte", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Pistas - /Reparar [ID] [Precio] - /Vender Ganzúas [ID] [Precio] - /Aceíte [ID] [Precio]", "Facción: ");
							}
							// LSPD
							else if ( PlayersData[playerid][Faccion] == LSPD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Quitar Licencia Armas [ID] - /Quitar Licencia Coche [ID] - /Quitar Licencia Camión [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Vuelo [ID] - /Quitar Licencia Bote [ID] - /Quitar Licencia Pesca [ID] - /Quitar Licencia Moto [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Tren [ID] - /Multar [ID] [Precio] [Razón] - /Esposar [ID] - /Recoger - /Poner Uniforme - /Sirena", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Equipo [ID_EQUIPO] - /Chequear [ID] - /Arrestar [ID] [Tiempo] - /Poner Candado [Razón] - /Meg [Texto]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Decomisar [ID] - /Meter [ID] - /Autorizar [ID] - /Desactivar Bomba - /Alarmas - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Cono - /Poner Valla - /Poner Pincho - /Ver Candado", "Facción: ");
							}
							// CONTRABANDISTAS
							else if ( PlayersData[playerid][Faccion] == CONTRABANDISTAS )
							{
							    SendInfoMessage(playerid, 1, "/Obtener Mercancía - /Depositar Mercancía - /Abastecer Tienda - /Ver Precio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Abastecer Almacén - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad]", "Facción: ");
							}
							// SICARIOS
							else if ( PlayersData[playerid][Faccion] == SICARIOS )
							{
							    SendInfoMessage(playerid, 1, "/Atar [ID] - /Crear Arma - /Bombas - /Desactivar Bomba - /Ver Bomba - /Poner Bomba [Tipo] - /Detonar Todas", "Facción: ");
							}
							// TALLER_LS
							else if ( PlayersData[playerid][Faccion] == TALLER_LS)
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Taller - /Reparar [ID] [Precio] - /Factura [ID] [Precio] [Razón] - /Echar Aceíte", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Pistas - /Reparar [ID] [Precio] - /Vender Ganzúas [ID] [Precio] - /Aceíte [ID] [Precio]", "Facción: ");
							}
							// COLTS
							else if ( PlayersData[playerid][Faccion] == COLTS )
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// AK
							else if ( PlayersData[playerid][Faccion] == AK)
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// VELTRAN
							else if ( PlayersData[playerid][Faccion] == VELTRAN)
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// HEORS
							else if ( PlayersData[playerid][Faccion] == HEORS)
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// LSMD
							else if ( PlayersData[playerid][Faccion] == LSMD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Llamadas Bomberos - /Curar [ID] - /Estado Trabajo - /Obtener Extintor - /Debilitar Incendio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Curar Enfermedad [ID] - /Poner Cono - /Poner Valla - /Recoger - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Examinar Enfermedad [ID]", "Facción: ");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "381", "Tu facción no tiene comandos");
						}
			    	}
			    	// COMANDO: /Ayuda Luces
				  	else if (strcmp("/Ayuda Luces", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Luces - /Izquierda - /Derecha - /Estacionamiento", "Luces: ");
			    	}
			    	// COMANDO: /Ayuda Coche
				  	else if (strcmp("/Ayuda Coche", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Llaves Coche - /Aparcar - /Vender Mi Coche - /Dar Llaves [ID] - /Maletero - /Matrícula - /Papeles [ID] - /Llenar Lata", "Coche: ");
					    SendInfoMessage(playerid, 1, "/Echar Lata - /Tiempo Coche - /Llenar Deposito [Cantidad]- /Apagar - /Apagar Alarma - /Encender - /Encender Alarma - /Puente", "Coche: ");
					    SendInfoMessage(playerid, 1, "/Estado Alarma - /Llaves Maletero - /Estado Capó - /Robar Gas - /Ayuda Coger - /Ayuda Dejar - /Estéreo - /Guantera", "Coche: ");
					    SendInfoMessage(playerid, 1, "/Llaves Guantera - /Freno", "Coche: ");
			    	}
			    	// COMANDO: /Ayuda Casa
				  	else if (strcmp("/Ayuda Casa", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Llaves Casa - /Llaves Armario - /Llaves Garage - /Comprar Casa - /Vender Casa - /Cambiar Precio Alquiler [Precio]", "Casa: ");
					    SendInfoMessage(playerid, 1, "/Desalojar Todos - /Desalojar [ID] - /Alquilar - /Consultar Casa - /Retirar Casa - /Timbre - /Info Casa - /Armario", "Casa: ");
					    SendInfoMessage(playerid, 1, "/Dar Llaves Amigo [ID] - /Llaves Amigos - /Llaves Refrigerador - /Refrigerador - /Cocinar [ID_Refrigerador]", "Casa: ");
					    SendInfoMessage(playerid, 1, "/Ayuda Coger - /Ayuda Dejar - /Música - /Gaveta - /Llaves Gaveta", "Casa: ");
			    	}
			    	// COMANDO: /Ayuda Banco
				  	else if (strcmp("/Ayuda Banco", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Banco - /Consultar Cajero - /Depositar Cajero [Cantidad] - /RetirarCajero [Cantidad] - /Crear Cheque Efectivo [ID] [Cantidad]", "Banco: ");
					    SendInfoMessage(playerid, 1, "/Crear Cheque Personal [ID] [Cantidad]", "Banco: ");
			    	}
			    	// COMANDO: /Ayuda Aceptar
				  	else if (strcmp("/Ayuda Aceptar", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Aceptar Invite - /Aceptar Coche - /Aceptar Contrato - /Aceptar Factura - /Aceptar Reparación", "Aceptar: ");
					    SendInfoMessage(playerid, 1, "/Aceptar Protección - /Aceptar Drogas - /Aceptar Multa - /Aceptar Ganzúas - /Aceptar Aceíte", "Aceptar: ");
					    SendInfoMessage(playerid, 1, "/Aceptar Servicios - /Aceptar Sexo - /Aceptar Móvil", "Aceptar: ");
			    	}
			    	// COMANDO: /Ayuda Coger
				  	else if (strcmp("/Ayuda Coger", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Coger Arma - /Coger ArmaEx [ID_SLOT] - /Coger Chaleco - /Coger Drogas [Cantidad] - /Dar Ganzúas [Cantidad]", "Coger: ");
					    SendInfoMessage(playerid, 1, "/Coger Materiales [Cantidad] - /Coger Bombas [Cantidad] - /Coger Artículo [ID_Refrigerador] - /Coger Objeto", "Coger: ");
					    SendInfoMessage(playerid, 1, "/Coger ObjetoEx [ID_SLOT]", "Coger: ");
			    	}
			    	// COMANDO: /Ayuda Usar
				  	else if (strcmp("/Ayuda Usar", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Usar Bolsa [ID_Bolsa] - /Usar Refrigerador [ID_Refrigerador]", "Usar: ");
			    	}
			    	// COMANDO: /Ayuda Quitar
				  	else if (strcmp("/Ayuda Quitar", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Quitar Extorsión [ID] - /Quitar Arma [ID]", "Quitar: ");
			    	}
			    	// COMANDO: /Ayuda Dejar
				  	else if (strcmp("/Ayuda Dejar", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Dejar Arma - /Dejar ArmaEx [ID_SLOT] - /Dejar Chaleco - /Dejar Drogas [Cantidad] - /Dejar Ganzúas [Cantidad]", "Dejar: ");
					    SendInfoMessage(playerid, 1, "/Dejar Materiales [Cantidad] - /Dejar Bombas [Cantidad] - /Dejar Artículo [ID_Bolsa]", "Dejar: ");
			    	}
			    	// COMANDO: /Ayuda Canales
				  	else if (strcmp("/Ayuda Canales", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/O [OOC General] - /B [OOC Local] - /W [ID] [Duda] - /N [Fuera de Móvil]", "Canales: ");
					    SendInfoMessage(playerid, 1, "/F [Family] - /R [Radio] - /Cambiar Frecuencia", "Canales: ");
			    	}
			    	// COMANDO: /Ayuda Rangos
				  	else if (strcmp("/Ayuda Rangos", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
			    	    if ( PlayersData[playerid][Faccion] != CIVIL )
			    	    {
			    	        new MsgRangos[MAX_TEXT_CHAT];
	       				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
							for (new i = 0; i <= GetMaxFaccionRango(PlayersData[playerid][Faccion]); i++)
							{
							    format(MsgRangos, sizeof(MsgRangos), "%i - %s", i + 1, FaccionesRangos[PlayersData[playerid][Faccion]][i]);
	   				    		SendInfoMessage(playerid, 1, MsgRangos, "Rango: ");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "182", "Tu facción no tiene rangos");
						}
			    	}

			    	// COMANDO: /Ayuda Crear
				  	else if (strcmp("/Ayuda Crear", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Crear Arma - /Crear Cheque Efectivo [ID] [Cantidad] - /Crear Cheque Personal [ID] [Cantidad]", "Crear: ");
			    	}
			    	// COMANDO: /Ayuda Rangos
				  	else if (strcmp("/Ayuda Negocio", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Comprar Negocio - /Vender Negocio - /Consultar Negocio - /Retirar Negocio [Cantidad] - /Depositar Negocio [Cantidad]", "Negocios: ");
					    SendInfoMessage(playerid, 1, "/Cambiar Nombre [Nuevo Nombre] - /Cambiar Precio Entrada [Nuevo Precio] - /Cambiar Precio Materiales [Nuevo Precio]", "Negocios: ");
					    SendInfoMessage(playerid, 1, "/Dar Extorsión [ID] - /Quitar Extorsión [ID] - /Retirar Extorsión - /Consultar Extorsión - /Llaves Negocio - /Info Negocio", "Negocios: ");
			    	}
			    	//      /Ayuda Local
			    	else if (strcmp("/Ayuda Local", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
		            {
		                SendInfoMessage(playerid, 1, "/Comprar Local - /Vender Local - /Cambiar Precio Entrada [Precio] - /Consultar Local - /Retirar Local - /Cambiar Nombre [Nuevo Nombre]", "Local: ");
		                SendInfoMessage(playerid, 1, "/Llaves Local - /Llaves PuertaEx - /Dar Llaves Amigo [ID] - /Llaves Amigos - /Llaves Garage", "Local: ");
		                SendInfoMessage(playerid, 1, "/Llaves Armario - /Armario - /Llaves Gaveta - /Gaveta - /Llaves Refrigerador - /Refrigerador - /Cocinar [ID_Refrigerador]", "Local: ");
		                SendInfoMessage(playerid, 1, "/Ayuda Coger - /Ayuda Dejar - /Música - /Timbre - /Info Local", "Local: ");
		                return 1;
		            }
					// COMANDO: /Ayuda Owned
				  	else if (strcmp("/Ayuda Owned", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				    {
						if (PlayersData[playerid][Admin] >= 1)
						{
							SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
		      				SendInfoMessage(playerid, 1, "/AdminOn - /A [Texto] /J [Texto] - /Estado Whisper - /Test [ID] - /Borrar - /Jail [ID] [Tiempo] [Razón]",																											"Owned Level 1: ");
		      				SendInfoMessage(playerid, 1, "/Kick [ID] [Razón] - /Revisar [ID] - /Traer [ID] - /Ir [ID] - /Res [ID] [DUDA] - /Espectar [ID]",													"Owned Level 1: ");
		      				SendInfoMessage(playerid, 1, "/Ver - /Ip [Ip]", 																																			"Owned Level 1: ");
							if (PlayersData[playerid][Admin] >= 2)
							{
			      				SendInfoMessage(playerid, 1, "/Spawn [ID] - /Parar [ID] - /Warn [ID] [Razón] - /Tutorial [ID] - /Teles [ID_TELE]", 															"Owned Level 2: ");
					   	   		if (PlayersData[playerid][Admin] >= 3)
								{
				      				SendInfoMessage(playerid, 1, "/Estado Todos - /Número [Número] - /Respawn [ID] - /Ban [ID] [Razón] - /Silenciar [ID] - /Matar [ID]",									"Owned Level 3: ");
				      				SendInfoMessage(playerid, 1, "/Vida [ID] - /Chaleco [ID]",																									"Owned Level 3: ");
						   	   		if (PlayersData[playerid][Admin] >= 4)
									{
					      				SendInfoMessage(playerid, 1, "/Clima [Tipo] - /Recoger Todos - /Tele [InteriorID] [X] [Y] [Z]", 																	"Owned Level 4: ");
							   	   		if (PlayersData[playerid][Admin] >= 5)
										{
						      				SendInfoMessage(playerid, 1, "/Respawn Facción [ID_Facción] - /Estado Dudas - /Limpiar [ID]",																	"Owned Level 5: ");
								   	   		if (PlayersData[playerid][Admin] >= 6)
											{
							      				SendInfoMessage(playerid, 1, "/ICoche - /ICocheEx [ID] - /Skin [ID] - /Race [ID] - /Ver Deposito", 																			"Owned Level 6: ");
									   	   		if (PlayersData[playerid][Admin] >= 7)
												{
								      				SendInfoMessage(playerid, 1, "/Borrar Warn [ID] - /DivorciarEx [ID] - /BanEx [Nombre_Del_Jugador] - /Editar Pistas - /StatsEx [ID]", 					"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/IrC [ID_Coche] - IrN [ID_Negocio] - /IrCa [ID_Casa] - /Incendios - /Desactivar Bomba Todos - /Respawn Todos", 			"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/Enfermar [ID] [ID_Enfermedad] - /Cnivel [Nivel] - /Nnivel [Nivel] - /Crear Incendio [ID_Casa] - /AparcarEx", 			"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/TraerC [ID_COCHE] - /Desbanear [Nombre_Del_Jugador] - /DmArmas - /Dm Equipo - /Matar DM - /DM [ID] [Equipo]", 			"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/SkinDM [Equipo] [Skin_ID] [Equipo] - /FacciónEx [Nombre_Apellido] [ID_Faccion] [Rango] - /DM Off", 						"Owned Level 7: ");
											 		SendInfoMessage(playerid, 1, "/Facción [ID] [ID_Facción] [Rango] - /Respawn TodosEx - /Nombre [ID] [Nombre]", 											"Owned Level 7: ");
										   	   		if (PlayersData[playerid][Admin] >= 8)
													{
									      				SendInfoMessage(playerid, 1, "/CCambiar [ID_COCHE] - /SpawnDM [Equipo] - /Traerc Bug - /VCoche", "Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Server Stats - /Reiniciar - /Cerrar Servidor", 					 "Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Cambiar Password [Nombre_Apellido] [Nueva Passowrd]", 			 "Owned Level 8: ");
											   	   		if (PlayersData[playerid][Admin] >= 9)
														{
										      				SendInfoMessage(playerid, 1, "/Staff [ID] [Nivel] - /Ayudante [ID] - /Mapper [ID] [Nivel] - /Bonus [Monto] - /Runpaga", "Owed Level Líder: ");
										      				SendInfoMessage(playerid, 1, "/Ganzuas [ID] [Monto] - /Dinero [ID] [Monto] - /Materiales [ID] [Monto]", 	            "Owed Level Líder: ");
										      				SendInfoMessage(playerid, 1, "/Estado Commands - /MsgEX [Estilo] [Texto]",                                              "Owed Level Líder: ");
														}
								      				}
							      				}
						      				}
					      				}
						   	   		}
					   	   		}
					   	   	}
						}
						else
						{
							SendInfoMessage(playerid, 0, "101", "Tú no tienes acceso a el comando /Ayuda Owned.");
						}
					}
					//      /Ayudantes
		            else if (strcmp("/Ayudantes", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
					{
					    new string[100];
					    new foundHelper;
						for (new i = 0, maxid = GetPlayerPoolSize(); i <= maxid; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Ayudante] )
							{
							    if ( !foundHelper )
							    {
								    SendClientMessage(playerid, 0x505050FF, "{505050}»»»»»»»»»»»»»»»»»» {008228}A{00B428}yudantes {008228}O{00B428}nline {505050}««««««««««««««««««");
									foundHelper++;
								}
								format(string, sizeof(string), "* %s[%i]", PlayersDataOnline[i][NameOnlineFix], i);
							    SendClientMessage(playerid, 0xF5FF00FF, string);
							}
						}
						if ( !foundHelper )
						{
						    SendClientMessage(playerid, 0x505050FF, "{910000}»»»»»»»»»»»»» {E10000}No hay ayudantes conectados {910000}«««««««««««««");
						}
						return 1;
					}
	                //      /Ayudante [ID]
	                else if (strfind(cmdtext, "/Ayudante", true) == 0)
	                {
	                    if (PlayersData[playerid][Admin] < 9) return SendAccessError(playerid, "Ayudante");

	                    new getid;
	                    if (!sscanf(cmdtext[10], "u", getid))
	                    {
	                        if(!IsPlayerLoguedEx(playerid, getid)) return 1;

	                    	new string[150], stringA[150], stringB[150];

	                    	if (!PlayersData[getid][Ayudante])
		                    {
					            format(stringA, sizeof(stringA), "Le diste ayudante a %s[%i].", PlayersDataOnline[getid][NameOnline], getid);
					            format(string, sizeof(string), "%s[%i] te metio a formar del equipo de ayudantes. Usa /Ayuda Ayudante.", PlayersDataOnline[playerid][NameOnline], playerid);
					            format(stringB, sizeof(stringB), "%s %s[%i] metió a %s[%i] a ayudantes.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[getid][NameOnline], getid);
		                        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, stringA);
                				SendClientMessage(getid, COLOR_MENSAJES_DE_AVISOS, string);
					            MsgCheatsReportsToAdminsEx(stringB, 9);

					            PlayersData[getid][Ayudante] = true;
					            return 1;
		                    }
		                    else
		                    {
		                        format(stringA, sizeof(stringA), "Expulsaste a %s[%i] del equipo de ayudantes.", PlayersDataOnline[getid][NameOnline], getid);
								format(string, sizeof(string), "%s[%i] te ha expulsado del equipo de ayudantes.", PlayersDataOnline[playerid][NameOnline], playerid);
								format(stringB, sizeof(stringB), "%s %s[%i] expulso a %s[%i] de ayudantes.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[getid][NameOnline], getid);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, stringA);
                				SendClientMessage(getid, COLOR_MENSAJES_DE_AVISOS, string);
					            MsgCheatsReportsToAdminsEx(stringB, 9);

		                        PlayersData[getid][Ayudante] = false;
					            return 1;
		                    }
	                    }
	                    else
	                    {
	                        SendInfoMessage(playerid, 0, "1615", "Ha introducído mal el sintaxis del comando /Ayudante. Ejemplo correcto: /Ayudante 22");
	                        return 1;
	                    }
	                }
		            // COMANDO: /Ayuda ayudante
      				else if (strcmp("/Ayuda Ayudante", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				    {
						if (PlayersData[playerid][Ayudante])
						{
						    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
							SendInfoMessage(playerid, 1, "/J [Texto] - /Res [ID] [DUDA].", "Ayudante:");
						}
						else SendAccessError(playerid, "Ayuda ayudante");
					}
		            // COMANDO: /Ayuda Mapper
      				else if (strcmp("/Ayuda Mapper", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
						if (PlayersData[playerid][Mapper])
						{
						    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
						    if (PlayersData[playerid][Mapper] >= 2)
						    {
						        SendInfoMessage(playerid, 1, MapperRangos[1], "Comandos de");
						        SendInfoMessage(playerid, 1, "/CPrecio [Precio] - /VCasa", 						 "Mapper Casas:");
						        SendInfoMessage(playerid, 1, "/NPrecio [Precio] - /Vnegocio", 					 "Mapper Negocios:");
						        SendInfoMessage(playerid, 1, "/LPrecio [Precio] - /VLocal - /Borrar Local [ID]", "Mapper Locales:");
						    }
							SendInfoMessage(playerid, 1, MapperRangos[0], "Comandos de");
						    SendInfoMessage(playerid, 1, "/Cambiar Nombre - /Editar Pistas", 																				       "Mapper:");
							SendInfoMessage(playerid, 1, "/Crear Casa [Tipo][Precio][Nivel] - /IrCa [ID_Casa] - /CPos [ID_Casa] - /CTipo [ID] - /CNivel [Nivel] - /Incendios",     "Mapper Casas:");
						    SendInfoMessage(playerid, 1, "/Crear Garage [ID_Casa][Tipo_Garage] - /Gtipo [ID] - /Info Garage - /Garages [ID_Casa]",                                 "Mapper Casa Garage:");
						    SendInfoMessage(playerid, 1, "/Design Garage [ID_Design] - /Dg C (Coche) - /Dg D (Dentro) - /Dg A (Afuera)", 										   "Mapper Casa Garage:");
						    SendInfoMessage(playerid, 1, "/Dg cP[ID_Casa][ID_Garage] - /Dg dP [ID_Casa][ID_Garage] - /Dg aP [ID_Casa][ID_Garage] - /Dg Rand [ID_Casa][ID_Garage]", "Mapper Casa Garage:");
						    SendInfoMessage(playerid, 1, "/Crear Negocio [Tipo][Precio][Nivel] - /IrN [ID_Negocio] - /NPos [ID_Negocio] - /Nnivel [Nivel] - /NTipo [ID]", 		   "Mapper Negocios:");
						    SendInfoMessage(playerid, 1, "/Crear Local [Tipo][Precio][Nivel] - /Irl [ID_Local] - /Lpos [ID_Local] - /LNivel [ID]", 								   "Mapper Locales:");
							SendInfoMessage(playerid, 1, "/CrearO - /Sel - /IrM [ID_Mapeo] - /IrPuerta - /IrPeaje - /IrParqueo", 												   "Mapper Mapeos:");
							SendInfoMessage(playerid, 1, "/o[x-y-z] [ID_Mapeo] [Valor] - /r[x-y-z] [ID_Mapeo] [Valor]", 														   "Mapper Mapeos:");
							SendInfoMessage(playerid, 1, "/TelePos [ID_Tele] - /Borrar Tele - /TeleP - /Tele Tipo [Tipo]", 														   "Mapper Teles:");
							
						}
						else
						{
							SendAccessError(playerid, "Ayuda mapper");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "102", "Quizás quiso decir: /Ayuda");
					}
				}
				// COMANDO: /Reglas
			  	else if (strcmp("/Reglas", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, " - No se permite nada de lo siguiente:", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/DM - DeathMatch", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/CK - CarKill", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/DB - DriverBy", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/MG - MetaGaming", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/PG - PowerGaming", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/Flood - Flood", "Reglas: ");
				    SendInfoMessage(playerid, 1, "Faltas de respeto entre usuarios", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/CJ - /RK - /HQ", "Otras: ");
				    SendInfoMessage(playerid, 1, " - LA LISTA NO TERMINA ACÁ CONSULTE EL FORO PARA INFORMACIÓN MÁS EXTENSA -", " ");
		    	}
			  	else if (strcmp("/HQ", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es entrar dentro o en el area de una facción, sin haber sido llevado por ningún miembro de la misma, y sin Rol", "HeadQuarters: ");
		    	}
			  	else if (strcmp("/RK", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando un jugador te mata y tú lo buscas para volverlo a matar. Se supone que cuando mueres no recuerdas nada de lo que te pasó", "RevengeKill: ");
		    	}
			  	else if (strcmp("/CJ", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando un jugador va pasando en un vehículo y otro jugador lo saca del vehículo porque si, sin ningún motivo", "CarJacked: ");
		    	}
			  	else if (strcmp("/DM", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando un jugador empieza a golpear o mata a otro sin tener motivo", "DeathMatch: ");
		    	}
			  	else if (strcmp("/CK", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Cuando vamos en un vehículo y atropellamos gente sin motivo alguno, simplemente porque mola", "CarKill: ");
		    	}
			  	else if (strcmp("/DB", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Si disparas de dentro de un Coche/Moto y te encuentras en el puesto de conductor, allí estás haciendo DriverBy", "DriverBy: ");
		    	}
			  	else if (strcmp("/MG", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Usar información totalmente OOC y usarla IC, por ejemplo cuando vemos el nombre en la cabeza del jugador", "MetaGaming: ");
				    SendInfoMessage(playerid, 1, "y lo llamamos por su nombre", "MetaGaming: ");
		    	}
			  	else if (strcmp("/PG", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando el jugador hace acciones exageradas, que no son posibles en la realidad o dentro del juego", "PowerGaming: ");
		    	}
			  	else if (strcmp("/Flood", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Repetir consecutivamente el mismo texto u similar en 3 o más líneas", "Flood: ");
		    	}
				// COMANDO: /Escoger Spawn [ID] [Spawnid]
				else if (strfind(cmdtext, "/Escoger Spawn ", true) == 0 )
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
				        new playeridAsignar = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new SpawnIDAsignar = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( playerid == playeridAsignar || IsPlayerNearEx(playerid, playeridAsignar,
							 "1522",
							 "1523",
							 "1524",
							 "El jugador que desea asginarle un spawn no se encuentra conectado",
							 "El jugador que desea asginarle un spawn no se encuentra logueado",
							 "El jugador que desea asginarle un spawn no se encuentra cerca de tí") )
					    {
							if ( PlayersData[playeridAsignar][Faccion] == PlayersData[playerid][Faccion] )
							{
							    if ( SpawnIDAsignar >= 1 && SpawnIDAsignar <= 2 )
							    {
							        SpawnIDAsignar--;
							        if ( FaccionData[PlayersData[playerid][Faccion]][Spawn_X][SpawnIDAsignar] != 0.0 )
							        {
							            if ( PlayersData[playeridAsignar][SpawnFac] != SpawnIDAsignar )
							            {
	       							        PlayersData[playeridAsignar][SpawnFac] = SpawnIDAsignar;
                                            UpdateSpawnPlayer(playerid);
											new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
							                if ( playerid != playeridAsignar )
							                {
												format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s te ha cambiado el spawn de facción por el ID %i.", PlayersDataOnline[playerid][NameOnlineFix], PlayersData[playeridAsignar][SpawnFac] + 1);
					                            SendInfoMessage(playeridAsignar, 3, "0", MsgAsignadosToPlayer);
												format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "Le has cambiado el spawn de facción a %s por el ID %i.", PlayersDataOnline[playeridAsignar][NameOnlineFix], PlayersData[playeridAsignar][SpawnFac] + 1);
					                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
				                            }
				                            else
				                            {
												format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "Te has cambiado el spawn de facción al ID %i.", PlayersData[playeridAsignar][SpawnFac] + 1);
					                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
											}
			                            }
			                            else
			                            {
											SendInfoMessage(playerid, 0, "1525", "Ya este jugador tiene ese ID de spawn asiganado.");
										}
		                            }
		                            else
		                            {
										SendInfoMessage(playerid, 0, "1526", "El ID de spawn introducido, no está definido en su facción");
		                            }
	                            }
	                            else
	                            {
									SendInfoMessage(playerid, 0, "1527", "El ID de spawn debe estar comprendido entre 1 y 2.");
								}
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1528", "El jugador que desea asignarle un spawn no pertenece a su facción");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1529", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Ver
				else if (strfind(cmdtext, "/Ver", true) == 0)
				{
			//		17-	*		/Ver							- Ver los miembros del Staff que esten Online
					if (strcmp("/Ver", cmdtext, true, 4) == 0 && strlen(cmdtext) == 4)
					{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 1)
						{
							Comandos_Admin(17, playerid, 0, PlayersData[playerid][Admin], 0, "0");
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "187", "Tú no tienes acceso a el comando /Ver.");
					        return 1;
						}

					}
					// COMANDO: /Ver Precio
				  	else if ( strcmp("/Ver Precio", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11 )
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 )
					    {
							if ( PlayersDataOnline[playerid][InPickupNegocio] )
					        {
					            new bizzid = PlayersDataOnline[playerid][InPickupNegocio];
					            
					            if ( NegociosData[bizzid][Type] >= 6 && PlayersData[playerid][Faccion] == CAMIONEROS )
					            {
							        if ( NegociosData[bizzid][PricePiece] == 0 )
							        {
							        	SendInfoMessage(playerid, 2, "0", "Este negocio no está aceptando materiales");
									}
									else
									{
									    new MsgVerPrecio[MAX_TEXT_CHAT];
									    format(MsgVerPrecio, sizeof(MsgVerPrecio), "Este negocio paga el material a $%i. Actualmente tiene [%i/5000]", NegociosData[bizzid][PricePiece], NegociosData[bizzid][Materiales]);
										SendInfoMessage(playerid, 2, "0", MsgVerPrecio);
									}
								}
								else if ( NegociosData[bizzid][Type] <= 5 && PlayersData[playerid][Faccion] == CONTRABANDISTAS )
								{
							        if ( NegociosData[bizzid][PricePiece] == 0 )
							        {
							        	SendInfoMessage(playerid, 2, "0", "Esta tienda no está aceptando materiales");
									}
									else
									{
									    new MsgVerPrecio[MAX_TEXT_CHAT];
									    format(MsgVerPrecio, sizeof(MsgVerPrecio), "Esta tienda paga el material a $%i. Actualmente tiene [%i/5000]", NegociosData[bizzid][PricePiece], NegociosData[bizzid][Materiales]);
										SendInfoMessage(playerid, 2, "0", MsgVerPrecio);
									}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "784", "No puedes ver el precio de compra de este negocio");
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "785", "No te encuentras en ningún negocio");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "786", "Usted no puedes ver el precio del producto!");
						}
				    }
				    //
					// COMANDO: /Ver Asignados [ID]
					else if (strfind(cmdtext, "/Ver Asignados ", true) == 0 )
					{
					    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
					    {
						    if ( IsPlayerNearEx(playerid, strval(cmdtext[15]),
								 "1202",
								 "1203",
								 "1204",
								 "El jugador que desea verle los vehículos asignados no se encuentra conectado",
								 "El jugador que desea verle los vehículos asignados no se encuentra logueado",
								 "El jugador que desea verle los vehículos asignados no se encuentra cerca de tí") )
						    {
								if ( PlayersData[strval(cmdtext[15])][Faccion] == PlayersData[playerid][Faccion] )
								{
									new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
									format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s mira los vehículos que tienes asignados con el comando /Ver Asignados.", PlayersDataOnline[playerid][NameOnlineFix]);
		                            SendInfoMessage(strval(cmdtext[15]), 3, "0", MsgAsignadosToPlayer);

									ShowAsignados(strval(cmdtext[15]), playerid);
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1358", "El jugador que desea verle los vehículos asignados no pertenece a su facción");
								}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1205", "Usted no es líder ni sub-líder!");
						}
					}
					// COMANDO: /Ver Horas [ID]
					else if (strfind(cmdtext, "/Ver Horas ", true) == 0 )
					{
					    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
					    {
						    if ( IsPlayerNearEx(playerid, strval(cmdtext[11]),
								 "1361",
								 "1362",
								 "1363",
								 "El jugador que desea verle las horas jugadas no se encuentra conectado",
								 "El jugador que desea verle las horas jugadas no se encuentra logueado",
								 "El jugador que desea verle las horas jugadas no se encuentra cerca de tí") )
						    {
								if ( PlayersData[strval(cmdtext[11])][Faccion] == PlayersData[playerid][Faccion] )
								{
									new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
									format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s mira las horas jugadas desde el último reinicio de horas con el comando /Ver Horas.", PlayersDataOnline[playerid][NameOnlineFix]);
		                            SendInfoMessage(strval(cmdtext[11]), 3, "0", MsgAsignadosToPlayer);
									format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s tiene %i horas jugadas desde el último reinicio de horas.", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix], PlayersData[strval(cmdtext[11])][HorasWork]);
		                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1359", "El jugador que desea verle las horas jugadas no pertenece a su facción");
								}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1360", "Usted no es líder ni sub-líder!");
						}
					}
					//////////--- /Ver Design
					else if (strcmp("/Ver Design", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
	                        new MsgChangeDesing[MAX_TEXT_CHAT];
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Desing ID [%i]  -", PlayersDataOnline[playerid][DesignGarageId]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Xg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Yg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Zg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZg]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgOut]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgIn]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1169", "No tienes acceso al comando /Ver Design");
						}
					}
					// COMANDO: /Ver Frecuencia
				  	else if ( strcmp("/Ver Frecuencia", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 )
			    	{
					    if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
					    {
							if ( PlayersDataOnline[playerid][StateChannelRadio] )
							{
							    new MsgFrecuencia[MAX_TEXT_CHAT];
								Acciones(playerid, 8, "mira en que frecuencia está su radio");
								format(MsgFrecuencia, sizeof(MsgFrecuencia), "Se encuentra en la frecuencia [%i]", PlayersDataOnline[playerid][Frecuencia] );
								SendInfoMessage(playerid, 2, "0", MsgFrecuencia);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "1016", "Tú tienes cerrado el canal Radio personal, abrelo con /Estado Radio y luego usa /Ver Frecuencia");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1017", "Su Facción no tiene canal /R [Radio], no puedes usar /Ver Frecuencia");
						}
			    	}
					// COMANDO: /Ver Saldo
				  	else if ( strcmp("/Ver Saldo", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10 )
			    	{
					    new MsgSaldoCheck[MAX_TEXT_CHAT];
						Acciones(playerid, 8, "chequea su saldo");
						format(MsgSaldoCheck, sizeof(MsgSaldoCheck), "Tiene $%i de saldo en su móvil.", PlayersData[playerid][Saldo] );
						SendInfoMessage(playerid, 2, "0", MsgSaldoCheck);
			    	}
					// COMANDO: /Ver Desposito
				  	else if (strcmp("/Ver Deposito", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				  	{
				  	    if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 || PlayersData[playerid][Admin] >= 6 )
				  	    {
					  	    new MyNearGas = GetMyNearGas(playerid);
					  	    if ( MyNearGas != -1 )
					  	    {
					  	        new MsgConsultarDepositoGas[MAX_TEXT_CHAT];
					  	        format(MsgConsultarDepositoGas, sizeof(MsgConsultarDepositoGas), "Esta gasolinera tiene [%i/10000] litros de gas",  Gasolineras[MyNearGas][Fuel]);
								SendInfoMessage(playerid, 2, "0", MsgConsultarDepositoGas);
					  	    }
				  	    }
				  	    else
				  	    {
							SendAccessError(playerid, "Ver Deposito.");
						}
					}
					// COMANDO: /Ver Bomba
				  	else if (strcmp("/Ver Bomba", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
				  	{
						if ( PlayersData[playerid][Faccion] == SICARIOS &&
							 PlayersData[playerid][Rango] <= 4 )
					    {
					        new IsBombNear = IsPlayerNearBomba(playerid, 1.5, -1);
					        if ( IsBombNear != -1 )
					        {
							    new MsgVerBomba[MAX_TEXT_CHAT];
							    format(MsgVerBomba, sizeof(MsgVerBomba), "Esta bomba tiene el número de control #%i", IsBombNear);
								SendInfoMessage(playerid, 2, "0", MsgVerBomba);
			            	}
			            	else
			            	{
								SendInfoMessage(playerid, 0, "1300", "No te encuentras cerca de una bomba");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1297", "Usted no puede ver el número de control en una bomba!");
						}
					}
					// COMANDO: /Ver Candado
	                else if (strcmp("/Ver Candado", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
                    {
						if ( PlayersData[playerid][Faccion] == SFPD  || PlayersData[playerid][Faccion] == LSPD)
	                    {
							if ( IsPlayerInAnyVehicle(playerid) ) return SendInfoMessage(playerid, 0, "0", "Desde adentro del vehículo no puedes ver el candado");
							
	                        new MyNearCar = IsPlayerInNearVehicle(playerid);
	                        if ( MyNearCar )
	                        {
								if(!DataCars[MyNearCar][LockPolice]) return SendInfoMessage(playerid, 0, "0", "Este coche no tiene candado!");
								
								new
									razon[144],
									razonSplit[3][50],
									SplitPos;
									
								format(razonSplit[2], 50, DataCars[MyNearCar][ReasonLock]);
								
								SplitPos = strfind(razonSplit[2], " ", true);
								strmid(razonSplit[0], razonSplit[2], 0, SplitPos);
								strdel(razonSplit[2], 0, SplitPos+1);
								
								SplitPos = strfind(razonSplit[2], ":", true);
								strmid(razonSplit[1], razonSplit[2], 0, SplitPos);
								strdel(razonSplit[2], 0, SplitPos+2);
								
	                            Acciones(playerid, 0, "mira el candado");
	                            format(razon, sizeof(razon), "Candado Policial: Departamento %s, Por %s, Razon: %s", razonSplit[0], razonSplit[1], razonSplit[2]);
	                            SendClientMessage(playerid, COLOR_MESSAGES[2], razon);
	                       	}
	                    }
	                    else return SendInfoMessage(playerid, 0, "878", "Usted no puede ver candados!");
	                }
					else
					{
						SendInfoMessage(playerid, 0, "1018", "Quizás quiso decir: /Ver {Frecuencia, Precio, Saldo, Deposito, Asignados, Bomba, Horas [ID], Candado}");
					}
				}
				// COMANDO: /Reiniciar Horas [ID]
				else if (strfind(cmdtext, "/Reiniciar Horas ", true) == 0 )
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[17]),
							 "1366",
							 "1367",
							 "1368",
							 "El jugador que deseas reiniciarles las horas no se encuentra conectado",
							 "El jugador que deseas reiniciarles las horas no se encuentra logueado",
							 "El jugador que deseas reiniciarles las horas no se encuentra cerca de tí") )
					    {
							if ( PlayersData[strval(cmdtext[17])][Faccion] == PlayersData[playerid][Faccion] )
							{
								new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
								format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s te reinicio las horas de trabajo.", PlayersDataOnline[playerid][NameOnlineFix]);
	                            SendInfoMessage(strval(cmdtext[17]), 3, "0", MsgAsignadosToPlayer);
								format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "Reiniciaste las horas de trabajo a %s .", PlayersDataOnline[strval(cmdtext[17])][NameOnlineFix]);
	                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
	                            PlayersData[strval(cmdtext[17])][HorasWork] = 0;
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1364", "El jugador que desea verle las horas jugadas no pertenece a su facción");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1365", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Abastecer
				else if (strfind(cmdtext, "/Abastecer", true) == 0)
				{
					// COMANDO: /Abastecer Mercancías
				  	if ( strcmp("/Abastecer Gasolinera", cmdtext, true, 21) == 0 && strlen(cmdtext) == 21 )
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 )
					    {
					        if ( PlayersData[playerid][MyBonus] )
					        {
					            if ( IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 456 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 578 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 454 ||
 									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 484 )

					            {
									new MyNearGas = GetMyNearGas(playerid);
							  	    if ( MyNearGas != -1 )
							  	    {
						                if ( Gasolineras[MyNearGas][Fuel] + 2000 <= 10000 )
						                {
											Gasolineras[MyNearGas][Fuel] = Gasolineras[MyNearGas][Fuel] + 2000;
			                                SendInfoMessage(playerid, 3, "0", "Abasteciste con 2000 litros esta gasolinera!");
			                                PlayersData[playerid][MyBonus] = false;
		                                }
										else
										{
											SendInfoMessage(playerid, 0, "798", "El deposito de esta gasolinera esta llena o los 2000 litros más lo que tiene actualmente sobrepasan el límite de 10000 litros");
										}
							  	    }
		  					    }
								else
								{
									SendInfoMessage(playerid, 0, "787", "Suba a un trailer para abastecer una gasolinera");
								}
	  					    }
							else
							{
								SendInfoMessage(playerid, 0, "788", "No tiene mercancías para abastecer una gasolinera");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "789", "Usted no puede abastecer gasolineras!");
						}
			    	}
					// COMANDO: /Abastecer Tienda
				  	else if ( strcmp("/Abastecer Tienda", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17 )
			    	{
						if ( PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 )
					    {
							if ( PlayersDataOnline[playerid][InPickupNegocio] )
					        {
								new
									MyNearCar = IsPlayerInNearVehicle(playerid),
									bizzid = PlayersDataOnline[playerid][InPickupNegocio];
								if ( MyNearCar )
								{
								    // DataCars[MyNearCar][Time]
						            if (  MyNearCar > MAX_CAR_DUENO && MyNearCar <= MAX_CAR_FACCION && DataCars[MyNearCar][Time] == PlayersData[playerid][Faccion] )
						            {
										if ( coches_Todos_Maleteros[MyNearCar][10][0] != 0 )
										{
								            if ( NegociosData[bizzid][Type] <= 5 )
								            {
									            if ( NegociosData[bizzid][PricePiece] != 0  )
									            {
									                if ( NegociosData[bizzid][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0] <= 5000 )
									                {
										                if ( NegociosData[bizzid][Deposito] >= coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece] )
										                {
												            NegociosData[bizzid][Materiales] = NegociosData[bizzid][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0];
												            NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] -(coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece]);
															FaccionData[CONTRABANDISTAS][Deposito] = FaccionData[CONTRABANDISTAS][Deposito] + (coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece]);

												            new MsgAbastecerNegocio[MAX_TEXT_CHAT];
												            format(MsgAbastecerNegocio, sizeof(MsgAbastecerNegocio), "Has abastecido este negocio con %i materiales, se le ha enviado $%i a la cuenta de la empresa", coches_Todos_Maleteros[MyNearCar][10][0], coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece]);
					                	                    SendInfoMessage(playerid, 3, "0", MsgAbastecerNegocio);
					                	                    coches_Todos_Maleteros[MyNearCar][10][0] = 0;
											            }
												        else
												        {
															SendInfoMessage(playerid, 0, "810", "Esta tienda no le quedá suficiente dinero para comprale todos los materiales del la furgona");
														}
													}
													else
													{
														SendInfoMessage(playerid, 0, "809", "El almacén del la tienda esta lleno o los materiales que quieres depositar ya sobrepasan el límite de 5000");
													}
									            }
										        else
										        {
													SendInfoMessage(playerid, 0, "808", "Esta tienda no esta aceptando compra de materiales, conctacte con el dueño");
												}
								            }
									        else
									        {
												SendInfoMessage(playerid, 0, "807", "Sólo puedes abastecer tiendas de ropa");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "806", "No le quedán materiales a esta furgona");
										}
						            }
						            else
						            {
										SendInfoMessage(playerid, 0, "805", "Éste vehículo no sirve para abastecer las tiendas de ropa");
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "804", "No te encuentras en ninguna Tienda de Ropas");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "803", "Usted no puede abastecer Tiendas!");
						}
			    	}
					// COMANDO: /Abastecer Negocio
				  	else if ( strcmp("/Abastecer Negocio", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 )
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 )
					    {
							if ( PlayersDataOnline[playerid][InPickupNegocio] )
					        {
								new
									MyNearCar = IsPlayerInNearVehicle(playerid),
									bizzid = PlayersDataOnline[playerid][InPickupNegocio];
								if ( MyNearCar )
								{
						            if ( GetVehicleModel(MyNearCar) == 514 || GetVehicleModel(MyNearCar) == 515 || GetVehicleModel(MyNearCar) == 403 || GetVehicleModel(MyNearCar) == 456 || GetVehicleModel(MyNearCar) == 578)
						            {
										if ( coches_Todos_Maleteros[MyNearCar][10][0] != 0 )
										{
								            if ( NegociosData[bizzid][Type] >= 6 )
								            {
									            if ( NegociosData[bizzid][PricePiece] != 0  )
									            {
									                if ( NegociosData[bizzid][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0] <= 5000 )
									                {
										                if ( NegociosData[bizzid][Deposito] >= coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece] )
										                {
												            NegociosData[bizzid][Materiales] = NegociosData[bizzid][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0];
												            NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] -(coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece]);
															FaccionData[CAMIONEROS][Deposito] = FaccionData[CAMIONEROS][Deposito] + (coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece]);

												            new MsgAbastecerNegocio[MAX_TEXT_CHAT];
												            format(MsgAbastecerNegocio, sizeof(MsgAbastecerNegocio), "Has abastecido este negocio con %i materiales, se le ha enviado $%i a la cuenta de la empresa", coches_Todos_Maleteros[MyNearCar][10][0], coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[bizzid][PricePiece]);
					                	                    SendInfoMessage(playerid, 3, "0", MsgAbastecerNegocio);
					                	                    coches_Todos_Maleteros[MyNearCar][10][0] = 0;
											            }
												        else
												        {
															SendInfoMessage(playerid, 0, "790", "Este negocio no le quedá suficiente dinero para comprale todos los materiales del camión");
														}
													}
													else
													{
														SendInfoMessage(playerid, 0, "799", "El almacén del negocio esta lleno o los materiales que quieres depositar ya sobrepasan el límite de 5000");
													}
										        }
										        else
										        {
													SendInfoMessage(playerid, 0, "791", "Este negocio no esta aceptando compra de materiales, conctacte con el dueño");
												}
											}
									        else
									        {
												SendInfoMessage(playerid, 0, "792", "No puedes abastecer tiendas de ropa");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "793", "No le quedán materiales a este camión");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "794", "Éste vehículo no es un camión de materiales, busque uno y aparquelo junto al negocio y luego use (/Abastecer Negocio)");
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "795", "No te encuentras en ningún negocio");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "796", "Usted no puede abastecer negocios!");
						}
			    	}
					// COMANDO: /Abastecer Almacén
				  	else if ( strcmp("/Abastecer Almacén", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
					          strcmp("/Abastecer Almacen", cmdtext, true, 18) == 0 && strlen(cmdtext))
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == CONTRABANDISTAS )
					    {
							new FaccionID = -1;

					        if ( IsPlayerInRangeOfPoint(playerid, 10.0,
								 FaccionData[LCN][AlmacenX][0],
								 FaccionData[LCN][AlmacenY][0],
								 FaccionData[LCN][AlmacenZ][0]) )
							{
								FaccionID = LCN;
							}
					        else if ( IsPlayerInRangeOfPoint(playerid, 10.0,
								 FaccionData[YKZ][AlmacenX][0],
								 FaccionData[YKZ][AlmacenY][0],
								 FaccionData[YKZ][AlmacenZ][0]) )
							{
								FaccionID = YKZ;
							}

							if ( FaccionID != -1 )
					        {
								new MyNearCar = IsPlayerInNearVehicle(playerid);
								if ( MyNearCar )
								{
						            if ( GetVehicleModel(MyNearCar) == 514 || GetVehicleModel(MyNearCar) == 515 || GetVehicleModel(MyNearCar) == 403 || GetVehicleModel(MyNearCar) == 456 || GetVehicleModel(MyNearCar) == 578 ||
										 MyNearCar > MAX_CAR_DUENO && MyNearCar <= MAX_CAR_FACCION && DataCars[MyNearCar][Time] == CONTRABANDISTAS )
						            {
										if ( coches_Todos_Maleteros[MyNearCar][10][0] != 0 )
										{
		         							FaccionData[FaccionID][Almacen][0] = FaccionData[FaccionID][Almacen][0] + coches_Todos_Maleteros[MyNearCar][10][0];

											new MsgAbastecerAlmacen[MAX_TEXT_CHAT];
											format(MsgAbastecerAlmacen, sizeof(MsgAbastecerAlmacen), "Has abastecido este almacén con %i materiales", coches_Todos_Maleteros[MyNearCar][10][0]);
											SendInfoMessage(playerid, 3, "0", MsgAbastecerAlmacen);

		         							coches_Todos_Maleteros[MyNearCar][10][0] = 0;
										}
										else
										{
											SendInfoMessage(playerid, 0, "865", "No le quedán materiales a este camión");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "866", "Éste vehículo no es un camión o furgona de materiales, busque uno y aparquelo junto al almacén y luego use (/Abastecer Almacén)");
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "867", "No te encuentras en ningún almacén que puedas abastecer!");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "868", "Usted no puede abastecer almacenes!");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "797", "Quizás quiso decir: /Abastecer {Gasolinera, Negocio, Tienda, Almacén}");
					}
				}
				// COMANDO: /Obtener
				else if (strfind(cmdtext, "/Obtener", true) == 0)
				{
					// COMANDO: /Obtener Mercancías
				  	if ( strcmp("/Obtener Mercancía", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
					  	 strcmp("/Obtener Mercancia", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS ||
							 PlayersData[playerid][Faccion] == CONTRABANDISTAS ||
							 PlayersData[playerid][Faccion] == TRAFICANTES	 )
					    {
					        if ( !PlayersData[playerid][MyBonus] )
					        {
								// CAMIONEROS
								if ( PlayersData[playerid][Faccion] == CAMIONEROS )
								{
								    if ( IsPlayerInRangeOfPoint(playerid, 5.0, FaccionesMercancias[CAMIONEROS][PosX], FaccionesMercancias[CAMIONEROS][PosY], FaccionesMercancias[CAMIONEROS][PosZ]) )
								    {
	                                    PlayersData[playerid][MyBonus] = true;
	                                    SendInfoMessage(playerid, 3, "0", "Has obtenido mercancías!");

										GivePlayerMoneyEx(playerid, 25);
									}
									else
									{
										SendInfoMessage(playerid, 0, "783", "No se encuentra en la petrolera para obtener mercancías");
									}
								}
								else if ( PlayersData[playerid][Faccion] == CONTRABANDISTAS )
								{
								    if ( IsPlayerInRangeOfPoint(playerid, 5.0, FaccionesMercancias[CONTRABANDISTAS][PosX], FaccionesMercancias[CONTRABANDISTAS][PosY], FaccionesMercancias[CONTRABANDISTAS][PosZ]) )
								    {
	                                    PlayersData[playerid][MyBonus] = true;
	                                    SendInfoMessage(playerid, 3, "0", "Has obtenido mercancías!");

										GivePlayerMoneyEx(playerid, 25);
									}
									else
									{
										SendInfoMessage(playerid, 0, "801", "No se encuentra en la cabaña de la Isla");
									}
								}
								else if ( PlayersData[playerid][Faccion] == TRAFICANTES )
								{
								    if ( IsPlayerInRangeOfPoint(playerid, 5.0, FaccionesMercancias[TRAFICANTES][PosX], FaccionesMercancias[TRAFICANTES][PosY], FaccionesMercancias[TRAFICANTES][PosZ]) )
								    {
	                                    PlayersData[playerid][MyBonus] = true;
	                                    SendInfoMessage(playerid, 3, "0", "Has obtenido mercancías!");

										GivePlayerMoneyEx(playerid, 25);
									}
									else
									{
										SendInfoMessage(playerid, 0, "800", "No se encuentra en la cima de la montaña");
									}
								}
						    }
							else
							{
								SendInfoMessage(playerid, 0, "782", "Ya usted tiene mercancías, deposite esas para obtener otras");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "781", "Usted no puede obtener mercancías!");
						}
			    	}
					// COMANDO: /Obtener Cámara
					else if (strcmp("/Obtener Cámara", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
							 strcmp("/Obtener Camara", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
					{
						if ( PlayersData[playerid][Faccion] == CNN)
					    {
							if ( PlayersData[playerid][TimeEquipo] <= gettime() )
						    {
								if ( CheckWeapondCheat(playerid) && IsPlayerInRangeOfPoint(playerid, 20.0, 1118.3374,1260.9243,10.8203) )
							    {
										PlayersData[playerid][TimeEquipo] = gettime() + 900;
										GivePlayerWeaponEx(playerid, 43, 50);

										Acciones(playerid, 8, "coge una cámara fotográfica del estudio");
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "908", "Aquí no se encuentra el estudio");
								}
						    }
						    else
						    {
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a coger una cámara", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "909", MsgPersonalizado);
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "910", "Usted no es CNN");
						}
				  	}
					// COMANDO: /Obtener Bate
					else if (strcmp("/Obtener Bate", cmdtext, true, 15) == 0 && strlen(cmdtext) == 13 )
					{
						if ( PlayersData[playerid][Faccion] == COLTS ||
						     PlayersData[playerid][Faccion] == AK  ||
							 PlayersData[playerid][Faccion] == HEORS ||
							 PlayersData[playerid][Faccion] == VELTRAN
							 )
					    {
							if ( PlayersData[playerid][TimeEquipo] <= gettime() )
						    {
								if ( CheckWeapondCheat(playerid) && (
		       						 PlayersData[playerid][Faccion] == COLTS && IsPlayerInRangeOfPoint(playerid, 20.0, 1090.2321,1712.0156,10.9153) ||
								     PlayersData[playerid][Faccion] == AK && IsPlayerInRangeOfPoint(playerid, 20.0, 2686.5295,819.5256,10.9638) ||
								     PlayersData[playerid][Faccion] == HEORS && ( IsPlayerInRangeOfPoint(playerid, 20.0, 303.9115, 303.7705, 999.1484) || IsPlayerInRangeOfPoint(playerid, 20.0, 2447.7646, 2085.1616, 62.3593) ) ||
									 PlayersData[playerid][Faccion] == VELTRAN && IsPlayerInRangeOfPoint(playerid, 20.0, 34.3752,2495.5813,16.4937)
									 ) )
							    {
										PlayersData[playerid][TimeEquipo] = gettime() + 900;
										GivePlayerWeaponEx(playerid, 5, 1);

										Acciones(playerid, 8, "coge un bate del armario");
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1468", "Aquí no se encuentra el armario");
								}
						    }
						    else
						    {
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a coger un bate", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "909", MsgPersonalizado);
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1469", "Usted no es pandillero!");
						}
				  	}
					// COMANDO: /Obtener Extinguidor
					else if (strcmp("/Obtener Extintor", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
					{
						if ( PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD)
					    {
							if ( PlayersData[playerid][TimeEquipo] <= gettime() )
						    {
								if ( CheckWeapondCheat(playerid) && (PlayersData[playerid][Faccion] == SFMD && IsPlayerInRangeOfPoint(playerid, 20.0, 1491.9310,2863.6858,13.7608) ||
																	 PlayersData[playerid][Faccion] == LSMD && IsPlayerInRangeOfPoint(playerid, 20.0, 1859.0066,1402.4146,16.9622) ))
							    {
										PlayersData[playerid][TimeEquipo] = gettime() + 900;
										GivePlayerWeaponEx(playerid, 42, 3000);

										Acciones(playerid, 8, "coge un extintor de la estación");
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1282", "Aquí no se encuentra la estación de bomberos");
								}
						    }
						    else
						    {
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a coger un extintor", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "1283", MsgPersonalizado);
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1284", "Usted no es bombero!");
						}
				  	}
					// COMANDO: /Obtener Drogas
				  	else if (strcmp("/Obtener Drogas", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
						if ( PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 1 ||
							 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] == 3 )
					    {
							if ( TimerDrogas <= gettime() )
							{
								if ( IsPlayerInAlmacen(playerid, true) != -1 )
								{
								    TimerDrogas = gettime() + 1200;
								    SendInfoMessage(playerid, 3, "0", "Ha obtenido 30 drogas del almacén");
								    PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + 30;
								}
							}
							else
							{
							    new MsgObtenerDrogasError[MAX_TEXT_CHAT];
							    format(MsgObtenerDrogasError, sizeof(MsgObtenerDrogasError), "No se puede retirar más droga hasta dentro de %i minutos", (TimerDrogas - gettime()) / 60 );
								SendInfoMessage(playerid, 0, "764", MsgObtenerDrogasError);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "763", "Usted no es vendedor de drogas");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "762", "Quizás quiso decir: /Obtener {Drogas, Mercancía, Cámara, Extintor, Bate}");
					}
				}
				// COMANDO: /Apagar
				else if (strfind(cmdtext, "/Apagar", true) == 0)
				{
					// /Apagar
				  	if (strcmp("/Apagar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
				  	{
						ApagarVehicle(playerid);
				  	}
					// /Apagar Alarma
				  	else if (strcmp("/Apagar Alarma", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				  	{
						if ( IsPlayerInAnyVehicle(playerid) )
						{
						    new MyVehicleID = GetPlayerVehicleID(playerid);
							if ( DataCars[MyVehicleID][AlarmOn])
							{
							    if ( IsVehicleNotBici(playerid, MyVehicleID) )
							    {
							  	    new MsgAlarmaDinamico[MAX_TEXT_CHAT];
							  	    if ( GetPlayerVehicleSeat(playerid) == 0 )
							  	    {
							  	    	format(MsgAlarmaDinamico, sizeof(MsgAlarmaDinamico), "apagar la alarma del vehículo");
									}
									else
									{
							  	    	format(MsgAlarmaDinamico, sizeof(MsgAlarmaDinamico), "ayudar a apagar la alarma del vehículo");
									}

			  						if (IntentarAccion(playerid, MsgAlarmaDinamico, random(2)))
			   						{
									    Acciones(playerid, 7, "Alarma: Apagada...");
				   						DataCars[MyVehicleID][AlarmOn] = false;
		       	   						IsVehicleOff(MyVehicleID);
			   						}
		   						}
							}
							else
							{
								SendInfoMessage(playerid, 0, "991", "Éste vehículo ya tiene la alarma apagada");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "990", "Suba al vehículo que desea apagarle la alarma y use (/Apagar Alarma)");
						}
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "989", "Quizás quiso decir: /Apagar - /Apagar Alarma");
					}
			  	}
				// COMANDO: /Encender
				else if (strfind(cmdtext, "/Encender", true) == 0)
				{
					// /Encender
				  	if (strcmp("/Encender", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9 )
				  	{
						EncenderVehicle(playerid);
				  	}
					// /Apagar Alarma
				  	else if (strcmp("/Encender Alarma", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				  	{
						if ( IsPlayerInAnyVehicle(playerid))
						{
						    if ( GetPlayerVehicleSeat(playerid) == 0 )
						    {
							    new MyVehicleID = GetPlayerVehicleID(playerid);
							    if ( IsVehicleNotBici(playerid, MyVehicleID) )
							    {
									if ( !DataCars[MyVehicleID][AlarmOn] )
									{
									    Acciones(playerid, 8, "enciende la alarma del vehículo");
									    Acciones(playerid, 7, "Alarma: Encendida...");
									    DataCars[MyVehicleID][AlarmOn] = true;
									    IsVehicleOff(MyVehicleID);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1002", "Éste vehículo ya tiene la alarma encendida");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1003", "Sólo puede encender la alarma en el asiento del conductor");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1004", "Suba al vehículo que desea apagarle la alarma y use (/Encender Alarma)");
						}
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "1005", "Quizás quiso decir: /Encender - /Encender Alarma");
					}

			  	}
				// /Parqueo
			  	else if (strcmp("/Parqueo", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
			  	{
			  	    new
					  Float:RadioC = 4.0,
					  i;
			  	    do
			  	    {
			  	        RadioC++;
			  	        i = 0;
			  	        for(; i!=MAX_PARQUEOS_COUNT; i++)
				  	    {
				  	        if (Parqueo[i][Creado] == 0) continue;

				  	        if (IsPlayerInRangeOfPoint(playerid, RadioC, Mapeo[Parqueo[i][ID_Mapeo]][PosX], Mapeo[Parqueo[i][ID_Mapeo]][PosY], Mapeo[Parqueo[i][ID_Mapeo]][PosZ]))
				  	        {
				  	            if (Parqueo[i][PosXFalse] == 0) return SendInfoMessage(playerid, 0, "", "Este parqueo no tiene un recorrido valido!");
				  	            if ( Parqueo[i][Abierto] ) return SendInfoMessage(playerid, 0, "", "El parqueo todavía se encuentra abierto, no necesita pagarlo!");

				  	            new msgPeaje[144];
				  	            if (PlayersData[playerid][Dinero] < PRECIO_PEAJE )
				  	            {
				  	                format(msgPeaje, sizeof(msgPeaje), "No tienes dinero para pagar el parqueo! Cuesta $%i", PRECIO_PEAJE);
									return SendInfoMessage(playerid, 0, "", msgPeaje);
				  	            }

				  	            FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + PRECIO_PEAJE;
				  	            GivePlayerMoneyEx(playerid, -PRECIO_PEAJE);

				  	            MoveDynamicObject(Mapeo[Parqueo[i][ID_Mapeo]][ID_Objeto], Parqueo[i][PosXFalse], Parqueo[i][PosYFalse], Parqueo[i][PosZFalse], Parqueo[i][Velocidad], Parqueo[i][PosRotXFalse], Parqueo[i][PosRotYFalse], Parqueo[i][PosRotZFalse]);
						        Parqueo[i][Abierto] = true;
								SetTimerEx("CerrarParqueo", 3000, false, "i", i);

								format(msgPeaje, sizeof(msgPeaje), "Has pagado el parqueo, te costo $%i", PRECIO_PEAJE);
								return SendInfoMessage(playerid, 2, "", msgPeaje);
				  	        }
				  	    }
			  	    }
			  	    while(RadioC != 15.0);
			  	    SendInfoMessage(playerid, 0, "", "No te encuentras cerca de ningun parqueo");
			  	}
				// /Peaje
			  	else if (strcmp("/Peaje", cmdtext, true) == 0)
			  	{
			  	    for(new i=0; i!=MAX_PEAJES_COUNT; i++)
			  	    {
			  	        if (Peajes[i][Creado] == 0 || Peajes[i][PosCommandX] == 0) continue;
			  	        
			  	        if (IsPlayerInRangeOfPoint(playerid, 5.0, Peajes[i][PosCommandX], Peajes[i][PosCommandY], Peajes[i][PosCommandZ]))
			  	        {
			  	            if (Peajes[i][PosXFalse] == 0) return SendInfoMessage(playerid, 0, "", "Este peaje no tiene un recorrido valido!");
			  	            if ( Peajes[i][Abierto] ) return SendInfoMessage(playerid, 0, "", "El peaje todavía se encuentra abierto, no necesita pagarlo!");
			  	            
			  	            new msgPeaje[144];
			  	            if (PlayersData[playerid][Dinero] < PRECIO_PEAJE )
			  	            {
			  	                format(msgPeaje, sizeof(msgPeaje), "No tienes dinero para pagar el peaje! Cuesta $%i", PRECIO_PEAJE);
								return SendInfoMessage(playerid, 0, "", msgPeaje);
			  	            }
			  	            
			  	            FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + PRECIO_PEAJE;
			  	            GivePlayerMoneyEx(playerid, -PRECIO_PEAJE);
			  	            
			  	            MoveDynamicObject(Mapeo[Peajes[i][ID_Mapeo]][ID_Objeto], Peajes[i][PosXFalse], Peajes[i][PosYFalse], Peajes[i][PosZFalse], Peajes[i][Velocidad], Peajes[i][PosRotXFalse], Peajes[i][PosRotYFalse], Peajes[i][PosRotZFalse]);
					        Peajes[i][Abierto] = true;
							SetTimerEx("CerrarPeaje", 3000, false, "i", i);
							
							format(msgPeaje, sizeof(msgPeaje), "Has pagado el peaje, te costo $%i", PRECIO_PEAJE);
							return SendInfoMessage(playerid, 2, "", msgPeaje);
			  	        }
			  	    }
			  	    SendInfoMessage(playerid, 0, "", "No te encuentras en ningun peaje");
			  	}
				// /Cuenta
			  	else if (strcmp("/Cuenta", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
			  	{
					ShowDialogAccount(playerid);
			  	}
				// /Puente
			  	else if (strcmp("/Puente", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
			  	{
					if ( IsPlayerInAnyVehicle(playerid) )
					{
					    new MyVehicleID = GetPlayerVehicleID(playerid);
						if ( MyVehicleID <= MAX_CAR_DUENO && DataCars[MyVehicleID][Puente] && strlen(DataCars[MyVehicleID][Dueno]) == 1)
						{
						  	if ( PlayersData[playerid][Ganzuas] != 0 )
						  	{
						        if ( !DataCars[MyVehicleID][LlenandoGas] )
						        {
							  	    new MsgPuenteDinamico[MAX_TEXT_CHAT];
							  	    if ( GetPlayerVehicleSeat(playerid) == 0 )
							  	    {
							  	    	format(MsgPuenteDinamico, sizeof(MsgPuenteDinamico), "hacerle un puente al vehículo");
									}
									else
									{
							  	    	format(MsgPuenteDinamico, sizeof(MsgPuenteDinamico), "ayudar hacer el puente");
									}

			  						if (IntentarAccion(playerid, MsgPuenteDinamico, random(2)))
			   						{
					   					DataCars[MyVehicleID][Puente] = false;
										DataCars[MyVehicleID][StateEncendido] = true;
									    Acciones(playerid, 7, "Vehículo: Puenteado...");
										IsVehicleOff(MyVehicleID);
										new IsBomb = IsVehicleHaveBomba(MyVehicleID);
										if ( IsBomb != -1 )
										{
										    ActivarBomba(IsBomb, 20);
											SetVehicleHealthEx(MyVehicleID, 0.0);
										}
			   						}
									PlayersData[playerid][Ganzuas]--;
								}
								else
								{
									SendInfoMessage(playerid, 0, "1456", "Éste vehículo está llenando el deposito, espere que termine para encenderlo!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "654", "No tienes ganzúas!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "652", "Éste vehículo no necesita puente");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "653", "Suba al vehículo que desea hacerle el puente y use (/Puente)");
					}
			  	}
				// /Fumar
			  	else if (strcmp("/Fumar", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
				  	if ( PlayersData[playerid][Drogas] >= 2 )
				  	{
					  	PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - 2;
						Acciones(playerid, 8, "saca un cigarrillo y lo enciende");
						SetPlayerSpecialAction(playerid,21);
					}
					else
					{
						SendInfoMessage(playerid, 0, "651", "No tienes suficientes drogas para fumar");
					}
			  	}
			    // /Echar Aceíte
			  	else if (strcmp("/Echar Aceíte", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 ||
					     strcmp("/Echar Aceite", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			  	{
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF)
				    {
				  	    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
				  	    if ( MyNearVehicle )
				  	    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								if ( DataCars[MyNearVehicle][Oil] + 10 <= MAX_OIL_VEHICLE )
								{
									if ( PlayersData[playerid][TimeEquipo] <= gettime() )
									{
										if ( !DataCars[MyNearVehicle][StateEncendido] )
										{
											PlayersData[playerid][TimeEquipo] = gettime() + 600;
											if (coches_Todos_Type[DataCars[MyNearVehicle][Modelo] - 400] != TREN ||
												coches_Todos_Type[DataCars[MyNearVehicle][Modelo] - 400] != VUELO)
											{
												DataCars[MyNearVehicle][Oil] = DataCars[MyNearVehicle][Oil] + 10;

												UpdateGasAndOil(MyNearVehicle);
											}
											else
											{
												DataCars[MyNearVehicle][Oil] = MAX_OIL_VEHICLE;
											}
											Acciones(playerid, 8, "echa el un poco de aceíte en el vehículo");
				                            SendInfoMessage(playerid, 3, "0", "Has echado un poco de aceíte a éste vehículo");
			                            }
										else
										{
											SendInfoMessage(playerid, 0, "1137", "Apague el vehículo para echarle aceíte!");
										}
									}
									else
									{
										new MsgPersonalizado[MAX_TEXT_CHAT];
										format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a echar aceíte a un vehículo", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
										SendInfoMessage(playerid, 0, "1136", MsgPersonalizado);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1135", "Éste vehículo no necesita aceíte!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1134", "No puede echar aceíte desde adentro del vehículo");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1133", "Usted no es mecánico");
					}
			  	}
			    // /Echar Lata
			  	else if (strcmp("/Echar Lata", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			  	{
			  	    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
			  	    if ( MyNearVehicle )
			  	    {
					    if ( !IsPlayerInAnyVehicle(playerid) )
					    {
				  	        if ( PlayersData[playerid][Lata] )
							{
						        if ( !DataCars[MyNearVehicle][LlenandoGas] )
						        {
									if ( DataCars[MyNearVehicle][Gas] + 20 <= MAX_GAS_VEHICLE )
									{
										if ( gettime() - PlayersDataOnline[playerid][TimeLata] >= 60 )
										{
											if ( !DataCars[MyNearVehicle][StateEncendido] )
											{
												DataCars[MyNearVehicle][Gas] = DataCars[MyNearVehicle][Gas] + 20;
												PlayersData[playerid][Lata] = false;
												PlayersDataOnline[playerid][TimeLata] = gettime();

												UpdateGasAndOil(MyNearVehicle);

												Acciones(playerid, 8, "echa el gas de su lata en el deposito del vehículo");
					                            SendInfoMessage(playerid, 3, "0", "Ha echado el gas de su lata en éste vehículo");
				                            }
											else
											{
												SendInfoMessage(playerid, 0, "1087", "Apague el vehículo para echarle la lata!");
											}
										}
										else
										{
											new MsgErrorLata[MAX_TEXT_CHAT];
											format(MsgErrorLata, sizeof(MsgErrorLata), "No puede volver a echar una lata hasta dentro de %i segundos", 60 - (gettime() - PlayersDataOnline[playerid][TimeLata]));
											SendInfoMessage(playerid, 0, "1061", MsgErrorLata);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "524", "Éste vehículo tiene el deposito lleno");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1059", "Éste vehículo está llenando el deposito, no puede echarle una lata");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "525", "Ha su lata no le queda gas");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1104", "No puede echar gas desde adentro del vehículo");
						}
					}
			  	}
				// COMANDO: /Llenar
				else if (strfind(cmdtext, "/Llenar ", true) == 0)
				{
					// COMANDO: /Llenar Lata
				  	if (strcmp("/Llenar Lata", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				  	{
				  	    new MyNearGas = GetMyNearGas(playerid);
				  	    if ( MyNearGas != -1 )
				  	    {
				  	        if ( !PlayersData[playerid][Lata] )
							{
								if ( Gasolineras[MyNearGas][Fuel] >= 20 )
								{
							        if (PlayersData[playerid][Dinero] >= 40 )
							        {
								        GivePlayerMoneyEx(playerid, -40);
										Gasolineras[MyNearGas][Fuel] = Gasolineras[MyNearGas][Fuel] - 20;

										FaccionData[GOBIERNO][Deposito] += 40;

										PlayersData[playerid][Lata] = true;
										Acciones(playerid, 8, "llena su lata de gas");
		                                SendInfoMessage(playerid, 3, "0", "Ha llenado su lata de gas por $40");
							        }
							        else
							        {
										SendInfoMessage(playerid, 0, "526", "No tiene suficiente dinero para llenar su lata de gas!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "527", "Ésta gasolinera tiene el deposito agotado");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "528", "Su lata ya se encuentra llena de gas");
							}
						}
					}
				  	else if (strfind(cmdtext, "/Llenar Deposito", true) == 0)
				  	{
						if ( IsPlayerInNearVehicle(playerid) )
						{
					  	    new MyNearGas = GetMyNearGas(playerid);
					  	    if ( MyNearGas != -1 )
							{
								if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
								{
			    					new MyCarFill = GetPlayerVehicleID(playerid);
			    					if ( IsVehicleNotBici(playerid, MyCarFill) )
			    					{
										if ( DataCars[MyCarFill][Gas] < MAX_GAS_VEHICLE )
										{
										    new GasToFill;
										    if ( strcmp("/Llenar Deposito", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 )
										    {
												GasToFill = MAX_GAS_VEHICLE - DataCars[MyCarFill][Gas];
										    }
										    else
										    {
										        GasToFill = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
											}
											if ( GasToFill > 0 )
											{
											    if ( DataCars[MyCarFill][Gas] + GasToFill <= MAX_GAS_VEHICLE )
											    {
													if ( Gasolineras[MyNearGas][Fuel] >= GasToFill )
													{
													    if ( PlayersData[playerid][Dinero] >= (GasToFill * 2) )
													    {
													        if ( !DataCars[MyCarFill][LlenandoGas] )
													        {
													            if ( !DataCars[MyCarFill][StateEncendido] )
													            {
																    new MsgLlenarDeposito[MAX_TEXT_CHAT];
																    format(MsgLlenarDeposito, sizeof(MsgLlenarDeposito), "Mandó a llenar el deposito del vehículo por $%i", (GasToFill * 2));

															        GivePlayerMoneyEx(playerid, -(GasToFill * 2));

																    Gasolineras[MyNearGas][Fuel] = Gasolineras[MyNearGas][Fuel] - GasToFill;

																	FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + (GasToFill * 2);

																	Acciones(playerid, 8, "comienza a llenar el deposito del vehículo");
										                            SendInfoMessage(playerid, 3, "0", MsgLlenarDeposito);

																	DataCars[MyCarFill][LlenandoGas] = DataCars[MyCarFill][Gas] + GasToFill;
																	FillVehicleGas(MyCarFill);

																	GameTextForPlayer(playerid, "~G~Llenando deposito...", 1000, 3);
																}
									                            else
									                            {
																	SendInfoMessage(playerid, 0, "1060", "Apague el vehículo para echarle gas!");
																}
								                            }
								                            else
								                            {
																SendInfoMessage(playerid, 0, "1058", "Ya éste vehículo está llenando el deposito");
															}
							                            }
							                            else
							                            {
															SendInfoMessage(playerid, 0, "531", "No tienes suficiente dinero para llenar el deposito de éste vehículo");
														}
													}
													else
													{
														SendInfoMessage(playerid, 0, "529", "Está gasolinera tiene el deposito agotado");
													}
												}
												else
												{
													SendInfoMessage(playerid, 0, "1062", "Con esa cantidad de gas sobrepasas el límite del tanque, intenta con un cantidad menor");
												}
											}
											else
											{
												SendInfoMessage(playerid, 0, "1056", "Mínimo debes echarle $1 al vehículo");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1063", "Ya el tanque de éste vehículo se encuenta lleno!");
										}
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1064", "Montese al vehículo que desea llenar el deposito y pongase de conductor");
								}
							}
						}
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "532", "Quizás quiso decir: /Llenar {Lata, Deposito}");
					}
			  	}
				// COMANDO: /Rendirse
			  	else if (strcmp("/Rendirse", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"ROB_BANK",
					ROB_ANIMATIONS[4], false);
			    }
				// COMANDO: /Apuntar
			  	else if (strcmp("/Apuntar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[150], false);
			    }
				// COMANDO: /Miedo
			  	else if (strcmp("/Miedo", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[71], false);
			    }
				// COMANDO: /Borracho
			  	else if (strcmp("/Borracho", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[257], true);
			    }
				// COMANDO: /Sentarse
			  	else if (strcmp("/Sentarse", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"BEACH",
					PLAYA_ANIMATIONS[2], false);
			    }
				// COMANDO: /Acostarse
			  	else if (strcmp("/Acostarse", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"BEACH",
					PLAYA_ANIMATIONS[0], false);
			    }
				// COMANDO: /Crack
			  	else if (strcmp("/Crack", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"CRACK",
					CRACK_ANIMATIONS[3], false);
			    }
				// COMANDO: /Fuck
			  	else if (strcmp("/Fuck", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[149], false);
			    }
				// COMANDO: /Crear
				else if (strfind(cmdtext, "/Crear ", true) == 0)
				{
					// COMANDO: /Crear Arma
				  	if (strcmp("/Crear Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    {
						if ( PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 2 ||
		 					 PlayersData[playerid][Faccion] == LCN ||
							 PlayersData[playerid][Faccion] == YKZ ||
							 PlayersData[playerid][Faccion] == SICARIOS)
					    {
						    SetMenuTraficante(playerid);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "420", "Usted no puede crear armas");
						}
				    }
					//////////--- /Crear Cheque Efectivo [ID] [Cantidad]              - CREAR UN CHEQUE EFECTIVO
					else if (strfind(cmdtext, "/Crear Cheque Efectivo ", true) == 0)
					{
					    if ( PlayersData[playerid][HoursPlaying] >= 24 )
					    {
					        new PlayerIDCheque = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new ChequeCantidad = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						    if ( PlayerIDCheque == playerid || IsPlayerNearEx(playerid, PlayerIDCheque,
								 "1334",
								 "1335",
								 "1336",
								 "El jugador que le deseas darle un cheque no se encuentra conectado",
								 "El jugador que le deseas darle un cheque no se ha logueado",
								 "El jugador que le deseas darle un cheque no se encuentra cerca de tí") )
						    {
						        new NextChequeID = IsNotChequesFull(playerid);
						        if ( NextChequeID != -1 )
						        {
							        if( ChequeCantidad > 0 && ChequeCantidad < 500000 )
							        {
							            if( PlayerIDCheque != playerid )
							            {
											if ( IsNotFullCartera(playerid, PlayerIDCheque, "El jugador que desea darle un cheque tiene la cartera llena!") )
										    {
										    	CrearCheque(playerid, PlayerIDCheque, 0, ChequeCantidad, NextChequeID);

												new MsgCrearCheque[MAX_TEXT_CHAT];
												new MsgCrearChequeMe[MAX_TEXT_CHAT];
												new MsgCrearChequeYou[MAX_TEXT_CHAT];
										        format(MsgCrearCheque, sizeof(MsgCrearCheque), "Le has dado un cheque tipo efectivo a %s por la suma de $%i",
												PlayersDataOnline[PlayerIDCheque][NameOnlineFix],
												ChequeCantidad);
										        format(MsgCrearChequeYou, sizeof(MsgCrearChequeYou), "%s te ha dado un cheque tipo efectivo por la suma de $%i",
												PlayersDataOnline[playerid][NameOnlineFix],
												ChequeCantidad);

										        format(MsgCrearChequeMe, sizeof(MsgCrearChequeMe), "crea un cheque y se lo pasa a %s", PlayersDataOnline[PlayerIDCheque][NameOnlineFix]);
										        Acciones(playerid, 8, MsgCrearChequeMe);
										        SendInfoMessage(playerid, 2, "0", MsgCrearCheque);
										        SendInfoMessage(PlayerIDCheque, 2, "0", MsgCrearChequeYou);

										        printf("De %s para %s || %s", PlayersDataOnline[playerid][NameOnline], PlayersDataOnline[PlayerIDCheque][NameOnline], MsgCrearCheque);
										    }
									    }
									    else
									    {
											if ( IsNotFullCartera(playerid, PlayerIDCheque, "Usted tiene la cartera llena!") )
										    {
										    	CrearCheque(playerid, PlayerIDCheque, 0, ChequeCantidad, NextChequeID);
												new MsgCrearCheque[MAX_TEXT_CHAT];
										        format(MsgCrearCheque, sizeof(MsgCrearCheque), "Creaste un cheque tipo efectivo por la suma de $%i", ChequeCantidad);
										        Acciones(playerid, 8, "crea un cheque y lo guarada en su cartera");
										        SendInfoMessage(playerid, 2, "0", MsgCrearCheque);
										        printf("De %s || %s", PlayersDataOnline[playerid][NameOnline], MsgCrearCheque);
										    }
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1333", "El valor del cheque tiene que ser mayor de $0 y menor de $500000!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1426", "Debes cancelar o esperar que sean cobrados los cheques para poder repartír más!");
								}
						    }
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1338", "Debes ser mayor de nivel 3 para crear cheques");
						}
					}
					//////////--- /Crear Cheque Personal [ID] [Cantidad]              - CREAR UN CHEQUE PERSONAL
					else if (strfind(cmdtext, "/Crear Cheque Personal ", true) == 0)
					{
					    if ( PlayersData[playerid][HoursPlaying] >= 24 )
					    {
					        new PlayerIDCheque = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new ChequeCantidad = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						    if ( IsPlayerNearEx(playerid, PlayerIDCheque,
								 "1329",
								 "1330",
								 "1331",
								 "El jugador que le deseas darle un cheque no se encuentra conectado",
								 "El jugador que le deseas darle un cheque no se ha logueado",
								 "El jugador que le deseas darle un cheque no se encuentra cerca de tí") )
						    {
						        new NextChequeID = IsNotChequesFull(playerid);
						        if ( NextChequeID != -1 )
						        {
							        if( ChequeCantidad > 0 && ChequeCantidad < 500000 )
							        {

										if ( IsNotFullCartera(playerid, PlayerIDCheque, "El jugador que desea darle un cheque tiene la cartera llena!") )
									    {
									    	CrearCheque(playerid, PlayerIDCheque, 1, ChequeCantidad, NextChequeID);

											new MsgCrearCheque[MAX_TEXT_CHAT];
											new MsgCrearChequeMe[MAX_TEXT_CHAT];
											new MsgCrearChequeYou[MAX_TEXT_CHAT];
									        format(MsgCrearCheque, sizeof(MsgCrearCheque), "Le has dado un cheque tipo personal a %s por la suma de $%i",
											PlayersDataOnline[PlayerIDCheque][NameOnlineFix],
											ChequeCantidad);
									        format(MsgCrearChequeYou, sizeof(MsgCrearChequeYou), "%s te ha dado un cheque tipo personal por la suma de $%i",
											PlayersDataOnline[playerid][NameOnlineFix],
											ChequeCantidad);
									        format(MsgCrearChequeMe, sizeof(MsgCrearChequeMe), "crea un cheque y se lo pasa a %s",
											PlayersDataOnline[PlayerIDCheque][NameOnlineFix]);

									        Acciones(playerid, 8, MsgCrearChequeMe);
									        SendInfoMessage(playerid, 2, "0", MsgCrearCheque);
									        SendInfoMessage(PlayerIDCheque, 2, "0", MsgCrearChequeYou);
									        printf("De %s para %s || %s", PlayersDataOnline[playerid][NameOnline], PlayersDataOnline[PlayerIDCheque][NameOnline], MsgCrearCheque);
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1332", "El valor del cheque tiene que ser mayor de $0 y menor de $500000!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1425", "Debes cancelar o esperar que sean cobrados los cheques para poder repartír más!");
								}
						    }
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1337", "Debes ser mayor de nivel 3 para crear cheques");
						}
					}
					//////////--- /Crear Negocio [ID]              - CREAR UN NEGOCIO
					else if (strfind(cmdtext, "/Crear Negocio ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
					        new TypeBizz = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new PrecioN = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new NivelN = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
							if ( TypeBizz >= 0 &&  TypeBizz <= MAX_BIZZ_TYPE )
							{
							    new MyNextBizz = GetMyNextBizz();
							    if ( MyNextBizz )
							    {
							        new Float:PlayerPosBizz[4];
							        GetPlayerPos(playerid, PlayerPosBizz[0], PlayerPosBizz[1], PlayerPosBizz[2]);
							        GetPlayerFacingAngle(playerid, PlayerPosBizz[3]);

								    NegociosData[MyNextBizz][PosOutX]       = PlayerPosBizz[0];
								    NegociosData[MyNextBizz][PosOutY]		= PlayerPosBizz[1];
								    NegociosData[MyNextBizz][PosOutZ]		= PlayerPosBizz[2];
								    NegociosData[MyNextBizz][PosOutZZ] 		= PlayerPosBizz[3];
								    NegociosData[MyNextBizz][InteriorOut]   = GetPlayerInteriorEx(playerid);
								    NegociosData[MyNextBizz][Deposito]      = 0;
								    if ( PrecioN > 0 && PrecioN < 500000)
								    {
								    	NegociosData[MyNextBizz][Precio]        = PrecioN;
							    	}
							    	else
							    	{
								    	NegociosData[MyNextBizz][Precio]        = 150000;
							    	}
								    NegociosData[MyNextBizz][Lock]          = true;
								    NegociosData[MyNextBizz][Type]        	= TypeBizz;
								    NegociosData[MyNextBizz][PriceJoin]     = 0;
								    NegociosData[MyNextBizz][PricePiece]    = 0;
		                            format(NegociosData[MyNextBizz][NameBizz], 	MAX_BIIZ_NAME, "Ninguno");
	                                format(NegociosData[MyNextBizz][Dueno], MAX_PLAYER_NAME, "0");
	                                format(NegociosData[MyNextBizz][Extorsion], MAX_PLAYER_NAME, "No");
									if ( NivelN > 0 && NivelN < 99 )
									{
										NegociosData[MyNextBizz][Level]  		= NivelN;
									}
									else
									{
										NegociosData[MyNextBizz][Level]  		= 10;
									}

								    DataSaveBizz(MyNextBizz, false);

								    new MsgPersonalizado[MAX_TEXT_CHAT];
								    format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Has creado un negocio tipo \"%s\"[%i] con ID %i, Precio: $%i", LOGO_STAFF, NegociosType[TypeBizz][TypeName], TypeBizz, MyNextBizz, NegociosData[MyNextBizz][Precio]);

									SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
									printf("%s", MsgPersonalizado);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1153", "Ya no se pueden agregar más negocios, se ha alcanzado el límite!");
								}
							}
							else
							{
							    new MsgPersonalizado[MAX_TEXT_CHAT];
							    format(MsgPersonalizado, sizeof(MsgPersonalizado), "El número del tipo de negocio debe estár comprendído entre 0 y %i",MAX_BIZZ_TYPE);
								SendInfoMessage(playerid, 0, "1154", MsgPersonalizado);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1152", "No tienes acceso al comando /Crear Negocio");
						}
					}
					//////////--- /Crear Garage [ID_Casa] [Tipo_Garage]            - COMENZAR A DISEñAR UN GARAGE
					else if (strfind(cmdtext, "/Crear Garage ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
					        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new TypeGarageS = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
							if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
							{
								if ( TypeGarageS >= 0 && TypeGarageS <= MAX_GARAGE_TYPE )
								{
								    if ( CreateGarage(playerid, IdHouse, PlayersDataOnline[playerid][DesignGarageId], TypeGarageS) )
								    {
				                        new MsgChangeDesing[MAX_TEXT_CHAT];
				                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "Creaste un garage tipo [%i], para la Casa ID[%i] (Desing ID [%i]", TypeGarageS, IdHouse, PlayersDataOnline[playerid][DesignGarageId]);
						                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					                }
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "680", "El ID del tipo de garage introducido no existe!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1170", "El ID de casa introducido no existe!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1171", "No tienes acceso al comando /Desing Garage");
						}
					}
					//////////--- /Crear Incendio [ID]              - CREAR UN INCENDIO
					else if (strfind(cmdtext, "/Crear Incendio ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 7 )
						{
					        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
							if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
							{
								new StringFormat[MAX_TEXT_CHAT];
								new nextFire = GetFireNext();
								if ( CreateFire(IdHouse, GetFireNext()) )
								{
									format(StringFormat, sizeof(StringFormat), "%s Has creado un incendio con ID[%i] en la casa ID[%i]",LOGO_STAFF,nextFire, IdHouse);
			            		}
			            		else
			            		{
									format(StringFormat, sizeof(StringFormat), "%s Se ha alcanzado el número máximo de incendios",LOGO_STAFF);
								}
			            		SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1280", "El ID de casa introducido no existe!");
							}

						}
						else
						{
							SendInfoMessage(playerid, 0, "1279", "No tienes acceso al comando /Crear Incendio");
						}
					}
					//////////--- /Crear Casa [ID]              - CREAR UNA CASA
					else if (strfind(cmdtext, "/Crear Casa ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
					        new TypeHouseC = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new PrecioC = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new NivelC = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
							if ( TypeHouseC >= 0 &&  TypeHouseC <= MAX_HOUSE_TYPE_COUNT )
							{
							    new MyNextHouse = GetMyNextHouse();
							    if ( MyNextHouse )
							    {
							        new Float:PlayerPosHouse[4];
							        GetPlayerPos(playerid, PlayerPosHouse[0], PlayerPosHouse[1], PlayerPosHouse[2]);
							        GetPlayerFacingAngle(playerid, PlayerPosHouse[3]);

									format(HouseData[MyNextHouse][Dueno], MAX_PLAYER_NAME, "No");
									HouseData[MyNextHouse][PosX] 			= PlayerPosHouse[0];
									HouseData[MyNextHouse][PosY] 			= PlayerPosHouse[1];
									HouseData[MyNextHouse][PosZ] 			= PlayerPosHouse[2];
									HouseData[MyNextHouse][PosZZ] 			= PlayerPosHouse[3];
									HouseData[MyNextHouse][Interior] 		= GetPlayerInteriorEx(playerid);
									HouseData[MyNextHouse][TypeHouseId]		= TypeHouseC;
									HouseData[MyNextHouse][PriceRent] 		= 0;
									if ( NivelC > 0 && NivelC < 99 )
									{
										HouseData[MyNextHouse][Level] 			= NivelC;
									}
									else
									{
										HouseData[MyNextHouse][Level] 			= 10;
									}
									HouseData[MyNextHouse][Lock]            = true;
								    if ( PrecioC > 0 && PrecioC < 1000000)
								    {
								    	HouseData[MyNextHouse][Price]        = PrecioC;
							    	}
							    	else
							    	{
								    	HouseData[MyNextHouse][Price]        = 150000;
							    	}

								    SaveHouse(MyNextHouse, false);

								    new MsgPersonalizado[MAX_TEXT_CHAT];
								    format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Has creado una casa tipo \"%s\" [%i] con ID %i, Precio: $%i", LOGO_STAFF, TypeHouse[TypeHouseC][TypeName], TypeHouseC, MyNextHouse, HouseData[MyNextHouse][Price]);

									SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
									printf("%s", MsgPersonalizado);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1157", "Ya no se pueden agregar más casas, se ha alcanzado el límite!");
								}
							}
							else
							{
							    new MsgPersonalizado[MAX_TEXT_CHAT];
							    format(MsgPersonalizado, sizeof(MsgPersonalizado), "El número del tipo de casa debe estár comprendído entre 0 y %i",MAX_HOUSE_TYPE);
								SendInfoMessage(playerid, 0, "1156", MsgPersonalizado);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1155", "No tienes acceso al comando /Crear Casa");
						}
					}
				    //      /Crear Local [Tipo] [Precio] [Nivel]
					else if (strfind(cmdtext, "/Crear Local ", true) == 0)
					{
					    if (PlayersData[playerid][Admin] < 8) return SendAccessError(playerid, "Crear Local.");
					    new type, price, level ;
					    new string[MAX_TEXT_CHAT];
					    if (!sscanf(cmdtext[13], "iii", type, price, level))
					    {
					        if (type > 0 && type <= MAX_LOCAL_TYPE_COUNT)
					        {
					            if (price >= 0 && price <= 1000000)
					            {
					                if (level >= 0 && level <= 99)
					                {
					                    new localID = GetNextLocalID();
					                    if (localID != -1)
					                    {
					                        new Float:Pos[4];
						                    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
						                    GetPlayerFacingAngle(playerid, Pos[3]);

											ClearLocalData(localID);
						                    LocalData[localID][PosX] = Pos[0];
				                            LocalData[localID][PosY] = Pos[1];
				                            LocalData[localID][PosZ] = Pos[2];
				                            LocalData[localID][PosZZ] = Pos[3]-180.0;
				                            LocalData[localID][Nivel] = level;
										    LocalData[localID][Precio] = price;
										    LocalData[localID][Tipo] = type;
				                            MAX_LOCAL++;
				                            if (localID > MAX_LOCAL_ID)
				                            MAX_LOCAL_ID = localID;
				                            SaveLocal(localID, true);

						                    format(string,sizeof(string),
           									"Has creado un local tipo \"%s\" [%i] con ID %i, Precio: $%i, Nivel: %i.", LocalTipoString[type-1], type, localID+1, price, level);
						                    SendAdviseMessage(playerid, string);
						                    return 1;
					                    }
										else
										{
										    SendInfoMessage(playerid, 0, "", "Ya no se pueden agregar mas locales, se ha alcanzado el limite!");
										    return 1;
										}
					                }
					                else
							        {
							            SendInfoMessage(playerid, 0, "", "El nivel del local debe ser entre 0 y 99");
							            return 1;
							        }
					            }
					            else
						        {
						            SendInfoMessage(playerid, 0, "", "El precio del local debe ser entre $0 y $1.000.000");
						            return 1;
						        }
					        }
					        else
					        {
					            SendInfoMessage(playerid, 0, "", "El tipo de local debe ser entre 1 y 3");
					            return 1;
					        }
					    }
					    else return SendSyntaxError(playerid, "Crear Local", "Crear Local 1 15000 5.");
					}
					//      /Crear Tele
					else if (strcmp("/Crear Tele", cmdtext, true) == 0)
					{
					    if (!PlayersData[playerid][Mapper]) return SendAccessError(playerid, "Crear Tele");
					    
					    new Float:Pos[4]; GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]); GetPlayerFacingAngle(playerid, Pos[3]);
					    
					    new teleid = CrearTele(Pos[0], Pos[1], Pos[2], Pos[3]+180, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
					    if( teleid != -1 )
					    {
					        new string[144];
					        format(string, sizeof(string), "Creaste un tele con las ID %i y %i", teleid, teleid+1);
					        SendAdviseMessage(playerid, string);
					    }
					    else return SendInfoMessage(playerid, 0, "", "Se alcanzo el maximo de teles permitido.");
					}
			    	else
					{
						SendInfoMessage(playerid, 0, "421", "Quizás quiso decir: /Crear {Arma, Cheque Efectivo [ID] [Cantidad], Cheque Personal [ID] [Cantidad]}");
						
						if (PlayersData[playerid][Admin] >= 7)
						{
						    SendInfoMessage(playerid, 0, "421", "Quizás quiso decir: /Crear {Incendio [ID_Casa]}");
						}
						if (PlayersData[playerid][Mapper])
						{
						    SendInfoMessage(playerid, 0, "", "Quizás quiso decir: /Crear {Casa [Tipo] [Precio] [Nivel], Garage [ID_Casa] [Tipo_Garage]}");
						    SendInfoMessage(playerid, 0, "", "Quizás quiso decir: /Crear {Negocio [Tipo] [Precio] [Nivel], Local [Tipo] [Precio] [Nivel]}");
						    SendInfoMessage(playerid, 0, "", "Quizás quiso decir: /Crear Tele");
						}
					}
				}
			// COMANDO: /Aceíte [ID] [Precio]
				else if (strfind(cmdtext, "/Aceíte ", true) == 0 ||
						 strfind(cmdtext, "/Aceite ", true) == 0)
				{
			        new playerid_aceite = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
			        new dinero_aceite = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
			            if ( IsPlayerInTaller(playerid) )
			            {
			                if ( playerid_aceite == playerid )
			                {
			                    if ( IsPlayerInAnyVehicle(playerid) )
			                    {
		                            SendInfoMessage(playerid, 3, "0", "Has rellenedo éste vehículo de aceíte");
									DataCars[GetPlayerVehicleID(playerid)][Oil] = MAX_OIL_VEHICLE;

									UpdateGasAndOil(GetPlayerVehicleID(playerid));
								}
								else
								{
									SendInfoMessage(playerid, 0, "1122", "Suba al vehículo que desea rellenar aceíte");
								}
							}
						    else if ( IsPlayerNearEx(playerid, playerid_aceite,
								 "1123",
								 "1124",
								 "1125",
								 "El jugador que desea rellenar de aceíte el vehículo no se encuentra conectado",
								 "El jugador que desea rellenar de aceíte el vehículo no se encuentra logueado",
								 "El jugador que desea rellenar de aceíte el vehículo no se encuentra cerca de tí") )
						    {
		                        if ( IsPlayerInAnyVehicle(playerid_aceite) )
		                        {
							        if ( dinero_aceite > 0 && dinero_aceite <= 20000 )
							        {
										new MsgRapair[MAX_TEXT_CHAT];
										new MsgRepairToPlayer[MAX_TEXT_CHAT];
										format(MsgRapair, sizeof(MsgRapair), "Ofresiste rellenar el vehículo de aceíte a %s por $%i", PlayersDataOnline[playerid_aceite][NameOnlineFix], dinero_aceite);
										format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "El mecánico %s quiere rellenarle el vehículo de aceíte por $%i usa (/Aceptar Aceíte)", PlayersDataOnline[playerid][NameOnlineFix], dinero_aceite);

			                            SendInfoMessage(playerid, 3, "0", MsgRapair);
			                            SendInfoMessage(playerid_aceite, 3, "0", MsgRepairToPlayer);

										PlayersDataOnline[playerid_aceite][VAceite][0] = playerid;
										PlayersDataOnline[playerid_aceite][VAceite][1] = dinero_aceite;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1126", "El monto mínimo para relleno de aceíte es es $1 y máximo $20000");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1127", "Pídale al cliente que suba a su vehículo para rellenarlo de aceíte");
								}
						    }
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1128", "Usted no es mecánico");
					}
				}
				// COMANDO: /Reparar [ID] [Precio]
				else if (strfind(cmdtext, "/Reparar ", true) == 0)
				{
			        new playerid_repair = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
			        new dinero_repair = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
			            if ( IsPlayerInTaller(playerid) )
			            {
			                if ( playerid_repair == playerid )
			                {
			                    if ( IsPlayerInAnyVehicle(playerid) )
			                    {
		                            SendInfoMessage(playerid, 3, "0", "Has reparado éste vehículo");
									RepairVehicle(GetPlayerVehicleID(playerid));
									SetVehicleHealthEx(GetPlayerVehicleID(playerid), 1000.0);
									new Float:SaveRepair = 1000.0;
							    	UpdateDamage(playerid, SaveRepair);
								}
								else
								{
									SendInfoMessage(playerid, 0, "690", "Suba al vehículo que desea reparar");
								}
							}
						    else if ( IsPlayerNearEx(playerid, playerid_repair,
								 "691",
								 "692",
								 "693",
								 "El jugador que desea repararle el vehículo no se encuentra conectado",
								 "El jugador que desea repararle el vehículo no se encuentra logueado",
								 "El jugador que desea repararle el vehículo no se encuentra cerca de tí") )
						    {
		                        if ( IsPlayerInAnyVehicle(playerid_repair) )
		                        {
							        if ( dinero_repair > 0 && dinero_repair <= 20000 )
							        {
										new MsgRapair[MAX_TEXT_CHAT];
										new MsgRepairToPlayer[MAX_TEXT_CHAT];
										format(MsgRapair, sizeof(MsgRapair), "Ofresiste repararle el vehículo a %s por $%i", PlayersDataOnline[playerid_repair][NameOnlineFix], dinero_repair);
										format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "El mecánico %s quiere reparte el vehículo por $%i usa (/Aceptar Reparación)", PlayersDataOnline[playerid][NameOnlineFix], dinero_repair);

			                            SendInfoMessage(playerid, 3, "0", MsgRapair);
			                            SendInfoMessage(playerid_repair, 3, "0", MsgRepairToPlayer);

										PlayersDataOnline[playerid_repair][VRepair][0] = playerid;
										PlayersDataOnline[playerid_repair][VRepair][1] = dinero_repair;
									}
									else
									{
										SendInfoMessage(playerid, 0, "699", "El monto mínimo de una reparación es $1 y máximo $20000");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "694", "Pídale al cliente que suba a su vehículo para repararselo");
								}
						    }
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "695", "Usted no es mecánico");
					}
				}
				// COMANDO: /Factura [ID] [Precio] [Razón]
				else if (strfind(cmdtext, "/Factura ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
				        new playerid_factura = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new dinero_factura = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( IsPlayerNearEx(playerid, playerid_factura,
							 "685",
							 "686",
							 "687",
							 "El jugador que desea darle una factura no se encuentra conectado",
							 "El jugador que desea darle una factura no se encuentra logueado",
							 "El jugador que desea darle una factura no se encuentra cerca de tí") )
					    {
					        if ( dinero_factura > 0 && dinero_factura <= 20000 )
					        {
								new MsgFactura[MAX_TEXT_CHAT];
								new MsgFacturaToPlayer[MAX_TEXT_CHAT];
								format(MsgFactura, sizeof(MsgFactura), "Le has dado una factura de $%i a %s; Razón: %s", dinero_factura, PlayersDataOnline[playerid_factura][NameOnlineFix], cmdtext[GetPosSpace(cmdtext, 3)]);
								format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s te ha dado una factura $%i usa (/Aceptar Factura); Razón: %s", PlayersDataOnline[playerid][NameOnlineFix], dinero_factura, cmdtext[GetPosSpace(cmdtext, 3)]);
	                            SendInfoMessage(playerid, 3, "0", MsgFactura);
	                            SendInfoMessage(playerid_factura, 3, "0", MsgFacturaToPlayer);

								PlayersDataOnline[playerid_factura][VFactura][0] = playerid;
								PlayersDataOnline[playerid_factura][VFactura][1] = dinero_factura;
							}
							else
							{
								SendInfoMessage(playerid, 0, "688", "El monto mínimo de una factura es $1 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "689", "Usted no es mecánico");
					}
				}
				// COMANDO: /Servicio [ID] [Precio] [Razón]
				else if (strfind(cmdtext, "/Servicio ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == ADP)
				    {
				        new playerid_factura = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new dinero_factura = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( IsPlayerNearEx(playerid, playerid_factura,
							 "1354",
							 "1355",
							 "1356",
							 "El jugador que desea darle un servicio no se encuentra conectado",
							 "El jugador que desea darle un servicio no se encuentra logueado",
							 "El jugador que desea darle un servicio no se encuentra cerca de tí") )
					    {
					        if ( dinero_factura > 100 && dinero_factura <= 20000 )
					        {
								new MsgFactura[MAX_TEXT_CHAT];
								new MsgFacturaToPlayer[MAX_TEXT_CHAT];
								format(MsgFactura, sizeof(MsgFactura), "Le ofreciste servicios por $%i a %s; Razón: %s", dinero_factura, PlayersDataOnline[playerid_factura][NameOnlineFix], cmdtext[GetPosSpace(cmdtext, 3)]);
								format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s te ofrece sus servicios por $%i usa (/Aceptar Servicios); Razón: %s", PlayersDataOnline[playerid][NameOnlineFix], dinero_factura, cmdtext[GetPosSpace(cmdtext, 3)]);
	                            SendInfoMessage(playerid, 3, "0", MsgFactura);
	                            SendInfoMessage(playerid_factura, 3, "0", MsgFacturaToPlayer);

								PlayersDataOnline[playerid_factura][VServicio][0] = playerid;
								PlayersDataOnline[playerid_factura][VServicio][1] = dinero_factura;
							}
							else
							{
								SendInfoMessage(playerid, 0, "1357", "El monto mínimo de un servicio es $100 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1353", "Usted no es ADP");
					}
				}
				// COMANDO: /Pistas
			  	else if (strcmp("/Pistas", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
				    MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Faccion] == TALLER_LS && PlayersData[playerid][Rango] == 0 ||
						 PlayersData[playerid][Faccion] == TALLER_SF && PlayersData[playerid][Rango] == 0 ||
						 PlayersData[playerid][Admin] >= 4)
				    {
                        ShowPistas(playerid);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1432", "Usted no puede organizar carreras!");
					}
	  			}
				// COMANDO: /Taller
			  	else if (strcmp("/Taller", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
					    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
				        if ( MyNearVehicle )
				        {
				            if ( IsPlayerInTaller(playerid) )
				            {
								TogglePlayerControllableEx(playerid, false);
								ShowMenuForPlayer(TallerPrincipal, playerid);
								PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
								PlayersDataOnline[playerid][MyIDVehicleTunning] = MyNearVehicle;
							}
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "681", "Usted no es mecánico");
					}
	  			}
				// COMANDO: /Dropear
			  	else if (strcmp("/Dropear", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
				    if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 1 ||
						 PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] == 3 )
				    {
						if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
						{
					        new IsDrop = GetMyNearCity(playerid);
							// San Fierro
							if ( IsDrop )
							{
								SetPlayerRaceCheckpoint(playerid, 1, -1720.5479,1018.1831,17.2422, 0,0,0,10);
							}
							// Los Santos
							else
							{
								SetPlayerRaceCheckpoint(playerid, 1, 2804.9290,-1432.0378,39.7068, 0,0,0,10);
							}
							SendInfoMessage(playerid, 2, "0", "Se le ha marcado en el mapa un \"CheckPoint\" que es donde debe dropear el vehículo");
						}
						else
						{
							SendInfoMessage(playerid, 0, "1446", "No puede dropear vehículos en una carrera");
						}
				    }
			        else
			        {
						SendInfoMessage(playerid, 0, "717", "Usted no es NFS");
					}
			    }
				// COMANDO: /Alarmas
				else if (strcmp("/Alarmas", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
						ShowAlarmas(playerid);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1501", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Sirena
				else if (strcmp("/Sirena", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        if ( PlayersDataOnline[playerid][InCarId] && PlayersDataOnline[playerid][InCarId] > MAX_CAR_DUENO && PlayersDataOnline[playerid][InCarId] <= MAX_CAR_FACCION && DataCars[PlayersDataOnline[playerid][InCarId]][Modelo] == 405 && (DataCars[PlayersDataOnline[playerid][InCarId]][Time] == LSPD && PlayersData[playerid][Faccion] == LSPD || DataCars[PlayersDataOnline[playerid][InCarId]][Time] == SFPD && PlayersData[playerid][Faccion] == SFPD) )
				        {
							ShowAndHideSirena(playerid, PlayersDataOnline[playerid][InCarId]);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1556", "Suba al sentinel del su cuerpo policíal como conductor y luego use /Sirena!");
				        }
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1557", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Esposar [ID]
				else if (strfind(cmdtext, "/Esposar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[9]),
							 "743",
							 "744",
							 "745",
							 "El jugador que le deseas esposar no se encuentra conectado",
							 "El jugador que le deseas esposar no se ha logueado",
							 "El jugador que le deseas esposar no se encuentra cerca de tí") )
					    {
					        new MsgEsposarIntentar[MAX_TEXT_CHAT];
					        if ( !PlayersDataOnline[strval(cmdtext[9])][IsEsposas] )
					        {
						        format(MsgEsposarIntentar, sizeof(MsgEsposarIntentar), "esposar a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
								if (IntentarAccion(playerid, MsgEsposarIntentar, random(3)))
								{
									TogglePlayerControllableEx(strval(cmdtext[9]), false);
									PlayersDataOnline[strval(cmdtext[9])][IsEsposas] = true;
								}
							}
							else
							{
								format(MsgEsposarIntentar, sizeof(MsgEsposarIntentar), "le quitó las esposas a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
								Acciones(playerid, 8, MsgEsposarIntentar);
							    PlayersDataOnline[strval(cmdtext[9])][IsEsposas] = false;
								TogglePlayerControllableEx(strval(cmdtext[9]), true);
							}
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "742", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Atar [ID]
				else if (strfind(cmdtext, "/Atar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == LCN ||
						 PlayersData[playerid][Faccion] == YKZ ||
						 PlayersData[playerid][Faccion] == SICARIOS ||
						 PlayersData[playerid][Rango] <= 2 && (
						 PlayersData[playerid][Faccion] == COLTS 	 ||
						 PlayersData[playerid][Faccion] == AK 	 	 ||
						 PlayersData[playerid][Faccion] == VELTRAN 	 ||
						 PlayersData[playerid][Faccion] == HEORS
						 ) )
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[6]),
							 "738",
							 "739",
							 "740",
							 "El jugador que le deseas atar no se encuentra conectado",
							 "El jugador que le deseas atar no se ha logueado",
							 "El jugador que le deseas atar no se encuentra cerca de tí") )
					    {
					        new MsgAtarIntentar[MAX_TEXT_CHAT];
					        if ( !PlayersDataOnline[strval(cmdtext[6])][IsAtado] )
					        {
						        format(MsgAtarIntentar, sizeof(MsgAtarIntentar), "atar a %s", PlayersDataOnline[strval(cmdtext[6])][NameOnlineFix]);
								if (IntentarAccion(playerid, MsgAtarIntentar, random(3)))
								{
									TogglePlayerControllableEx(strval(cmdtext[6]), false);
									PlayersDataOnline[strval(cmdtext[6])][IsAtado] = true;
								}
							}
							else
							{
								format(MsgAtarIntentar, sizeof(MsgAtarIntentar), "desató a %s", PlayersDataOnline[strval(cmdtext[6])][NameOnlineFix]);
								Acciones(playerid, 8, MsgAtarIntentar);
							    PlayersDataOnline[strval(cmdtext[6])][IsAtado] = false;
								TogglePlayerControllableEx(strval(cmdtext[6]), true);
							}
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "741", "Usted no es Sicario ni Mafioso!");
					}
				}
				// COMANDO: /Poner
				else if (strfind(cmdtext, "/Recoger", true) == 0)
				{
					// COMANDO: /Recoger
					if (strcmp("/Recoger", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD ||
							 PlayersData[playerid][Faccion] == CAMIONEROS ||
							 PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD)
					    {
					        new MyNearVCP = IsNearVCP(playerid);
					        if ( MyNearVCP != -1 )
					        {
					            if ( PlayersData[playerid][Faccion] == CAMIONEROS && VCP[MyNearVCP][objectmodel] == CONO ||
						             PlayersData[playerid][Faccion] == CAMIONEROS && VCP[MyNearVCP][objectmodel] == VALLA ||
									 PlayersData[playerid][Faccion] == LSPD || PlayersData[playerid][Faccion] == SFPD ||
									 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == CONO ||
									 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == VALLA ||
						 	 		 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == CONO ||
						 	 		 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == VALLA ||
									 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == CONO ||
									 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == VALLA ||
						 	 		 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == CONO ||
						 	 		 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == VALLA 			   )
					            {
									RemoveVCP(MyNearVCP);
								}
							    else
							    {
							        if ( PlayersData[playerid][Faccion] != SFMD && PlayersData[playerid][Faccion] != LSMD)
							        {
										SendInfoMessage(playerid, 0, "887", "Los camioneros solo pueden recoger conos!");
									}
									else
									{
										SendInfoMessage(playerid, 0, "1288", "Los bomberos solo pueden recoger vallas y conos!");
									}
								}
							}
						    else
						    {
								SendInfoMessage(playerid, 0, "834", "Aquí no hay ningún Cono, Valla ni Pincho!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "835", "Usted no es LSPD, SFPD, Camionero ni Bombero");
						}
				  	}
					// /Recoger Todos
				  	else if (strcmp("/Recoger Todos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
		  			{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 4)
						{
			             	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
			             	{
							    if ( VCP[i][objectid_vcp] != -1 )
							    {
								    RemoveVCP(i);
							    }
						    }
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "%s Has recogido todos los objetos puestos por LSPD, SFPD y Camioneros",LOGO_STAFF);
		            		SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "890", "Tú no tienes acceso a el comando /Recoger Todos.");
					        return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "836", "Quizás quiso decir: /Recoger");
					}
			  	}
				// COMANDO: /Chequear [ID]
				else if (strfind(cmdtext, "/Chequear ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD ||
						 PlayersData[playerid][Faccion] == LCN ||
						 PlayersData[playerid][Faccion] == YKZ ||
						 PlayersData[playerid][Faccion] == SICARIOS )
				    {
					    if ( playerid == strval(cmdtext[10]) || IsPlayerNearEx(playerid, strval(cmdtext[10]),
							 "852",
							 "853",
							 "854",
							 "El jugador que le deseas chequear no se encuentra conectado",
							 "El jugador que le deseas chequear no se ha logueado",
							 "El jugador que le deseas chequear no se encuentra cerca de tí") )
					    {
					        if ( playerid == strval(cmdtext[10]) )
					        {
								Acciones(playerid, 8, "ser revisa el mismo");
							}
							else
							{
								new MsgCheckMe[MAX_TEXT_CHAT];
								format(MsgCheckMe, sizeof(MsgCheckMe), "revisa a %s en busca de algo ilegal", PlayersDataOnline[strval(cmdtext[10])][NameOnlineFix]);
								Acciones(playerid, 8, MsgCheckMe);
							}

							new YourWeaponAndaAmmo[2];
							new IsWeapon = false;
					        new MsgCheckWeapon[MAX_TEXT_CHAT];
							for (new i = 0; i < 13; i++)
							{
							    GetPlayerWeaponData(strval(cmdtext[10]), i, YourWeaponAndaAmmo[0], YourWeaponAndaAmmo[1]);
							    if ( YourWeaponAndaAmmo[0] != 0 )
							    {
									format(MsgCheckWeapon, sizeof(MsgCheckWeapon), "Arma: %s || Munición: %i", SlotNameWeapon[YourWeaponAndaAmmo[0]], YourWeaponAndaAmmo[1]);
								    SendClientMessage(playerid, COLOR_MESSAGES[2], MsgCheckWeapon);
								    IsWeapon = true;
								}
							}
							if ( !IsWeapon )
							{
							    SendClientMessage(playerid, COLOR_MESSAGES[2], " No se encontrarón armas");
							}
							format(MsgCheckWeapon, sizeof(MsgCheckWeapon), "Ganzúas: %i | Drogas: %i | Materiales: %i | Bombas: %i | Dinero: %i",
								PlayersData[strval(cmdtext[10])][Ganzuas],
								PlayersData[strval(cmdtext[10])][Drogas],
								PlayersData[strval(cmdtext[10])][Materiales],
								PlayersData[strval(cmdtext[10])][Bombas],
								PlayersData[strval(cmdtext[10])][Dinero]);
						    SendClientMessage(playerid, COLOR_MESSAGES[2], MsgCheckWeapon);
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "851", "Usted no es LSPD, SFPD, YKZ, LCN ni Sicario.");
					}
				}
				// COMANDO: º
				else if (strfind(cmdtext, "/Desasignar ", true) == 0)
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
					    new playeridDesasignar = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    new AsignarID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( IsPlayerNearEx(playerid, playeridDesasignar,
							 "1009",
							 "1010",
							 "1011",
							 "El jugador que le deseas desasignarle un vehículo no se encuentra conectado",
							 "El jugador que le deseas desasignarle un vehículo no se ha logueado",
							 "El jugador que le deseas desasignarle un vehículo no se encuentra cerca de tí") )
					    {
					        if( PlayersData[playerid][Faccion] == PlayersData[playeridDesasignar][Faccion] )
							{
							    if ( PlayersData[playeridDesasignar][Rango] > 1 )
							    {
							        if ( AsignarID >= 1 && AsignarID <= 3 )
							        {
										new ReturnRemoveAsignados = RemoveAsignados(playeridDesasignar, AsignarID - 1);
								        if ( ReturnRemoveAsignados )
								        {
											new MsgAsignarMe[MAX_TEXT_CHAT];
											new MsgAsignarYou[MAX_TEXT_CHAT];

											format(MsgAsignarMe, sizeof(MsgAsignarMe), "Le has desasignado a %s el vehículo con matrícula %i", PlayersDataOnline[playeridDesasignar][NameOnlineFix], DataCars[ReturnRemoveAsignados][Matricula]);
											format(MsgAsignarYou, sizeof(MsgAsignarYou), "%s te ha desasignado el vehículo con matrícula %i", PlayersDataOnline[playerid][NameOnlineFix], DataCars[ReturnRemoveAsignados][Matricula]);
											SendInfoMessage(playerid, 3, "0", MsgAsignarMe);
											SendInfoMessage(playeridDesasignar, 3, "0", MsgAsignarYou);
		                                }
		                                else
		                                {
		                                    new MsgAsignarFail[MAX_TEXT_CHAT];
											format(MsgAsignarFail, sizeof(MsgAsignarFail), "%s no tiene ningún vehículo asignado en el Vehículo número %i!", PlayersDataOnline[playeridDesasignar][NameOnlineFix], AsignarID);
											SendInfoMessage(playerid, 0, "1012", MsgAsignarFail);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1201", "El número del Slot de vehículos asignados tiene que estár comprendido entre 1 y 3");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1013", "El jugador que desea desasignarle éste vehículo, es Líder o Sin-Líder, no necesita desasignación");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1013", "El jugador que desea desasignarle éste vehículo, no pertenece a su facción");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1014", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Asignar [ID]
				else if (strfind(cmdtext, "/Asignar ", true) == 0)
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
							if ( IsVehicleMyFaccion(playerid, MyNearCar) )
							{
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[9]),
									 "992",
									 "993",
									 "994",
									 "El jugador que le deseas asignarle un vehículo no se encuentra conectado",
									 "El jugador que le deseas asignarle un vehículo no se ha logueado",
									 "El jugador que le deseas asignarle un vehículo no se encuentra cerca de tí") )
							    {
							        if( PlayersData[playerid][Faccion] == PlayersData[strval(cmdtext[9])][Faccion] )
									{
									    if ( PlayersData[strval(cmdtext[9])][Rango] > 1 )
									    {
											new ResponseAddA = AddAsignados(strval(cmdtext[9]), MyNearCar);
									        if ( ResponseAddA == 1 )
									        {
												new MsgAsignarMe[MAX_TEXT_CHAT];
												new MsgAsignarYou[MAX_TEXT_CHAT];

												format(MsgAsignarMe, sizeof(MsgAsignarMe), "Le has asignado a %s el vehículo con matrícula %i.", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix], DataCars[MyNearCar][Matricula]);
												format(MsgAsignarYou, sizeof(MsgAsignarYou), "%s te ha asignado el vehículo con matrícula %i", PlayersDataOnline[playerid][NameOnlineFix], DataCars[MyNearCar][Matricula]);
												SendInfoMessage(playerid, 3, "0", MsgAsignarMe);
												SendInfoMessage(strval(cmdtext[9]), 3, "0", MsgAsignarYou);
		                                    }
		                                    else
		                                    {

		                                        new MsgAsignarFail[MAX_TEXT_CHAT];
		                                        if ( ResponseAddA == 2 )
		                                        {
													format(MsgAsignarFail, sizeof(MsgAsignarFail), "%s ya tiene asignado éste vehículo!", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
													SendInfoMessage(playerid, 0, "147", MsgAsignarFail);
												}
												else
												{
													format(MsgAsignarFail, sizeof(MsgAsignarFail), "Al jugador %s ya no se le puede asignar más vehículos!", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
													SendInfoMessage(playerid, 0, "1200", MsgAsignarFail);
												}
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "246", "El jugador que desea asignarle éste vehículo, es Líder o Sin-Líder, no necesita asignación");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "995", "El jugador que desea asignarle éste vehículo, no pertenece a su facción");
									}
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "996", "Éste vehículo no pertenece a su facción!");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "997", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Meter [ID]
				else if (strfind(cmdtext, "/Meter ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[7]),
							 "945",
							 "946",
							 "947",
							 "El jugador que le deseas meter o sacar de un vehículo no se encuentra conectado",
							 "El jugador que le deseas meter o sacar de un vehículo no se ha logueado",
							 "El jugador que le deseas meter o sacar de un vehículo no se encuentra cerca de tí") )
					    {
							new MsgMeter[MAX_TEXT_CHAT];
					        if ( IsPlayerInAnyVehicle(strval(cmdtext[7])) )
					        {
						        if ( !IsPlayerInAnyVehicle(playerid) )
						        {
						            format(MsgMeter, sizeof(MsgMeter), "sacar del vehículo a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
									if ( IntentarAccion(playerid, MsgMeter, random(3)) )
									{
									    RemovePlayerFromVehicle(strval(cmdtext[7]));
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "944", "Desde adentro del vehículo no puedes sacar a nadie que este adentro del mismo");
								}
							}
							else
							{
						        if ( !IsPlayerInAnyVehicle(playerid) )
						        {
							  	    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
							  	    if ( MyNearVehicle )
							  	    {
									    new MySeatFree = -1;
									    new MySeatSave[4];

										for (new i = 0; i < MAX_PLAYERS; i++)
										{
											if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) == MyNearVehicle && GetPlayerVehicleSeat(playerid) != 0)
											{
		                                        MySeatSave[GetPlayerVehicleSeat(playerid)] = true;
											}
										}
										if ( !MySeatSave[3] )
										{
	                                        MySeatFree = 3;
										}
										else if ( !MySeatSave[2] )
										{
	                                        MySeatFree = 2;
										}
										else if ( !MySeatSave[1] )
										{
	                                        MySeatFree = 1;
										}

										if ( MySeatFree != -1 )
										{
								            format(MsgMeter, sizeof(MsgMeter), "meter al vehículo a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
											if ( IntentarAccion(playerid, MsgMeter, random(3)) )
											{
											    PutPlayerInVehicle(strval(cmdtext[7]), MyNearVehicle, MySeatFree);
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "948", "No hay acientos vacíos para meter a este jugador en el vehículo y en el asiento de conductor no puede ir!");
										}
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "949", "Desde adentro del vehículo no puedes meter a nadie que este afuera del mismo");
								}
							}

					    }
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "950", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Bombas
			  	else if (strcmp("/Bombas", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
			  	{
				    MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Faccion] == SICARIOS &&
						 PlayersData[playerid][Rango] <= 4 || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
				    {
					    ShowBombas(playerid);
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1298", "Usted no puede usar el control de bombas!");
					}
			  	}
				// COMANDO: /Detonar Todas
			  	else if (strcmp("/Detonar Todas", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				{
				    MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Faccion] == SICARIOS &&
						 PlayersData[playerid][Rango] <= 1  || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn])
				    {
				        new Found;
						for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
					  	{
						    if ( BombasO[i][TypeBomba] != BOMBA_TYPE_NONE )
						    {
								ActivarBomba(i, 1);
								Found++;
							}
						}
						if ( Found )
						{
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "Detonaste todas las bombas actuales en total erán %i.", Found);
							SendInfoMessage(playerid, 2, "0", StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1306", "No hay bombas para detonar!");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1305", "No te encuentras cerca de una bomba!");
					}
				}
				// COMANDO: /Desactivar
				else if (strfind(cmdtext, "/Desactivar ", true) == 0)
				{
					// COMANDO: /Desactivar Bomba
				  	if (strcmp("/Desactivar Bomba", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
				  	{
						if ( PlayersData[playerid][Faccion] == SICARIOS &&
							 PlayersData[playerid][Rango] <= 4 ||
							PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6  )
					    {

					        new IsBombNear = IsPlayerNearBomba(playerid, 1.5, -1);
					        if ( IsBombNear != -1 )
					        {
					            if ( PlayersData[playerid][Faccion] == SFPD || PlayersData[playerid][Faccion] == LSPD )
						        {
									if (IntentarAccion(playerid, "desactivar la bomba", random(3)))
									{
									    DesactivarBomba(playerid, IsBombNear);
									    Acciones(playerid, 7, "Bomba: Desactivada...");
									}
									else
									{
										ActivarBomba(IsBombNear, 20);
									    Acciones(playerid, 7, "Bomba: Activada...");
									}
								}
								else
								{
					            	if ( DesactivarBomba(playerid, IsBombNear) )
					            	{
										SendInfoMessage(playerid, 2, "0", "Desactivaste está bomba!");
					            	}
					            	else
					            	{
										SendInfoMessage(playerid, 0, "1304", "Ocurrió un error al desactivar la bomba!");
									}
								}
			            	}
			            	else
			            	{
								SendInfoMessage(playerid, 0, "1301", "No te encuentras cerca de una bomba!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1295", "Usted no es no puede desactivar bombas!");
						}
				  	}
					// COMANDO: /Desactivar Bomba
				  	else if (strcmp("/Desactivar Bomba Todos", cmdtext, true, 23) == 0 && strlen(cmdtext) == 23)
				  	{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 7 )
					    {
							for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
							{
								RemoveBomba(i);
							}
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "%s Has desactivado todas las bombas",LOGO_STAFF);
		            		SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1299", "Tú no tienes acceso a el comando /Desactivar Bomba Todos.");
						}
				  	}
				  	else
				  	{
						SendInfoMessage(playerid, 0, "1296", "Quizás quiso decir: /Desactivar Bomba");
					}
			  	}
				// COMANDO: /Poner
				else if (strfind(cmdtext, "/Poner ", true) == 0)
				{
					// COMANDO: /Poner Cono
				  	if (strcmp("/Poner Cono", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 ||
							 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5  )
					    {
					        AddVCP(playerid, CONO, 0.0,0.0,0.0,0.0);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "837", "Usted no es LSPD, SFPD, Camionero ni Bombero!");
						}
				  	}
					// COMANDO: /Poner Uniforme
				  	else if (strcmp("/Poner Uniforme", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD )
					    {
							if 	( PlayersData[playerid][Faccion] == SFPD && IsPlayerInRangeOfPoint(playerid, 10.0, 225.2609,121.4485,999.0762) ||
								  PlayersData[playerid][Faccion] == LSPD && IsPlayerInRangeOfPoint(playerid, 10.0, 256.1825,77.9571,1003.6406) )
						    {
								SetPlayerSelectedTypeSkin(playerid, true);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1513", "No te encuentras en el vestuario!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1514", "Usted no es LSPD ni SFPD!");
						}
				  	}
					// COMANDO: /Poner Bomba
					else if (strfind(cmdtext, "/Poner Bomba", true) == 0)
				  	{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Faccion] == SICARIOS &&
							 PlayersData[playerid][Rango] <= 4 ||
							 PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
					    {
					        if ( PlayersData[playerid][Bombas] > 0 || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
					        {
       					        new ObjectIDBomb = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					            new ResultadoPlanted;
								new Float:PosPlayer[3]; GetPlayerPos(playerid, PosPlayer[0], PosPlayer[1], PosPlayer[2]);
								if ( PlayersDataOnline[playerid][InCarId] && IsPlayerInAnyVehicle(playerid) ||
									 PlayersDataOnline[playerid][InVehicle] && IsPlayerInAnyVehicle(playerid) )
								{
						            ResultadoPlanted = AddBomba(playerid, BOMBA_TYPE_CAR, GetPlayerVehicleID(playerid), PosPlayer[0], PosPlayer[1], PosPlayer[2], 0);
									ApplyPlayerAnimCustom(playerid,
									"CAR_CHAT",
									CARCHAT_ANIMATIONS[15], false);
								}
								else
								{
								    if ( ObjectIDBomb >= 0 && ObjectIDBomb < 8 )
								    {
							            ResultadoPlanted = AddBomba(playerid, BOMBA_TYPE_FOOT, false, PosPlayer[0], PosPlayer[1], PosPlayer[2], BombasOjectsID[ObjectIDBomb]);
										ApplyPlayerAnimCustom(playerid,
										"BOMBER",
										BOMBER_ANIMATIONS[0], false);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1303", "El tipo de bomba debe estár comprendido entre 0 y 7!");
									}
								}
							    if ( ResultadoPlanted )
								{
								    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
								    {

									}
									else
									{
										PlayersData[playerid][Bombas]--;
									}
								}
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1302", "No tienes bombas!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1294", "Usted no es no puede poner bombas!");
						}
				  	}
					// COMANDO: /Poner Candado [Razón]
				  	else if (strfind(cmdtext, "/Poner Candado ", true) == 0)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 4 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 5)
					    {
		          			new MyNearCar = IsPlayerInNearVehicle(playerid);
		          			if ( MyNearCar )
		          			{
							    if ( !IsPlayerInAnyVehicle(playerid) )
							    {
							  	    if ( !DataCars[MyNearCar][LockPolice] )
							  	    {
										if ( strlen(cmdtext[15]) >= 3 && strlen(cmdtext[15]) <= 50 )
										{
								  	        if ( IsValidStringServer(playerid, cmdtext[15]) )
								  	        {
												if (IntentarAccion(playerid, "ponerle un candado policial al vehículo", random(3)))
												{
												    DataCars[MyNearCar][LockPolice] = true;
										    		format(DataCars[MyNearCar][ReasonLock], 50, "%s %s: %s", FaccionData[PlayersData[playerid][Faccion]][NameFaccion], PlayersDataOnline[playerid][NameOnlineFix], cmdtext[15]);
												}
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "943", "La razón del candado debe ser mayor de 3 caracteres y menor de 50");
										}
							  	    }
							  	    else
							  	    {
										Acciones(playerid, 8, "le quitó el candado al vehículo");
									    DataCars[MyNearCar][LockPolice] = false;
							    		format(DataCars[MyNearCar][ReasonLock], 50, "0");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "879", "Desde adentro del vehículo no puedes ponerle candado");
								}
					  	    }
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "878", "Usted no es no puede poner candados!");
						}

				  	}
					// COMANDO: /Poner Pincho
				  	else if (strcmp("/Poner Pincho", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6)
					    {
					        if ( GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == WORLD_NORMAL)
					        AddVCP(playerid, PINCHO, 0.0,0.0,0.0,0.0);
					        else SendInfoMessage(playerid, 0, "838", "Solo puedes poner pinchos en el exterior.");
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "838", "Usted no es LSPD ni SFPD");
						}
				  	}
					// COMANDO: /Poner Valla
				  	else if (strcmp("/Poner Valla", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 ||
							 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5							  )
					    {
					        AddVCP(playerid, VALLA, 0.0,0.0,0.0,0.0);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "838", "Usted no puede poner vallas!");
						}
				  	}
					// COMANDO: /Poner Equipo [ID]
					else if (strfind(cmdtext, "/Poner Equipo", true) == 0)
					{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD ||
							 PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] == 4)
					    {
								if ( CheckWeapondCheat(playerid) && (
									 PlayersData[playerid][Faccion] == SFPD && IsPlayerInRangeOfPoint(playerid, 10.0, 225.2609,121.4485,999.0762) ||
									 PlayersData[playerid][Faccion] == LSPD && IsPlayerInRangeOfPoint(playerid, 10.0, 256.1825,77.9571,1003.6406) ||
									 PlayersData[playerid][Faccion] == GOBIERNO && IsPlayerInRangeOfPoint(playerid, 3.0, 366.5851, 158.6437, 1008.3828) ) )
							    {
							        new equipoid = strval(cmdtext[14]);
							        if ( equipoid >= 0 && equipoid <= 5 )
							        {
										if (PlayersData[playerid][Faccion] == GOBIERNO && equipoid > 2) return SendInfoMessage(playerid, 0, "1033", "Usted no está autizado a coger ese equipo");

										if ( PlayersData[playerid][TimeEquipo] > gettime() && equipoid != 0)
										{
										    new MsgPersonalizado[MAX_TEXT_CHAT];
											format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a usar otro equipo", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
											return SendInfoMessage(playerid, 0, "843", MsgPersonalizado);
										}
										new Autorizado = false;
	        							switch (equipoid)
								        {
								            case 0:
								            {
								                ResetPlayerWeaponsEx(playerid);
	          									PlayersDataOnline[playerid][ChalecoOn] = 0;

									          	new HaveTaser = GetObjectByType(playerid, TYPE_TASER);
												if ( HaveTaser != -1 )
												{
													RemoveObjectHoldToPlayer(playerid, -1, HaveTaser);
												}
												Acciones(playerid, 8, "dejo las armas en el armario");
												return 1;
								            }
								            case 1: Autorizado++;
								            case 2:
								            {
												if ( PlayersData[playerid][Rango] <= 6 || PlayersDataOnline[playerid][IsAutorizado])//Oficiales
												{
													GivePlayerWeaponEx(playerid, 23, 60);//Silenciada
													Autorizado++;
												}
											}
								            case 3:
								            {
												if ( PlayersData[playerid][Rango] <= 5 || PlayersDataOnline[playerid][IsAutorizado])//Cabo
												{
													GivePlayerWeaponEx(playerid, 43, 200);//Camara
													GivePlayerWeaponEx(playerid, 24, 60);//Desert
													Autorizado++;
												}
											}
								            case 4:
								            {
												if ( PlayersData[playerid][Rango] <= 4 || PlayersDataOnline[playerid][IsAutorizado] )
												{
													GivePlayerWeaponEx(playerid, 24, 60);//Desert
													GivePlayerWeaponEx(playerid, 29, 250);//MP5
													GivePlayerWeaponEx(playerid, 17, 5);//Granada Gas
													Autorizado++;
												}
											}
								            case 5:
								            {
												if ( PlayersData[playerid][Rango] <= 3 || PlayersDataOnline[playerid][IsAutorizado])//Teniente
												{
													GivePlayerWeaponEx(playerid, 24, 60);//Desert
													GivePlayerWeaponEx(playerid, 29, 250);//MP5
													GivePlayerWeaponEx(playerid, 31, 250);//M4
													GivePlayerWeaponEx(playerid, 34, 100);//Sniper
													GivePlayerWeaponEx(playerid, 17, 5);//Granada Gas
													Autorizado++;
												}
											}
	          							}
	          							if ( Autorizado )
	          							{
	          							    new MsgEquipoMe[MAX_TEXT_CHAT];

											format(MsgEquipoMe, sizeof(MsgEquipoMe), "coge un equipo número %i del armario", strval(cmdtext[14]));
											Acciones(playerid, 8, MsgEquipoMe);
											SetPlayerArmourEx(playerid, 85);//Chaleco
											GivePlayerWeaponEx(playerid, 3, 1);//Baston
											GivePlayerWeaponEx(playerid, 41, 200);//Spray
											PlayersDataOnline[playerid][IsAutorizado] = false;
											PlayersData[playerid][TimeEquipo] = gettime() + 900;

											if ( GetObjectByType(playerid, TYPE_TASER) == -1 )
											{
												AddObjectHoldToPlayer(playerid, 18642);
											}
	          							}
	          							else return SendInfoMessage(playerid, 0, "1033", "Usted no está autizado a coger ese equipo");
								    }
								    else
								    {
										SendInfoMessage(playerid, 0, "841", "El ID del equipo tiene que estar entre 1 y 5. Use 0 para quitarse el equipo.");
									}
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "842", "Aquí no esta el armario de equipos");
								}
					    }
					    else SendAccessError(playerid, "Poner Equipo");
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "839", "Quizás quiso decir: /Poner {Candado [Razón], Cono, Pincho, Valla, Equipo [ID_EQUIPO], Bomba, Uniforme}");
					}
			  	}

				// COMANDO: /Debilitar Incendio
			  	else if (strcmp("/Debilitar Incendio", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19)
				{
					if ( PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
						 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
						 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5						 )
				    {
				        new FireID = IsPlayerNearFire(playerid);
				        if (FireID != -1)
				        {
					        if ( IntentarAccion(playerid, "debilitar el incendio", random(5)) )
					        {
                                DestroyParticleFire(FireID);
							}
						}
				    }
			        else
			        {
						SendInfoMessage(playerid, 0, "1281", "Usted no es bombero!");
					}
			    }
				// COMANDO: /Examinar Enfermedad [ID]
				else if (strfind(cmdtext, "/Examinar Enfermedad ", true) == 0)
				{
					if ( (PlayersData[playerid][Faccion] == LSMD || PlayersData[playerid][Faccion] == SFMD ) && PlayersData[playerid][Rango] <= 3)
				    {
					    if ( PlayersData[playerid][Faccion] == SFMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 2800.7007,2518.0408,10.8770) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 2794.0745,2509.6274,17.6810)) ||
							 PlayersData[playerid][Faccion] == LSMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 303.2898,1904.9742,17.7344) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 293.0114,1874.8575,17.6406))
																		 )
					    {
	   				        new PlayerIDEnfermo = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						    if ( IsPlayerNearEx(playerid, PlayerIDEnfermo,
								 "1515",
								 "1516",
								 "1517",
								 "El jugador que le deseas examinar no se encuentra conectado",
								 "El jugador que le deseas examinar no se ha logueado",
								 "El jugador que le deseas examinar no se encuentra cerca de tí") )
						    {
						        new MsgCurarIntentar[MAX_TEXT_CHAT];
						        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "examinar a %s", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix]);
	    						if (IntentarAccion(playerid, MsgCurarIntentar, random(5)))
	    						{
									if ( PlayersData[PlayerIDEnfermo][Enfermedad] != 0 )
									{
								        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "Se le ha detectado %s a %s con el examen", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix], EnfermedadName[PlayersData[PlayerIDEnfermo][Enfermedad]]);
									}
									else
									{
								        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "No se le ha detectado ninguna enfermedad a %s", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix]);
									}
									SendInfoMessage(playerid, 3, "0", MsgCurarIntentar);
	 							}
						    }
					    }
						else
						{
							SendInfoMessage(playerid, 0, "1518", "No te encuentras en el salón de operaciones ni en la consulta");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1519", "Usted no es médico");
					}
				}
				// COMANDO: /Curar Enfermedad [ID]
				else if (strfind(cmdtext, "/Curar Enfermedad ", true) == 0)
				{
					if ( (PlayersData[playerid][Faccion] == LSMD || PlayersData[playerid][Faccion] == SFMD ) && PlayersData[playerid][Rango] <= 3)
				    {
					    if ( PlayersData[playerid][Faccion] == SFMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 2800.7007,2518.0408,10.8770) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 2794.0745,2509.6274,17.6810)) ||
							 PlayersData[playerid][Faccion] == LSMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 303.2898,1904.9742,17.7344) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 293.0114,1874.8575,17.6406))
																		 )
					    {
	   				        new PlayerIDEnfermo = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						    if ( IsPlayerNearEx(playerid, PlayerIDEnfermo,
								 "1416",
								 "1415",
								 "1414",
								 "El jugador que le deseas curar una enfermedad no se encuentra conectado",
								 "El jugador que le deseas curar una enfermedad no se ha logueado",
								 "El jugador que le deseas curar una enfermedad no se encuentra cerca de tí") )
						    {
								if ( PlayersData[PlayerIDEnfermo][Enfermedad] )
								{
							        new MsgCurarIntentar[MAX_TEXT_CHAT];
							        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "curarle la enfermedad a %s", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix]);
		    						if (IntentarAccion(playerid, MsgCurarIntentar, random(5)))
		    						{

										SetPlayerHealthEx(PlayerIDEnfermo, 30);

										GivePlayerMoneyEx(playerid, 50);

										ChangeEnfermedad(PlayerIDEnfermo, 0);

										FaccionData[PlayersData[playerid][Faccion]][Deposito] = FaccionData[PlayersData[playerid][Faccion]][Deposito] + 50;
		 							}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1412", "Este jugador no necesitan que lo curen");
								}
						    }
					    }
						else
						{
							SendInfoMessage(playerid, 0, "1413", "No te encuentras en el salón de operaciones ni en la consulta");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1417", "Usted no es médico");
					}
				}
				// COMANDO: /Curar
				else if (strfind(cmdtext, "/Curar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFMD || PlayersData[playerid][Faccion] == LSMD)
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[7]),
							 "414",
							 "415",
							 "416",
							 "El jugador que le deseas curar no se encuentra conectado",
							 "El jugador que le deseas curar no se ha logueado",
							 "El jugador que le deseas curar no se encuentra cerca de tí") )
					    {
							new Float:Vida1;
							GetPlayerHealth(strval(cmdtext[7]), Vida1);
							if ( Vida1 <= VIDA_CRACK || PlayersData[strval(cmdtext[7])][Cansansio] <= 1 )
							{
								ApplyPlayerAnimCustom(playerid,
								"MEDIC",
								MEDIC_ANIMATIONS[0], false);
								ApplyPlayerAnimCustom(playerid,
								"MEDIC",
								MEDIC_ANIMATIONS[0], false);

						        new MsgCurarIntentar[MAX_TEXT_CHAT];
						        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "reanimar a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
	    						if (IntentarAccion(playerid, MsgCurarIntentar, random(3)))
	    						{
									if ( PlayersData[strval(cmdtext[7])][Cansansio] == 1 )
									{
										PlayersData[strval(cmdtext[7])][Cansansio] = 5;
									}

									SetPlayerHealthEx(strval(cmdtext[7]), 30);

									GivePlayerMoneyEx(playerid, 20);

									FaccionData[PlayersData[playerid][Faccion]][Deposito] = FaccionData[PlayersData[playerid][Faccion]][Deposito] + 10;

									ApplyAnimation(strval(cmdtext[7]),"PED",PED_ANIMATIONS[ModeWalkID[PlayersData[playerid][MyStyleWalk]]], 4.0, 0, 1, 1, 0, 1, 1);
	 							}
							}
							else
							{
								SendInfoMessage(playerid, 0, "417", "Este jugador no necesitan que lo curen");
							}
					    }
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "418", "Usted no es médico");
					}
				}
			    // /Bailar [ID]
	  			else if (strfind(cmdtext, "/Bailar ", true) == 0)
			    {
				    new IDDance[3];
					strmid(IDDance, cmdtext, 8, strlen(cmdtext), sizeof(IDDance));
					if ( strval(IDDance) >= 1 && strval(IDDance) <=4 )
					{
						SetPlayerSpecialAction(playerid, strval(IDDance) + 4);
						PlayersDataOnline[playerid][InAnim] = true;
					}
					else
					{
						SendInfoMessage(playerid, 0, "363", "El ID a bailar tiene que estar comprendida entre 1 y 4.");
					}
			    }
			    /*// /Salir
			  	else if (strcmp("/Salir", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
	  			{
					if ( IsPlayerInAnyVehicle(playerid) )
					{
						if ( GetPlayerVehicleSeat(playerid) == 0 )
						{
							RemovePlayerFromVehicle(playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "520", "Tiene que estar en el puesto del conductor para utilizar /Salir");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "521", "No se encuentra en ningún vehículo");
					}
				}*/
			    // /Desconectar
			  	else if (strcmp("/Desconectar", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
	  			{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 5 )
			        {

						if ( CallCNN != -1 )
					    {
							PayCall(CallCNN);
			    			SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica finalizada.");
							Acciones(CallCNN, 8, "guarda su móvil");
							SendClientMessage(CallCNN, COLOR_COLGAR_DESCOLGAR, " Han colgado!");
							SetPlayerColgar(CallCNN);
			                PlayersDataOnline[CallCNN][InCall] = -1;
			    			CallCNN = -1;
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "911", "No hay nadie en la línea de CNN");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "912", "Tú no eres reportero!");
					}
	  			}
				// COMANDO: /Conectar [Número]
				else if (strfind(cmdtext, "/Conectar ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 5 )
				    {
						if ( CallCNN == -1 )
					    {
							new numberphoneCnn = strval(cmdtext[10]);
							new NotFoundNumber = true;
				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == numberphoneCnn && PlayersDataOnline[i][PhoneOnline] )
								{
									NotFoundNumber = false;
									if ( PlayersDataOnline[i][InCall] == 888 )
									{
									    PlayersDataOnline[i][TimeCall] = gettime();
										SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica establecida.");
										CallCNN = i;
										SendClientMessage(CallCNN, COLOR_COLGAR_DESCOLGAR, " Han descolgado!");
									}
									else
									{
										SendInfoMessage(playerid, 0, "913", "El móvil que desea conectar no está en la lista de espera en línea!");
									}
								}
							}
							if ( NotFoundNumber )
							{
								SendInfoMessage(playerid, 0, "914", "El móvil que desea conectar se encuentra apagado o no existe!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "915", "Ya la línea de CNN está ocupada");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "916", "Tú no eres reportero!");
					}
				}
			    // /Llamar 888
			  	else if (strcmp("/Llamar 888", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
								if ( PlayersData[playerid][Saldo] >= 1 )
								{
								    if ( CallCNN == -1 )
								    {
										Acciones(playerid, 8, "saca su móvil y marca unos números");
										SendClientMessage(playerid, COLOR_INFO_MOVIL, " El número 888 está dando timbre!");
										PlayersDataOnline[playerid][IsDescolgado] 	= true;
										PlayersDataOnline[playerid][InCall] = 888;
										SetPlayerDescolgar(playerid);
										SendMessageToCallCNN(playerid);
										PlayersDataOnline[playerid][ICall] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "917", "El número al que llama se encuentra ocupado");
									}
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "1019", "No tienes saldo para realizar una llamada!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1506", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "918", "Tú no tienes móvil");
					}
				}
			    // /Llamar 912 - SFPD       	ID - 4
			  	else if (strcmp("/Llamar 912", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
								PlayersDataOnline[playerid][NumberCallPublic] = true;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedPolice(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1507", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "869", "Tú no tienes móvil");
					}
				}
			    // /Llamar 911 - LSPD       	ID - 0
			  	else if (strcmp("/Llamar 911", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
								PlayersDataOnline[playerid][NumberCallPublic] = false;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedPolice(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1508", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "771", "Tú no tienes móvil");
					}
				}
			    // /Llamar 105 - SFMD
			  	else if (strcmp("/Llamar 105", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = false;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedSAMD(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1509", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "770", "Tú no tienes móvil");
					}
				}
			    // /Llamar 105 - LSMD
			  	else if (strcmp("/Llamar 106", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = true;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedSAMD(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1515", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1516", "Tú no tienes móvil");
					}
				}
			    // /Llamar 145 - Taxí      		ID - 0
			  	else if (strcmp("/Llamar 145", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( IsFoundCall(PlayersData[playerid][Phone], 0) == -1 )
							{
								if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
								{
									new MsgLlamar[MAX_TEXT_CHAT];
									format(MsgLlamar, sizeof(MsgLlamar), "Un cliente ha llamado un taxí, Use (/Llamadas). Número: %i (%s).", PlayersData[playerid][Phone], Ciudades[GetMyNearCity(playerid)]);
									SendAlertCallRequest(TAXI, MsgLlamar);

									PlayersDataOnline[playerid][NumberCallPublic] = 0;
									AddCallPublics(playerid, PlayersData[playerid][Phone], 0);

									Acciones(playerid, 8, "saca su móvil y marca unos números");
									SendInfoMessage(playerid, 2, "0", "Llamó a la estación de taxís, espere que venga un taxí y no se mueva del lugar");
									SetPlayerDescolgar(playerid);
									SetTimerEx("SetPlayerColgar", 5000, false, "d", playerid);
						        }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1108", "Ya usted tiene regístrada una llamada en la central de taxís, espere que le contesten");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1510", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "769", "Tú no tienes móvil");
					}
				}
			    // /Llamar 555 - Mecánicos SF     ID - 1
			  	else if (strcmp("/Llamar 555", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( IsFoundCall(PlayersData[playerid][Phone], 1) == -1)
							{
								if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
								{
									new MsgLlamar[MAX_TEXT_CHAT];
									format(MsgLlamar, sizeof(MsgLlamar), "Han solicitado un mecánico, Use (/Llamadas). Número: %i (%s).", PlayersData[playerid][Phone], Ciudades[GetMyNearCity(playerid)]);
									SendAlertCallRequest(TALLER_SF, MsgLlamar);

									PlayersDataOnline[playerid][NumberCallPublic] = 1;
									AddCallPublics(playerid, PlayersData[playerid][Phone], 1);

									Acciones(playerid, 8, "saca su móvil y marca unos números");
									SendInfoMessage(playerid, 2, "0", "Los mecánicos del taller en San Fierro vendrán atenderle lo más prontó posible, espere en esta posición");
									SetPlayerDescolgar(playerid);
									SetTimerEx("SetPlayerColgar", 5000, false, "d", playerid);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "767", "Ya usted tiene regístrada una llamada en la central del taller en San Fierro, espere que le contesten");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1511", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "768", "Tú no tienes móvil");
					}
				}
			    // /Llamar 777 - Mecánicos LS       ID - 1
			  	else if (strcmp("/Llamar 777", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( IsFoundCall(PlayersData[playerid][Phone], 2) == -1)
							{
								if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
								{
									new MsgLlamar[MAX_TEXT_CHAT];
									format(MsgLlamar, sizeof(MsgLlamar), "Han solicitado un mecánico, Use (/Llamadas). Número: %i (%s).", PlayersData[playerid][Phone], Ciudades[GetMyNearCity(playerid)]);
									SendAlertCallRequest(TALLER_LS, MsgLlamar);

									PlayersDataOnline[playerid][NumberCallPublic] = 2;
									AddCallPublics(playerid, PlayersData[playerid][Phone], 2);

									Acciones(playerid, 8, "saca su móvil y marca unos números");
									SendInfoMessage(playerid, 2, "0", "Los mecánicos del taller en Los Santos vendrán atenderle lo más prontó posible, espere en esta posición");
									SetPlayerDescolgar(playerid);
									SetTimerEx("SetPlayerColgar", 5000, false, "d", playerid);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1290", "Ya usted tiene regístrada una llamada en la central del taller en Los Santos, espere que le contesten");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1512", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "734", "Tú no tienes móvil");
					}
				}
			    // /Cámaras
			  	else if (strcmp("/Cámaras", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 ||
				  		 strcmp("/Camaras", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					if ( PlayersData[playerid][Faccion] == LSPD ||
						 PlayersData[playerid][Faccion] == SFPD)
				    {
						if ( PlayersData[playerid][Faccion] == LSPD && IsPlayerInRangeOfPoint(playerid, 2.0, 2365.8909,1559.6465,27.9562) ||
							 PlayersData[playerid][Faccion] == SFPD && IsPlayerInRangeOfPoint(playerid, 2.0, 1961.4952,973.3851,21.8714) )
						{
					     	PlayersDataOnline[playerid][InCamera] = true;
							ShowMenuForPlayer(CamerasM[0], playerid);
							PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);

					        PlayersDataOnline[playerid][Spawn]      = false;
				            GetSpawnInfo(playerid);
							PlayersDataOnline[playerid][StateDeath] = true;
							TogglePlayerSpectating(playerid, 1);

							SetPlayerCameraPos(playerid, Cameras[0][PosXLook], Cameras[0][PosYLook], Cameras[0][PosZLook]);
							SetPlayerCameraLookAt(playerid, Cameras[0][PosXAt], Cameras[0][PosYAt], Cameras[0][PosZAt]);
						    SetPlayerInteriorEx(playerid, Cameras[0][Interior]);
					     	SetPlayerVirtualWorldEx(playerid, Cameras[0][World]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1089", "No se encuentra en el sistema de cámaras!");
						}
				    }
			        else
			        {
						SendInfoMessage(playerid, 0, "1088", "Usted no es LSPD ni SFPD!");
					}
			    }
			    // /Llamadas
			  	else if (strcmp("/Llamadas Bomberos", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
	  			{
					if ( PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
                         PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
                         PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 )

					{
						PlayersDataOnline[playerid][NumberCallPublic] = 0;
					    if ( PlayersData[playerid][Faccion] == SFMD )
					    {
							PlayersDataOnline[playerid][SaveAfterAgenda][50] = false;
						}
						else
						{
							PlayersDataOnline[playerid][SaveAfterAgenda][50] = true;
						}
						ShowCallSAMD(playerid);
	  				}
	  				else
	  				{
						SendInfoMessage(playerid, 0, "1285", "Usted no es bombero!");
					}
	  			}
			    // /Llamadas
			  	else if (strcmp("/Llamadas", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD)
				    {
				        if ( PlayersData[playerid][Faccion] == LSPD )
				        {
							PlayersDataOnline[playerid][NumberCallPublic] = false;
						}
						else
						{
							PlayersDataOnline[playerid][NumberCallPublic] = true;
						}
						ShowCallPolice(playerid);
				    }
					else if ( PlayersData[playerid][Faccion] == TAXI ||
						 	  PlayersData[playerid][Faccion] == TALLER_SF ||
						 	  PlayersData[playerid][Faccion] == TALLER_LS )
				    {
						if ( PlayersData[playerid][Faccion] == TAXI )
						{
							PlayersDataOnline[playerid][NumberCallPublic] = 0;
						}
						else if ( PlayersData[playerid][Faccion] == TALLER_SF )
						{
							PlayersDataOnline[playerid][NumberCallPublic] = 1;
						}
						else if ( PlayersData[playerid][Faccion] == TALLER_LS )
						{
							PlayersDataOnline[playerid][NumberCallPublic] = 2;
						}
						ShowCallPublics(playerid);
				    }
					else if ( PlayersData[playerid][Faccion] == LSMD || PlayersData[playerid][Faccion] == SFMD)
				    {
				        if ( PlayersData[playerid][Faccion] == SFMD )
				        {
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = false;
				        }
				        else
				        {
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = true;
				        }
				        if ( PlayersData[playerid][Rango] == 5 )
				        {
							PlayersDataOnline[playerid][NumberCallPublic] = false;
				        }
				        else
				        {
							PlayersDataOnline[playerid][NumberCallPublic] = true;
						}
						ShowCallSAMD(playerid);
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "772", "Usted no es médico, bombero, policía, taxísta ni mecánico!");
					}
	  			}
				// COMANDO: /Dormir
			  	else if (strcmp("/Dormir", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					if ( PlayersData[playerid][IsPlayerInHouse] || PlayersDataOnline[playerid][IsPlayerInHotel] )
					{
						if ( PlayersData[playerid][Cansansio] < MAX_CANSANSIO )
						{
						    if ( !PlayersDataOnline[playerid][InSleep] )
						    {
								PlayersDataOnline[playerid][InSleep] = true;
								SetPlayerSleep(playerid);
								TogglePlayerControllableEx(playerid, false);
								ApplyPlayerAnimCustom(playerid,
								"PARACHUTE",
								PARA_ANIMATIONS[2], false);
							}
							else
						  	{
								SendInfoMessage(playerid, 0, "1121", "Ya usted está durmiendo, presione ENTER si desea terminar de dormir");
						   	}
						}
						else
						{
							SendInfoMessage(playerid, 0, "845", "No te encuentras lo suficietemente cansado como para dormir");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "", "No se encuentra dentro de una casa u hotel.");
					}
				}
				// COMANDO: /Timbre
			  	else if (strcmp("/Timbre", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					if ( PlayersDataOnline[playerid][InPickupCasa] )
					{
					    new houseid = PlayersDataOnline[playerid][InPickupCasa];
					    
	                    if ( gettime() - HouseData[houseid][RingHouseTime] >= 20 )
	                    {
							for (new i = 0; i < MAX_PLAYERS; i++)
							{
							    if (i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][IsPlayerInHouse] == houseid)
							    {
							        SendClientMessage(i, COLOR_DE_WISPEO, "** TIMBRE: RING RING!!!");
							    }
						    }
					        Acciones(playerid, 8, "tocó el timbre de la casa");
					        HouseData[houseid][RingHouseTime] = gettime();
						}
						else
						{
						    new MsgRingHouse[MAX_TEXT_CHAT];
						    format(MsgRingHouse, sizeof(MsgRingHouse), "El timbre de está casa ha sido tocado recientemente, tiene que esperar %i segundos para volver a usarlo", 20 - (gettime() - HouseData[houseid][RingHouseTime]));
						    SendInfoMessage(playerid, 0, "886", MsgRingHouse);
						}
					}
					else if ( PlayersDataOnline[playerid][InPickupLocal] != -1 )
					{
						if ( gettime() - LocalData[PlayersDataOnline[playerid][InPickupLocal]][TimbreTime] >= 20 )
	                    {
							for (new i = 0; i < MAX_PLAYERS; i++)
							{
							    if (i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][InLocal] == PlayersDataOnline[playerid][InPickupLocal])
							    {
							        SendClientMessage(i, COLOR_DE_WISPEO, "** TIMBRE: RING RING!!!");
							    }
						    }
					        Acciones(playerid, 8, "tocó el timbre del local");
					        LocalData[PlayersDataOnline[playerid][InPickupLocal]][TimbreTime] = gettime();
						}
						else
						{
						    new MsgRingHouse[MAX_TEXT_CHAT];
						    format(MsgRingHouse, sizeof(MsgRingHouse), "El timbre de este local ha sido tocado recientemente, tiene que esperar %i segundos para volver a usarlo", 20 - (gettime() - LocalData[PlayersDataOnline[playerid][InPickupLocal]][TimbreTime]));
						    SendInfoMessage(playerid, 0, "886", MsgRingHouse);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "885", "No te encuentras en la puerta de ninguna casa o local");
					}
				}
				// COMANDO: /Online
			  	else if (strcmp("/Online DM", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
	  			{
	  			    if ( PlayersDataOnline[playerid][ModeDM] )
	  			    {
						new MsgOnline[MAX_TEXT_CHAT];
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][ModeDM] && PlayersDataOnline[i][State] == 3 )
							{
								format(MsgOnline, sizeof(MsgOnline), "** {E6E6E6}%s[%i] está en modo {00F50A}DeathMatch {E6E6E6}pertenece al equipo número [%i] Tiene {F50000}%i {E6E6E6}muertes!", PlayersDataOnline[i][NameOnlineFix], i,PlayersDataOnline[i][TeamDM] + 1,PlayersDataOnline[i][PointDm]);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgOnline);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1117", "No te encuentas en modo DeathMatch!");
					}
	  			}
				// COMANDO: /Online
			  	else if (strcmp("/Online", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
	  			    if ( PlayersData[playerid][Faccion] != CIVIL )
	  			    {
						new MsgOnline[MAX_TEXT_CHAT];
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersData[i][Faccion] == PlayersData[playerid][Faccion] && PlayersDataOnline[i][State] == 3 )
							{
								format(MsgOnline, sizeof(MsgOnline), "* %s %s Conectado! [%i]", FaccionesRangos[PlayersData[i][Faccion]][PlayersData[i][Rango]], PlayersDataOnline[i][NameOnlineFix], i);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgOnline);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "952", "No tienes facción!");
					}
	  			}
				// COMANDO: /Caminar
			  	else if (strcmp("/Caminar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					ShowPlayerMenuSelectWalk(playerid);
	  			}
				// COMANDO: /Hablar
			  	else if (strcmp("/Hablar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					ShowPlayerMenuSelectTalk(playerid);
	  			}
/*				// COMANDO: /Correr
			  	else if (strcmp("/Correr", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					ShowPlayerMenuSelectSprint(playerid);
	  			}*/
				// COMANDO: /Trabajar
			  	else if (strcmp("/Trabajar", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
	  			    new FoundJob;
		            for(new i=1;i<MAX_JOB;i++)
		            {
		                if ( Jobs[i][pickupidGet] == PlayersDataOnline[playerid][InPickup] )
		                {
		                    FoundJob = true;
				            if ( PlayersData[playerid][Job] == NINGUNO || PlayersData[playerid][Job] == i)
				            {
				                if ( PlayersData[playerid][Job] == i )
				                {
		                            PlayersData[playerid][Job] = NINGUNO;
		                            SendInfoMessage(playerid, 3, "0", "Has dejado el trabajo, ahora no desempeñarás ninguna labor.");
				                }
				                else
				                {
				                    if ( i == VENDEDOR_MOVIL && GetPlayerScore(playerid) <= 2 )
				                    {
				       					SendInfoMessage(playerid, 0, "967", "Debes ser mayor de nivel 2 para ser vendedor de móviles.");
				       					return 1;
									}
									else if ( i == VENDEDOR_MOVIL && PlayersData[playerid][Faccion] != CIVIL )
									{
				       					SendInfoMessage(playerid, 0, "1287", "Debes ser civil para poder trabajar como vendedor de teléfonos.");
				       					return 1;
									}
		                            PlayersData[playerid][Job] = i;
		                            new MsgJob[MAX_TEXT_CHAT];
		                            format(MsgJob, sizeof(MsgJob), "Ahora tienes un nuevo trabajo, serás: %s.", Jobs[i][NameJob]);
		                            SendInfoMessage(playerid, 3, "0", MsgJob);
	                            }
				            }
				            else
				            {
		       					SendInfoMessage(playerid, 0, "967", "Ya tienes un trabajo, debes dejarlo antes de entrar en otro.");
							}
	      					break;
			            }
		            }
		            if ( !FoundJob )
		            {
	 					SendInfoMessage(playerid, 0, "968", "No te encuetras en ningún trabajo!");
					}
				}
				// COMANDO: /Bar
			  	else if (strcmp("/Bar", cmdtext, true, 4) == 0 && strlen(cmdtext) == 4)
	  			{
					if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
					{
						if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						{
							ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"{00A5FF}Bar", "{E6E6E6}Agua          {00F50A}$10\r\n{E6E6E6}Refresco     {00F50A}$20\r\n{E6E6E6}Cerveza      {00F50A}$30\r\n{E6E6E6}Vodka        {00F50A}$40", "Comprar", "Salir");
						}
						else
						{
							SendInfoMessage(playerid, 0, "998", "No te encuentras cerca del la barra");
						}
					}
					else if ( IsBizzBarra(playerid) )
					{
						ShowPlayerDialogEx(playerid,76,DIALOG_STYLE_LIST,"{00A5FF}Barra", "{E6E6E6}Agua          {00F50A}$5\r\n{E6E6E6}Refresco     {00F50A}$10\r\n{E6E6E6}Cerveza      {00F50A}$15\r\n{E6E6E6}Vodka        {00F50A}$20", "Comprar", "Salir");
					}
					else
					{
						SendInfoMessage(playerid, 0, "999", "No estas en un bar");
					}
				}
				// COMANDO: /Tren [Anuncio]
				else if (strfind(cmdtext, "/Tren ", true) == 0 )
		    	{
		    	    if ( PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] <= 2 )
		    	    {
						if ( IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 538 )
						{
			    	        if ( strlen(cmdtext) > 7 )
			    	        {
				    	        if (TimeTren <= gettime())
				    	        {
				    	            TimeTren = gettime() + 180;
	       		    	            new MensajeAD[MAX_TEXT_CHAT];
				    	            new MensajeADA[MAX_TEXT_CHAT];
									format(MensajeADA, sizeof(MensajeADA), "* Anuncio Tren: %s. ([%i]))", cmdtext[6], playerid);
									format(MensajeAD, sizeof(MensajeAD), "* Anuncio Tren: %s.", cmdtext[6]);

									for (new i = 0; i < MAX_PLAYERS; i++)
									{
										if (IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
										{
										    if ( PlayersData[i][Admin] >= 1 )
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeADA);
										    }
										    else
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeAD);
											}
										}
									}
								}
								else
								{
									new MsgPersonalizado[MAX_TEXT_CHAT];
									format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a poner un anuncio del Tren", (TimeTren - gettime()) / 60, ((TimeTren - gettime()) % 60));
									SendInfoMessage(playerid, 0, "1165", MsgPersonalizado);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1166", "Debe colocar un texto para el anuncio del tren");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1168", "Sólo puede poner anuncios desde el tren!");
						}
		    	    }
		    	    else
		    	    {
						SendInfoMessage(playerid, 0, "1167", "Usted no es Trensísta!");
					}
	    	    }
				// COMANDO: /Informar [Informe]
				else if (strfind(cmdtext, "/Informar ", true) == 0 )
		    	{
		    	    if ( PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] <= 2 )
		    	    {
						if ( IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 538 )
						{
			    	        if ( strlen(cmdtext) > 11 )
			    	        {
			    	            new MensajeADA[MAX_TEXT_CHAT];
			    	            new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
								format(MensajeADA, sizeof(MensajeADA), "* %s [Audio del Tren]: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[10]);

								for (new i = 0; i < MAX_PLAYERS; i++)
								{
									if (IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
									{
									    if ( IsPlayerInRangeOfPoint(i, 70.0,
											 PlayerPos[0], PlayerPos[1], PlayerPos[2]) ||
											 PlayersData[i][IsPlayerInVehInt] && coches_Todos_Type[GetVehicleModel(PlayersData[i][IsPlayerInVehInt]) - 400] == TREN)
										{
								        	SendClientMessage(i, 0xFFFF00FF, MensajeADA);
							        	}
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1293", "Debe colocar un texto de información para los pasajeros del tren");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1292", "Sólo puede informar desde el tren!");
						}
		    	    }
		    	    else
		    	    {
						SendInfoMessage(playerid, 0, "1291", "Usted no es Trensísta!");
					}
	    	    }
				// COMANDO: /Copyright
			  	else if (strcmp("/Copyright", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
		    	{
		    	    new MsgDialogCopyright[500];
		    	    format(MsgDialogCopyright, sizeof(MsgDialogCopyright),
					"{00F50A}Específicaciones:\n\n{00A5FF}Versión: {F0F0F0}%s\n",
					GAMEMODE_VERSION);
		    	    strcat(MsgDialogCopyright, "{00A5FF}Creadores: {F0F0F0}Equipo de Un Player.\n\n");
		    	    strcat(MsgDialogCopyright, "{F5FF00}Agradecimientos: \n{F0F0F0}San Andrea Multiplayer (SA-MP)\n{F0F0F0}Rockstar Games\n{F0F0F0}Incognito\n");
		    	    strcat(MsgDialogCopyright, "{F0F0F0}Equipo de Un Player\n\n\n");
		    	    strcat(MsgDialogCopyright, "{F5FF00}Desarrolladores: \n{F0F0F0}Equipo de Old Players");
		    	    strcat(MsgDialogCopyright, "\n\n\n\n{F5FF00}Copyright © 2015-2018 Un Player. Todos los derechos reservados.");
					ShowPlayerDialogEx(playerid, 999, DIALOG_STYLE_MSGBOX, "{00A5FF}Copyright © Old Players.", MsgDialogCopyright, "Aceptar", "");
				}
				// COMANDO: /Sexo [ID]
		  		else if (strfind(cmdtext, "/Sexo ", true) == 0) //20
			    {
					new PlayerIDSexo = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				    if ( IsPlayerNearEx(playerid, PlayerIDSexo,
						 "1422",
						 "1423",
						 "1424",
						 "El jugador con el que deseas tener sexo con el no se encuentra conectado",
						 "El jugador con el que deseas tener sexo con el no se ha logueado",
						 "El jugador con el que deseas tener sexo con el no se encuentra cerca de tí") )
				    {
						new MsgSexoMe[MAX_TEXT_CHAT];
						new MsgSexoYou[MAX_TEXT_CHAT];
						format(MsgSexoMe, sizeof(MsgSexoMe), "Ofreciste tener sexo a %s", PlayersDataOnline[PlayerIDSexo][NameOnlineFix]);
						format(MsgSexoYou, sizeof(MsgSexoYou), "%s quiere tener sexo contigo use (/Aceptar Sexo)", PlayersDataOnline[playerid][NameOnlineFix]);

						SendInfoMessage(playerid, 3, "0", MsgSexoMe);
						SendInfoMessage(PlayerIDSexo, 3, "0", MsgSexoYou);

						PlayersDataOnline[PlayerIDSexo][PlayerSexo] = playerid;
				    }
			    }
				// COMANDO: /Carreras
			  	else if (strcmp("/Carreras", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
		  			ShowPistaPlayerPublics(playerid);
				}
				// COMANDO: /Salir Carrera
			  	else if (strcmp("/Salir Carrera", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
	  			{
	  			    if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
		  			{
						ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No te encuentras en ninguna carrera", "Ok", "");
	  				}
	  				else
	  				{
				        new PistasDialogText[MAX_TEXT_CHAT];
					    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Voluntariamente)).", PlayersDataOnline[playerid][NameOnlineFix]);
						SendMessageToRaceChat(PlayersDataOnline[playerid][PistaIDp], PistasDialogText, true);
						ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Salir de la Carrra", "{00F50A}Saliste de la carrera correctamente!", "Ok", "");
						RemovePlayerToRace(playerid, true, true, STATE_RACE_EXIT_SALIDA);
					}
				}
				// COMANDO: /Música
			  	else if (strcmp("/Música", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 ||
				  		 strcmp("/Musica", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
			        if ( PlayersData[playerid][IsPlayerInHouse] )
			        {
						if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
							 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
							 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 ||
							 PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn])
			            {
				            ShowStations(playerid, HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID], 1);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1466", "Ésta no es su casa");
						}
			        }
			        else if ( PlayersData[playerid][InLocal] != -1 )
			        {
			            new localid = PlayersData[playerid][InLocal];
			            
						if ( PlayersData[playerid][Local] == localid ||
							 PlayerHaveLocalKeys(playerid, localid) ||
							 PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn])
			            {
				            ShowStations(playerid, LocalData[localid][StationID], 2);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1466", "Ésta no es su casa");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1467", "No te encuentras en ninguna casa o local");
					}
				}
				// COMANDO: /Estéreo
			  	else if (strcmp("/Estéreo", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 ||
				  		 strcmp("/Estereo", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					if (  PlayersDataOnline[playerid][InCarId] )
					{
			        	ShowStations(playerid, DataCars[PlayersDataOnline[playerid][InCarId]][StationID], 0);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1535", "Suba a un vehículo en el asiento de conductor y luego use /Estéreo");
					}
				}
	            // COMANDO: /Duda
	            else if (strfind(cmdtext, "/Duda", true) == 0)
	            {
	            	if(CanalDudas)
	                {
	                	if ( AreHelpersOnline() )
	                    {
	                        if(strfind(cmdtext, "/Duda ", true) == 0)
	                        {
	                            if (strlen(cmdtext[6]) < 2 || strlen(cmdtext[6]) > 90) return SendInfoMessage(playerid,0,"","Su duda debe tener un minimo de 2 caracteres y maximo de 90.");
	                            new string[150];

	                            format(string, sizeof(string), "Enviaste una duda a la administración: %s", cmdtext[6]);
	                            SendInfoMessage(playerid, 2, "0", string);

	                            format(string, sizeof(string), "[Dudas] %s[%i]: %s", PlayersDataOnline[playerid][NameOnlineFix], playerid, cmdtext[6]);
	                            for (new i = 0; i < MAX_PLAYERS; i++)
	                            {
	                                if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && (PlayersData[i][Admin] || PlayersData[i][Ayudante]) )
	                                {
	                                    SendClientMessage(i, COLOR_DUDAS, string);
	                                }
	                            }
	                        }
	                        else if(strcmp("/Duda", cmdtext, true) == 0)
	                        {
	                            ShowDudasDialog(playerid);
	                        }
	                        else SendInfoMessage(playerid, 0, "", "Tal vez quieras decir: /Duda o /Duda [Duda].");
	                    }
	                    else
	                    {
	                        SendInfoMessage(playerid, 0, "1483", "No hay ayudantes en este momento para resolver dudas, intentelo más tarde.");
	                    }
	                }
	                else
	                {
	                    SendInfoMessage(playerid, 0, "963", "El /estado dudas no esta abierto.");
	                }
                }
				// COMANDO: /Terminar Robo
			    else if (strcmp("/Terminar Robo", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    {
					if ( PlayersData[playerid][Faccion] == COLTS ||
					     PlayersData[playerid][Faccion] == AK  ||
						 PlayersData[playerid][Faccion] == HEORS ||
						 PlayersData[playerid][Faccion] == VELTRAN
					 )
					 {
			  	        new fac;
			  	        if ( PlayersData[playerid][Faccion] == COLTS )
			  	        {
			  	            fac = COLTS_R;
						}
						else if ( PlayersData[playerid][Faccion] == AK )
						{
						    fac = AK_R;
						}
						else if ( PlayersData[playerid][Faccion] == VELTRAN )
						{
						    fac = VELTRAN_R;
						}
						else if ( PlayersData[playerid][Faccion] == HEORS )
						{
						    fac = HEORS_R;
						}
			  	        if ( RobosInfo[fac][BizzIDR] )
			  	        {
                            if ( RobosInfo[fac][RoboState] )
                            {
						        if ( PlayersDataOnline[playerid][InPickupNegocio] == RobosInfo[fac][BizzIDR] )
						        {
	                                new MSGRobo[150];
	                               	if ( NegociosData[RobosInfo[fac][BizzIDR]][Deposito]      > 0 )
	                               	{
										GivePlayerMoneyEx(playerid, NegociosData[RobosInfo[fac][BizzIDR]][Deposito]);
		                                format(MSGRobo, sizeof(MSGRobo), "[Robo]: Robado $%i del deposito del negocio!", NegociosData[RobosInfo[fac][BizzIDR]][Deposito]);
										SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
		                                NegociosData[RobosInfo[fac][BizzIDR]][Deposito]          = 0;
	                               	}
	                                if ( NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion] > 0 )
	                                {
		                                format(MSGRobo, sizeof(MSGRobo), "[Robo]: Robado $%i de la extorsión del negocio!", NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion]);
										GivePlayerMoneyEx(playerid, NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion]);
										SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
		                                NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion] = 0;
	                               	}
									if ( NegociosData[RobosInfo[fac][BizzIDR]][Materiales] > 0 )
									{
	                                    PlayersData[playerid][Materiales]                       += NegociosData[RobosInfo[fac][BizzIDR]][Materiales];
										format(MSGRobo, sizeof(MSGRobo), "[Robo]: Robado %i de materiales del negocio!", NegociosData[RobosInfo[fac][BizzIDR]][Materiales]);
										SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
										NegociosData[RobosInfo[fac][BizzIDR]][Materiales]        = 0;
									}
									format(MSGRobo, sizeof(MSGRobo), "[Robo]: %s ha finalizado el robo! Vamonos!", PlayersDataOnline[playerid][NameOnlineFix]);
									SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
	                                CancelRobo(fac);
                                }
						        else
						        {
									SendInfoMessage(playerid, 0, "1488", "Debes estar en la puerta de un negocio para terminar el robo!");
								}
                            }
                            else
                            {
								SendInfoMessage(playerid, 0, "1489", "Todavía no puedes terminar de robar el local!");
							}
					  	}
					  	else
					  	{
							SendInfoMessage(playerid, 0, "1490", "No hay ningún robo en proceso en estos momentos!");
					    }
				  	}
				  	else
				  	{
						SendInfoMessage(playerid, 0, "1491", "Usted no puede robar locales!");
				    }
				}
				// COMANDO: /Id [Parte del Nombre]
				else if (strfind(cmdtext, "/Id ", true) == 0)
				{
				    new FoundName;
				    new MsgUsersFound[MAX_TEXT_CHAT];
                    for ( new i = 0; i < MAX_PLAYERS; i++)
                    {
						if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
						{
						    if ( strfind(PlayersDataOnline[i][NameOnlineFix], cmdtext[4], true) != -1 || strfind( PlayersDataOnline[i][NameOnline], cmdtext[4], true) != -1)
						    {
								FoundName++;
						        format(MsgUsersFound, sizeof(MsgUsersFound), " [%i] %s", i, PlayersDataOnline[i][NameOnlineFix]);
							    SendClientMessage(playerid, 0x969696FF, MsgUsersFound);
						    }
						}
					}
					if ( !FoundName )
					{
					    SendClientMessage(playerid, 0x969696FF, " No se encontrarón usuarios!");
					}
				}
				//		/Ip [Ip]				- Buscar usuarios por la IP
				else if (strfind(cmdtext, "/Ip ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new FoundName;
					    new MsgUsersFound[MAX_TEXT_CHAT];
					    new IpGet[20];
	                    for ( new i = 0; i < MAX_PLAYERS; i++)
	                    {
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
							{
							    if ( strfind(PlayersData[i][MyIP], cmdtext[4], true) != -1)
							    {
									FoundName++;
									if ( FoundName == 1 )
									{
								        format(MsgUsersFound, sizeof(MsgUsersFound), " Usuarios encontrados para la IP: {F50000}%s", cmdtext[4]);
									    SendClientMessage(playerid, 0x969696FF, MsgUsersFound);
									}
									GetPlayerIp(i, IpGet, sizeof(IpGet));
							        format(MsgUsersFound, sizeof(MsgUsersFound), " %s[%i] - %s", PlayersDataOnline[i][NameOnlineFix], i, IpGet);
								    SendClientMessage(playerid, 0x969696FF, MsgUsersFound);
							    }
							}
						}
						if ( !FoundName )
						{
						    SendClientMessage(playerid, 0x969696FF, " No se encontrarón usuarios!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1577", "Tú no tienes acceso a el comando /Ip.");
				        return 1;
					}
				}
				// COMANDO: /Mear
			  	else if (strcmp("/Mear", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
	  			{
					SetPlayerSpecialAction(playerid, 68);
					PlayersDataOnline[playerid][InAnim] = true;
				}
				// COMANDO: /Anim
				else if (strfind(cmdtext, "/Anim ", true) == 0)
				{
		    	    new PosShearh; PosShearh = strfind(cmdtext, " ", false, 8);
		    	    new PosShearh2; PosShearh2 = strfind(cmdtext, " ", false, PosShearh + 1);
				    new MsgErrorAnimaciones[MAX_TEXT_CHAT];
				    new MAX_ID;
					if (strfind(cmdtext, "/Anim ATTRACTORS ", true) == 0)				// ATTRACTORS - 2
			    	{
			    	    MAX_ID = sizeof(ATTRACTORS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"Attractors",
							ATTRACTORS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BAR ", true) == 0)				// BAR - 11
			    	{
			    	    MAX_ID = sizeof(BAR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BAR",
							BAR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BAT ", true) == 0)				// BAT - 10
			    	{
			    	    MAX_ID = sizeof(BAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BASEBALL",
							BAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIRE ", true) == 0)				// FIRE - 12
			    	{
			    	    MAX_ID = sizeof(FIRE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BD_FIRE",
							FIRE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PLAYA ", true) == 0)				// PLAYA - 4
			    	{
			    	    MAX_ID = sizeof(PLAYA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BEACH",
							PLAYA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GYM ", true) == 0)					// GYM - 6
			    	{
			    	    MAX_ID = sizeof(GYM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"benchpress",
							GYM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BFINJECT ", true) == 0)				// BFINJECT - 3
			    	{
			    	    MAX_ID = sizeof(BFINJECT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BF_injection",
							BFINJECT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICID ", true) == 0)				// BICID - 18
			    	{
			    	    MAX_ID = sizeof(BICID_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKED",
							BICID_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIH ", true) == 0)				// BICIH - 17
			    	{
			    	    MAX_ID = sizeof(BICIH_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKEH",
							BICIH_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIL ", true) == 0)				// BICIL - 8
			    	{
			    	    MAX_ID = sizeof(BICIL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKELEAP",
							BICIL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIS ", true) == 0)				// BICIS - 19
			    	{
			    	    MAX_ID = sizeof(BICIS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKES",
							BICIS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIV ", true) == 0)				// BICIV - 17
			    	{
			    	    MAX_ID = sizeof(BICIV_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKEV",
							BICIV_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICI ", true) == 0)				// BICI - 3
			    	{
			    	    MAX_ID = sizeof(BICI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKE_DBZ",
							BICI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GOLPE ", true) == 0)				// GOLPE - 11
			    	{
			    	    MAX_ID = sizeof(GOLPE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BLOWJOBZ",
							GOLPE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BMX ", true) == 0)				// BMX - 17
			    	{
			    	    MAX_ID = sizeof(BMX_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BMX",
							BMX_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BOMBER ", true) == 0)				// BOMBER - 5
			    	{
			    	    MAX_ID = sizeof(BOMBER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BOMBER",
							BOMBER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BOX ", true) == 0)				// BOX - 9
			    	{
			    	    MAX_ID = sizeof(BOX_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BOX",
							BOX_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BALL ", true) == 0)				// BALL - 40
			    	{
			    	    MAX_ID = sizeof(BALL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BSKTBALL",
							BALL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BUDDY ", true) == 0)				// BUDDY - 4
			    	{
			    	    MAX_ID = sizeof(BUDDY_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BUDDY",
							BUDDY_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BUS ", true) == 0)				// BUS - 8
			    	{
			    	    MAX_ID = sizeof(BUS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BUS",
							BUS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CAM ", true) == 0)				// CAM - 13
			    	{
			    	    MAX_ID = sizeof(CAM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CAMERA",
							CAM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CAR ", true) == 0)				// CAR - 10
			    	{
			    	    MAX_ID = sizeof(CAR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CAR",
							CAR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CARRY ", true) == 0)				// CARRY - 6
			    	{
			    	    MAX_ID = sizeof(CARRY_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CARRY",
							CARRY_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CARCHAT ", true) == 0)				// CARCHAT - 20
			    	{
			    	    MAX_ID = sizeof(CARCHAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CAR_CHAT",
							CARCHAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CASINO ", true) == 0)				// CASINO - 24
			    	{
			    	    MAX_ID = sizeof(CASINO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CASINO",
							CASINO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CHAINSAW ", true) == 0)				// CHAINSAW - 10
			    	{
			    	    MAX_ID = sizeof(CHAINSAW_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CHAINSAW",
							CHAINSAW_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CHOPA ", true) == 0)				// CHOPA - 17
			    	{
			    	    MAX_ID = sizeof(CHOPA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CHOPPA",
							CHOPA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CLOTHES ", true) == 0)				// CLOTHES - 12
			    	{
			    	    MAX_ID = sizeof(CLOTHES_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CLOTHES",
							CLOTHES_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COACH ", true) == 0)				// COACH - 5
			    	{
			    	    MAX_ID = sizeof(COACH_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COACH",
							COACH_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COLT ", true) == 0)				// COLT - 6
			    	{
			    	    MAX_ID = sizeof(COLT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COLT45",
							COLT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COP ", true) == 0)				// COP - 11
			    	{
			    	    MAX_ID = sizeof(COLT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COP_AMBIENT",
							COLT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COPD ", true) == 0)				// COPD - 3
			    	{
			    	    MAX_ID = sizeof(COPD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COP_DVBYZ",
							COPD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CRACK ", true) == 0)				// CRACK - 9
			    	{
			    	    MAX_ID = sizeof(CRACK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CRACK",
							CRACK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CRIB ", true) == 0)				// CRIB - 4
			    	{
			    	    MAX_ID = sizeof(CRIB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CRIB",
							CRIB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DAM ", true) == 0)				// DAM - 4
			    	{
			    	    MAX_ID = sizeof(DAM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DAM_JUMP",
							DAM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DANCE ", true) == 0)				// DANCE - 13
			    	{
			    	    MAX_ID = sizeof(DANCE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DANCING",
							DANCE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DEALER ", true) == 0)				// DEALER - 6
			    	{
			    	    MAX_ID = sizeof(DEALER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DEALER",
							DEALER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DILDO ", true) == 0)				// DILDO - 8
			    	{
			    	    MAX_ID = sizeof(DILDO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DILDO",
							DILDO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DODGE ", true) == 0)				// DODGE - 3
			    	{
			    	    MAX_ID = sizeof(DODGE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DODGE",
							DODGE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DOZER ", true) == 0)				// DOZER - 9
			    	{
			    	    MAX_ID = sizeof(DOZER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DOZER",
							DOZER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DRIVE ", true) == 0)				// DRIVE - 7
			    	{
			    	    MAX_ID = sizeof(DRIVE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DRIVEBYS",
							DRIVE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FAT ", true) == 0)				// FAT - 17
			    	{
			    	    MAX_ID = sizeof(FAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FAT",
							FAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTB ", true) == 0)				// FIGHTB - 9
			    	{
			    	    MAX_ID = sizeof(FIGHTB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_B",
							FIGHTB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTC ", true) == 0)				// FIGHTC - 11
			    	{
			    	    MAX_ID = sizeof(FIGHTC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_C",
							FIGHTC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTD ", true) == 0)				// FIGHTD - 9
			    	{
			    	    MAX_ID = sizeof(FIGHTD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_D",
							FIGHTD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTE ", true) == 0)				// FIGHTE - 3
			    	{
			    	    MAX_ID = sizeof(FIGHTE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_E",
							FIGHTE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FINALE ", true) == 0)				// FINALE - 15
			    	{
			    	    MAX_ID = sizeof(FINALE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FINALE",
							FINALE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FINALE2 ", true) == 0)				// FINALE2 - 7
			    	{
			    	    MAX_ID = sizeof(FINALE2_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FINALE2",
							FINALE2_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FLAME ", true) == 0)				// FLAME - 0
			    	{
			    	    MAX_ID = sizeof(FLAME_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FLAME",
							FLAME_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FLOWERS ", true) == 0)				// FLOWERS - 2
			    	{
			    	    MAX_ID = sizeof(FLOWERS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"Flowers",
							FLOWERS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FOOD ", true) == 0)				// FOOD - 32
			    	{
			    	    MAX_ID = sizeof(FOOD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FOOD",
							FOOD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GYMA ", true) == 0)				// GYMA - 8
			    	{
			    	    MAX_ID = sizeof(GYMA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"Freeweights",
							GYMA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GANGS ", true) == 0)				// GANGS - 32
			    	{
			    	    MAX_ID = sizeof(GANGS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GANGS",
							GANGS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GHANDS ", true) == 0)				// GHANDS - 19
			    	{
			    	    MAX_ID = sizeof(GHANDS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GHANDS",
							GHANDS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GHETTO ", true) == 0)				// GHETTO - 6
			    	{
			    	    MAX_ID = sizeof(GHETTO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GHETTO_DB",
							GHETTO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GOGGLES ", true) == 0)				// GOGGLES - 0
			    	{
			    	    MAX_ID = sizeof(GOGGLES_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"goggles",
							GOGGLES_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GRAFFITI ", true) == 0)				// GRAFFITI - 1
			    	{
			    	    MAX_ID = sizeof(GRAFFITI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GRAFFITI",
							GRAFFITI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GRAVE ", true) == 0)				// GRAVE - 2
			    	{
			    	    MAX_ID = sizeof(GRAVE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GRAVEYARD",
							GRAVE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GRENADE ", true) == 0)				// GRENADE - 2
			    	{
			    	    MAX_ID = sizeof(GRENADE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GRENADE",
							GRENADE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GYMB ", true) == 0)				// GYMB - 23
			    	{
			    	    MAX_ID = sizeof(GYMB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GYMNASIUM",
							GYMB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim HAIR ", true) == 0)				// HAIR - 12
			    	{
			    	    MAX_ID = sizeof(HAIR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"HAIRCUTS",
							HAIR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim HEIST ", true) == 0)				// HEIST - 9
			    	{
			    	    MAX_ID = sizeof(HEIST_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"HEIST9",
							HEIST_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim HOUSE ", true) == 0)				// HOUSE - 9
			    	{
			    	    MAX_ID = sizeof(HOUSE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"INT_HOUSE",
							HOUSE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim OFFICE ", true) == 0)				// OFFICE - 9
			    	{
			    	    MAX_ID = sizeof(OFFICE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"INT_OFFICE",
							OFFICE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim INTSHOP ", true) == 0)				// INTSHOP - 7
			    	{
			    	    MAX_ID = sizeof(INTSHOP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"INT_SHOP",
							INTSHOP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BUISNESS ", true) == 0)				// BUISNESS - 3
			    	{
			    	    MAX_ID = sizeof(BUISNESS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"JST_BUISNESS",
							BUISNESS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim KART ", true) == 0)				// KART - 3
			    	{
			    	    MAX_ID = sizeof(KART_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"KART",
							KART_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim KISSING ", true) == 0)				// KISSING - 14
			    	{
			    	    MAX_ID = sizeof(KISSING_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"KISSING",
							KISSING_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim KNIFE ", true) == 0)				// KNIFE - 15
			    	{
			    	    MAX_ID = sizeof(KNIFE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"KNIFE",
							KNIFE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LAPDAN ", true) == 0)				// LAPDAN - 1
			    	{
			    	    MAX_ID = sizeof(LAPDAN1_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LAPDAN1",
							LAPDAN1_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LAPDAN ", true) == 0)				// LAPDAN - 2
			    	{
			    	    MAX_ID = sizeof(LAPDAN2_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LAPDAN2",
							LAPDAN2_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LAPDAN ", true) == 0)				// LAPDAN - 3
			    	{
			    	    MAX_ID = sizeof(LAPDAN3_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LAPDAN3",
							LAPDAN3_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LOWRIDER ", true) == 0)				// LOWRIDER - 38
			    	{
			    	    MAX_ID = sizeof(LOWRIDER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LOWRIDER",
							LOWRIDER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CHASE ", true) == 0)				// CHASE - 24
			    	{
			    	    MAX_ID = sizeof(CHASE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MD_CHASE",
							CHASE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim END ", true) == 0)				// END - 7
			    	{
			    	    MAX_ID = sizeof(END_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MD_END",
							END_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim MEDIC ", true) == 0)				// MEDIC - 0
			    	{
			    	    MAX_ID = sizeof(MEDIC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MEDIC",
							MEDIC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim MISC ", true) == 0)				// MISC - 40
			    	{
			    	    MAX_ID = sizeof(MISC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
						    if ( strval(cmdtext[PosShearh]) == 29 )
						    {
								ApplyPlayerAnimCustom(playerid,
								"MISC",
								MISC_ANIMATIONS[28], strval(cmdtext[PosShearh2]));
							}
							else
							{
								ApplyPlayerAnimCustom(playerid,
								"MISC",
								MISC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
							}
						}
					}
					else if (strfind(cmdtext, "/Anim MTB ", true) == 0)				// MTB - 17
			    	{
			    	    MAX_ID = sizeof(MTB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MTB",
							MTB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
/*					else if (strfind(cmdtext, "/Anim MUSCULAR ", true) == 0)				// MUSCULAR - 16
			    	{
			    	    MAX_ID = sizeof(MUSCULAR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MUSCULAR",
							MUSCULAR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}*/
	/*				else if (strfind(cmdtext, "/Anim NEVADA ", true) == 0)				// NEVADA - 1
			    	{
			    	    MAX_ID = sizeof(NEVADA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"NEVADA",
							NEVADA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}*/
					else if (strfind(cmdtext, "/Anim LOOKERS ", true) == 0)				// LOOKERS - 28
			    	{
			    	    MAX_ID = sizeof(LOOKERS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"ON_LOOKERS",
							LOOKERS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim OTB ", true) == 0)				// OTB - 10
			    	{
			    	    MAX_ID = sizeof(OTB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"OTB",
							OTB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PARA ", true) == 0)				// PARA - 21
			    	{
			    	    MAX_ID = sizeof(PARA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PARACHUTE",
							PARA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PARK ", true) == 0)				// PARK - 2
			    	{
			    	    MAX_ID = sizeof(PARK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PARK",
							PARK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PAUL ", true) == 0)				// PAUL - 11
			    	{
			    	    MAX_ID = sizeof(PAUL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PAULNMAC",
							PAUL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PED ", true) == 0)				// PED - 999
			    	{
			    	    MAX_ID = sizeof(PED_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PED",
							PED_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PLAYER ", true) == 0)				// PLAYER - 3
			    	{
			    	    MAX_ID = sizeof(PLAYER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PLAYER_DVBYS",
							PLAYER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PLAYID ", true) == 0)				// PLAYID - 4
			    	{
			    	    MAX_ID = sizeof(PLAYID_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PLAYIDLES",
							PLAYID_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim POLICE ", true) == 0)				// POLICE - 9
			    	{
			    	    MAX_ID = sizeof(POLICE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"POLICE",
							POLICE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim POOL ", true) == 0)				// POOL - 20
			    	{
			    	    MAX_ID = sizeof(POOL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"POOL",
							POOL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim POOR ", true) == 0)				// POOR - 1
			    	{
			    	    MAX_ID = sizeof(POOR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"POOR",
							POOR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PYTHON ", true) == 0)				// PYTHON - 4
			    	{
			    	    MAX_ID = sizeof(PYTHON_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PYTHON",
							PYTHON_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim QUAD ", true) == 0)				// QUAD - 16
			    	{
			    	    MAX_ID = sizeof(QUAD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"QUAD",
							QUAD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim QUADD ", true) == 0)				// QUADD - 3
			    	{
			    	    MAX_ID = sizeof(QUADD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"QUAD_DBZ",
							QUADD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RAP ", true) == 0)				// RAP - 7
			    	{
			    	    MAX_ID = sizeof(RAP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RAPPING",
							RAP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RIFLE ", true) == 0)				// RIFLE - 4
			    	{
			    	    MAX_ID = sizeof(RIFLE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RIFLE",
							RIFLE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RIOT ", true) == 0)				// RIOT - 6
			    	{
			    	    MAX_ID = sizeof(RIOT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RIOT",
							RIOT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim ROB ", true) == 0)				// ROB - 4
			    	{
			    	    MAX_ID = sizeof(ROB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"ROB_BANK",
							ROB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim ROCKET ", true) == 0)				// ROCKET - 4
			    	{
			    	    MAX_ID = sizeof(ROCKET_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"ROCKET",
							ROCKET_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RUSTLER ", true) == 0)				// RUSTLER - 4
			    	{
			    	    MAX_ID = sizeof(RUSTLER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RUSTLER",
							RUSTLER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RYDER ", true) == 0)				// RYDER - 15
			    	{
			    	    MAX_ID = sizeof(RYDER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RYDER",
							RYDER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SCRAT ", true) == 0)				// SCRAT - 11
			    	{
			    	    MAX_ID = sizeof(SCRAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SCRATCHING",
							SCRAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SHAMAL ", true) == 0)				// SHAMAL - 4
			    	{
			    	    MAX_ID = sizeof(SHAMAL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SHAMAL",
							SHAMAL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SHOP ", true) == 0)				// SHOP - 24
			    	{
			    	    MAX_ID = sizeof(SHOP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SHOP",
							SHOP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SHOTGUN ", true) == 0)				// SHOTGUN - 2
			    	{
			    	    MAX_ID = sizeof(SHOTGUN_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SHOTGUN",
							SHOTGUN_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SILENCED ", true) == 0)				// SILENCED - 3
			    	{
			    	    MAX_ID = sizeof(SILENCED_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SILENCED",
							SILENCED_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
/*					else if (strfind(cmdtext, "/Anim SKATE ", true) == 0)				// SKATE - 2
			    	{
			    	    MAX_ID = sizeof(SKATE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SKATE",
							SKATE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}*/
					else if (strfind(cmdtext, "/Anim SMOK ", true) == 0)				// SMOK - 2
			    	{
			    	    MAX_ID = sizeof(SMOK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SMOKING",
							SMOK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SNIPER ", true) == 0)				// SNIPER - 0
			    	{
			    	    MAX_ID = sizeof(SNIPER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SNIPER",
							SNIPER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SPRAY ", true) == 0)				// SPRAY - 1
			    	{
			    	    MAX_ID = sizeof(SPRAY_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SPRAYCAN",
							SPRAY_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim STRIP ", true) == 0)				// STRIP - 19
			    	{
			    	    MAX_ID = sizeof(STRIP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"STRIP",
							STRIP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SUNBA ", true) == 0)				// SUNBA - 17
			    	{
			    	    MAX_ID = sizeof(SUNBA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SUNBATHE",
							SUNBA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWAT ", true) == 0)				// SWAT - 22
			    	{
			    	    MAX_ID = sizeof(SWAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWAT",
							SWAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWEET ", true) == 0)				// SWEET - 6
			    	{
			    	    MAX_ID = sizeof(SWEET_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWEET",
							SWEET_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWIM ", true) == 0)				// SWIM - 6
			    	{
			    	    MAX_ID = sizeof(SWIM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWIM",
							SWIM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWORD ", true) == 0)				// SWORD - 9
			    	{
			    	    MAX_ID = sizeof(SWORD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWORD",
							SWORD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TANK ", true) == 0)				// TANK - 5
			    	{
			    	    MAX_ID = sizeof(TANK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TANK",
							TANK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TATTOO ", true) == 0)				// TATTOO - 56
			    	{
			    	    MAX_ID = sizeof(TATTOO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TATTOOS",
							TATTOO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TEC ", true) == 0)				// TEC - 3
			    	{
			    	    MAX_ID = sizeof(TEC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TEC",
							TEC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TRAIN ", true) == 0)				// TRAIN - 3
			    	{
			    	    MAX_ID = sizeof(TRAIN_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TRAIN",
							TRAIN_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TRUCK ", true) == 0)				// TRUCK - 16
			    	{
			    	    MAX_ID = sizeof(TRUCK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TRUCK",
							TRUCK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim UZI ", true) == 0)				// UZI - 4
			    	{
			    	    MAX_ID = sizeof(UZI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"UZI",
							UZI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim VAN ", true) == 0)				// VAN - 7
			    	{
			    	    MAX_ID = sizeof(VAN_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"VAN",
							VAN_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim VENDING ", true) == 0)				// VENDING - 5
			    	{
			    	    MAX_ID = sizeof(VENDING_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"VENDING",
							VENDING_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim VORTEX ", true) == 0)				// VORTEX - 3
			    	{
			    	    MAX_ID = sizeof(VORTEX_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"VORTEX",
							VORTEX_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim WAYFA ", true) == 0)				// WAYFA - 17
			    	{
			    	    MAX_ID = sizeof(WAYFA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"WAYFARER",
							WAYFA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim ARMA ", true) == 0)				// ARMA - 16
			    	{
			    	    MAX_ID = sizeof(ARMA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"WEAPONS",
							ARMA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim WUZI ", true) == 0)				// WUZI - 11
			    	{
			    	    MAX_ID = sizeof(WUZI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"WUZI",
							WUZI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
			    	else
					{
						SendInfoMessage(playerid, 0, "361", "Si no se sabe alguna ID o quiere ver más sobre animaciones consulte /Ayuda Animaciones");
						return 1;
					}
			    	if (strval(cmdtext[PosShearh]) < 0 ||
						strval(cmdtext[PosShearh]) > MAX_ID )
					{
					    format(MsgErrorAnimaciones, sizeof(MsgErrorAnimaciones), "En esta categoría de animaciones la ID máxima es \"%i\"",
						MAX_ID);
						SendInfoMessage(playerid, 0, "362", MsgErrorAnimaciones);
					}
				}
				// COMANDO: /Alquilar
			  	else if (strcmp("/Alquilar", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			    {
			        if ( PlayersDataOnline[playerid][InPickupCasa] )
			        {
			            new houseid = PlayersDataOnline[playerid][InPickupCasa];
				        if ( PlayersData[playerid][House] == -1 )
				        {
						    if ( PlayersData[playerid][Alquiler] == -1 )
						    {
								if (strlen(HouseData[houseid][Dueno]) != 2 && HouseData[houseid][PriceRent] != 0)
								{
									if ( PlayersData[playerid][Dinero] >= HouseData[houseid][PriceRent] )
									{
										new MsgRenta[MAX_TEXT_CHAT];
										format(MsgRenta, sizeof(MsgRenta), "Te has rentado en esta casa por $%i", HouseData[houseid][PriceRent] );
										SendInfoMessage(playerid, 3, "0", MsgRenta);
										PlayersData[playerid][Alquiler] = houseid;
										GivePlayerMoneyEx(playerid, - HouseData[houseid][PriceRent]);
										HouseData[houseid][Deposito] = HouseData[houseid][Deposito] + HouseData[houseid][PriceRent];
									}
									else
									{
										SendInfoMessage(playerid, 0, "606", "No tienes suficiente dinero para alquilarte en esta Casa!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "607", "Ésta casa no esta en renta!");
								}
							}
							else if( PlayersData[playerid][Alquiler] == houseid )
							{
								SendInfoMessage(playerid, 3, "0", "Has salido de este alquiler existosamente!");
								PlayersData[playerid][Alquiler] = -1;
								PlayersData[playerid][House] 	= -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "608", "Debe salir del alquiler de la casa donde vive, para poder alquilar esta");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "650", "Debe vender su casa, para poder alquilar esta");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "609", "No te encuentras en ninguna casa");
					}
				}
				else if (strfind(cmdtext, "/Nacer", true) == 0)
		    	{
					// COMANDO: /Nacer Amigo
				  	if (strcmp("/Nacer Amigo", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
				        {
							new houseid = PlayersDataOnline[playerid][InPickupCasa];

							if ( IsPlayerInHouseFriend(playerid, houseid) != -1)
				            {
								SendInfoMessage(playerid, 2, "0", "Has asignado tu Spawn de Amigo en esta casa.");
								PlayersData[playerid][SpawnAmigo] = houseid;
							}
							else
							{
								SendInfoMessage(playerid, 0, "1372", "No tienes las llaves de amigo de está casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1374", "No te encuentras en ninguna casa");
						}
			    	}
					// COMANDO: /Nacer
				  	else if (strcmp("/Nacer", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			    	{
			    	    if ( PlayersData[playerid][Nacer] == 2)
			    	    {
							SendInfoMessage(playerid, 2, "0", "Ha cambiado su Spawn, ahora nacerá en su facción.");
				    	    PlayersData[playerid][Nacer] = 0;
						}
						else if ( PlayersData[playerid][Nacer] == 0 )
						{
							SendInfoMessage(playerid, 2, "0", "Ha cambiado su Spawn, ahora nacerá en su casa o alquiler si es que tiene uno.");
							PlayersData[playerid][Nacer] = 1;
						}
						else
						{
							SendInfoMessage(playerid, 2, "0", "Has cambiado su Spawn, ahora nacerá en la casa de amigo que tengas asignado si es que tiene uno.");
							PlayersData[playerid][Nacer] = 2;
						}
						UpdateSpawnPlayer(playerid);
			    	}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "1373", "Quizás quiso decir: /Nacer - /Nacer Amigo");
					}
				}
				// COMANDO: /Decomisar [ID]
				else if (strfind(cmdtext, "/Decomisar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        new playeridRemove = strval(cmdtext[11]);
					    if ( IsPlayerNearEx(playerid, playeridRemove,
							 "896",
							 "897",
							 "898",
							 "El jugador que le deseas decomisar no se encuentra conectado",
							 "El jugador que le deseas decomisar no se ha logueado",
							 "El jugador que le deseas decomisar no se encuentra cerca de tí") )
					    {
							new MsgCheckMe[MAX_TEXT_CHAT];
							format(MsgCheckMe, sizeof(MsgCheckMe), "descomisa todos los materiales ilegales a %s", PlayersDataOnline[playeridRemove][NameOnlineFix]);
							Acciones(playerid, 8, MsgCheckMe);

							ResetPlayerWeaponsEx(playeridRemove);
							PlayersData[playeridRemove][Ganzuas]		= 0;
							PlayersData[playeridRemove][Drogas]        = 0;
							PlayersData[playeridRemove][Materiales]    = 0;
							PlayersData[playeridRemove][Bombas]        = 0;

							new HaveTaser = GetObjectByType(playeridRemove, TYPE_TASER);
							if ( HaveTaser != -1 )
							{
								RemoveObjectHoldToPlayer(playeridRemove, -1, HaveTaser);
							}
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "899", "Usted no es LSPD ni SFPD");
					}
				}
				// COMANDO: /Desalojar Todos
			  	else if (strcmp("/Desalojar Todos", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
		    	{
					if ( PlayersData[playerid][House] != -1 )
		            {
	                    for ( new i = 0; i < MAX_PLAYERS; i++)
	                    {
							if ( i != playerid && IsPlayerConnected(i) &&  PlayersDataOnline[i][State] == 3 && PlayersData[i][Alquiler] == PlayersData[playerid][House] )
							{
								PlayersData[i][Alquiler] = -1;
								PlayersData[i][House] 	= -1;
								SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler!");
							}
						}
						SendInfoMessage(playerid, 3, "0", "Has desalojado a todos de su casa");
					}
					else
					{
						SendInfoMessage(playerid, 0, "585", "Usted no tiene casa!");
					}
		    	}
				// COMANDO: /Desalojar [ID]
				else if (strfind(cmdtext, "/Desalojar ", true) == 0)
				{
					if ( PlayersData[playerid][House] != -1 )
		            {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[11]),
							 "594",
							 "595",
							 "596",
							 "El jugador que le deseas desalojarlo de su casa, no se encuentra conectado",
							 "El jugador que le deseas desalojarlo de su casa no se ha logueado",
							 "El jugador que le deseas desalojarlo de su casa no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][House] == PlayersData[strval(cmdtext[11])][Alquiler] )
					        {
								new MsgDesalojar[MAX_TEXT_CHAT];
								new MsgDesalojarToPlayer[MAX_TEXT_CHAT];
						        format(MsgDesalojar, sizeof(MsgDesalojar), "Has desalojado a %s.", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
						        format(MsgDesalojarToPlayer, sizeof(MsgDesalojarToPlayer), "%s te ha desalojado de su casa", PlayersDataOnline[playerid][NameOnlineFix]);
						        SendInfoMessage(playerid, 3, "0", MsgDesalojar);
						        SendInfoMessage(strval(cmdtext[11]), 3, "0", MsgDesalojarToPlayer);

	                            PlayersData[strval(cmdtext[11])][House] = -1;
	                            PlayersData[strval(cmdtext[11])][Alquiler] = -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "597", "Este jugador no se encuentra alquilado en su casa!");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "598", "Usted no tiene casa!");
					}
		    	}
				// COMANDO: /Llaves
				else if (strfind(cmdtext, "/Llaves ", true) == 0)
				{
					// COMANDO: /Llaves PuertaEx
				  	if (strcmp("/Llaves PuertaEx", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 )
			    	{
				        if ( PlayersDataOnline[playerid][InPickupTele] == -1 ) return SendInfoMessage(playerid, 0, "812", "No te encuentras al lado de ninguna puerta");
				        
			            new teleid = PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipoid];
			            
			            if ( PlayerHaveTeleKeys(playerid, teleid, Teles[teleid][DuenoType], Teles[teleid][Dueno]) )
			            {
			                if ( Teles[teleid][Lock] )
				            {
			                	Teles[teleid][Lock] = false;
			                	Teles[Teles[teleid][PickupIDGo]][Lock] = false;
           						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
			                }
			                else
			                {
			                	Teles[teleid][Lock] = true;
								Teles[Teles[teleid][PickupIDGo]][Lock] = true;
           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
			                }
	                  		PlayPlayerStreamSound(playerid, 1027);
	                  		UpdateLockDoorForPlayer(PlayersDataOnline[playerid][InPickup], Teles[teleid][Lock], Teles[teleid][PickupIDGo]);
			            }
			            else
		                {
							SendInfoMessage(playerid, 0, "811", "No tienes las llaves de esta puerta!");
						}
			    	}
					// COMANDO: /Llaves Amigos
				  	else if (strcmp("/Llaves Amigos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
				        if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_CASA)
				        {
							new HouseId = PlayersDataOnline[playerid][InPickupCasa];
							if ( IsMyHouse(playerid, HouseId) || PlayersData[playerid][Admin] >= 8)
				            {
								ShowHouseFriends(playerid, HouseId);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1207", "Ésta no es su casa");
							}
				        }
				        else if (PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_LOCAL)
				        {
				            new localid = PlayersDataOnline[playerid][InPickupLocal];
				            if (PlayersData[playerid][Local] == localid || PlayersData[playerid][Admin] >= 8)
				            {
				            	ShowLocalKeys(playerid, localid);
				            }
				            else return SendInfoMessage(playerid, 0, "", "Este no es tu local.");
				            return 1;
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1208", "No te encuentras en ninguna casa o local.");
						}
					}
					// COMANDO: /Llaves Facción
				  	else if (strcmp("/Llaves Facción", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
					    strcmp("/Llaves Faccion", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
					    new MyNearFaccion = GetNearFaccion(playerid);
					    if ( MyNearFaccion != -1 )
					    {
					        if ( PlayersData[playerid][Faccion] == MyNearFaccion )
					        {
							    if(	 FaccionData[PlayersData[playerid][Faccion]][Lock] )
					            {
					                FaccionData[PlayersData[playerid][Faccion]][Lock] = false;
	          						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
				                }
				                else
				                {
									FaccionData[PlayersData[playerid][Faccion]][Lock] = true;
	           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
				                }
		                  		PlayPlayerStreamSound(playerid, 1027);



								UpdateLockDoorForPlayer(FaccionData[PlayersData[playerid][Faccion]][PickupidInF], FaccionData[PlayersData[playerid][Faccion]][Lock], FaccionData[PlayersData[playerid][Faccion]][PickupidOutF]);
	                  		}
	                  		else
	                  		{
								SendInfoMessage(playerid, 0, "813", "Ésta no es la puerta de su facción");
							}
					    }
			    	}
					// COMANDO: /Llaves Almacén
					else if (strcmp("/Llaves Almacén", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
							 strcmp("/Llaves Almacen", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
					{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					    if ( MyNearAlmacen != -1)
					    {
	        				if ( PlayersData[playerid][Rango] <= 1 )
	        				{
					            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
					            {
						        	FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] = false;
					                SendInfoMessage(playerid, 2, "0", "Cerró este Almacén");
					        	}
					        	else
					        	{
						        	FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] = true;
					                SendInfoMessage(playerid, 2, "0", "Abrió este Almacén");
								}
		                  		PlayPlayerStreamSound(playerid, 1027);
	                  		}
							else
							{
								SendInfoMessage(playerid, 0, "905", "No tienes las llaves de este almacén");
							}
						}
			    	}
					// COMANDO: /Llaves Puerta
				  	else if (strcmp("/Llaves Puerta", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
				    	GetMyNearDoor(playerid, false);
					}
					// COMANDO: /Llaves Coche
				  	else if (strcmp("/Llaves Coche", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						LockVehicle(playerid);
			    	}
					// COMANDO: /Llaves Guantera
				  	else if (strcmp("/Llaves Guantera", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
						LockGuantera(playerid);
			    	}
					// COMANDO: /Llaves Guantera
				  	else if (strcmp("/Llaves Gaveta", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
				        if ( PlayersData[playerid][IsPlayerInHouse] )
				        {
							if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
								 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
								 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 )
				            {
					            if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][GavetaLock] )
					            {
					                HouseData[PlayersData[playerid][IsPlayerInHouse]][GavetaLock] = false;
	           						GameTextForPlayer(playerid, "~W~Gaveta ~G~Abierta!", 1000, 6);
				                }
				                else
				                {
									HouseData[PlayersData[playerid][IsPlayerInHouse]][GavetaLock] = true;
	           						GameTextForPlayer(playerid, "~W~Gaveta ~R~Cerrada!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1002);
							}
							else
							{
								SendInfoMessage(playerid, 0, "750", "Ésta no es su casa");
							}
				        }
				        else if (PlayersData[playerid][InLocal] != -1)
				        {
				            new localid = PlayersData[playerid][InLocal];
				            if (PlayerHaveLocalKeys(playerid, localid))
				            {
				            	LocalData[localid][LGavetaSeguro] = !LocalData[localid][LGavetaSeguro];
				            	PlayPlayerStreamSound(playerid, 1002);

				            	if (LocalData[localid][LGavetaSeguro])
				            	GameTextForPlayer(playerid, "~W~Gaveta ~R~Cerrada!", 1000, 6);
				            	else
				            	GameTextForPlayer(playerid, "~W~Gaveta ~G~Abierta!", 1000, 6);
				            	return 1;
				            }
				            else return SendInfoMessage(playerid, 0, "", "No tienes llaves de este local.");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "749", "No te encuentras en ninguna casa o local");
						}
			    	}
					// COMANDO: /Llaves Maletero
				  	else if (strcmp("/Llaves Maletero", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
						LockMaletero(playerid);
			    	}
	 				// COMANDO: /Llaves Armario
				  	else if (strcmp("/Llaves Armario", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
				        if ( PlayersData[playerid][IsPlayerInHouse] )
				        {
							if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
								 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
								 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 )
				            {
					            if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][ArmarioLock] )
					            {
					                HouseData[PlayersData[playerid][IsPlayerInHouse]][ArmarioLock] = false;
	           						GameTextForPlayer(playerid, "~W~Armario ~G~Abierto!", 1000, 6);
				                }
				                else
				                {
									HouseData[PlayersData[playerid][IsPlayerInHouse]][ArmarioLock] = true;
	           						GameTextForPlayer(playerid, "~W~Armario ~R~Cerrado!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1027);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1112", "Ésta no es su casa");
							}
				        }
				        else if (PlayersData[playerid][InLocal] != -1)
				        {
				            new localid = PlayersData[playerid][InLocal];
				            if (PlayerHaveLocalKeys(playerid, localid))
							{
							    LocalData[localid][LArmarioSeguro] = !LocalData[localid][LArmarioSeguro];
							    PlayPlayerStreamSound(playerid, 1027);

							    if (LocalData[localid][LArmarioSeguro])
							    GameTextForPlayer(playerid, "~W~Armario ~R~Cerrado!", 1000, 6);
							    else
							    GameTextForPlayer(playerid, "~W~Armario ~G~Abierto!", 1000, 6);
							}
							else return SendInfoMessage(playerid, 0, "", "No tienes llaves de este local.");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1113", "No te encuentras en ninguna casa o local");
						}
			    	}
	 				// COMANDO: /Llaves Refrigerador
				  	else if (strcmp("/Llaves Refrigerador", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
				        if ( PlayersData[playerid][IsPlayerInHouse] )
				        {
							if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
								 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
								 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 )
				            {
					            if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][RefrigeradorLock] )
					            {
					                HouseData[PlayersData[playerid][IsPlayerInHouse]][RefrigeradorLock] = false;
	           						GameTextForPlayer(playerid, "~W~Refrigerador ~G~Abierto!", 1000, 6);
				                }
				                else
				                {
									HouseData[PlayersData[playerid][IsPlayerInHouse]][RefrigeradorLock] = true;
	           						GameTextForPlayer(playerid, "~W~Refrigerador ~R~Cerrado!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1002);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1220", "Ésta no es su casa");
							}
				        }
				        else if (PlayersData[playerid][InLocal] != -1)
				        {
				            new localid = PlayersData[playerid][InLocal];
				            if (PlayerHaveLocalKeys(playerid, localid))
							{
								LocalData[localid][LRefrigeradorSeguro] = !LocalData[localid][LRefrigeradorSeguro];
							    PlayPlayerStreamSound(playerid, 1002);

							    if (LocalData[localid][LRefrigeradorSeguro])
							    GameTextForPlayer(playerid, "~W~Refrigerador ~R~Cerrado!", 1000, 6);
							    else
							    GameTextForPlayer(playerid, "~W~Refrigerador ~G~Abierto!", 1000, 6);
							}
							else return SendInfoMessage(playerid, 0, "", "No tienes llaves de este local.");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1221", "No te encuentras en ninguna casa o local");
						}
			    	}
	 				// COMANDO: /Llaves GarageEx
				  	else if (strcmp("/Llaves GarageEx", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
			    	    new GarageID = IsPlayerInGarageEx(playerid);
				        if ( GarageID != -1 )
				        {
		                    if ( GaragesEx[GarageID][Dueno] == CIVIL || GaragesEx[GarageID][Dueno] == PlayersData[playerid][Faccion] )
		                    {
			                	if ( GaragesEx[GarageID][Lock] )
					            {
				                	GaragesEx[GarageID][Lock] = false;
               						GameTextForPlayer(playerid, "~W~Garage ~G~Abierto!", 1000, 6);
				                }
				                else
				                {
				                	GaragesEx[GarageID][Lock] = true;
	           						GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
				                }
		                  		PlayPlayerStreamSound(playerid, 1027);
		                  		UpdateLockDoorForPlayer(GaragesEx[GarageID][PickupIDOneP], GaragesEx[GarageID][Lock], GaragesEx[GarageID][PickupIDTwoP]);
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1286", "No tienes las llaves de este garage!");
							}
                        }
                        else
                        {
       						SendInfoMessage(playerid, 0, "1459", "No te encuentras al lado de ningún garage");
						}
			    	}
	 				// COMANDO: /Llaves Garage
				  	else if (strcmp("/Llaves Garage", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
	       				new GarageID, HouseID; IsPlayerInGarageFun(playerid, HouseID, GarageID);
						if ( GarageID != -1 )
						{
							if ( PlayersData[playerid][House] == HouseID ||
								 PlayersData[playerid][Alquiler] == HouseID ||
								 IsPlayerInHouseFriend(playerid, HouseID) != -1)
				            {
								if ( PlayersDataOnline[playerid][InPickup] == TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PickupId] ||
									 PlayersDataOnline[playerid][InPickup] == Garages[HouseID][GarageID][PickupidOut] || IsPlayerInAnyVehicle(playerid))
								{
						            if ( Garages[HouseID][GarageID][LockOut] )
						            {
						                Garages[HouseID][GarageID][LockOut] = false;
		           						GameTextForPlayer(playerid, "~W~Garage ~G~Abierto!", 1000, 6);
						                PlayersDataOnline[playerid][MyPickupLock] = false;
					                }
					                else
					                {
										Garages[HouseID][GarageID][LockOut] = true;
		           						GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
										PlayersDataOnline[playerid][MyPickupLock] = true;
					                }
								}
								else if ( PlayersDataOnline[playerid][InPickup] == TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PickupIdh] ||
									 	  PlayersDataOnline[playerid][InPickup] == Garages[HouseID][GarageID][PickupidIn] )
								{
						            if ( Garages[HouseID][GarageID][LockIn] )
						            {
						                Garages[HouseID][GarageID][LockIn] = false;
		           						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
										PlayersDataOnline[playerid][MyPickupLock] = false;
					                }
					                else
					                {
										Garages[HouseID][GarageID][LockIn] = true;
		           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
										PlayersDataOnline[playerid][MyPickupLock] = true;
					                }
								}
								PlayPlayerStreamSound(playerid, 1027);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1175", "Usted no tiene las llaves de este garage");
							}
				        }
			    	}
	 				// COMANDO: /Llaves Casa
				  	else if (strcmp("/Llaves Casa", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
				        if ( PlayersDataOnline[playerid][InPickupCasa] ||
							 PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_CASA_TYPE )
				        {
							new houseid;
							if ( PlayersData[playerid][IsPlayerInHouse] )
							{
						    	houseid = PlayersData[playerid][IsPlayerInHouse];
							}
							else
							{
							    houseid = PlayersDataOnline[playerid][InPickupCasa];
							}

							if ( PlayersData[playerid][House] == houseid ||
								 PlayersData[playerid][Alquiler] == houseid ||
								 IsPlayerInHouseFriend(playerid, houseid) != -1)
				            {
					            if ( HouseData[houseid][Lock] )
					            {
					                HouseData[houseid][Lock] = false;
	           						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
				                }
				                else
				                {
									HouseData[houseid][Lock] = true;
	           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1027);
								UpdateLockDoorForPlayer(HouseData[houseid][PickupId], HouseData[houseid][Lock], TypeHouse[HouseData[houseid][TypeHouseId]][PickupId]);
							}
							else
							{
								SendInfoMessage(playerid, 0, "592", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "593", "No te encuentras en ninguna casa");
						}
			    	}
					// COMANDO: /Llaves Negocio
				  	else if (strcmp("/Llaves Negocio", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] || PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_NEGOCIO_TYPE )
				        {
					        new Saveit;
							if ( PlayersDataOnline[playerid][InPickupNegocio] )
				            {
								Saveit = PlayersDataOnline[playerid][InPickupNegocio];
				            }
				            else
				            {
				                Saveit = PlayersData[playerid][IsPlayerInBizz];
							}
				            if ( IsMyBizz(playerid, Saveit, true)  )
				            {
								if ( !IsBizzOnRobo(playerid, Saveit) )
								{
						            if ( NegociosData[Saveit][Lock] )
						            {
						                NegociosData[Saveit][Lock] = false;
		           						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
					                }
					                else
					                {
										NegociosData[Saveit][Lock] = true;
		           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
					                }
					                PlayPlayerStreamSound(playerid, 1027);
									UpdateLockDoorForPlayer(NegociosData[Saveit][PickupOutId], NegociosData[Saveit][Lock], NegociosType[NegociosData[Saveit][Type]][PickupId]);
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "347", "No te encuentras en ningún negocio");
						}
			    	}
			    	//      /Llaves Locl
			    	else if (strcmp("/Llaves Local", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
				        if (PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_LOCAL_TYPE ||
							PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_LOCAL)
				        {
				            new localID = -1;

							if (PlayersDataOnline[playerid][InPickupLocal] != -1) localID = PlayersDataOnline[playerid][InPickupLocal];

							else if (PlayersData[playerid][InLocal] != -1) localID = PlayersData[playerid][InLocal];

							if (localID != -1)
							{
					            if (!PlayerHaveLocalKeys(playerid, localID)) return SendInfoMessage(playerid, 0, "", "No tienes llaves de este local.");
							    if (!LocalData[localID][Seguro])
							    {
							        GameTextForPlayer(playerid, "~W~Local ~R~Cerrado!", 1000, 6);
							        LocalData[localID][Seguro] = true;
							        PlayersDataOnline[playerid][MyPickupLock] = true;
							    }
							    else
							    {
							        GameTextForPlayer(playerid, "~W~Local ~G~Abierto!", 1000, 6);
							        LocalData[localID][Seguro] = false;
							        PlayersDataOnline[playerid][MyPickupLock] = false;
							    }
							    PlayPlayerStreamSound(playerid, 1027);
							}
				            return 1;
				        }
				        else return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
			    	}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "288", "Quizás quiso decir: /Llaves {Coche, Negocio, Casa, Armario, Puerta, PuertaEx, Facción, Almacén, Garage, Amigos}");
						SendInfoMessage(playerid, 0, "288", "Quizás quiso decir: /Llaves {Refrigerador, GarageEx, Guantera, Gaveta, Local}");
					}
			    }
				// COMANDO: /Cambiar
				else if (strfind(cmdtext, "/Cambiar ", true) == 0)
				{
					// COMANDO: /Cambiar Frecuencia
					if (strcmp("/Cambiar Frecuencia", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19)
					{
					    if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
					    {
							if ( PlayersDataOnline[playerid][StateChannelRadio] )
							{
						        new MsgFrecuencia[MAX_TEXT_CHAT];
			                    switch (PlayersDataOnline[playerid][Frecuencia])
			                    {
			                        case 0:
									{
										PlayersDataOnline[playerid][Frecuencia] = 1;
									}
									case 1:
									{
									    PlayersDataOnline[playerid][Frecuencia] = 2;
									}
									case 2:
									{
										PlayersDataOnline[playerid][Frecuencia] = 0;
									}
								}
								Acciones(playerid, 8, "cambia de frecuencia su radio");
								format(MsgFrecuencia, sizeof(MsgFrecuencia), "Has cambiado a la frecuencia [%i]", PlayersDataOnline[playerid][Frecuencia] );
								SendInfoMessage(playerid, 2, "0", MsgFrecuencia);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "112", "Tú tienes cerrado el canal Radio personal, abrelo con /Estado Radio y luego usa /Cambiar Frecuencia");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "113", "Su Facción no tiene canal /R [Radio], no puedes usar /Cambiar Frecuencia");
						}
					}
					//////////--- /Cambiar Password [Nombre_Del_Jugador] [Nueva Password]              - Cambiar la password a un jugador
					else if (strfind(cmdtext, "/Cambiar Password ", true) == 0)
					{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
						    if ( strlen(cmdtext[17]) >= 7 )
						    {
						        new saveName[MAX_PLAYER_NAME];
						        strmid(saveName, cmdtext, GetPosSpace(cmdtext, 2)+1, GetPosSpace(cmdtext, 3), sizeof(saveName));
								ChangePasswordUser(playerid, saveName, cmdtext[GetPosSpace(cmdtext, 3) + 1]);
							}
					        else
					        {
								SendInfoMessage(playerid, 0, "1460", "El nombre tiene que contener entre 3 y 24 caracteres y la password mayor de 3");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1461", "No tienes acceso al comando /Cambiar Password");
						}
					}
					// COMANDO: /Cambiar Nombre [Nuevo Nombre]
					else if (strfind(cmdtext, "/Cambiar Nombre ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
				            new bizzid = PlayersDataOnline[playerid][InPickupNegocio];
				            
				            if ( PlayersData[playerid][Admin] >= 8 || IsMyBizz(playerid, bizzid, true)  )
				            {
								if ( !IsBizzOnRobo(playerid, bizzid) )
								{
						    	    if (strlen(cmdtext[16]) >= 2 && strlen(cmdtext[16]) <= 80 )
						    	    {
						    	        if ( IsValidStringServerOther(playerid, cmdtext) )
						    	        {
				                            format(NegociosData[bizzid][NameBizz], 	MAX_BIIZ_NAME, "%s", ConvertToRGBColor(cmdtext[16]));
				                            UpdateTextLabelNegocio(bizzid);
				                            SendInfoMessage(playerid, 2, "0", "Has modificado el nombre de tu negocio");
			                            }
									}
									else
									{
										SendInfoMessage(playerid, 0, "313", "El nombre de su negocio tiene que ser mayor de 2 y menos de 80 caracteres");
									}
								}
				            }
				        }
				        else if (PlayersDataOnline[playerid][InPickupLocal] != -1)
			            {
			                new localid = PlayersDataOnline[playerid][InPickupLocal];
			                if (PlayersData[playerid][Local] == localid || PlayersData[playerid][Admin] >= 8)
			                {
			                    new string[150];

			                    if (strlen(cmdtext[16]) < 2 || strlen(cmdtext[16]) > 80)
								{
								    SendInfoMessage(playerid, 0, "", "El nombre de su local tiene que tener minimo 2 y maximo 80 caracteres.");
								    SendInfoMessage(playerid, 1, "Escriba \"NO\" para borrar el nombre del local.", "Cambiar Nombre: ");
								    return 1;
								}
								if (strfind(cmdtext[16], "NO") == 0)
								{
								    SendInfoMessage(playerid, 2, "0", "Borraste el nombre de tu local.");
								    format(string,sizeof(string), "Nombre anterior %s", LocalData[localid][NombreLocal]);
								    SendInfoMessage(playerid, 2, "0", string);
									format(LocalData[localid][NombreLocal], 128, "");
							    }
								else
								{
								    strdel(cmdtext, 0, 16);
			                    	format(LocalData[localid][NombreLocal], 128, "%s", ConvertToRGBColor(cmdtext));
			                    	SendInfoMessage(playerid, 2, "0", "Has modificado el nombre de tu local");
			                    }
			                    SaveLocal(localid, true);
			                }
			                else return SendInfoMessage(playerid, 0, "", "Este no es tu local.");
			            }
			            else if (PlayersDataOnline[playerid][InPickupTele] != -1 && PlayersData[playerid][Mapper])
			            {
			                if (strlen(cmdtext[16]) < 2 || strlen(cmdtext[16]) > 80) return SendInfoMessage(playerid, 0, "", "El nombre del tele debe tener minimo 2 y maximo 80 caracteres");
			                
			                new string[144];
			                new teleid = PlayersDataOnline[playerid][InPickupTele];
			                
			                format(string,sizeof(string), "Cambiaste el nombre del tele %i de %s a %s", teleid, Teles[teleid][LugarText], cmdtext[16]);
			                
			                format(Teles[teleid][LugarText], 128, cmdtext[16]);
			                SaveTele(teleid, true);
			                SendAdviseMessage(playerid, string);
			            }
				        else
				        {
				            if (PlayersData[playerid][Mapper])
				            {
				                SendInfoMessage(playerid, 0, "", "No te encuentras en ningun negocio, local o tele");
				            }
				            else
				            {
				                SendInfoMessage(playerid, 0, "", "No te encuentras en ningun negocio o local");
				            }
						}
			    	}
					// COMANDO: /Cambiar Precio Alquiler [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Precio Alquiler ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
				        {
				            new houseid = PlayersDataOnline[playerid][InPickupCasa];
				            
							if ( IsMyHouse(playerid, houseid) )
				            {
				                if ( strval(cmdtext[25]) >= 0 &&  strval(cmdtext[25]) <= 20000)
				                {
		                            HouseData[houseid][PriceRent] = strval(cmdtext[25]);
		                            UpdateTextLabelCasa(houseid);
		                            SendInfoMessage(playerid, 2, "0", "Has modificado el precio de alquiler de su casa");
									if ( !strval(cmdtext[25]) )
						            {
					                    for ( new i = 0; i < MAX_PLAYERS; i++)
					                    {
											if ( i != playerid && IsPlayerConnected(i) &&  PlayersDataOnline[i][State] == 3 && PlayersData[i][Alquiler] == PlayersData[playerid][House] )
											{
												PlayersData[i][Alquiler] = -1;
												PlayersData[i][House] 	= -1;
												SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler!");
											}
										}
									}
	                            }
	                            else
	                            {
									SendInfoMessage(playerid, 0, "601", "El precio de alquiler mínimo es $1 y máximo $20000 (0 = No se renta)");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "599", "Ésta no es su casa");
							}
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "600", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Cambiar Precio Entrada [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Precio Entrada ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
				            new bizzid = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, bizzid, true)  )
				            {
								if ( !IsBizzOnRobo(playerid, bizzid) )
								{
					                if ( strval(cmdtext[24]) >= 0 &&  strval(cmdtext[24]) <= 20000)
					                {
			                            NegociosData[bizzid][PriceJoin] = strval(cmdtext[24]);
			                            UpdateTextLabelNegocio(bizzid);
			                            SendInfoMessage(playerid, 2, "0", "Has modificado el precio de entrada del negocio");
		                            }
		                            else
		                            {
										SendInfoMessage(playerid, 0, "317", "El precio de entrada mínimo es $0 y máximo $20000");
									}
								}
				            }
						}
						else if ( PlayersDataOnline[playerid][InPickupLocal] != -1)
						{
						    new localid = PlayersDataOnline[playerid][InPickupLocal];
						    if (PlayersData[playerid][Local] != localid) return SendInfoMessage(playerid, 0, "", "Este no es tu local.");
						    if ( strval(cmdtext[24]) < 0 || strval(cmdtext[24]) > 20000) return SendInfoMessage(playerid, 0, "", "El precio de entrada mínimo es $0 y máximo $20000");
						    LocalData[localid][PrecioEntrada] = strval(cmdtext[24]);
						    SaveLocal(localid, true);
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "316", "No te encuentras en ningún negocio o local.");
						}
					}
					// COMANDO: /Cambiar Precio Entrada [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Precio Materiales ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
				            new bizzid = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, bizzid, true)  )
				            {
				                if ( strval(cmdtext[27]) >= 0 && strval(cmdtext[27]) <= 1000)
				                {
		                            NegociosData[bizzid][PricePiece] = strval(cmdtext[27]);
		                            UpdateTextLabelNegocio(bizzid);
		                            SendInfoMessage(playerid, 2, "0", "Has modificado el precio de los materiales");
	                            }
	                            else
	                            {
									SendInfoMessage(playerid, 0, "318", "El precio de compra de materiales mínimo es $0 y mayor $1000");
								}
				            }
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "319", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Cambiar Precio Entrada [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Ciudad ", true) == 0)
					{
						if ( PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] != 4 )
					    {
							new MsgCambioCiudad[MAX_TEXT_CHAT];
					        if ( strval(cmdtext[16]) == playerid )
					        {
								if ( PlayersData[playerid][Ciudad] )
								{
								    PlayersData[playerid][Ciudad] = false;
								}
								else
								{
								    PlayersData[playerid][Ciudad] = true;
								}
								format(MsgCambioCiudad, sizeof(MsgCambioCiudad), "Ahora en su pasaporte radica como que vive en la ciudad de %s", Ciudades[PlayersData[playerid][Ciudad]]);
								SendInfoMessage(playerid, 3, "0", MsgCambioCiudad);
							}
						    else if ( IsPlayerNearEx(playerid, strval(cmdtext[16]),
								 "873",
								 "874",
								 "875",
								 "El jugador que le desea cambiar de ciudad no se encuentra conectado",
								 "El jugador que le desea cambiar de ciudad no se ha logueado",
								 "El jugador que le desea cambiar de ciudad no se encuentra cerca de tí") )
						    {
								if ( PlayersData[strval(cmdtext[16])][Ciudad] )
								{
								    PlayersData[strval(cmdtext[16])][Ciudad] = false;
								}
								else
								{
								    PlayersData[strval(cmdtext[16])][Ciudad] = true;
								}
								new MsgCambioCiudadMe[MAX_TEXT_CHAT];
								format(MsgCambioCiudad, sizeof(MsgCambioCiudad), "%s ha cambiado en su pasaporte la ciudad donde vive a %s", PlayersDataOnline[playerid][NameOnlineFix], Ciudades[PlayersData[strval(cmdtext[16])][Ciudad]]);
								format(MsgCambioCiudadMe, sizeof(MsgCambioCiudadMe), "Le has cambiado al ciudadano %s a la ciudad %s", PlayersDataOnline[strval(cmdtext[16])][NameOnlineFix], Ciudades[PlayersData[strval(cmdtext[16])][Ciudad]]);
								SendInfoMessage(playerid, 3, "0", MsgCambioCiudadMe);
								SendInfoMessage(strval(cmdtext[16]), 3, "0", MsgCambioCiudad);
						    }
					    }
				        else SendAccessError(playerid, "Cambiar Ciudad");
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "315", "Quizás quiso decir: /Cambiar {Frecuencia, Nombre [Nuevo Nombre], Precio Entrada [Nuevo Precio]}");
						SendInfoMessage(playerid, 0, "315", "Quizás quiso decir: /Cambiar {Precio Materiales [Nuevo Precio], Ciudad [ID], Precio Alquiler}");
					}
				}
				// COMANDO: /Info
				else if (strfind(cmdtext, "/Info", true) == 0)
				{
					// COMANDO: /Info Negocio
				  	if (strcmp("/Info Negocio", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
				            new bizzid = PlayersDataOnline[playerid][InPickupNegocio];
				            
				            if ( PlayersData[playerid][Admin] >= 7 || IsMyBizz(playerid, bizzid, true) )
				            {
				                new MsgInfoNegocio[6][150];
				                format(MsgInfoNegocio[0], 150, "(( ID del Negocio: %i ))Nombre del Negocio: %s | Materiales: [%i/5000]", bizzid, NegociosData[bizzid][NameBizz], NegociosData[bizzid][Materiales]);
				                format(MsgInfoNegocio[1], 150, "Precio Entrada: $%i", NegociosData[bizzid][PriceJoin]);
				                format(MsgInfoNegocio[2], 150, "Precio que paga por Materiales(0  = Deshabilitado): $%i", NegociosData[bizzid][PricePiece]);
				                format(MsgInfoNegocio[3], 150, "Deposito: $%i", NegociosData[bizzid][Deposito]);
				                format(MsgInfoNegocio[4], 150, "Dinero extorsionado: $%i", NegociosData[bizzid][DepositoExtorsion]);
				                format(MsgInfoNegocio[5], 150, "Precio del negocio: $%i", NegociosData[bizzid][Precio]);

				    			SendInfoMessage(playerid, 1, " ", "|____________________ Negocio ___________________|");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[0], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[1], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[2], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[3], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[4], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[5], "Negocio: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "312", "No te encuentras en ningún negocio");
						}
					}
					//////////--- /Info Garage [ID]              - VER INFORMACIóN DE UNA CASA
				  	else if (strcmp("/Info Garage", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
					{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
       	       				new GarageID, HouseID; IsPlayerInGarageFun(playerid, HouseID, GarageID);
			                if ( GarageID != -1 )
			                {
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Este garage es ID[%i], tipo [%i] pertenece a la casa ID[%i]",GarageID, Garages[HouseID][GarageID][TypeGarageE],HouseID);
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);
                            }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1173", "No tienes acceso al comando /Info Garage");
						}
					}
					// COMANDO: /Info Casa
				  	else if (strcmp("/Info Casa", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    	{
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
				        {
				            new houseid = PlayersDataOnline[playerid][InPickupCasa];
							if ( IsMyHouse(playerid, houseid) || PlayersData[playerid][Admin] >= 7)
				            {
				                new MsgInfoCasa[4][MAX_TEXT_CHAT];
				                format(MsgInfoCasa[0], MAX_TEXT_CHAT, "(( ID de la Casa: %i Tipo: %i))", houseid, HouseData[houseid][TypeHouseId]);
				                format(MsgInfoCasa[1], MAX_TEXT_CHAT, "Precio Alquiler: $%i (0  = Deshabilitado)", HouseData[houseid][PriceRent]);
				                format(MsgInfoCasa[2], MAX_TEXT_CHAT, "Dinero del Alquiler: $%i", HouseData[houseid][Deposito]);
				                format(MsgInfoCasa[3], MAX_TEXT_CHAT, "Precio de la Casa: $%i", HouseData[houseid][Price]);

				    			SendInfoMessage(playerid, 1, " ", "|____________________ Casa ___________________|");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[0], "Casa: ");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[1], "Casa: ");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[2], "Casa: ");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[3], "Casa: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1158", "No te encuentras en ningúna casa");
						}
					}
					// COMANDO: /Info Local
				  	else if (strcmp("/Info Local", cmdtext, true) == 0)
			    	{
				        if ( PlayersDataOnline[playerid][InPickupLocal] != -1)
				        {
				            new localid = PlayersDataOnline[playerid][InPickupLocal];
							if (PlayersDataOnline[playerid][InPickupLocal] != PlayersData[playerid][Local] && PlayersData[playerid][Admin] < 7) return SendInfoMessage(playerid, 0, "", "Este no es tu local.");
				            {
				                new MsgInfoLocal[4][150];
				                format(MsgInfoLocal[0], 150, "(( ID del Local: %i Tipo: %s [%i]))", localid, LocalTipoString[LocalData[localid][Tipo]-1], LocalData[localid][Tipo]);
				                format(MsgInfoLocal[1], 150, "Precio Entrada: $%i", LocalData[localid][PrecioEntrada]);
				                format(MsgInfoLocal[2], 150, "Deposito: $%i", LocalData[localid][Deposito]);
				                format(MsgInfoLocal[3], 150, "Precio del Local: $%i", LocalData[localid][Precio]);

                                SendInfoMessage(playerid, 1, " ", "|____________________ Local ___________________|");
				    			SendInfoMessage(playerid, 1, MsgInfoLocal[0], "Local: ");
				    			SendInfoMessage(playerid, 1, MsgInfoLocal[1], "Local: ");
				    			SendInfoMessage(playerid, 1, MsgInfoLocal[2], "Local: ");
				    			SendInfoMessage(playerid, 1, MsgInfoLocal[3], "Local: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "", "No te encuentras en ningún local");
						}
					}
					else if (strcmp("/Info Tele", cmdtext, true) == 0)
					{
					    if (!PlayersData[playerid][Mapper]) return SendAccessError(playerid, "Info Tele");
					    if (PlayersDataOnline[playerid][InPickupTele] == -1) return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun tele.");
					    
					    new teleid = PlayersDataOnline[playerid][InPickupTele];
					    
					    new MsgInfo[7][144];
		                format(MsgInfo[0], 144, "ID: %i", teleid);
		                format(MsgInfo[1], 144, "ID_GO: %i", Teles[teleid][PickupIDGo]);
		                format(MsgInfo[2], 144, "Lugar: %s", Teles[teleid][LugarText]);
		                format(MsgInfo[3], 144, "Tipo de Propietario: %s[%i]", TelesDuenoType[Teles[teleid][DuenoType]], Teles[teleid][DuenoType]);
		                if (Teles[teleid][DuenoType] == 0)
		                format(MsgInfo[4], 144, "Faccion: %s[%i]", FaccionData[Teles[teleid][Dueno]][NameFaccion], Teles[teleid][Dueno]);
		                else if (Teles[teleid][DuenoType] == 1)
		                format(MsgInfo[4], 144, "Negocio: %i", Teles[teleid][Dueno]);
		                else if (Teles[teleid][DuenoType] == 2)
		                format(MsgInfo[4], 144, "Casa: %i", Teles[teleid][Dueno]);
		                else if (Teles[teleid][DuenoType] == 3)
		                format(MsgInfo[4], 144, "Local: %i", Teles[teleid][Dueno]+1);
		                format(MsgInfo[5], 144, "Banco: %s", SiOrNo[Teles[teleid][IsBankTele]]);
		                format(MsgInfo[6], 144, "Hotel: %s", SiOrNo[Teles[teleid][IsHotelTele]]);

                        SendInfoMessage(playerid, 1, " ", "|____________________ Tele ___________________|");
		    			SendInfoMessage(playerid, 1, MsgInfo[0], "Tele: ");
		    			SendInfoMessage(playerid, 1, MsgInfo[1], "Tele: ");
		    			SendInfoMessage(playerid, 1, MsgInfo[2], "Tele: ");
		    			SendInfoMessage(playerid, 1, MsgInfo[3], "Tele: ");
		    			SendInfoMessage(playerid, 1, MsgInfo[4], "Tele: ");
		    			SendInfoMessage(playerid, 1, MsgInfo[5], "Tele: ");
		    			SendInfoMessage(playerid, 1, MsgInfo[6], "Tele: ");
		    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
					}
			    	else
			    	{
			    	    if (PlayersData[playerid][Mapper])
						SendInfoMessage(playerid, 0, "", "Quizás quiso decir: /Info {Garage, Tele}");
						
						SendInfoMessage(playerid, 0, "", "Quizás quiso decir: /Info {Negocio, Casa, Local}");
					}
				}
				// COMANDO: /Bolsa [ID]
			  	else if (strfind(cmdtext, "/Bolsa ", true) == 0 )
		    	{
		    		if ( PlayersData[playerid][HaveBolsa] )
		    		{
					    if ( playerid == strval(cmdtext[7]) )
					    {
					        Acciones(playerid, 8, "mira al interior de su bolsa");
					        ShowBolsaToPlayer(playerid, strval(cmdtext[7]));
					    }
					    else if ( IsPlayerNearEx(playerid, strval(cmdtext[7]),
							 "1222",
							 "1223",
							 "1224",
							 "El jugador que desea mostrarle su bolsa no se encuentra conectado",
							 "El jugador que desea mostrarle su bolsa no se encuentra logueado",
							 "El jugador que desea mostrarle su bolsa no se encuentra cerca de tí") )
					    {
							new MsgBolsaMe[MAX_TEXT_CHAT];
							format(MsgBolsaMe, sizeof(MsgBolsaMe), "le enseña su bolsa a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
					        Acciones(playerid, 8, MsgBolsaMe);
							ShowBolsaToPlayer(playerid, strval(cmdtext[7]));
					    }
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1227", "Usted no tiene una bolsa");
					}
		    	}
				// COMANDO: /Cartera [ID]
			  	else if (strfind(cmdtext, "/Cartera ", true) == 0 )
		    	{
				    if ( playerid == strval(cmdtext[9]) )
				    {
				        Acciones(playerid, 8, "mira su cartera");
				        ShowCarteraToPlayer(playerid, strval(cmdtext[9]));
				    }
				    else if ( IsPlayerNearEx(playerid, strval(cmdtext[9]),
						 "1318",
						 "1319",
						 "1320",
						 "El jugador que desea mostrarle su cartera no se encuentra conectado",
						 "El jugador que desea mostrarle su cartera no se encuentra logueado",
						 "El jugador que desea mostrarle su cartera no se encuentra cerca de tí") )
				    {
						new MsgCarteraMe[MAX_TEXT_CHAT];
						format(MsgCarteraMe, sizeof(MsgCarteraMe), "le enseña su cartera a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgCarteraMe);
						ShowCarteraToPlayer(playerid, strval(cmdtext[9]));
				    }
		    	}
				// COMANDO: /Bolsillos [ID]
			  	else if (strfind(cmdtext, "/Bolsillos ", true) == 0 )
		    	{
				    if ( playerid == strval(cmdtext[11]) )
				    {
				        Acciones(playerid, 8, "se revisa en los bolsillos");
				        ShowBolsillosToPlayer(playerid, strval(cmdtext[11]));
				    }
				    else if ( IsPlayerNearEx(playerid, strval(cmdtext[11]),
						 "1065",
						 "1066",
						 "1067",
						 "El jugador que desea mostrarle sus bolsillos no se encuentra conectado",
						 "El jugador que desea mostrarle sus bolsillos no se encuentra logueado",
						 "El jugador que desea mostrarle sus bolsillos no se encuentra cerca de tí") )
				    {
						new MsgBolsillosMe[MAX_TEXT_CHAT];
						format(MsgBolsillosMe, sizeof(MsgBolsillosMe), "le enseña su bolsillos a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgBolsillosMe);
						ShowBolsillosToPlayer(playerid, strval(cmdtext[11]));
				    }
		    	}
				// COMANDO: /Retirar
				else if (strfind(cmdtext, "/Retirar", true) == 0)
				{
					// COMANDO: /Retirar Almacén
					if (strfind(cmdtext, "/Retirar Almacén ", true) == 0 ||
					    strfind(cmdtext, "/Retirar Almacen ", true) == 0)
					{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid,true);
					    if ( MyNearAlmacen != -1)
					    {
							if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3  ||
								 PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 	||
								 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 2	||
								 PlayersData[playerid][Faccion] == YKZ ||
								 PlayersData[playerid][Faccion] == LCN ||
								 PlayersData[playerid][Faccion] == SICARIOS && PlayersData[playerid][Rango] <= 3 ||
 								 PlayersData[playerid][Faccion] == COLTS    && PlayersData[playerid][Rango] <= 1 ||
 								 PlayersData[playerid][Faccion] == AK	    && PlayersData[playerid][Rango] <= 1 ||
 								 PlayersData[playerid][Faccion] == VELTRAN	&& PlayersData[playerid][Rango] <= 1 ||
 								 PlayersData[playerid][Faccion] == HEORS    && PlayersData[playerid][Rango] <= 1   )
							{
						        if ( strval(cmdtext[17]) >= 1 && strval(cmdtext[17]) <= 2000)
						        {
						            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
						            {
							            if ( FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] >= strval(cmdtext[17]) )
							            {
							                if ( IsNotFullMaterialsPlayer(playerid, strval(cmdtext[17])) )
								            {
												FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] - strval(cmdtext[17]);
												PlayersData[playerid][Materiales] =  PlayersData[playerid][Materiales] + strval(cmdtext[17]);

										        new MsgRetirarAlmacen[MAX_TEXT_CHAT];
										        format(MsgRetirarAlmacen, sizeof(MsgRetirarAlmacen), "Ha retirado %i de materiales de este almacén, ahora quedan %i de materiales", strval(cmdtext[17]), FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen]);
								    			SendInfoMessage(playerid, 1, " ", "|___________________  Almacén ___________________|");
								    			SendInfoMessage(playerid, 1, MsgRetirarAlmacen, "Almacén: ");
								    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
									        }
									        else
									        {
										    	SendInfoMessage(playerid, 0, "981", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "735", "No queda esa cantidad de materiales para retirar del almacén");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "900", "Este almacén se encuentra cerrado");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "737", "Mínimo puede retirar 1 de materiales y máximo 2000");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "802", "Usted no puede retirar materiales del almacén");
							}
						}
			    	}
					// COMANDO: /Retirar Facción
					else if (strfind(cmdtext, "/Retirar Facción ", true) == 0 ||
					    strfind(cmdtext, "/Retirar Faccion ", true) == 0)
					{
		    	        if ( PlayersData[playerid][Rango] == 0 )
		    	        {
						    new MyNearFaccion = GetNearFaccion(playerid);
						    if ( MyNearFaccion != -1 )
						    {
						        if ( MyNearFaccion == PlayersData[playerid][Faccion])
								{
							        if (FaccionData[MyNearFaccion][Deposito] >= strval(cmdtext[17]) )
							        {
									    if (IsNotZero(playerid, strval(cmdtext[17])))
									    {
									        new MsgConsultarFaccion[MAX_TEXT_CHAT];
									        format(MsgConsultarFaccion, sizeof(MsgConsultarFaccion), "Tiene usted $%i en su facción", FaccionData[MyNearFaccion][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
							    			SendInfoMessage(playerid, 1, MsgConsultarFaccion, "Facción: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");

								            FaccionData[MyNearFaccion][Deposito] = FaccionData[MyNearFaccion][Deposito] - strval(cmdtext[17]);
								            GivePlayerMoneyEx(playerid, strval(cmdtext[17]));

									        new MsgRetirarFaccion[MAX_TEXT_CHAT];
									        format(MsgRetirarFaccion, sizeof(MsgRetirarFaccion), "Ha retirado $%i del la facción, su nuevo saldo es: $%i", strval(cmdtext[17]), FaccionData[MyNearFaccion][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
							    			SendInfoMessage(playerid, 1, MsgRetirarFaccion, "Facción: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
						    			}
									}
									else
									{
										SendInfoMessage(playerid, 0, "386", "No tienes esa cantidad de dinero para retirar del la facción");
									}
				    			}
								else
								{
									SendInfoMessage(playerid, 0, "858", "Esta no es su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "387", "Usted no es líder");
						}
			    	}
					// COMANDO: /Retirar Extorsión
				  	else if (strcmp("/Retirar Extorsión", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
	                    	 strcmp("/Retirar Extorsion", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 )
					{
						if ( PlayersDataOnline[playerid][InPickupNegocio] )
						{
						    new bizzid = PlayersDataOnline[playerid][InPickupNegocio];
	                        if ( IsMyExtorsion(playerid, bizzid) )
	                        {
	                            if ( !IsBizzOnRobo(playerid, bizzid) )
	                            {
									if ( NegociosData[bizzid][DepositoExtorsion] > 0 )
									{
							            GivePlayerMoneyEx(playerid, NegociosData[bizzid][DepositoExtorsion]);

										new MsgExtorsionRatirar[MAX_TEXT_CHAT];
										format(MsgExtorsionRatirar, sizeof(MsgExtorsionRatirar), "Ha retirado $%i extorsionados de este negocio", NegociosData[bizzid][DepositoExtorsion]);
										SendInfoMessage(playerid, 2, "0", MsgExtorsionRatirar);
										NegociosData[bizzid][DepositoExtorsion] = 0;
									}
									else
									{
										SendInfoMessage(playerid, 0, "353", "No hay dinero para extorsionar en este negocio");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "348", "Usted no extorsiona este negocio");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "349", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Retirar Cajero
					else if (strfind(cmdtext, "/Retirar Cajero ", true) == 0)
					{
						ShowRetirarBancoFunction(playerid, true, strval(cmdtext[16]));
			    	}
					// COMANDO: /Retirar Casa
					else if ( strcmp("/Retirar Casa", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 )
					{
						if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new houseid = PlayersDataOnline[playerid][InPickupCasa];
	                        if ( IsMyHouse(playerid, houseid) )
	                        {
								if ( HouseData[houseid][Deposito] > 0 )
								{
						            GivePlayerMoneyEx(playerid, HouseData[houseid][Deposito]);

									new MsgCasaRatirar[MAX_TEXT_CHAT];
									format(MsgCasaRatirar, sizeof(MsgCasaRatirar), "Ha retirado $%i de ganancias de el alquiler", HouseData[houseid][Deposito]);
									SendInfoMessage(playerid, 2, "0", MsgCasaRatirar);
									HouseData[houseid][Deposito] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "605", "No hay dinero para retirar del alquiler");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "603", "Esta no es su casa");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "604", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Retirar Negocio
					else if (strfind(cmdtext, "/Retirar Negocio ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
								if ( !IsBizzOnRobo(playerid, BizzId) )
								{
							        if (NegociosData[BizzId][Deposito] >= strval(cmdtext[17]) )
							        {
									    if (IsNotZero(playerid, strval(cmdtext[17])))
									    {
								            NegociosData[BizzId][Deposito] = NegociosData[BizzId][Deposito] - strval(cmdtext[17]);
								            GivePlayerMoneyEx(playerid, strval(cmdtext[17]));

									        new MsgRetirarNegocio[MAX_TEXT_CHAT];
									        format(MsgRetirarNegocio, sizeof(MsgRetirarNegocio), "Ha retirado $%i del negocio, su nuevo saldo es: $%i", strval(cmdtext[17]), NegociosData[BizzId][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Negocio ___________________|");
							    			SendInfoMessage(playerid, 1, MsgRetirarNegocio, "Negocio: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
							    		}
							        }
									else
									{
										SendInfoMessage(playerid, 0, "308", "No tienes esa cantidad de dinero para retirar del negocio");
									}
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "307", "No te encuentras en ningún negocio");
						}
					}
					else if (strfind(cmdtext, "/Retirar Local ", true) == 0)
				    {
				        if (PlayersDataOnline[playerid][InPickupLocal] == -1) return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
				        if (PlayersDataOnline[playerid][InPickupLocal] != PlayersData[playerid][Local]) return SendInfoMessage(playerid, 0, "", "Este no es tu local.");

				        new localid = PlayersDataOnline[playerid][InPickupLocal];
				        new dineroRetirar = strval(cmdtext[15]);

				        if (LocalData[localid][Deposito] < dineroRetirar ) return SendInfoMessage(playerid, 0, "", "No tienes esa cantidad de dinero para retirar del local.");
						GivePlayerMoneyEx(playerid, dineroRetirar);
						LocalData[localid][Deposito] = LocalData[localid][Deposito] - dineroRetirar;

				        new string[150];
				        SendInfoMessage(playerid, 1, " ", "|___________________  Local ___________________|");
						format(string, sizeof(string), "Ha retirado $%i de su local, su nuevo fondo es: $%i", dineroRetirar, LocalData[localid][Deposito]); SendInfoMessage(playerid, 1, string, "Local: ");
		    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
		    			SaveLocal(localid, false);
				    }
			    	else
			    	{
						SendInfoMessage(playerid, 0, "302", "Quizás quiso decir: /Retirar {Cajero [Cantidad], Negocio [Cantidad], Extorsión, Facción [Cantidad]}");
						SendInfoMessage(playerid, 0, "302", "Quizás quiso decir: /Retirar {Almacén [Cantidad], Casa, Local [Cantidad]}");
					}
				}
				// COMANDO: /Depositar
				else if (strfind(cmdtext, "/Depositar", true) == 0)
				{
					// COMANDO: /Depositar Mercancía
				  	if ( strcmp("/Depositar Mercancía", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20 ||
					  	 strcmp("/Depositar Mercancia", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					    if ( MyNearAlmacen != -1)
					    {
					        if ( PlayersData[playerid][MyBonus] )
					        {
								new MiValueMateriales;
								if (PlayersData[playerid][Faccion] == CAMIONEROS)
								{
								    MiValueMateriales = 500;
								}
								else if (PlayersData[playerid][Faccion] == CONTRABANDISTAS)
								{
								    MiValueMateriales = 250;
								}
								else if (PlayersData[playerid][Faccion] == TRAFICANTES)
								{
								    MiValueMateriales = 250;
								}

								new MsgDepositarMercancia[MAX_TEXT_CHAT];
				    			SendInfoMessage(playerid, 1, " ", "|___________________  Almacén ___________________|");
								FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] + MiValueMateriales;
						        format(MsgDepositarMercancia, sizeof(MsgDepositarMercancia), "Ha depositado la mercancía y ahora el almacén cuenta con %i de materiales", FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen]);
				    			SendInfoMessage(playerid, 1, MsgDepositarMercancia, "Almacén: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
								PlayersData[playerid][MyBonus] = false;
							}
							else
							{
									SendInfoMessage(playerid, 0, "780", "No tiene mercancía!");
							}
						}
			    	}
					// COMANDO: /Depositar Mercancía
					else if (strfind(cmdtext, "/Depositar Almacén ", true) == 0 ||
					    	 strfind(cmdtext, "/Depositar Almacen ", true) == 0)
					{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					    if ( MyNearAlmacen != -1 )
					    {
							if ( strval(cmdtext[19]) >= 1 && strval(cmdtext[19]) <= 2000)
					        {
					            if ( PlayersData[playerid][Materiales] >= strval(cmdtext[19]) )
					            {
						            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
						            {
										new MsgDepositarAlmacen[MAX_TEXT_CHAT];
						    			SendInfoMessage(playerid, 1, " ", "|___________________  Almacén ___________________|");
										FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] + strval(cmdtext[19]);
								        format(MsgDepositarAlmacen, sizeof(MsgDepositarAlmacen), "Ha depositado %i de materiales en este almacén, ahora tiene %i de materiales", strval(cmdtext[19]), FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen]);
						    			SendInfoMessage(playerid, 1, MsgDepositarAlmacen, "Almacén: ");
						    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
										PlayersData[playerid][Materiales] =  PlayersData[playerid][Materiales] - strval(cmdtext[19]);
									}
									else
									{
										SendInfoMessage(playerid, 0, "904", "Este almacén se encuentra cerrado");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "736", "No tiene esa cantidad de materiales para depositar");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "738", "Mínimo puede depositar 1 de materiales y máximo 2000");
							}
						}
			    	}
					// COMANDO: /Depositar Facción
					else if (strfind(cmdtext, "/Depositar Facción ", true) == 0 ||
						strfind(cmdtext, "/Depositar Faccion ", true) == 0)
					{
		    	        if ( PlayersData[playerid][Rango] == 0 )
		    	        {
						    new MyNearFaccion = GetNearFaccion(playerid);
						    if ( MyNearFaccion != -1 )
						    {
						        if ( MyNearFaccion == PlayersData[playerid][Faccion])
								{
							        if (PlayersData[playerid][Dinero] >= strval(cmdtext[19]) )
							        {
									    if (IsNotZero(playerid, strval(cmdtext[19])))
									    {
								            FaccionData[MyNearFaccion][Deposito] = FaccionData[MyNearFaccion][Deposito] + strval(cmdtext[19]);
								            GivePlayerMoneyEx(playerid, -strval(cmdtext[19]));

									        new MsgDepositarFaccion[MAX_TEXT_CHAT];
									        format(MsgDepositarFaccion, sizeof(MsgDepositarFaccion), "Ha depositado $%i en la facción, su nuevo saldo es: $%i", strval(cmdtext[19]), FaccionData[MyNearFaccion][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
							    			SendInfoMessage(playerid, 1, MsgDepositarFaccion, "Facción: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "383", "No tienes esa cantidad de dinero para depositar en la facción");
									}
				    			}
								else
								{
									SendInfoMessage(playerid, 0, "859", "Esta no es su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "384", "Usted no es líder");
						}
			    	}
					// COMANDO: /Depositar Cajero
					else if (strfind(cmdtext, "/Depositar Cajero ", true) == 0)
					{
						ShowDepositarBancoFunction(playerid, true, strval(cmdtext[18]));
			    	}
					// COMANDO: /Depositar Negocio
					else if (strfind(cmdtext, "/Depositar Negocio ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
						        if (PlayersData[playerid][Dinero] >= strval(cmdtext[19]) )
						        {
								    if (IsNotZero(playerid, strval(cmdtext[19])))
								    {
							            NegociosData[BizzId][Deposito] = NegociosData[BizzId][Deposito] + strval(cmdtext[19]);
							            GivePlayerMoneyEx(playerid, -strval(cmdtext[19]));

								        new MsgDepositarNegocio[MAX_TEXT_CHAT];
								        format(MsgDepositarNegocio, sizeof(MsgDepositarNegocio), "Ha depositado $%i del negocio, su nuevo saldo es: $%i", strval(cmdtext[19]), NegociosData[BizzId][Deposito]);
						    			SendInfoMessage(playerid, 1, " ", "|___________________  Negocio ___________________|");
						    			SendInfoMessage(playerid, 1, MsgDepositarNegocio, "Negocio: ");
						    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
					    			}
						        }
								else
								{
									SendInfoMessage(playerid, 0, "310", "No tienes esa cantidad de dinero para depositar en el negocio");
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "309", "No te encuentras en ningún negocio");
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "305", "Quizás quiso decir: /Depositar Cajero [Cantidad], Negocio [Cantidad], Facción [Cantidad]}");
					}
				}
				// COMANDO: /Consultar
				else if (strfind(cmdtext, "/Consultar", true) == 0)
				{
					// COMANDO: /Consultar Almacén
				  	if (strcmp("/Consultar Almacén", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
						strcmp("/Consultar Almacen", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 )
				    {
						new MyNearAlmacen = IsPlayerInAlmacen(playerid,true);
						if ( MyNearAlmacen != -1 )
						{
					        new MsgConsultarAlmacen[MAX_TEXT_CHAT];
					        new MaterialesAlmacen;
					        new OpenAlmacen;

				            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
				            {
								MaterialesAlmacen = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen];
								OpenAlmacen = true;
							}
							else
							{
								SendInfoMessage(playerid, 0, "902", "Este almacén se encuentra cerrado");
							}

							if ( OpenAlmacen )
							{
						        format(MsgConsultarAlmacen, sizeof(MsgConsultarAlmacen), "Quedan %i materiales en este almacén", MaterialesAlmacen);
				    			SendInfoMessage(playerid, 1, " ", "|___________________ Almacén ___________________|");
				    			SendInfoMessage(playerid, 1, MsgConsultarAlmacen, "Almacén: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
			    			}
						}
				    }
					// COMANDO: /Consultar Facción
				  	else if (strcmp("/Consultar Facción", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
						strcmp("/Consultar Faccion", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 )
				    {
		    	        if ( PlayersData[playerid][Rango] == 0 )
		    	        {
						    new MyNearFaccion = GetNearFaccion(playerid);
						    if ( MyNearFaccion != -1 )
						    {
						        if ( MyNearFaccion == PlayersData[playerid][Faccion])
								{
							        new MsgConsultarFaccion[MAX_TEXT_CHAT];
							        format(MsgConsultarFaccion, sizeof(MsgConsultarFaccion), "Tiene usted $%i en su facción", FaccionData[MyNearFaccion][Deposito]);
					    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
					    			SendInfoMessage(playerid, 1, MsgConsultarFaccion, "Facción: ");
					    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				    			}
								else
								{
									SendInfoMessage(playerid, 0, "857", "Esta no es su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "385", "Usted no es líder");
						}
			    	}
					// COMANDO: /Consultar Cajero
				  	else if (strcmp("/Consultar Cajero", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
				    {
					    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
					    {
					        new MsgConsultarBanco[MAX_TEXT_CHAT];
					        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "Tiene usted $%i en su cuenta bancaria", PlayersData[playerid][Banco]);
			    			SendInfoMessage(playerid, 1, " ", "|___________________  Banco ___________________|");
			    			SendInfoMessage(playerid, 1, MsgConsultarBanco, "Banco: ");
			    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
						}
			    	}
					// COMANDO: /Consutlar Negocio
				  	else if (strcmp("/Consultar Negocio", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
				    {
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
						        new MsgConsultarNegocio[MAX_TEXT_CHAT];
						        format(MsgConsultarNegocio, sizeof(MsgConsultarNegocio), "Tiene usted $%i en el fondo de su negocio", NegociosData[BizzId][Deposito]);
				    			SendInfoMessage(playerid, 1, " ", "|___________________  Negocio ___________________|");
				    			SendInfoMessage(playerid, 1, MsgConsultarNegocio, "Negocio: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "311", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Consultar Extorsión
				  	else if ( strcmp("/Consultar Casa", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 )
					{
						if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new houseid = PlayersDataOnline[playerid][InPickupCasa];
	                        if ( IsMyHouse(playerid, houseid) )
	                        {
						        new MsgCasaConsultar[MAX_TEXT_CHAT];
						        format(MsgCasaConsultar, sizeof(MsgCasaConsultar), "Tiene $%i ganancias de alquiler en la casa", HouseData[houseid][Deposito]);
				    			SendInfoMessage(playerid, 1, " ", "|___________________ Casa ___________________|");
				    			SendInfoMessage(playerid, 1, MsgCasaConsultar, "Casa: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
							}
							else
							{
								SendInfoMessage(playerid, 0, "602", "Esta no es su casa");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "601", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Consultar Extorsión
				  	else if (strcmp("/Consultar Extorsión", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20 ||
	                    	 strcmp("/Consultar Extorsion", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20 )
					{
					    if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
	                        if ( strfind(NegociosData[BizzId][Extorsion], PlayersDataOnline[playerid][NameOnline], false) == 0 && strlen(NegociosData[BizzId][Extorsion]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	                        {
						        new MsgExtorsionConsultar[MAX_TEXT_CHAT];
						        format(MsgExtorsionConsultar, sizeof(MsgExtorsionConsultar), "Tiene acumulado $%i de extorsión en este negocio", NegociosData[BizzId][DepositoExtorsion]);
				    			SendInfoMessage(playerid, 1, " ", "|___________________ Extorsión ___________________|");
				    			SendInfoMessage(playerid, 1, MsgExtorsionConsultar, "Extorsión: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
							}
							else
							{
								SendInfoMessage(playerid, 0, "355", "Usted no extorsiona este negocio");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "354", "No te encuentras en ningún negocio");
						}
					}
					else if (strcmp("/Consultar Local", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				    {
				        if (PlayersDataOnline[playerid][InPickupLocal] == -1) return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
				        if (PlayersDataOnline[playerid][InPickupLocal] != PlayersData[playerid][Local]) return SendInfoMessage(playerid, 0, "", "Este no es tu local.");
				        new string[150];

				        SendInfoMessage(playerid, 1, " ", "|___________________  Local ___________________|");
						format(string, sizeof(string), "Usted tiene $%i en el fondo de su local", LocalData[PlayersDataOnline[playerid][InPickupLocal]][Deposito]); SendInfoMessage(playerid, 1, string, "Local: ");
		    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				    }
			    	else
			    	{
						SendInfoMessage(playerid, 0, "306", "Quizás quiso decir: /Consultar {Cajero, Negocio, Extorsión, Facción, Casa, Almacén, Local}");
					}
				}
				// COMANDO: /Aparcar
			  	else if (strcmp("/Aparcar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
			    {
					if ( IsPlayerInAnyVehicle(playerid) )
					{
						if ( IsVehicleMyVehicle(playerid, GetPlayerVehicleID(playerid))  )
						{
						    AparcarVehicle(playerid, GetPlayerVehicleID(playerid));
						}
						else
						{
							SendInfoMessage(playerid, 0, "331", "Este no es su vehículo");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "332", "Suba a su vehículo para poder aparcarlo");
					}
			    }
				// COMANDO: /Comprar
		  		else if (strfind(cmdtext, "/Comprar", true) == 0)
			    {
					// COMANDO: /Comprar Ropa
				  	if (strcmp("/Comprar Ropa", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 50 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
	                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 50);
									    GivePlayerMoneyEx(playerid, -50);
										SetPlayerSelectedTypeSkin(playerid, false);
									}
									else
									{
										SendInfoMessage(playerid, 0, "290", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "291", "No tienes suficiente dinero para comprar ropa, cuesta $50");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "292", "No te encuentras cerca del vestidor");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "293", "No estas en una tienda de ropas");
						}
				    }
					// COMANDO: /Comprar Lentes
				  	else if (strcmp("/Comprar Lentes", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForGafas(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_GAFAS;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1572", "Con éste skin no puedes usar lentes!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1539", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1540", "No tienes suficiente dinero para comprar lentes, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1541", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1542", "No estas en una tienda de lentes");
						}
				    }
					// COMANDO: /Comprar Casco
				  	else if (strcmp("/Comprar Casco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForCasco(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_CASCO;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1576", "Con éste skin no puedes usar cascos!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1577", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1578", "No tienes suficiente dinero para comprar cascos, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1579", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1580", "No estas en una tienda de cascos");
						}
				    }
					// COMANDO: /Comprar Reloj
				  	else if (strcmp("/Comprar Reloj", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForRelojes(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_RELOJES;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1573", "Con éste skin no puedes usar relojes!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1564", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1565", "No tienes suficiente dinero para comprar un reloj, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1566", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1567", "No estas en una tienda de relojes");
						}
				    }
					// COMANDO: /Comprar Gorra
				  	else if (strcmp("/Comprar Gorra", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForGorras(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_GORRAS;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1574", "Con éste skin no puedes usar gorras!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1569", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1568", "No tienes suficiente dinero para comprar una gorra, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1570", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1571", "No estas en una tienda de gorras");
						}
				    }
					// COMANDO: /Comprar Boina
				  	else if (strcmp("/Comprar Boina", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] >= 27 && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] <= 29 )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 150 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForBoina(PlayersData[playerid][Skin]) )
										{
											if ( IsPlayerNotFullObjects(playerid, true) != -1 )
											{
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 150);
											    GivePlayerMoneyEx(playerid, -150);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_BOINA;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1558", "Con éste skin no puedes usar boinas!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1559", "Ésta barbería no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1560", "No tienes suficiente dinero para darte comprar una boina, cuesta $150");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1561", "No te encuentras en el lugar para comprar boinas!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1562", "No estas en una barbería");
						}
				    }
					// COMANDO: /Comprar Peluca
				  	else if (strcmp("/Comprar Peluca", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] >= 27 && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] <= 29 )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 150 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForHair(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 150);
											    GivePlayerMoneyEx(playerid, -150);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_PELO;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1543", "Con éste skin no puedes usar pelucas!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1544", "Ésta barbería no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1545", "No tienes suficiente dinero para darte comprar una peluca, cuesta $150");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1546", "No te encuentras en el lugar para comprar pelucas!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1547", "No estas en una barbería");
						}
				    }
				  	else if (strcmp("/Comprar Casa", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new HouseId = PlayersDataOnline[playerid][InPickupCasa];
				            if ( strlen(HouseData[HouseId][Dueno]) == 2 )
				            {
							    if ( PlayersData[playerid][House] == -1 && PlayersData[playerid][Alquiler] == -1 )
							    {
					                if ( GetPlayerScore(playerid) >= HouseData[HouseId][Level] )
					                {
										if (PlayersData[playerid][Dinero] >= HouseData[HouseId][Price] )
										{
			                                format(HouseData[HouseId][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
			                                GivePlayerMoneyEx(playerid, -HouseData[HouseId][Price]);
			                                SaveHouse(HouseId, true);
			                                GameTextForPlayer(playerid, "~B~Has ~G~comprado una Casa!", 2000, 0);
			                                PlayersData[playerid][House] = HouseId;
			                                PlayersData[playerid][Alquiler] = -1;
										}
										else
										{
											SendInfoMessage(playerid, 0, "588", "No tienes suficiente dinero para comprar esta Casa!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "589", "No tiene suficiente nivel para comprar esta casa");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "590", "Debe vender o salir de su actual alquiler de la casa donde vive, para poder comprar esta");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "591", "Esta casa ya tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "592", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Comprar Negocio
				  	else if (strcmp("/Comprar Negocio", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				    {
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( strlen(NegociosData[BizzId][Dueno]) == 1 )
				            {
				                if ( GetPlayerScore(playerid) >= NegociosData[BizzId][Level] )
				                {
									if (PlayersData[playerid][Dinero] >= NegociosData[BizzId][Precio] )
									{
		                                format(NegociosData[BizzId][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
		                                format(NegociosData[BizzId][Extorsion], MAX_PLAYER_NAME, "No");
		                                GivePlayerMoneyEx(playerid, -NegociosData[BizzId][Precio]);
		                                DataSaveBizz(BizzId, true);
		                                GameTextForPlayer(playerid, "~B~Has ~G~comprado un negocio!", 2000, 0);
									}
									else
									{
										SendInfoMessage(playerid, 0, "296", "No tienes suficiente dinero para comprar este negocio");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "611", "No tiene suficiente nivel para comprar éste negocio");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "297", "Este negocio ya tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "298", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Comprar Agua
				  	else if (strcmp("/Comprar Agua", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 5 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
								    	SetBuyBares(playerid, 0, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "424", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "425", "No tienes suficiente dinero para comprar agua, cuesta $5");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "426", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "427", "No estas en un bar");
						}
					}
					// COMANDO: /Comprar Refresco
				  	else if (strcmp("/Comprar Refresco", cmdtext, true, 18) == 0 && strlen(cmdtext) == 17)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 10 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
	   							        SetBuyBares(playerid, 1, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "428", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "429", "No tienes suficiente dinero para comprar un regfresco, cuesta $10");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "430", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "431", "No estas en un bar");
						}
					}
					else if (strcmp("/Comprar Cerveza", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 15 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
								        SetBuyBares(playerid, 2, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "432", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "433", "No tienes suficiente dinero para comprar una cerveza, cuesta $5");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "434", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "435", "No estas en un bar");
						}
				    }
					else if (strcmp("/Comprar Vodka", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 20 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
								        SetBuyBares(playerid, 3, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "436", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "437", "No tienes suficiente dinero para comprar una botella de Vodka, cuesta $20");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "438", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "439", "No estas en un bar");
						}
				    }
				    else if (strcmp("/Comprar Local", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 )
				    {
				        new localID = GetPlayerCloseLocal(playerid);
				        if (localID != -1)
				        {
				            if (!IsLocalForSale(localID)) return SendInfoMessage(playerid, 0, "", "Este local no esta a la venta.");
				            if (PlayersData[playerid][Local] != -1) return SendInfoMessage(playerid, 0, "", "Tu no puedes tener mas locales.");
				            if (GetPlayerScoreEx(playerid) < LocalData[localID][Nivel]) return SendInfoMessage(playerid, 0, "", "No tienes suficiente nivel para comprar este local.");
				            if (PlayersData[playerid][Dinero] < LocalData[localID][Precio]) return SendInfoMessage(playerid, 0, "", "No tienes suficiente dinero para comprar este local.");

	                        PlayersData[playerid][Local] = localID;
	                        GivePlayerMoneyEx(playerid, -LocalData[localID][Precio]);
                       		//////////////////
							format(LocalData[localID][Owner], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
				            SaveLocal(localID, true);
				            LocalData[localID][Seguro] = false;

				            GameTextForPlayer(playerid, "~B~Has ~G~comprado un Local!", 2000, 0);
				            SendInfoMessage(playerid, 3, "", "Compraste este local.");
				            return 1;
				        }
				        else return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "440", "Quizás quiso decir: /Comprar {Ropa, Negocio, Agua, Vodka, Refresco, Cerveza, Casa, Peluca, Lentes, Boina, Gorra, Reloj, Casco, Local}");
					}
			    }
			    // /Contrato [ID] [Precio]
	  			else if (strfind(cmdtext, "/Contrato ", true) == 0)
			    {
			        //
					new PlayeridSplit[5], MoneySplit[10];
					new fPos;
					fPos = strfind(cmdtext, " ", false, 11);
					strmid(PlayeridSplit, cmdtext, 10, fPos);
					strmid(MoneySplit, cmdtext, fPos, strlen(cmdtext));

				    if ( IsPlayerNearEx(playerid, strval(PlayeridSplit),
						 "564",
						 "563",
						 "562",
						 "El jugador que le deseas hacerle un contrato no se encuentra conectado",
						 "El jugador que le deseas hacerle un contrato no se ha logueado",
						 "El jugador que le deseas hacerle un contrato no se encuentra cerca de tí") )
				    {
				        if ( strval(MoneySplit) >= 1000 )
				        {
							new MsgContrato[MAX_TEXT_CHAT];
							new MsgContratoToPlayer[MAX_TEXT_CHAT];
							format(MsgContrato, sizeof(MsgContrato), "Has dado un contrato a %s, donde acuerdas el monto de $%i en el, espera que firme", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix], strval(MoneySplit));
							format(MsgContratoToPlayer, sizeof(MsgContratoToPlayer), "Has recibido un contrato de %s, donde acuerda el monto de $%i, usa (/Aceptar Contrato), para finalizarlo", PlayersDataOnline[playerid][NameOnlineFix], strval(MoneySplit));

							SendInfoMessage(playerid, 3, "0", MsgContrato);
							SendInfoMessage(strval(PlayeridSplit),3, "0", MsgContratoToPlayer);
							PlayersDataOnline[strval(PlayeridSplit)][Contrato][0] = playerid;
							PlayersDataOnline[strval(PlayeridSplit)][Contrato][1] = strval(MoneySplit);
						}
						else
						{
							SendInfoMessage(playerid, 0, "561", "La cantidad mínima para un contrato es $1000");
						}
				    }
			    }
				// COMANDO: (Quitar
		  		else if (strfind(cmdtext, "/Quitar", true) == 0)
			    {
					// COMANDO: /Quitar Licencia [Tipo] [ID]
			  		if (strfind(cmdtext, "/Quitar Arma ", true) == 0)
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[13]),
							 "774",
							 "775",
							 "776",
							 "El jugador que le deseas quitarle el arma no se encuentra conectado",
							 "El jugador que le deseas quitarle el arma no se ha logueado",
							 "El jugador que le deseas quitarle el arma no se encuentra cerca de tí") )
					    {
							new QuitarWeapons, QuitarAmmo; QuitarWeapons = GetPlayerWeapon(strval(cmdtext[13])); QuitarAmmo = GetPlayerAmmo(strval(cmdtext[13]));
					        if ( CheckWeapondCheat(playerid) && CheckWeapondCheat(strval(cmdtext[13])) && QuitarWeapons != 0 )
					        {
								if ( IsPlayerNotVehicleWeapondAction(playerid, strval(cmdtext[13])) )
								{
							        new MsgQuitarArmaIntentar[MAX_TEXT_CHAT];
							        format(MsgQuitarArmaIntentar, sizeof(MsgQuitarArmaIntentar), "quitar el arma a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
									if (IntentarAccion(playerid, MsgQuitarArmaIntentar, random(2)))
									{
										RemovePlayerWeapond(strval(cmdtext[13]), QuitarWeapons);
			                            GivePlayerWeaponEx(playerid, QuitarWeapons, QuitarAmmo);
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "773", "Este jugador no tiene ningún arma en las manos!");
							}
					    }
				    }
					// COMANDO: /Quitar Licencia [Tipo] [ID]
			  		else if (strfind(cmdtext, "/Quitar Licencia ", true) == 0)
				    {
						if ( PlayersData[playerid][Faccion] == LSPD ||
							 PlayersData[playerid][Faccion] == SFPD)
					    {
							// COMANDO: /Quitar Licencia Armas [ID]
					  		if (strfind(cmdtext, "/Quitar Licencia Armas ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[23]),
									 "546",
									 "545",
									 "544",
									 "El jugador que le deseas quitarle la licencia de Armas no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Armas no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Armas no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][0] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Armas a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Armas a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Armas", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][Licencias][0] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "543", "Este jugador no tiene licencia de Armas!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Coche [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Coche ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[23]),
									 "542",
									 "541",
									 "540",
									 "El jugador que le deseas quitarle la licencia de Coche no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Coche no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Coche no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][1] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Coche a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Coche a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Coche", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][Licencias][1] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "539", "Este jugador no tiene licencia de coche!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Tren [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Tren ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[22]),
									 "1051",
									 "1050",
									 "1048",
									 "El jugador que le deseas quitarle la licencia de Tren no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Tren no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Tren no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[22])][Licencias][1] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Tren a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Tren a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Tren", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[22]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Licencias][6] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1047", "Este jugador no tiene licencia de tren!");
									}
							    }
						    }

							// COMANDO: /Quitar Licencia Camión [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Camión ", true) == 0 ||
							  		 strfind(cmdtext, "/Quitar Licencia Camion ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[24]),
									 "538",
									 "537",
									 "536",
									 "El jugador que le deseas quitarle la licencia de Camión no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Camión no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Camión no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[24])][Licencias][2] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Camión a %s", PlayersDataOnline[strval(cmdtext[24])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Camión a %s", PlayersDataOnline[strval(cmdtext[24])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Camión", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[24]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[24])][Licencias][2] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "535", "Este jugador no tiene licencia de Camión!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Moto [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Moto ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[22]),
									 "534",
									 "533",
									 "532",
									 "El jugador que le deseas quitarle la licencia de Moto no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Moto no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Moto no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[22])][Licencias][3] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Moto a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Moto a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Moto", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[22]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Licencias][3] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "531", "Este jugador no tiene licencia de moto!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Vuelo [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Vuelo ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[23]),
									 "530",
									 "529",
									 "528",
									 "El jugador que le deseas quitarle la licencia de Vuelo no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Vuelo no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Vuelo no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][4] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Vuelo a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Vuelo a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Vuelo", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][Licencias][4] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "527", "Este jugador no tiene licencia de Vuelo!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Bote [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Bote ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[22]),
									 "526",
									 "525",
									 "524",
									 "El jugador que le deseas quitarle la licencia de Bote no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Bote no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Bote no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[22])][Licencias][5] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Bote a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Bote a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Bote", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[22]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Licencias][5] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "522", "Este jugador no tiene licencia de Bote!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Pesca [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Pesca ", true) == 0) // 17
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[23]),
									 "521",
									 "520",
									 "519",
									 "El jugador que le deseas quitarle la licencia de Pesca no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Pesca no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Pesca no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][6] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Pesca a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Pesca a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Pesca", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][LicenciaPesca] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "518", "Este jugador no tiene licencia de Pesca!");
									}
							    }
						    }
							else
							{
								SendInfoMessage(playerid, 0, "517", "Quizás quiso decir: /Quitar Licencia {Armas [ID], Coche [ID], Camión [ID], Moto [ID], Vuelo [ID], Bote [ID], Pesca [ID], Tren [ID]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "522", "Usted no es LSPD ni SFPD");
						}
					}
					// COMANDO: /Quitar Extorsión [ID]
			  		else if (strfind(cmdtext, "/Quitar Extorsión ", true) == 0 || strfind(cmdtext, "/Quitar Extorsion ", true) == 0)
				    {
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[18]),
									 "343",
									 "344",
									 "345",
									 "El jugador que le deseas quitarle el poder de extorsión de su negocio no se encuentra conectado",
									 "El jugador que le deseas quitarle el poder de extorsión de su negocio no se ha logueado",
									 "El jugador que le deseas quitarle el poder de extorsión de su negocio no se encuentra cerca de tí") )
							    {
		                            if ( IsMyExtorsion(strval(cmdtext[18]), BizzId) )
		                            {
									    format(NegociosData[BizzId][Extorsion], MAX_PLAYER_NAME, "No");
										new MsgToMe[MAX_TEXT_CHAT];
										new MsgToExtorsionista[MAX_TEXT_CHAT];
										format(MsgToMe, sizeof(MsgToMe), "Has dado el poder de extorsión de este negocio a %s", PlayersDataOnline[strval(cmdtext[18])][NameOnlineFix]);
										format(MsgToExtorsionista, sizeof(MsgToExtorsionista), "%s te ha dado el poder de extorsionarle este negocio", PlayersDataOnline[playerid][NameOnlineFix]);
										SendInfoMessage(playerid, 3, "0", MsgToMe);
										SendInfoMessage(strval(cmdtext[18]), 3, "0", MsgToExtorsionista);
										UpdateTextLabelNegocio(BizzId);
									}
									else
									{
										SendInfoMessage(playerid, 0, "350", "Este jugador no es extorsionista de su negocio");
									}
							    }
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "351", "No te encuentras en ningún negocio");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "346", "Quizás quiso decir: /Quitar Extorsión [ID]");
					}
			    }
				// COMANDO: /Finalizar Entrevista
				else if (strcmp("/Finalizar Entrevista", cmdtext, true, 21) == 0 && strlen(cmdtext) == 21)
			    {
					if ( PlayersData[playerid][Faccion] == CNN )
				    {
					    if ( EntrevistaState )
					    {
					        EntrevistaState = false;
							for (new i = 0; i < MAX_PLAYERS; i++)
							{
							    if ( IsPlayerConnected(i) && i != playerid && PlayersDataOnline[i][IsEntrevistado] )
							    {
									PlayersDataOnline[i][IsEntrevistado] = false;
									SendInfoMessage(i, 3, "0", "Ha finalizado la entrevista actual");
								}
							}
							PlayersDataOnline[playerid][IsEntrevistado] = false;
							SendInfoMessage(playerid, 3, "0", "Ha cerrado la entrevista actual");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "565", "No hay ninguna entrevista abierta en estos momentos");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "566", "Usted no es CNN");
					}
			    }
				// COMANDO: /Sacar [ID]
		  		else if (strfind(cmdtext, "/Sacar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == CNN )
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[7]),
							 "567",
							 "568",
							 "569",
							 "El jugador que le deseas sacar de la entrevista no se encuentra conectado",
							 "El jugador que le deseas sacar de la entrevista no se ha logueado",
							 "El jugador que le deseas sacar de la entrevista no se encuentra cerca de tí") )
					    {
							if ( PlayersDataOnline[strval(cmdtext[7])][IsEntrevistado] )
					        {
								new MsgEntrevistar[MAX_TEXT_CHAT];
								new MsgEntrevistarToPlayer[MAX_TEXT_CHAT];
								format(MsgEntrevistar, sizeof(MsgEntrevistar), "Has sacado a %s de la entrevista", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
								format(MsgEntrevistarToPlayer, sizeof(MsgEntrevistarToPlayer), "El reportero %s te ha sacado de la entrevista", PlayersDataOnline[playerid][NameOnlineFix]);

								SendInfoMessage(playerid, 3, "0", MsgEntrevistar);
								SendInfoMessage(strval(cmdtext[7]), 3, "0", MsgEntrevistarToPlayer);
								PlayersDataOnline[strval(cmdtext[7])][IsEntrevistado] = false;
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "570", "Este jugador no se encuentra en una entrevista!");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "571", "Usted no es CNN");
					}
			    }
				// COMANDO: /En [Texto]
		  		else if (strfind(cmdtext, "/En ", true) == 0)
			    {
			        if ( PlayersDataOnline[playerid][IsEntrevistado] )
			        {
						new Float:MyPos[3];
						new FoundCNN;
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
						    GetPlayerPos(i, MyPos[0], MyPos[1], MyPos[2]);
						    if ( IsPlayerConnected(i) && i != playerid && IsPlayerInRangeOfPoint(playerid, 4.0, MyPos[0], MyPos[1], MyPos[2]) && PlayersData[i][Faccion] == CNN )
						    {
						        FoundCNN = true;
							}
						}

				        if ( FoundCNN )
				        {
					        new MsgTransmision[MAX_TEXT_CHAT];
					        format(MsgTransmision, sizeof(MsgTransmision), "** Entrevistado %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);

				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN] )
								{
							   		SendClientMessage(i, COLOR_DE_TRANSMISION, MsgTransmision);
						   		}
					   		}
						}
						else
						{
							SendInfoMessage(playerid, 0, "572", "Tienes que estar al lado de un CNN para poder ser entrevistado");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "573", "No te encuentras en ninguna entrevista!");
					}
			    }
				// COMANDO: /Entrevistar [ID]
		  		else if (strfind(cmdtext, "/Entrevistar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == CNN )
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[13]),
							 "574",
							 "575",
							 "576",
							 "El jugador que le deseas entrevistar no se encuentra conectado",
							 "El jugador que le deseas entrevistar no se ha logueado",
							 "El jugador que le deseas entrevistar no se encuentra cerca de tí") )
					    {
					        if ( !PlayersDataOnline[strval(cmdtext[13])][IsEntrevistado] )
					        {
								new MsgEntrevistar[MAX_TEXT_CHAT];
								new MsgEntrevistarToPlayer[MAX_TEXT_CHAT];
								if (!EntrevistaState)
								{
									format(MsgEntrevistar, sizeof(MsgEntrevistar), "Has agregado a la entrevista a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
									EntrevistaState = true;
								}
								else
								{
									format(MsgEntrevistar, sizeof(MsgEntrevistar), "Has abierto una nueva entrevista, con %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
								}
								format(MsgEntrevistarToPlayer, sizeof(MsgEntrevistarToPlayer), "El reportero %s te a incluido en la entrevista", PlayersDataOnline[playerid][NameOnlineFix]);
								SendInfoMessage(playerid, 3, "0", MsgEntrevistar);
								SendInfoMessage(strval(cmdtext[13]), 3, "0", MsgEntrevistarToPlayer);
								PlayersDataOnline[strval(cmdtext[13])][IsEntrevistado] = true;
							}
							else
							{
								SendInfoMessage(playerid, 0, "577", "Ya ese jugador se encuentra en la entrevista!");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "578", "Usted no es reportero");
					}
				}
				// COMANDO: /Multar [ID] [Precio] [Razón]
		  		else if (strfind(cmdtext, "/Multar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        new playerid_multa = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new dinero_multa = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						cmdtext[GetPosSpace(cmdtext, 3)];
					    if ( IsPlayerNearEx(playerid, playerid_multa,
							 "815",
							 "816",
							 "817",
							 "El jugador que desea darle una multa no se encuentra conectado",
							 "El jugador que desea darle una multa no se encuentra logueado",
							 "El jugador que desea darle una multa no se encuentra cerca de tí") )
					    {
					        if ( dinero_multa > 0 && dinero_multa <= 20000 )
					        {
								new MsgMulta[MAX_TEXT_CHAT];
								new MsgMultaToPlayer[MAX_TEXT_CHAT];
								format(MsgMulta, sizeof(MsgMulta), "Le has dado un multa de $%i a %s; Razón: %s", dinero_multa, PlayersDataOnline[playerid_multa][NameOnlineFix], cmdtext[GetPosSpace(cmdtext, 3)]);
								format(MsgMultaToPlayer, sizeof(MsgMultaToPlayer), "%s te ha dado una multa $%i usa (/Aceptar Multa); Razón: %s", PlayersDataOnline[playerid][NameOnlineFix], dinero_multa, cmdtext[GetPosSpace(cmdtext, 3)]);
	                            SendInfoMessage(playerid, 3, "0", MsgMulta);
	                            SendInfoMessage(playerid_multa, 3, "0", MsgMultaToPlayer);

								PlayersDataOnline[playerid_multa][VMulta][0] = playerid;
								PlayersDataOnline[playerid_multa][VMulta][1] = dinero_multa;
							}
							else
							{
								SendInfoMessage(playerid, 0, "814", "El monto mínimo de una factura es $1 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "813", "Usted no es LSPD ni SFPD");
					}
				}
				// COMANDO: /Arrestar [ID] [Tiempo]
		  		else if (strfind(cmdtext, "/Arrestar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        new TypeJail;
				        if ( PlayersData[playerid][Faccion] == SFPD )
				        {
					        TypeJail = 0;
						}
						else
						{
					        TypeJail = 1;
						}
						if ( IsPlayerInRangeOfPoint(playerid, 10.0,
							JailsType[TypeJail][PosX_Preso],
							JailsType[TypeJail][PosY_Preso],
							JailsType[TypeJail][PosZ_Preso]) )
						{
							new PlayeridSplit[5], TiempoSplit[5];
							new fPos;
							fPos = strfind(cmdtext, " ", false, 11);
							strmid(PlayeridSplit, cmdtext, 10, fPos);
							strmid(TiempoSplit, cmdtext, fPos, strlen(cmdtext));

						    if ( IsPlayerNearEx(playerid, strval(PlayeridSplit),
								 "579",
								 "580",
								 "581",
								 "El jugador que le deseas arrestar no se encuentra conectado",
								 "El jugador que le deseas arrestar no se ha logueado",
								 "El jugador que le deseas arrestar no se encuentra cerca de tí") )
						    {
								if ( strval(TiempoSplit) >= 0 && PlayersData[strval(PlayeridSplit)][IsInJail] != -1 && strval(TiempoSplit) <= 500 ||
									 strval(TiempoSplit) > 0 && PlayersData[strval(PlayeridSplit)][IsInJail] == -1 && strval(TiempoSplit) <= 500)
								{
									new MsgArestarMe[MAX_TEXT_CHAT];
									new MsgArestarInfo[MAX_TEXT_CHAT];
									new MsgArestarInfoToPlayer[MAX_TEXT_CHAT];

									if ( PlayersData[strval(PlayeridSplit)][IsInJail] == -1 )
									{
										format(MsgArestarMe, sizeof(MsgArestarMe), "arrestó a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfo, sizeof(MsgArestarInfo), "Has arrestado a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfoToPlayer, sizeof(MsgArestarInfoToPlayer), "Has sido arrestado por el %s",  FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else if ( strval(TiempoSplit) == 0 )
									{
										format(MsgArestarMe, sizeof(MsgArestarMe), "le quitó el el arresto a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfo, sizeof(MsgArestarInfo), "Le quitaste el arresto a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfoToPlayer, sizeof(MsgArestarInfoToPlayer), "Has sido liberado por el %s",  FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgArestarMe, sizeof(MsgArestarMe), "le modifico la condena a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfo, sizeof(MsgArestarInfo), "Le modificasnte la condena a %s por %i minutos", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix], strval(TiempoSplit));
										format(MsgArestarInfoToPlayer, sizeof(MsgArestarInfoToPlayer), "El %s %s te ha modificado la condena a %i minutos", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], strval(TiempoSplit));
									}

									PlayersData[strval(PlayeridSplit)][IsInJail] = TypeJail;
									PlayersData[strval(PlayeridSplit)][Jail] = gettime() + (strval(TiempoSplit) * 60);
									SetPlayerJail(strval(PlayeridSplit));

									Acciones(playerid, 8, MsgArestarMe);
									SendInfoMessage(playerid, 3, "0", MsgArestarInfo);
									SendInfoMessage(strval(PlayeridSplit),3, "0", MsgArestarInfoToPlayer);
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "582", "El mínimo de tiempo para el arresto es 0 que sería liberar y 500 minutos como máximo");
								}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "583", "No se encuentra cerca de la celdas");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "584", "Usted no es SFPD ni LSPD");
					}
				}
			  	else if (strcmp("/Banco", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
				  	ShowHomeBanco(playerid);
				}
				// COMANDO: /Autorizar [ID]
		  		else if (strfind(cmdtext, "/Autorizar ", true) == 0 )
			    {
					if ( PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 1 ||
						 PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 1 )
				    {
				        new playeridAutorizar = strval(cmdtext[11]);
				        if ( PlayersData[playerid][Faccion] == PlayersData[playeridAutorizar][Faccion] )
				        {
							if ( PlayersData[playeridAutorizar][Rango] > 3 )
							{
							    if ( IsPlayerNearEx(playerid, playeridAutorizar,
									 "1034",
									 "1035",
									 "1036",
									 "El jugador que le deseas autorizar no se encuentra conectado",
									 "El jugador que le deseas autorizar no se ha logueado",
									 "El jugador que le deseas autorizar no se encuentra cerca de tí") )
							    {
							        if ( !PlayersDataOnline[playeridAutorizar][IsAutorizado] )
							        {
										new MsgAutorizarMe[MAX_TEXT_CHAT];
										new MsgAutorizarYou[MAX_TEXT_CHAT];

										format(MsgAutorizarMe, sizeof(MsgAutorizarMe), "Le has asignado a %s ponerse un equipo en el armario de la estación.", PlayersDataOnline[playeridAutorizar][NameOnlineFix]);
										format(MsgAutorizarYou, sizeof(MsgAutorizarYou), "%s te ha asignado ponerte un equipo en el armario de la estación", PlayersDataOnline[playerid][NameOnlineFix]);
										SendInfoMessage(playerid, 3, "0", MsgAutorizarMe);
										SendInfoMessage(playeridAutorizar, 3, "0", MsgAutorizarYou);

							            PlayersDataOnline[playeridAutorizar][IsAutorizado] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1037", "Ya el jugador ese está autorizado!");
									}
							    }
						    }
						    else
						    {
			   					SendInfoMessage(playerid, 0, "1038", "Este jugador no necesita autorización, es ya un gran rango en la facción");
							}
					    }
					    else
					    {
		   					SendInfoMessage(playerid, 0, "1039", "El jugador que desea darle autorización no pertenece a su facción");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1040", "Usted no puede autorizar!");
					}
			    }
				// COMANDO: /Robar
		  		else if (strfind(cmdtext, "/Robar", true) == 0)
			    {
					// COMANDO: /Robar Local
				  	if (strcmp("/Robar Local", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				  	{
				  	    if ( PlayersData[playerid][Rango] == 0 &&
						  	 (PlayersData[playerid][Faccion] == COLTS ||
							  PlayersData[playerid][Faccion] == AK ||
							  PlayersData[playerid][Faccion] == VELTRAN ||
							  PlayersData[playerid][Faccion] == HEORS) )
				  	    {
				  	        new fac;
				  	        if ( PlayersData[playerid][Faccion] == COLTS )
				  	        {
				  	            fac = COLTS_R;
							}
							else if ( PlayersData[playerid][Faccion] == AK )
							{
							    fac = AK_R;
							}
							else if ( PlayersData[playerid][Faccion] == VELTRAN )
							{
							    fac = VELTRAN_R;
							}
							else if ( PlayersData[playerid][Faccion] == HEORS )
							{
							    fac = HEORS_R;
							}
				  	        if ( RobosInfo[fac][TimeLast] <= gettime() )
				  	        {
						        if ( PlayersDataOnline[playerid][InPickupNegocio] )
						        {
						            new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
									if ( !NegociosData[BizzId][Lock] )
									{
									    if ( !RobosInfo[fac][BizzIDR] )
									    {
										    RobosInfo[fac][City] = GetMyNearCity(playerid);
										    if ( RobosInfo[fac][City] )
										    {
										        RobosInfo[fac][City] = SFPD;
										    }
										    else
										    {
										        RobosInfo[fac][City] = LSPD;
											}

										    if ( GetMaxPlayersByFaccion(RobosInfo[fac][City]) >= 4 )
										    {
											    RobosInfo[fac][TimeLast] = gettime() + TIME_R_READY;
											    AddRobo(fac, BizzId);
										    }
										    else
										    {
												SendInfoMessage(playerid, 0, "1492", "En estos momentos no puedes robar este negocio!");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1493", "Ya se encuentran en un robo, no puedes empezar otro!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1494", "El negocio debe estar abierto para poder atracarlo!");
									}
						        }
						        else
						        {
									SendInfoMessage(playerid, 0, "1495", "Debes estar en la puerta de un negocio para robar!");
								}
				  	        }
							else
							{
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a atracar un local", (RobosInfo[fac][TimeLast] - gettime()) / 60, ((RobosInfo[fac][TimeLast] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "1496", MsgPersonalizado);
							}
					  	}
					  	else
					  	{
							SendInfoMessage(playerid, 0, "1497", "Usted no puede robar locales!");
					    }
				  	}
					// COMANDO: /Robar Gas
				  	else if (strcmp("/Robar Gas", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
				  	{
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
							    if ( !DataCars[MyNearCar][Lock] ||
									 strlen(DataCars[MyNearCar][Dueno]) == 1 && MyNearCar <= MAX_CAR_DUENO )
								{
						  	        if ( !PlayersData[playerid][Lata] )
									{
								        if ( DataCars[MyNearCar][Gas] > 20 )
								        {
											if ( !DataCars[MyNearCar][LlenandoGas] )
											{
											    if ( !DataCars[MyNearCar][StateEncendido] )
											    {
												    if( IntentarAccion(playerid, "sacarle gas al vehículo", random(2)))
												    {
												        DataCars[MyNearCar][Gas] = DataCars[MyNearCar][Gas] - 20;
														PlayersData[playerid][Lata] = true;
														UpdateGasAndOil(MyNearCar);
													}
												}
												else
												{
													SendInfoMessage(playerid, 0, "1103", "El vehículo debe estár apagado para robarle gas");
												}
											}
											else
											{
												SendInfoMessage(playerid, 0, "1102", "Éste vehículo está llenando el deposito, no puede robarle gas");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1101", "Este coche no tiene gas para robarle!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1100", "Su lata ya se encuentra llena de gas");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1099", "Éste vehículo se encuentra cerrado!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1098", "No puede robar gas desde adentro del vehículo");
							}
						}
				  	}
				  	else
				  	{
						SendInfoMessage(playerid, 0, "1498", "Quizás quiso decir: /Robar {Gas, Local}");
				    }

			  	}
				// COMANDO: /Dar
		  		else if (strfind(cmdtext, "/Dar", true) == 0)
			    {
			    	// COMANDO: /Dar Habilidad [ID] [ID_Habilidad]
			    	if (strfind(cmdtext, "/Dar Habilidad ", true) == 0 )
				    {
						if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 3 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 5 )
					    {
							new PlayeridSplit[5], HabilidadSplit[5];
							new fPos;
							fPos = strfind(cmdtext, " ", false, 16);
							strmid(PlayeridSplit, cmdtext, 15, fPos);
							strmid(HabilidadSplit, cmdtext, fPos, strlen(cmdtext));

						    if ( IsPlayerNearEx(playerid, strval(PlayeridSplit),
								 "481",
								 "482",
								 "483",
								 "El jugador que le deseas dar una habilidad no se encuentra conectado",
								 "El jugador que le deseas dar una habilidad no se ha logueado",
								 "El jugador que le deseas dar una habilidad no se encuentra cerca de tí") )
						    {
								if ( strval(HabilidadSplit) >= 1 && strval(HabilidadSplit) <= 6 )
								{
									if ( PlayersData[strval(PlayeridSplit)][Habilidad] != (strval(HabilidadSplit) - 1) )
									{
										new MsgDarHabilidadMe[MAX_TEXT_CHAT];
										new MsgDarHabilidadInfo[MAX_TEXT_CHAT];
										new MsgDarHabilidadInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarHabilidadMe, sizeof(MsgDarHabilidadMe), "le da una habilidad de %s a %s", HabilidadesName[strval(HabilidadSplit) - 1], PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgDarHabilidadInfo, sizeof(MsgDarHabilidadInfo), "Has dado una habilidad de %s a %s", HabilidadesName[strval(HabilidadSplit) - 1], PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgDarHabilidadInfoToPlayer, sizeof(MsgDarHabilidadInfoToPlayer), "Has recibido una habilidad de %s del profesor %s", HabilidadesName[strval(HabilidadSplit) - 1], PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarHabilidadMe);
										SendInfoMessage(playerid, 3, "0", MsgDarHabilidadInfo);
										SendInfoMessage(strval(PlayeridSplit),3, "0", MsgDarHabilidadInfoToPlayer);

										PlayersData[strval(PlayeridSplit)][Habilidad] = strval(HabilidadSplit) - 1;
										SetPlayerFightingStyle(strval(PlayeridSplit), HabilidadesID[strval(HabilidadSplit) - 1]);
									}
									else
									{
										SendInfoMessage(playerid, 0, "484", "Este jugador ya tiene esa habildad");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "485", "Las habilidades tiene que estar entre 1 y 6, consulte /Ayuda Habilidades");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "486", "Usted no es profesor");
						}
				    }
					// COMANDO: /Dar Licencia [Licencia] [ID]
			  		else if (strfind(cmdtext, "/Dar Licencia ", true) == 0 )
				    {
						if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 2 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 4 )
					    {
		   					// COMANDO: /Dar Licencia Armas [ID]
					  		if (strfind(cmdtext, "/Dar Licencia Armas ", true) == 0) //20
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[20]),
									 "487",
									 "488",
									 "489",
									 "El jugador que le deseas dar una licencia de Armas no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Armas no se ha logueado",
									 "El jugador que le deseas dar una licencia de Armas no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Licencias][0] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Armas a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Armas a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Armas del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Licencias][0] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "490", "Ya ese jugador tiene una licencia de Armas");
									}
							    }
						    }
		   					// COMANDO: /Dar Licencia Coche [ID]
							else if (strfind(cmdtext, "/Dar Licencia Coche ", true) == 0) //20
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[20]),
									 "491",
									 "492",
									 "493",
									 "El jugador que le deseas dar una licencia de Coche no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Coche no se ha logueado",
									 "El jugador que le deseas dar una licencia de Coche no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Licencias][1] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Coche a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Coche a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Coche del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Licencias][1] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "494", "Ya ese jugador tiene una licencia de Coche");
									}
							    }
						    }
		   					// COMANDO: /Dar Licencia Tren [ID]
							else if (strfind(cmdtext, "/Dar Licencia Tren ", true) == 0) //20
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[19]),
									 "1046",
									 "1045",
									 "1044",
									 "El jugador que le deseas dar una licencia de Tren no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Tren no se ha logueado",
									 "El jugador que le deseas dar una licencia de Tren no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Licencias][6] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Tren a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Tren a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Tren del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Licencias][6] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1043", "Ya ese jugador tiene una licencia de Tren");
									}
							    }
						    }

							// COMANDO: /Dar Licencia Camión [ID]
							else if (strfind(cmdtext, "/Dar Licencia Camión ", true) == 0 ||
									 strfind(cmdtext, "/Dar Licencia Camion ", true) == 0 ) //20
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[21]),
									 "514",
									 "515",
									 "516",
									 "El jugador que le deseas dar una licencia de Camión no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Camión no se ha logueado",
									 "El jugador que le deseas dar una licencia de Camión no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[21])][Licencias][2] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Camión a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Camión a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Camión del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[21]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[21])][Licencias][2] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "495", "Ya ese jugador tiene una licencia de Camión");
									}
							    }
						    }
							// COMANDO: /Dar Licencia Moto [ID]
							else if (strfind(cmdtext, "/Dar Licencia Moto ", true) == 0 ) // 14
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[19]),
									 "496",
									 "497",
									 "498",
									 "El jugador que le deseas dar una licencia de Moto no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Moto no se ha logueado",
									 "El jugador que le deseas dar una licencia de Moto no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Licencias][3] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Moto a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Moto a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Moto del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Licencias][3] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "499", "Ya ese jugador tiene una licencia de Moto");
									}
							    }
						    }
							// COMANDO: /Dar Licencia Vuelo [ID]
							else if (strfind(cmdtext, "/Dar Licencia Vuelo ", true) == 0 ) //20
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[20]),
									 "500",
									 "501",
									 "502",
									 "El jugador que le deseas dar una licencia de Vuelo no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Vuelo no se ha logueado",
									 "El jugador que le deseas dar una licencia de Vuelo no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Licencias][4] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Vuelo a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Vuelo a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Vuelo del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Licencias][4] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "503", "Ya ese jugador tiene una licencia de Vuelo");
									}
							    }
						    }
						    // COMANDO: /Dar Licencia Bote [ID]
							else if (strfind(cmdtext, "/Dar Licencia Bote ", true) == 0 ) // 14
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[19]),
									 "504",
									 "505",
									 "506",
									 "El jugador que le deseas dar una licencia de Bote no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Bote no se ha logueado",
									 "El jugador que le deseas dar una licencia de Bote no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Licencias][5] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Bote a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Bote a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Bote del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Licencias][5] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "507", "Ya ese jugador tiene una licencia de Bote");
									}
							    }
						    }
							// COMANDO: /Dar Licencia Pesca [ID]
							else if (strfind(cmdtext, "/Dar Licencia Pesca ", true) == 0 ) //20
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[20]),
									 "508",
									 "509",
									 "510",
									 "El jugador que le deseas dar una licencia de Pesca no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Pesca no se ha logueado",
									 "El jugador que le deseas dar una licencia de Pesca no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][LicenciaPesca] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Pesca a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Pesca a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Pesca del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][LicenciaPesca] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "511", "Ya ese jugador tiene una licencia de Pesca");
									}
							    }
						    }
					        else
					        {
								SendInfoMessage(playerid, 0, "512", "Quizás quiso decir: /Dar Licencia {Armas [ID], Coche [ID], Camión [ID], Moto [ID], Vuelo [ID], Bote [ID], Pesca [ID], Tren [ID]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "513", "Usted no es licenciero");
						}
				    }
					// COMANDO: /Dar Idioma [Idioma] [ID]
			  		else if (strfind(cmdtext, "/Dar Idioma ", true) == 0 )
				    {
						if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 3 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 5)
					    {
		   					// COMANDO: /Dar Idioma Alemán [ID]
					  		if (strfind(cmdtext, "/Dar Idioma Alemán ", true) == 0 || // 12
							  	strfind(cmdtext, "/Dar Idioma Aleman ", true) == 0)
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[19]),
									 "479",
									 "478",
									 "477",
									 "El jugador que le deseas dar un título de alemán no se encuentra conectado",
									 "El jugador que le deseas dar un título de alemán no se ha logueado",
									 "El jugador que le deseas dar un título de alemán no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Idiomas][0] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título alemán a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de alemán a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de alemán de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Idiomas][0] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "480", "Ya ese jugador tiene un título de alemán");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Francés [ID]
							else if (strfind(cmdtext, "/Dar Idioma Francés ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Frances ", true) == 0)
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[20]),
									 "476",
									 "475",
									 "474",
									 "El jugador que le deseas dar un título de Francés no se encuentra conectado",
									 "El jugador que le deseas dar un título de Francés no se ha logueado",
									 "El jugador que le deseas dar un título de Francés no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Idiomas][1] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Francés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Francés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Francés de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Idiomas][1] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "472", "Ya ese jugador tiene un título de francés");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Portugués [ID]
							else if (strfind(cmdtext, "/Dar Idioma Portugués ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Portugues ", true) == 0)
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[22]),
									 "471",
									 "470",
									 "469",
									 "El jugador que le deseas dar un título de Portugués no se encuentra conectado",
									 "El jugador que le deseas dar un título de Portugués no se ha logueado",
									 "El jugador que le deseas dar un título de Portugués no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[22])][Idiomas][2] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Portugués a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Portugués a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Portugués de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[22]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Idiomas][2] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "473", "Ya ese jugador tiene un título de Portugués");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Italiano [ID]
							else if (strfind(cmdtext, "/Dar Idioma Italiano ", true) == 0 )
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[21]),
									 "468",
									 "462",
									 "467",
									 "El jugador que le deseas dar un título de Italiano no se encuentra conectado",
									 "El jugador que le deseas dar un título de Italiano no se ha logueado",
									 "El jugador que le deseas dar un título de Italiano no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[21])][Idiomas][3] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Italiano a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Italiano a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Italiano de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[21]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[21])][Idiomas][3] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "461", "Ya ese jugador tiene un título de Italiano");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Inglés [ID]
							else if (strfind(cmdtext, "/Dar Idioma Inglés ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Ingles ", true) == 0)
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[19]),
									 "460",
									 "459",
									 "458",
									 "El jugador que le deseas dar un título de Inglés no se encuentra conectado",
									 "El jugador que le deseas dar un título de Inglés no se ha logueado",
									 "El jugador que le deseas dar un título de Inglés no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Idiomas][4] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Inglés a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Inglés a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Inglés de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Idiomas][4] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "457", "Ya ese jugador tiene un título de Inglés");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Japonés [ID]
							else if (strfind(cmdtext, "/Dar Idioma Japonés ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Japones ", true) == 0)
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[20]),
									 "456",
									 "455",
									 "454",
									 "El jugador que le deseas dar un título de Japonés no se encuentra conectado",
									 "El jugador que le deseas dar un título de Japonés no se ha logueado",
									 "El jugador que le deseas dar un título de Japonés no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Idiomas][5] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Japonés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Japonés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Japonés de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Idiomas][5] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "453", "Ya ese jugador tiene un título de Japonés");
									}
							    }
						    }
					        else
					        {
								SendInfoMessage(playerid, 0, "451", "Quizás quiso decir: /Dar Idioma {Alemán [ID], Francés [ID], Portugués [ID], Italiano [ID], Inglés [ID], Japonés [ID]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "452", "Usted no es profesor");
						}
				    }
					// COMANDO: /Dar Dados [ID]
			  		else if (strfind(cmdtext, "/Dar Dados ", true) == 0 )
				    {
					    if ( IsObjectInBolsillo(playerid, 2) )
					    {
						    if ( IsPlayerNearEx(playerid, strval(cmdtext[11]),
								 "1075",
								 "1076",
								 "1077",
								 "El jugador que le deseas dar los dados no se encuentra conectado",
								 "El jugador que le deseas dar los dados no se ha logueado",
								 "El jugador que le deseas dar los dados no se encuentra cerca de tí") )
						    {
						        if ( !IsObjectInBolsillo(strval(cmdtext[11]), 2) )
						        {
						            if ( IsNotFullBolsillo(playerid, strval(cmdtext[11]), "El jugador que le desea dar sus dados, tiene los bolsillos llenos") )
						            {
										RemoveObjectBolsillo(playerid, 2);
										AddObjectBolsillo(strval(cmdtext[11]), 2);
										new MsgMeDarDados[MAX_TEXT_CHAT];
										format(MsgMeDarDados, sizeof(MsgMeDarDados), "le ha dado unos dados a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarDados);
						        	}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "380", "El jugador que desea darle los dados ya tiene unos");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "379", "Tú no tienes dados");
						}
				    }
					// COMANDO: /Dar Agenda [ID]
			  		else if (strfind(cmdtext, "/Dar Agenda ", true) == 0 )
				    {
					    if ( IsObjectInBolsillo(playerid, 4) )
					    {
						    if ( IsPlayerNearEx(playerid, strval(cmdtext[12]),
								 "1070",
								 "1071",
								 "1072",
								 "El jugador que le desea dar su agenda no se encuentra conectado",
								 "El jugador que le desea dar su agenda no se ha logueado",
								 "El jugador que le desea dar su agenda no se encuentra cerca de tí") )
						    {
						        if ( !IsObjectInBolsillo(strval(cmdtext[12]), 4) )
						        {
						            if ( IsNotFullBolsillo(playerid, strval(cmdtext[12]), "El jugador que le desea dar su agenda, tiene los bolsillos llenos") )
						            {
										RemoveObjectBolsillo(playerid, 4);
										AddObjectBolsillo(strval(cmdtext[12]), 4);

										for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
										{
											format(AgendaData[strval(cmdtext[12])][i][NameC], MAX_AGENDA_NAME, "%s", AgendaData[playerid][i][NameC]);
											AgendaData[strval(cmdtext[12])][i][NumberC] = AgendaData[playerid][i][NumberC];
											AgendaData[strval(cmdtext[12])][i][IsBlackList] = AgendaData[playerid][i][IsBlackList];
										}

										new MsgMeDarDados[MAX_TEXT_CHAT];
										format(MsgMeDarDados, sizeof(MsgMeDarDados), "le ha dado una agenda a %s", PlayersDataOnline[strval(cmdtext[12])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarDados);
						        	}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "1069", "El jugador que desea darle su agenda ya tiene una");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1073", "Tú no tienes agenda!");
						}
				    }
					// COMANDO: /Dar Bolsa [ID]
			  		else if (strfind(cmdtext, "/Dar Bolsa ", true) == 0 )
				    {
				        new PlayerToGiveBolsa = strval(cmdtext[11]);
					    if ( PlayersData[playerid][HaveBolsa] )
					    {
						    if ( IsPlayerNearEx(playerid,PlayerToGiveBolsa,
								 "1232",
								 "1233",
								 "1234",
								 "El jugador que le desea dar su bolsa no se encuentra conectado",
								 "El jugador que le desea dar su bolsa no se ha logueado",
								 "El jugador que le desea dar su bolsa no se encuentra cerca de tí") )
						    {
						        if ( !PlayersData[PlayerToGiveBolsa][HaveBolsa] )
						        {
									PlayersData[playerid][HaveBolsa] = false;
									PlayersData[PlayerToGiveBolsa][HaveBolsa] = true;

									for(new i = 0; i<4; i++)
									{
										PlayersData[PlayerToGiveBolsa][Bolsa][i] = PlayersData[playerid][Bolsa][i];
										PlayersData[PlayerToGiveBolsa][BolsaC][i] = PlayersData[playerid][BolsaC][i];
									}
                                    CleanArticulosBolsa(playerid);

									new MsgMeDarBolsa[MAX_TEXT_CHAT];
									format(MsgMeDarBolsa, sizeof(MsgMeDarBolsa), "le ha dado una bolsa a %s", PlayersDataOnline[PlayerToGiveBolsa][NameOnlineFix]);
						        	Acciones(playerid, 8, MsgMeDarBolsa);
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "1231", "El jugador que desea darle su bolsa ya tiene una");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1235", "Tú no tienes una bolsa");
						}
				    }
					// COMANDO: /Dar Patines [ID]
			  		else if (strfind(cmdtext, "/Dar Patines ", true) == 0 )
				    {
					    if ( IsObjectInBolsillo(playerid, 1) )
					    {
						    if ( IsPlayerNearEx(playerid, strval(cmdtext[13]),
								 "1078",
								 "1079",
								 "1080",
								 "El jugador que le deseas dar los patines no se encuentra conectado",
								 "El jugador que le deseas dar los patines no se ha logueado",
								 "El jugador que le deseas dar los patines no se encuentra cerca de tí") )
						    {
						        if ( !IsObjectInBolsillo(strval(cmdtext[13]), 1) )
						        {
						            if ( IsNotFullBolsillo(playerid, strval(cmdtext[13]), "El jugador que le desea dar sus patines, tiene los bolsillos llenos") )
						            {
										RemoveObjectBolsillo(playerid, 1);
										AddObjectBolsillo(strval(cmdtext[13]), 1);
										new MsgMeDarPatines[MAX_TEXT_CHAT];
										format(MsgMeDarPatines, sizeof(MsgMeDarPatines), "le ha dado unos patines a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarPatines);
						        	}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "378", "El jugador que desea darle los patines ya tiene unos");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "377", "Tú no tienes patines");
						}
				    }
					// COMANDO: /Dar Cartera [ID] [ID_Cartera]
			  		else if (strfind(cmdtext, "/Dar Cartera ", true) == 0)
				    {
				        new PlayerGiveO = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new CarteraID   = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNearEx(playerid, PlayerGiveO,
							 "1325",
							 "1324",
							 "1326",
							 "El jugador que le deseas dar algo de su cartera no se encuentra conectado",
							 "El jugador que le deseas dar algo de su cartera no se ha logueado",
							 "El jugador que le deseas dar algo de su cartera no se encuentra cerca de tí") )
					    {
					        if ( CarteraID >= 1 && CarteraID <= MAX_COUNT_CARTERA )
					        {
						        if ( IsNotFullCartera(playerid, PlayerGiveO, "El jugador que desea darle algo de su cartera tiene su cartera llena!") )
						        {
						            CarteraID--;
						            if ( PlayersData[playerid][Cartera][CarteraID] != CARTERA_TYPE_NADA )
						            {
						                AddObjectToCartera(PlayerGiveO, PlayersData[playerid][Cartera][CarteraID], PlayersData[playerid][CarteraC][CarteraID], PlayersData[playerid][CarteraT][CarteraID], PlayersData[playerid][CarteraI][CarteraID]);
										new ObjectRemove = RemoveObjectToCartera(playerid, CarteraID);

  										new MsgMeCartera[MAX_TEXT_CHAT];

										format(MsgMeCartera, sizeof(MsgMeCartera), "le ha dado un %s a %s", CarteraNames[ObjectRemove], PlayersDataOnline[PlayerGiveO][NameOnlineFix]);
								        Acciones(playerid, 8, MsgMeCartera);

										new MsgDarCarteraME[MAX_TEXT_CHAT];
										new MsgDarCarteraYOU[MAX_TEXT_CHAT];
									    format(MsgDarCarteraME, sizeof(MsgDarCarteraME), "%s te dió un %s", PlayersDataOnline[playerid][NameOnlineFix], CarteraNames[ObjectRemove]);
									    format(MsgDarCarteraYOU, sizeof(MsgDarCarteraYOU), "Le díste un %s", CarteraNames[ObjectRemove], PlayersDataOnline[PlayerGiveO][NameOnlineFix]);
										SendInfoMessage(playerid, 2, "0", MsgDarCarteraYOU);
										SendInfoMessage(PlayerGiveO, 2, "0", MsgDarCarteraME);
						            }
						            else
						            {
										SendInfoMessage(playerid, 0, "1322", "No tienes nada en esa parte de la cartera!");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1323", "El número de cartera debe estár comprendido entre 1 y 6");
							}
					    }
				    }
					// COMANDO: /Dar Móvil [ID]
			  		else if (strfind(cmdtext, "/Dar Móvil ", true) == 0 || strfind(cmdtext, "/Dar Movil ", true) == 0 )
				    {
					    if ( PlayersData[playerid][Phone] != 0 )
					    {
						    if (  PlayersDataOnline[playerid][InCall] == -1 )
						    {
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[11]),
									 "1081",
									 "1082",
									 "1083",
									 "El jugador que le deseas dar su móvil no se encuentra conectado",
									 "El jugador que le deseas dar su móvil no se ha logueado",
									 "El jugador que le deseas dar su móvil no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[11])][Phone] == 0 )
							        {
										PlayersData[strval(cmdtext[11])][Phone] = PlayersData[playerid][Phone];
										PlayersData[playerid][Phone] = 0;
										RemoveObjectBolsillo(playerid, 3);
										AddObjectBolsillo(strval(cmdtext[11]), 3);

										new MsgMeDarMovil[MAX_TEXT_CHAT];
										format(MsgMeDarMovil, sizeof(MsgMeDarMovil), "le ha dado un móvil a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarMovil);

							        	new query[200];
							        	mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='%i' WHERE `Nombre`='%e';", DIR_USERS, PlayersData[strval(cmdtext[11])][Phone], PlayersDataOnline[strval(cmdtext[11])][NameOnline]);
							        	mysql_query(dataBase, query, false);
							        	mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='0' WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
							        	mysql_query(dataBase, query, false);
									}
							        else
							        {
										SendInfoMessage(playerid, 0, "374", "El jugador que desea darle su móvil ya tiene uno");
									}
						        }
							}
							else
							{
								SendInfoMessage(playerid, 0, "375", "Finalize su llamada telefónica antes de dar su móvil");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "376", "Tú no tienes móvil");
						}
				    }
					// COMANDO: /Dar Extorsión [ID]
			  		else if (strfind(cmdtext, "/Dar Extorsión ", true) == 0 || strfind(cmdtext, "/Dar Extorsion ", true) == 0)
				    {
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
	                            if ( strlen(NegociosData[BizzId][Extorsion]) == 2 )
	                            {
								    if ( IsPlayerNearEx(playerid, strval(cmdtext[15]),
										 "1084",
										 "1085",
										 "1086",
										 "El jugador que le deseas darle el poder de extorsión de su negocio no se encuentra conectado",
										 "El jugador que le deseas darle el poder de extorsión de su negocio no se ha logueado",
										 "El jugador que le deseas darle el poder de extorsión de su negocio no se encuentra cerca de tí") )
								    {
									    format(NegociosData[BizzId][Extorsion], MAX_PLAYER_NAME, "%s", PlayersDataOnline[strval(cmdtext[15])][NameOnline]);
										new MsgToMe[MAX_TEXT_CHAT];
										new MsgToExtorsionista[MAX_TEXT_CHAT];
										format(MsgToMe, sizeof(MsgToMe), "Has dado el poder de extorsión de este negocio a %s", PlayersDataOnline[strval(cmdtext[15])][NameOnlineFix]);
										format(MsgToExtorsionista, sizeof(MsgToExtorsionista), "%s te ha dado el poder de extorsionarle este negocio", PlayersDataOnline[playerid][NameOnlineFix]);
										SendInfoMessage(playerid, 3, "0", MsgToMe);
										SendInfoMessage(strval(cmdtext[15]), 3, "0", MsgToExtorsionista);
										UpdateTextLabelNegocio(BizzId);
								    }
								}
								else
								{
									SendInfoMessage(playerid, 0, "352", "Sólo puede haber un extorsionista por negocio");
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "320", "No te encuentras en ningún negocio");
						}
				    }
					// COMANDO: /Dar Llaves Amigo [ID]
			  		else if (strfind(cmdtext, "/Dar Llaves Amigo ", true) == 0)
				    {
				        new getid;
				        if (sscanf(cmdtext[18], "u", getid)) return SendSyntaxError(playerid, "Dar Llaves Amigo", "Dar Llaves Amigo 12.");
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new HouseId = PlayersDataOnline[playerid][InPickupCasa];
							if ( IsMyHouse(playerid, HouseId) )
				            {
							    if ( IsPlayerNearEx(playerid, getid,
									 "1211",
									 "1212",
									 "1213",
									 "El jugador que le deseas dar las llaves de la casa no se encuentra conectado",
									 "El jugador que le deseas dar las llaves de la casa no se ha logueado",
									 "El jugador que le deseas dar las llaves de la casa no se encuentra cerca de tí") )
							    {
									if ( IsPlayerInHouseFriend(getid, HouseId) == -1 )
									{
										AddPlayerHouseFriend(getid, HouseId);

										new MsgLlavesCasaToMe[150];
										new MsgLlavesCasaToYou[150];
										new MsgLlavesCasaMe[150];
										format(MsgLlavesCasaMe, sizeof(MsgLlavesCasaMe), "le da una copia de llaves de su casa a %s", PlayersDataOnline[getid][NameOnlineFix]);
										format(MsgLlavesCasaToMe, sizeof(MsgLlavesCasaToMe), "Le diste una copia de las llaves de tu casa a %s", PlayersDataOnline[getid][NameOnlineFix]);
										format(MsgLlavesCasaToYou, sizeof(MsgLlavesCasaToYou), "%s te dió una copia de las llaves de su casa", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgLlavesCasaMe);
										SendInfoMessage(playerid, 3, "0", MsgLlavesCasaToMe);
										SendInfoMessage(getid, 3, "0", MsgLlavesCasaToYou);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1214", "Ya este jugador tiene las llaves de tu casa");
									}
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1209", "Ésta no es su casa");
							}
				        }
				        else if ( PlayersDataOnline[playerid][InPickupLocal] != -1 )
				        {
							new localID = PlayersDataOnline[playerid][InPickupLocal];
							if (PlayersData[playerid][Local] != localID) return SendInfoMessage(playerid, 0, "", "Este no es tu local.");
							if (!IsPlayerNear(playerid, getid)) return 1;
							if (IsPlayerInLocalKeys(getid, localID)) return SendInfoMessage(playerid, 0, "", "Este jugador ya tiene las llaves de tu local");
							if (AddPlayerInLocalKeys(getid, localID))
							{
							    new MsgLlavesLocalMe[150];
								new MsgLlavesLocalToMe[150];
								new MsgLlavesLocalToYou[150];
								format(MsgLlavesLocalMe, sizeof(MsgLlavesLocalMe), "le da una copia de llaves de su local a %s", PlayersDataOnline[getid][NameOnlineFix]);
								format(MsgLlavesLocalToMe, sizeof(MsgLlavesLocalToMe), "Le diste una copia de las llaves de tu local a %s", PlayersDataOnline[getid][NameOnlineFix]);
								format(MsgLlavesLocalToYou, sizeof(MsgLlavesLocalToYou), "%s te dió una copia de las llaves de su local", PlayersDataOnline[playerid][NameOnlineFix]);

								Acciones(playerid, 8, MsgLlavesLocalMe);
								SendInfoMessage(playerid, 3, "0", MsgLlavesLocalToMe);
								SendInfoMessage(getid, 3, "0", MsgLlavesLocalToYou);
							}
							else return SendInfoMessage(playerid, 0, "", "No tienes mas copias de llaves de este local para dar.");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1210", "No te encuentras en ninguna casa o local");
						}
					}
					// COMANDO: /Dar Llaves [ID]
			  		else if (strfind(cmdtext, "/Dar Llaves ", true) == 0)
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
							if ( IsVehicleMyVehicle(playerid, MyNearCar)  )
							{
							    if ( IsPlayerNearEx(playerid, strval(cmdtext[12]),
									 "340",
									 "341",
									 "342",
									 "El jugador que le deseas dar las llaves de su vehículo no se encuentra conectado",
									 "El jugador que le deseas dar las llaves de su vehículo no se ha logueado",
									 "El jugador que le deseas dar las llaves de su vehículo no se encuentra cerca de tí") )
							    {
									if ( PlayersData[strval(cmdtext[12])][Car] == -1 )
									{
										PlayersDataOnline[playerid][DarLlaves] = strval(cmdtext[12]);
										new MsgDialogDarLlaves[MAX_TEXT_CHAT];
										format( MsgDialogDarLlaves , sizeof(MsgDialogDarLlaves), "{F0F0F0}¿Seguro que quiere darle las llaves de su vehículo a %s?\n{F50000}IMPORTANTE: Perderá totalemnte el control de su vehículo!", PlayersDataOnline[strval(cmdtext[12])][NameOnlineFix]);
										ShowPlayerDialogEx(playerid, 7, DIALOG_STYLE_MSGBOX, "{00A5FF}Pasar llaves de jugador a jugador", MsgDialogDarLlaves, "Si", "No");
									}
									else
									{
										SendInfoMessage(playerid, 0, "339", "El jugador que le desea dar las llaves de su vehículo, ya tiene uno");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "338", "Este no es su vehículo");
							}
						}
				    }

					// COMANDO: /Dar Artículo [ID] [ID_Bolsa]
			  		else if (strfind(cmdtext, "/Dar Artículo ", true) == 0 ||
					  		 strfind(cmdtext, "/Dar Articulo ", true) == 0)
				    {
				        new playeridBolsa = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[13]),
							 "1250",
							 "1251",
							 "1252",
							 "El jugador que le deseas dar un chaleco no se encuentra conectado",
							 "El jugador que le deseas dar un chaleco no se ha logueado",
							 "El jugador que le deseas dar un chaleco no se encuentra cerca de tí") )
					    {
							GiveArticlePlayerToPlayer(playerid, playeridBolsa, BolsaID);
						}
				    }
					// COMANDO: /Dar Chaleco [ID]
			  		else if (strfind(cmdtext, "/Dar Chaleco ", true) == 0)
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[13]),
							 "273",
							 "274",
							 "275",
							 "El jugador que le deseas dar un chaleco no se encuentra conectado",
							 "El jugador que le deseas dar un chaleco no se ha logueado",
							 "El jugador que le deseas dar un chaleco no se encuentra cerca de tí") )
					    {
							new Float:Chaleco1;
							GetPlayerArmour(playerid, Chaleco1);
							if ( Chaleco1 != 0.0 )
							{
								new MsgDarMe[MAX_TEXT_CHAT];
								new MsgDar[MAX_TEXT_CHAT];

								SetPlayerArmourEx(strval(cmdtext[13]), Chaleco1);
								SetPlayerArmourEx(playerid, -Chaleco1);

								format(MsgDar, sizeof(MsgDar), "Le has dado un chaleco a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
								format(MsgDarMe, sizeof(MsgDarMe), "le ha dado un chaleco a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
						        Acciones(playerid, 8, MsgDarMe);
						        SendInfoMessage(playerid, 2, "0", MsgDar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "276", "Usted no tienes ningún chaleco puesto encima.");
							}
						}
				    }
					// COMANDO: /Dar Arma [ID]
			  		else if (strfind(cmdtext, "/Dar Arma ", true) == 0)
				    {
					    if ( IsPlayerNearEx(playerid, strval(cmdtext[10]),
							 "277",
							 "278",
							 "279",
							 "El jugador que le deseas darle un arma no se encuentra conectado",
							 "El jugador que le deseas darle un arma no se ha logueado",
							 "El jugador que le deseas darle un arma no se encuentra cerca de tí") )
					    {
							new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
					        if ( CheckWeapondCheat(playerid) && CheckWeapondCheat(strval(cmdtext[10])) && MyWeapons != 0)
					        {
					            if ( IsPlayerNotVehicleWeapondAction(playerid, strval(cmdtext[10])) )
					            {
						            RemovePlayerWeapond(playerid, MyWeapons);
						            GivePlayerWeaponEx(strval(cmdtext[10]), MyWeapons, MyAmmo);

									new MsgDar[MAX_TEXT_CHAT];
									new MsgDarMe[MAX_TEXT_CHAT];
							        format(MsgDar, sizeof(MsgDar), "Le has dado %s a %s.", SlotNameWeapon[MyWeapons], PlayersDataOnline[strval(cmdtext[10])][NameOnlineFix]);
							        format(MsgDarMe, sizeof(MsgDarMe), "le ha dado un arma tipo %s a %s", SlotNameWeapon[MyWeapons], PlayersDataOnline[strval(cmdtext[10])][NameOnlineFix]);
							        Acciones(playerid, 8, MsgDarMe);
							        SendInfoMessage(playerid, 2, "0", MsgDar);
						        }
							}
							else
							{
								SendInfoMessage(playerid, 0, "280", "No tienes un arma en las manos!");
							}
					    }
				    }
					// COMANDO: /Dar ArmaEx [ID] [Munición]
			  		else if (strfind(cmdtext, "/Dar ArmaEx ", true) == 0)
				    {
				        new PlayerGiveWeapon = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new AmmoWeapon = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNearEx(playerid, PlayerGiveWeapon,
							 "982",
							 "987",
							 "988",
							 "El jugador que le deseas darle un arma no se encuentra conectado",
							 "El jugador que le deseas darle un arma no se ha logueado",
							 "El jugador que le deseas darle un arma no se encuentra cerca de tí") )
					    {
							new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
							new YouWeapons, YouAmmo; YouWeapons = GetPlayerWeapon(PlayerGiveWeapon); YouAmmo = GetPlayerAmmo(PlayerGiveWeapon);
					        if ( CheckWeapondCheat(playerid) && CheckWeapondCheat(PlayerGiveWeapon) && IsNotOneWeapon(MyWeapons) )
					        {
					            if ( IsPlayerNotVehicleWeapondAction(playerid, PlayerGiveWeapon) )
					            {
						            if ( MyAmmo >= 2 )
						            {
						                if ( MyWeapons == YouWeapons )
						                {
						                    if ( MyAmmo > AmmoWeapon )
						                    {
									            RemovePlayerWeapond(playerid, MyWeapons);
									            GivePlayerWeaponEx(playerid, MyWeapons, MyAmmo - AmmoWeapon);

									            RemovePlayerWeapond(PlayerGiveWeapon, MyWeapons);
									            GivePlayerWeaponEx(PlayerGiveWeapon, MyWeapons, YouAmmo + AmmoWeapon);

												new MsgDar[MAX_TEXT_CHAT];
												new MsgDarYou[MAX_TEXT_CHAT];
												new MsgDarMe[MAX_TEXT_CHAT];
										        format(MsgDar, sizeof(MsgDar), "Le has dado %i de munición de un arma %s a %s.", AmmoWeapon, SlotNameWeapon[MyWeapons], PlayersDataOnline[PlayerGiveWeapon][NameOnlineFix]);
										        format(MsgDarYou, sizeof(MsgDarYou), "%s te ha dado %i de munición de un arma %s.", PlayersDataOnline[playerid][NameOnlineFix], AmmoWeapon, SlotNameWeapon[MyWeapons]);
										        format(MsgDarMe, sizeof(MsgDarMe), "le ha dado algunas municiones de un arma tipo %s a %s", SlotNameWeapon[MyWeapons], PlayersDataOnline[PlayerGiveWeapon][NameOnlineFix]);
										        Acciones(playerid, 8, MsgDarMe);
										        SendInfoMessage(playerid, 2, "0", MsgDar);
										        SendInfoMessage(PlayerGiveWeapon, 2, "0", MsgDarYou);
									        }
									        else
									        {
												SendInfoMessage(playerid, 0, "983", "No tienes esa cantidad de munición para dar!");
											}
								        }
								        else
								        {
											SendInfoMessage(playerid, 0, "984", "El jugador que desea dárle municiones, debe tener la misma arma en la mano para dárselas");
										}
							        }
							        else
							        {
										SendInfoMessage(playerid, 0, "985", "Mínimo tienes que tener 2 de munición a dar");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "986", "No tienes un arma en las manos que puedas dar municiones!");
							}
					    }
				    }
					// COMANDO: /Dar Drogas [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Drogas ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNearEx(playerid, playeridto,
							 "627",
							 "625",
							 "626",
							 "El jugador que le deseas darle drogas no se encuentra conectado",
							 "El jugador que le deseas darle drogas no se ha logueado",
							 "El jugador que le deseas darle drogas no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= TheOption )
					        {
					            new MsgDarTempMe[MAX_TEXT_CHAT];
					            new MsgDarTemp[MAX_TEXT_CHAT];
					            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
					            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas drogas a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i drogas a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i drogas", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
						        Acciones(playerid, 8, MsgDarTempMe);
						        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
						        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

						        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - TheOption;
						        PlayersData[playeridto][Drogas] = PlayersData[playeridto][Drogas] + TheOption;
							}
							else
							{
								SendInfoMessage(playerid, 0, "624", "No tienes esa cantidad de drogas para dar!");
							}
					    }
				    }
					// COMANDO: /Dar Ganzúas [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Ganzúas ", true) == 0 ||
						     strfind(cmdtext, "/Dar Ganzuas ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNearEx(playerid, playeridto,
							 "622",
							 "622",
							 "620",
							 "El jugador que le deseas darle ganzúas no se encuentra conectado",
							 "El jugador que le deseas darle ganzúas no se ha logueado",
							 "El jugador que le deseas darle ganzúas no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= TheOption )
					        {
					            new MsgDarTempMe[MAX_TEXT_CHAT];
					            new MsgDarTemp[MAX_TEXT_CHAT];
					            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
					            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas ganzúas a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i ganzúas a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i ganzúas", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
						        Acciones(playerid, 8, MsgDarTempMe);
						        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
						        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

						        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] - TheOption;
						        PlayersData[playeridto][Ganzuas] = PlayersData[playeridto][Ganzuas] + TheOption;
							}
							else
							{
								SendInfoMessage(playerid, 0, "621", "No tienes esa cantidad de ganzúas para dar!");
							}
					    }
				    }
					// COMANDO: /Dar Materiales [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Materiales ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNearEx(playerid, playeridto,
							 "619",
							 "618",
							 "617",
							 "El jugador que le deseas darle Materiales no se encuentra conectado",
							 "El jugador que le deseas darle Materiales no se ha logueado",
							 "El jugador que le deseas darle Materiales no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= TheOption )
					        {
					            if ( IsNotFullMaterialsPlayer(playeridto, TheOption) )
					            {
						            new MsgDarTempMe[MAX_TEXT_CHAT];
						            new MsgDarTemp[MAX_TEXT_CHAT];
						            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
						            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas Materiales a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
						            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i Materiales a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
						            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i Materiales", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
							        Acciones(playerid, 8, MsgDarTempMe);
							        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
							        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

							        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - TheOption;
							        PlayersData[playeridto][Materiales] = PlayersData[playeridto][Materiales] + TheOption;
						        }
						        else
						        {
							    	SendInfoMessage(playerid, 0, "980", "Al jugador que le deseas dar los materiales, no le cabe esa cantidad indícada!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "616", "No tienes esa cantidad de Materiales para dar!");
							}
					    }
				    }
					// COMANDO: /Dar Bombas [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Bombas ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNearEx(playerid, playeridto,
							 "615",
							 "614",
							 "613",
							 "El jugador que le deseas darle Bombas no se encuentra conectado",
							 "El jugador que le deseas darle Bombas no se ha logueado",
							 "El jugador que le deseas darle Bombas no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= TheOption )
					        {
					            new MsgDarTempMe[MAX_TEXT_CHAT];
					            new MsgDarTemp[MAX_TEXT_CHAT];
					            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
					            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas Bombas a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i Bombas a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i Bombas", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
						        Acciones(playerid, 8, MsgDarTempMe);
						        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
						        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

						        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] - TheOption;
						        PlayersData[playeridto][Bombas] = PlayersData[playeridto][Bombas] + TheOption;
							}
							else
							{
								SendInfoMessage(playerid, 0, "612", "No tienes esa cantidad de Bombas para dar!");
							}
					    }
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Arma [ID], ArmaEx [ID] [Munición], Chaleco [ID], Drogas [ID] [Cantidad], Ganzúas [ID] [Cantidad]}");
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Materiales [ID] [Cantidad], Habilidad [ID] [ID_Habilidad], Bombas [ID] [Cantidad], Llaves [ID]}");
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Extorsión [ID], Dados [ID], Móvil [ID], Patines [ID], Llaves Amigo [ID], Artículo [ID] [ID_Bolsa]}");
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Cartera [ID] [ID_Cartera]}");
					}
			    }
				// COMANDO: /Re [ID] [Razón]
				else if (strcmp("/Re", cmdtext, true) == 0) return SendSyntaxError(playerid, "Re", "Re 12 o /Re 12 PG");
				else if (strfind(cmdtext, "/Re ", true) == 0)
				{
				    new Myplayerid = playerid, razon[80], returncmd[150];
				    
			        if (sscanf(cmdtext[4], "us[80]", playerid, razon) == 0)
					{
				        if (Myplayerid == playerid) return SendInfoMessage(playerid, 0, "", "Has introducído tu misma ID.");
					    format(returncmd, sizeof(returncmd), "/Reportar %i %s", playerid, razon);
					    return CallLocalFunction("OnPlayerCommandText", "is", Myplayerid, returncmd);
					}
					else if (sscanf(cmdtext[4], "u", playerid) == 0)
					{
				        if (Myplayerid == playerid) return SendInfoMessage(playerid, 0, "", "Has introducído tu misma ID.");
					    format(returncmd, sizeof(returncmd), "/Reportar %i", playerid);
					    return CallLocalFunction("OnPlayerCommandText", "is", Myplayerid, returncmd);
					}
			        else return SendSyntaxError(playerid, "Re", "Re 12 o /Re 12 PG");
				}
				// COMANDO: /Reportar [ID] [Razón]
				else if (strfind(cmdtext, "/Reportar", true) == 0)
				{
				    if (strfind(cmdtext, "/Reportar ", true) == 0)
				    {
						new Myplayerid = playerid, razon[80];
						
				        if (sscanf(cmdtext[10], "us[80]", playerid, razon) == 0)
				        {
				            if (Myplayerid == playerid) return SendInfoMessage(playerid, 0, "", "Has introducído tu misma ID.");
				            if (IsPlayerLoguedEx(Myplayerid, playerid) == 0) return 1;
				            if (strlen(razon) < 2 || strlen(razon) > 80) return SendInfoMessage(Myplayerid, 0, "", "La razon debe tener un minimo de 2 y maximo de 80 caracteres");
				            
				            new Mystring[150];
							new Astring[150];
						    format(Mystring, sizeof(Mystring), "Reporte: Has reportado a %s[%i]. Razón: %s", PlayersDataOnline[playerid][NameOnline], playerid, razon);
							format(Astring, sizeof(Astring), "%s %s[%i] reporta a %s[%i]. Razón: %s", LOGO_STAFF, PlayersDataOnline[Myplayerid][NameOnline], Myplayerid, PlayersDataOnline[playerid][NameOnline], playerid, razon);
							
						    SendClientMessage(Myplayerid, COLOR_CHEATS_REPORTES, Mystring);
						    MsgCheatsReportsToAdmins(Astring);
				        }
						else if (sscanf(cmdtext[10], "u", playerid) == 0)
				        {
				            if (Myplayerid == playerid) return SendInfoMessage(playerid, 0, "", "Has introducído tu misma ID.");
				            if (IsPlayerLoguedEx(Myplayerid, playerid) == 0) return 1;
				            new MsgReportarInputText[150];
							PlayersDataOnline[Myplayerid][MyLastIdReport] = playerid;
							format(MsgReportarInputText, sizeof(MsgReportarInputText), "{00A5FF}Reportar a %s", PlayersDataOnline[playerid][NameOnlineFix]);
						    ShowPlayerDialogEx(Myplayerid, 11, DIALOG_STYLE_INPUT, MsgReportarInputText, "{F0F0F0}Describa brevemente la razón de su reporte", "Reportar", "Cancelar");
	   						return 1;
				        }
				        else return SendSyntaxError(Myplayerid, "Reportar", "Reportar 2 o /Reportar 2 PG");
				    }
				    else return SendInfoMessage(playerid, 0, "", "Quizas quiso decir: /Reportar [ID] o /Reportar [ID] [Razon]");
				}
				// COMANDO: /Aceptar
				else if (strfind(cmdtext, "/Aceptar", true) == 0)
				{
				    // COMANDO: /Aceptar Reparación
				  	if (strcmp("/Aceptar Reparación", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19 ||
					    strcmp("/Aceptar Reparacion", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19)
			    	{
			    	    if ( PlayersDataOnline[playerid][VRepair][0] != -1 )
			    	    {
				            if ( IsPlayerInTallerEx(playerid) )
				            {
				                if (IsPlayerInAnyVehicle(playerid))
				                {
						            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VRepair][1] )
						            {
										new MsgRepair[MAX_TEXT_CHAT];
										format(MsgRepair, sizeof(MsgRepair), "Reparó éste vehículo por $%i", PlayersDataOnline[playerid][VRepair][1]);
				                        SendInfoMessage(playerid, 3, "0", MsgRepair);
										if ( IsPlayerConnected(PlayersDataOnline[playerid][VRepair][0]) )
										{
											new MsgRepairToPlayer[MAX_TEXT_CHAT];
											format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "Has reparado el vehículo de %s por $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VRepair][1]);
					                        SendInfoMessage(PlayersDataOnline[playerid][VRepair][0], 3, "0", MsgRepairToPlayer);
										}
										FaccionData[PlayersData[PlayersDataOnline[playerid][VRepair][0]][Faccion]][Deposito] = FaccionData[PlayersData[PlayersDataOnline[playerid][VRepair][0]][Faccion]][Deposito] + PlayersDataOnline[playerid][VRepair][1];

										RepairVehicle(GetPlayerVehicleID(playerid));
										SetVehicleHealthEx(GetPlayerVehicleID(playerid), 1000.0);

	    								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VRepair][1]);

										PlayersDataOnline[playerid][VRepair][0] = -1;
										PlayersDataOnline[playerid][VRepair][1] = -1;
										new Float:SaveRepair = 1000.0;
								    	UpdateDamage(playerid, SaveRepair);
									}
									else
									{
										SendInfoMessage(playerid, 0, "696", "No tienes suficiente dinero para reparar el vehículo a ese precio!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "697", "Suba nuevamente al vehículo q que deseaba reparar");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "698", "No has recibido ninguna oferta de reparación!");
						}
					}
				    // COMANDO: /Aceptar aceíte
				  	else if (strcmp("/Aceptar Aceíte", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
					    strcmp("/Aceptar Aceite", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersDataOnline[playerid][VAceite][0] != -1 )
			    	    {
				            if ( IsPlayerInTallerEx(playerid) )
				            {
				                if (IsPlayerInAnyVehicle(playerid))
				                {
						            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VAceite][1] )
						            {
										new MsgRepair[MAX_TEXT_CHAT];
										format(MsgRepair, sizeof(MsgRepair), "Relleno de aceíte éste vehículo por $%i", PlayersDataOnline[playerid][VAceite][1]);
				                        SendInfoMessage(playerid, 3, "0", MsgRepair);
										if ( IsPlayerConnected(PlayersDataOnline[playerid][VAceite][0]) )
										{
											new MsgRepairToPlayer[MAX_TEXT_CHAT];
											format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "Has rellenado éste vehículo de aceíte a %s por $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VAceite][1]);
					                        SendInfoMessage(PlayersDataOnline[playerid][VAceite][0], 3, "0", MsgRepairToPlayer);
										}
										FaccionData[PlayersData[PlayersDataOnline[playerid][VAceite][0]][Faccion]][Deposito] = FaccionData[PlayersData[PlayersDataOnline[playerid][VAceite][0]][Faccion]][Deposito] + PlayersDataOnline[playerid][VAceite][1];

										DataCars[GetPlayerVehicleID(playerid)][Oil] = MAX_OIL_VEHICLE;

	    								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VAceite][1]);

										PlayersDataOnline[playerid][VAceite][0] = -1;
										PlayersDataOnline[playerid][VAceite][1] = -1;

										UpdateGasAndOil(GetPlayerVehicleID(playerid));
									}
									else
									{
										SendInfoMessage(playerid, 0, "1129", "No tienes suficiente dinero para rellenar de aceíte el vehículo a ese precio!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1130", "Suba nuevamente al vehículo que deseaba rellenar de aceíte");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1131", "No has recibido ninguna oferta de aceíte!");
						}
					}
				    // COMANDO: /Aceptar Protección   VProteger
				  	else if (strcmp("/Aceptar Protección", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19 ||
							 strcmp("/Aceptar Proteccion", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19 )
			    	{
			    	    if ( PlayersDataOnline[playerid][VProteger][0] != -1 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][VProteger][0],
								 "727",
								 "728",
								 "729",
								 "El jugador que le iva a proteger se a desconectado",
								 "El jugador que le iva a proteger no se ha logueado",
								 "El jugador que le iva a proteger no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VProteger][1] )
					            {
										new MsgProteger[MAX_TEXT_CHAT];
										new MsgProtegerToPlayer[MAX_TEXT_CHAT];
										format(MsgProteger, sizeof(MsgProteger), "Has aceptado que el Guardaespaldas %s te proteja por $%i", PlayersDataOnline[PlayersDataOnline[playerid][VProteger][0]][NameOnlineFix], PlayersDataOnline[playerid][VProteger][1]);
										format(MsgProtegerToPlayer, sizeof(MsgProtegerToPlayer), "%s a aceptado que lo protejas por $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][VProteger][1]);

										SendInfoMessage(playerid, 3, "0", MsgProteger);
										SendInfoMessage(PlayersDataOnline[playerid][VProteger][0],3, "0", MsgProtegerToPlayer);

										GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VProteger][1]);
										GivePlayerMoneyEx(PlayersDataOnline[playerid][VProteger][0], PlayersDataOnline[playerid][VProteger][1]);

										SetPlayerArmourEx(playerid, 80.0);
										SetPlayerArmourEx(PlayersDataOnline[playerid][VProteger][0], 80.0);
								}
								else
								{
									SendInfoMessage(playerid, 0, "730", "No tienes suficiente dinero para que te protejan");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "731", "No has recibido ninguna oferta de protección!");
						}
						PlayersDataOnline[playerid][VProteger][0] = -1;
						PlayersDataOnline[playerid][VProteger][1] = -1;
			    	}
				    // COMANDO: /Aceptar Drogas
				  	else if (strcmp("/Aceptar Drogas", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersDataOnline[playerid][VDrogas][0] != -1 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][VDrogas][0],
								 "752",
								 "753",
								 "751",
								 "El jugador que le iva a comprar drogas se a desconectado",
								 "El jugador que le iva a comprar drogas no se ha logueado",
								 "El jugador que le iva a comprar drogas no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VDrogas][1] )
					            {
										new MsgDrogas[MAX_TEXT_CHAT];
										new MsgDrogasToPlayer[MAX_TEXT_CHAT];
										format(MsgDrogas, sizeof(MsgDrogas), "Has comprado %i drogas, a el vendedor de drogas %s, por $%i", PlayersDataOnline[playerid][VDrogas][2], PlayersDataOnline[PlayersDataOnline[playerid][VDrogas][0]][NameOnlineFix], PlayersDataOnline[playerid][VDrogas][1]);
										format(MsgDrogasToPlayer, sizeof(MsgDrogasToPlayer), "%s te ha comprado %i drogas por $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][VDrogas][2], PlayersDataOnline[playerid][VDrogas][1]);

										SendInfoMessage(playerid, 3, "0", MsgDrogas);
										SendInfoMessage(PlayersDataOnline[playerid][VDrogas][0],3, "0", MsgDrogasToPlayer);

										GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VDrogas][1]);
										GivePlayerMoneyEx(PlayersDataOnline[playerid][VDrogas][0], PlayersDataOnline[playerid][VDrogas][1]);

										PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + PlayersDataOnline[playerid][VDrogas][2];
										PlayersData[PlayersDataOnline[playerid][VDrogas][0]][Drogas] = PlayersData[PlayersDataOnline[playerid][VDrogas][0]][Drogas] - PlayersDataOnline[playerid][VDrogas][2];
								}
								else
								{
									SendInfoMessage(playerid, 0, "754", "No tienes suficiente dinero para comprar esas drogas!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "755", "No has recibido ninguna oferta de drogas!");
						}
						PlayersDataOnline[playerid][VDrogas][0] = -1;
						PlayersDataOnline[playerid][VDrogas][1] = -1;
						PlayersDataOnline[playerid][VDrogas][2] = -1;
			    	}
				    // COMANDO: /Aceptar Móvil
				  	else if (strcmp("/Aceptar Móvil", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 ||
		  			    	 strcmp("/Aceptar Movil", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersDataOnline[playerid][VPhone][0] != -1 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][VPhone][0],
								 "1470",
								 "1471",
								 "1472",
								 "El jugador que le iva a comprar un móvil se a desconectado",
								 "El jugador que le iva a comprar un móvil no se ha logueado",
								 "El jugador que le iva a comprar un móvil no se encuentra cerca de tí") )
						    {
						        if ( !PlayersData[playerid][Phone] )
						        {
						            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VPhone][1] )
						            {
								        if ( PlayersDataOnline[playerid][VPhone][2] == 0 && BuyPhone24_7(playerid) || BuyPhoneNow(playerid, PlayersDataOnline[playerid][VPhone][2]) )
								        {
											new MsgMovil[MAX_TEXT_CHAT];
											new MsgMovilToPlayer[MAX_TEXT_CHAT];
											format(MsgMovil, sizeof(MsgMovil), "Has comprado un móvil a el vendedor de móviles %s, por $%i", PlayersDataOnline[PlayersDataOnline[playerid][VPhone][0]][NameOnlineFix], PlayersDataOnline[playerid][VPhone][1]);
											format(MsgMovilToPlayer, sizeof(MsgMovilToPlayer), "%s te ha comprado un móvil por $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VPhone][1]);

											SendInfoMessage(playerid, 3, "0", MsgMovil);
											SendInfoMessage(PlayersDataOnline[playerid][VPhone][0],3, "0", MsgMovilToPlayer);

											GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VPhone][1]);
											GivePlayerMoneyEx(PlayersDataOnline[playerid][VPhone][0], PlayersDataOnline[playerid][VPhone][1]);
										}
										else
										{
											SendInfoMessage(playerid, 0, "1473", "El móvil que deseabas comprar ya fué comprado! Intenta comprar otro!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1474", "No tienes suficiente dinero para comprar ese móvil!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1475", "Ya usted tiene un móvil! Deshágase de el si quiere comprar uno nuevo");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1476", "No has recibido ninguna oferta para comprar un móvil!");
						}
						PlayersDataOnline[playerid][VPhone][0] = -1;
						PlayersDataOnline[playerid][VPhone][1] = -1;
						PlayersDataOnline[playerid][VPhone][2] = -1;
			    	}
				    // COMANDO: /Aceptar Ganzúas
				  	else if (strcmp("/Aceptar Ganzúas", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 ||
							 strcmp("/Aceptar Ganzuas", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 )
			    	{
			    	    if ( PlayersDataOnline[playerid][VGanzuas][0] != -1 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][VGanzuas][0],
								 "706",
								 "708",
								 "709",
								 "El jugador que le iva a comprar ganzúas se a desconectado",
								 "El jugador que le iva a comprar ganzúas no se ha logueado",
								 "El jugador que le iva a comprar ganzúas no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VGanzuas][1] )
					            {
										new MsgGanzuas[MAX_TEXT_CHAT];
										new MsgGanzuasToPlayer[MAX_TEXT_CHAT];
										format(MsgGanzuas, sizeof(MsgGanzuas), "Has comprado ganzúas a el mecánico %s, por $%i", PlayersDataOnline[PlayersDataOnline[playerid][VGanzuas][0]][NameOnlineFix], PlayersDataOnline[playerid][VGanzuas][1]);
										format(MsgGanzuasToPlayer, sizeof(MsgGanzuasToPlayer), "%s te ha comprado las ganzúas por $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][VGanzuas][1]);

										SendInfoMessage(playerid, 3, "0", MsgGanzuas);
										SendInfoMessage(PlayersDataOnline[playerid][VGanzuas][0],3, "0", MsgGanzuasToPlayer);

										GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VGanzuas][1]);
										GivePlayerMoneyEx(PlayersDataOnline[playerid][VGanzuas][0], PlayersDataOnline[playerid][VGanzuas][1]);

										PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] + 5;
								}
								else
								{
									SendInfoMessage(playerid, 0, "710", "No tienes suficiente dinero para comprar ganzúas!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "711", "No has recibido ninguna oferta de ganzúas!");
						}
						PlayersDataOnline[playerid][VGanzuas][0] = -1;
						PlayersDataOnline[playerid][VGanzuas][1] = -1;
			    	}
				    // COMANDO: /Aceptar Factura
				  	else if (strcmp("/Aceptar Factura", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
			    	    if ( PlayersDataOnline[playerid][VFactura][0] != -1 )
			    	    {
				            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VFactura][1] )
				            {
								new MsgFactura[MAX_TEXT_CHAT];
								format(MsgFactura, sizeof(MsgFactura), "Pagaste una factura de $%i", PlayersDataOnline[playerid][VFactura][1]);
		                        SendInfoMessage(playerid, 3, "0", MsgFactura);
								if ( IsPlayerConnected(PlayersDataOnline[playerid][VFactura][0]) )
								{
									new MsgFacturaToPlayer[MAX_TEXT_CHAT];
									format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s pago la factura de $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VFactura][1]);
			                        SendInfoMessage(PlayersDataOnline[playerid][VFactura][0], 3, "0", MsgFacturaToPlayer);
								}
								FaccionData[PlayersData[PlayersDataOnline[playerid][VFactura][0]][Faccion]][Deposito] = FaccionData[PlayersData[PlayersDataOnline[playerid][VFactura][0]][Faccion]][Deposito] + PlayersDataOnline[playerid][VFactura][1];

								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VFactura][1]);

								PlayersDataOnline[playerid][VFactura][0] = -1;
								PlayersDataOnline[playerid][VFactura][1] = -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "683", "No tienes suficiente dinero para pagar esta factura!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "684", "No has recibido ninguna factura!");
						}
					}
				    // COMANDO: /Aceptar Sexo
				  	else if (strcmp("/Aceptar Sexo", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
				        if (PlayersDataOnline[playerid][PlayerSexo] != -1)
				        {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][PlayerSexo],
								 "1418",
								 "1419",
								 "1420",
								 "El jugador que deseas tener sexo con el no se encuentra conectado",
								 "El jugador que deseas tener sexo con el no se ha logueado",
								 "El jugador que deseas tener sexo con el no se encuentra cerca de tí") )
						    {
								new MsgSexoMe[MAX_TEXT_CHAT];
								new MsgSexoYou[MAX_TEXT_CHAT];
								format(MsgSexoMe, sizeof(MsgSexoMe), "Tuviste sexo con %s", PlayersDataOnline[PlayersDataOnline[playerid][PlayerSexo]][NameOnlineFix]);
								format(MsgSexoYou, sizeof(MsgSexoYou), "Tuviste sexo con %s", PlayersDataOnline[playerid][NameOnlineFix]);

								SendInfoMessage(playerid, 3, "0", MsgSexoMe);
								SendInfoMessage(PlayersDataOnline[playerid][PlayerSexo], 3, "0", MsgSexoYou);

								if ( !IsPlayerHaveCondones(playerid) || !IsPlayerHaveCondones(PlayersDataOnline[playerid][PlayerSexo]) )
								{
									new RandomSexo = random(8);
									if ( RandomSexo )
									{
									    switch(RandomSexo)
									    {
									        case 1:
									        {
												ChangeEnfermedad(playerid, 3);
												ChangeEnfermedad(PlayersDataOnline[playerid][PlayerSexo], 3);
											}
									        case 2:
									        {
												ChangeEnfermedad(playerid, 6);
												ChangeEnfermedad(PlayersDataOnline[playerid][PlayerSexo], 6);
											}
										}
									}
								}
								PlayersDataOnline[PlayersDataOnline[playerid][PlayerSexo]][PlayerSexo] = -1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1421", "Nadie te ha ofrecido tener sexo contigo");
						}
						PlayersDataOnline[playerid][PlayerSexo] = -1;
				    }
				    // COMANDO: /Aceptar Servicios
				  	else if (strcmp("/Aceptar Servicios", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
			    	{
			    	    if ( PlayersDataOnline[playerid][VServicio][0] != -1 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][VServicio][0],
								 "1348",
								 "1349",
								 "1350",
								 "El jugador que desea aceptar sus servicios no se encuentra conectado",
								 "El jugador que desea aceptar sus servicios no se encuentra logueado",
								 "El jugador que desea aceptar sus servicios no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VServicio][1] )
					            {
									new MsgFactura[MAX_TEXT_CHAT];
									new MsgFacturaToPlayer[MAX_TEXT_CHAT];
									format(MsgFactura, sizeof(MsgFactura), "Aceptaste los servicios por $%i", PlayersDataOnline[playerid][VServicio][1]);
									format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s pago los servicios por el costo de $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VServicio][1]);
			                        SendInfoMessage(PlayersDataOnline[playerid][VServicio][0], 3, "0", MsgFacturaToPlayer);
			                        SendInfoMessage(playerid, 3, "0", MsgFactura);

									FaccionData[ADP][Deposito] += PlayersDataOnline[playerid][VServicio][1] / 3;
									GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VServicio][1]);
									GivePlayerMoneyEx(PlayersDataOnline[playerid][VServicio][0], (PlayersDataOnline[playerid][VServicio][1] / 3) * 2);

									PlayersDataOnline[playerid][VServicio][0] = -1;
									PlayersDataOnline[playerid][VServicio][1] = -1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "1351", "No tienes suficiente dinero para pagar esta factura!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1352", "No has recibido ninguna factura!");
						}
					}
				    // COMANDO: /Aceptar Multa
				  	else if (strcmp("/Aceptar Multa", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersDataOnline[playerid][VMulta][0] != -1 )
			    	    {
				            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VMulta][1] )
				            {
								new MsgMulta[MAX_TEXT_CHAT];
								format(MsgMulta, sizeof(MsgMulta), "Pagaste una multa de $%i", PlayersDataOnline[playerid][VMulta][1]);
		                        SendInfoMessage(playerid, 3, "0", MsgMulta);
								if ( IsPlayerConnected(PlayersDataOnline[playerid][VMulta][0]) )
								{
									new MsgMultaToPlayer[MAX_TEXT_CHAT];
									format(MsgMultaToPlayer, sizeof(MsgMultaToPlayer), "%s pago la multa de $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VMulta][1]);
			                        SendInfoMessage(PlayersDataOnline[playerid][VMulta][0], 3, "0", MsgMultaToPlayer);
								}
								FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + PlayersDataOnline[playerid][VMulta][1];

								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VMulta][1]);

								PlayersDataOnline[playerid][VMulta][0] = -1;
								PlayersDataOnline[playerid][VMulta][1] = -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "818", "No tienes suficiente dinero para pagar esta multa!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "819", "No has recibido ninguna factura!");
						}
					}
					//VMulta
					// COMANDO: /Aceptar Contrato
				  	else if (strcmp("/Aceptar Contrato", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
			    	{
			    	    if ( PlayersDataOnline[playerid][Contrato][0] != -1 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][Contrato][0],
								 "558",
								 "557",
								 "556",
								 "El jugador que le iva hacer el contrato no se encuentra conectado",
								 "El jugador que le iva hacer el contrato no se ha logueado",
								 "El jugador que le iva hacer el contrato no se encuentra cerca de tí") )
						    {
	   				            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][Contrato][1] )
	   				            {
									new MsgContrato[MAX_TEXT_CHAT];
									new MsgContratoToPlayer[MAX_TEXT_CHAT];
									format(MsgContrato, sizeof(MsgContrato), "Has aceptado el contrato de %s, por $%i", PlayersDataOnline[PlayersDataOnline[playerid][Contrato][0]][NameOnlineFix], PlayersDataOnline[playerid][Contrato][1]);
									format(MsgContratoToPlayer, sizeof(MsgContratoToPlayer), "%s ha aceptado su contrato por el monto de $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][Contrato][1]);

									SendInfoMessage(playerid, 3, "0", MsgContrato);
									SendInfoMessage(PlayersDataOnline[playerid][Contrato][0],3, "0", MsgContratoToPlayer);

									GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][Contrato][1]);
									GivePlayerMoneyEx(PlayersDataOnline[playerid][Contrato][0], PlayersDataOnline[playerid][Contrato][1]);
								}
								else
								{
									SendInfoMessage(playerid, 0, "559", "No tienes suficiente dinero para aceptar este contrato!");
								}
						    }
							PlayersDataOnline[playerid][Contrato][0] = -1;
							PlayersDataOnline[playerid][Contrato][1] = -1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "560", "No has recibido ningún contrato!");
						}
				    }
					// COMANDO: /Aceptar Invite
				  	else if (strcmp("/Aceptar Invite", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersDataOnline[playerid][InviteFaccion] != 0 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][InvitePlayer],
								 "127",
								 "128",
								 "129",
								 "El líder que te invito se ha desconectado",
								 "El líder que te invito no se encuentra logueado",
								 "Te separaste mucho del líder que te invito, intentele de nuevo") )
						    {
	                            PlayersData[playerid][Faccion] = PlayersDataOnline[playerid][InviteFaccion];
	                            PlayersData[playerid][Rango]   = GetMaxFaccionRango(PlayersDataOnline[playerid][InviteFaccion]);
								new MsgAcceptUser[MAX_TEXT_CHAT]; format(MsgAcceptUser, sizeof(MsgAcceptUser), "Metíste a tu Facción a %s.", PlayersDataOnline[playerid][NameOnlineFix]);
								new MsgAcceptMe[MAX_TEXT_CHAT]; format(MsgAcceptMe, sizeof(MsgAcceptMe), "Bienvenido a la Facción \"%s\"!", FaccionData[PlayersDataOnline[playerid][InviteFaccion]][NameFaccion]);
	                            SendInfoMessage(PlayersDataOnline[playerid][InvitePlayer], 3, "0", MsgAcceptUser);
	                            SendInfoMessage(playerid, 3, "0", MsgAcceptMe);

	                            UpdateSpawnPlayer(playerid);
	  						   	PlayersDataOnline[playerid][InvitePlayer]  = 0;
								PlayersDataOnline[playerid][InviteFaccion] = 0;
								PlayersData[playerid][HorasWork] = 0;

								SetPlayerSelectedTypeSkin(playerid, true);
								SetPlayerLockAllVehicles(playerid);

								if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL )
								{
								    PlayersData[playerid][Job] = NINGUNO;
								}
							}
							else
							{
							   	PlayersDataOnline[playerid][InvitePlayer]  = 0;
								PlayersDataOnline[playerid][InviteFaccion] = 0;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "122", "No has recibido ningún invite");
						}
			    	}
	   				// COMANDO: /Aceptar Coche
				  	else if (strcmp("/Aceptar Coche", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersDataOnline[playerid][VCoche][0] != -1 )
			    	    {
						    if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][VCoche][0],
								 "236",
								 "237",
								 "238",
								 "El jugador que te iva a vender el vehículo se ha desconectado",
								 "El jugador que te va  a vender el vehículo no se ha logueado",
								 "El jugador que te va a vender el vehículo no se encuentra cerca de tí") )
						    {
			   				    if (  strlen(DataCars[PlayersDataOnline[playerid][VCoche][1]][Dueno]) == 1 )
			   				    {
									if ( PlayersData[PlayersDataOnline[playerid][VCoche][0]][Faccion] == NFS && PlayersData[PlayersDataOnline[playerid][VCoche][0]][Rango] <= 2)
									{
				   				        if (PlayersData[playerid][Car] == -1)
				   				        {
				   				            if ( PlayersData[playerid][Dinero] >= coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] )
				   				            {
					   				            PlayersData[playerid][Car] = PlayersDataOnline[playerid][VCoche][1];
					   				            format(DataCars[PlayersDataOnline[playerid][VCoche][1]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
					   				            DataCars[PlayersDataOnline[playerid][VCoche][1]][Time] = MAX_VEHICLE_TIME;
					   				            SaveDataVehicle(PlayersDataOnline[playerid][VCoche][1], DIR_VEHICLES);

												new MsgToComprador[MAX_TEXT_CHAT], MsgToVendedor[MAX_TEXT_CHAT];
												format(MsgToVendedor, sizeof(MsgToVendedor),
												"Has comprado al vendedor de vehículos %s, un vehículo modelo \"%s\" por $%i",
												PlayersDataOnline[PlayersDataOnline[playerid][VCoche][0]][NameOnline],
												coches_Todos_Nombres[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400],
												coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400]);
												format(MsgToComprador, sizeof(MsgToComprador),
												"Vendiste a %s un vehículo modelo \"%s\" por $%i, con un coste de $%i en papeles",
												PlayersDataOnline[playerid][NameOnlineFix],
												coches_Todos_Nombres[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400],
												coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400],
												coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] / 3);
												SendInfoMessage(PlayersDataOnline[playerid][VCoche][0], 3, "0", MsgToComprador);
												SendInfoMessage(playerid, 3, "0", MsgToVendedor);

												FaccionData[NFS][Deposito] = FaccionData[NFS][Deposito] + coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] / 3;

												GivePlayerMoneyEx(playerid, -coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400]);
												GivePlayerMoneyEx(PlayersDataOnline[playerid][VCoche][0], (coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] / 3) * 2);
											}
											else
											{
												SendInfoMessage(playerid, 0, "242", "No tienes suficiente dinero para comprar éste vehículo!");
											}
				   				        }
				   				        else
				   				        {
		       								SendInfoMessage(playerid, 0, "241", "Usted ya tiene un vehículo!");
										}
									}
									else
									{
	       								SendInfoMessage(playerid, 0, "1457", "No te encuentras al lado de vendedor!");
									}
			   				    }
			   				    else
			   				    {
									SendInfoMessage(playerid, 0, "239", "Oops, te han comprado otro el vehículo en los ojos!");
							   	}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "240", "No has recibido ninguna oferta para venta de vehículo");
						}
						PlayersDataOnline[playerid][VCoche][0] = -1;
						PlayersDataOnline[playerid][VCoche][1] = -1;
			    	}
			    	else
					{
						SendInfoMessage(playerid, 0, "123", "Quizás quiso decir: /Aceptar {Invite, Coche, Contrato, Factura, Reparación, Protección, Drogas, Multa, Ganzúas}");
						SendInfoMessage(playerid, 0, "123", "Quizás quiso decir: /Aceptar {Aceíte, Servicios, Sexo}");
					}
				}
				// COMANDO: /Proteger
			  	else if (strfind(cmdtext, "/Proteger ", true) == 0)
			    {
			        new playerid_proteger = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
			        new dinero_proteger = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 1 ||
						 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 3  ||
						 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 5 )
				    {
					 	if ( IsPlayerNearEx(playerid, playerid_proteger,
							 "726",
							 "722",
							 "723",
							 "El jugador que desea darle protección no se encuentra conectado",
							 "El jugador que desea darle protección no se encuentra logueado",
							 "El jugador que desea darle protección no se encuentra cerca de tí") )
					    {
					        if ( dinero_proteger >= 50 && dinero_proteger <= 20000 )
					        {
								new MsgProteger[MAX_TEXT_CHAT];
								new MsgProtegerToPlayer[MAX_TEXT_CHAT];
								format(MsgProteger, sizeof(MsgProteger), "Ofresiste protección a %s por $%i", PlayersDataOnline[playerid_proteger][NameOnlineFix], dinero_proteger);
								format(MsgProtegerToPlayer, sizeof(MsgProtegerToPlayer), "El guardaespaldas %s quiere protegerte por $%i usa (/Aceptar Protección)", PlayersDataOnline[playerid][NameOnlineFix], dinero_proteger);

	                            SendInfoMessage(playerid, 3, "0", MsgProteger);
	                            SendInfoMessage(playerid_proteger, 3, "0", MsgProtegerToPlayer);

								PlayersDataOnline[playerid_proteger][VProteger][0] = playerid;
								PlayersDataOnline[playerid_proteger][VProteger][1] = dinero_proteger;
							}
							else
							{
								SendInfoMessage(playerid, 0, "724", "El monto mínimo del contrato de protección es de $50 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "725", "Usted no es guardaespaldas");
					}
				}
				// COMANDO: /Vender
				else if (strfind(cmdtext, "/Vender", true) == 0)
				{
					// COMANDO: /Vender Drogas
				  	if (strfind(cmdtext, "/Vender Drogas ", true) == 0 ||
	       				strfind(cmdtext, "/Vender Drogas ", true) == 0)
				    {
						if ( PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 1 ||
							 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] == 3 )
					    {
					        new playerid_drogas = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new cantidad_drogas = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new dinero_drogas = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						 	if ( IsPlayerNearEx(playerid, playerid_drogas,
								 "756",
								 "756",
								 "757",
								 "El jugador que desea venderle drogas no se encuentra conectado",
								 "El jugador que desea venderle drogas no se encuentra logueado",
								 "El jugador que desea venderle drogas no se encuentra cerca de tí") )
						    {
						        if ( cantidad_drogas >= 1 && cantidad_drogas <= 500 )
						        {
						            if ( PlayersData[playerid][Drogas] >= cantidad_drogas )
						            {
								        if ( dinero_drogas >= 2 && dinero_drogas <= 20000 )
								        {
											new MsgDrogas[MAX_TEXT_CHAT];
											new MsgDrogasToPlayer[MAX_TEXT_CHAT];
											format(MsgDrogas, sizeof(MsgDrogas), "Ofresiste %i drogas a %s por $%i", cantidad_drogas, PlayersDataOnline[playerid_drogas][NameOnlineFix], dinero_drogas);
											format(MsgDrogasToPlayer, sizeof(MsgDrogasToPlayer), "El vendedor de drogas %s quiere venderte %i drogas por $%i usa (/Aceptar Drogas)", PlayersDataOnline[playerid][NameOnlineFix], cantidad_drogas, dinero_drogas);

				                            SendInfoMessage(playerid, 3, "0", MsgDrogas);
				                            SendInfoMessage(playerid_drogas, 3, "0", MsgDrogasToPlayer);

											PlayersDataOnline[playerid_drogas][VDrogas][0] = playerid;
											PlayersDataOnline[playerid_drogas][VDrogas][1] = dinero_drogas;
											PlayersDataOnline[playerid_drogas][VDrogas][2] = cantidad_drogas;
										}
										else
										{
											SendInfoMessage(playerid, 0, "758", "El monto mínimo de venta de drogas es $2 y máximo $20000");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "759", "No tienes esa cantidad de drogas para vender");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "760", "El mínimo de drogas a vender 1 y máximo 500");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "761", "Usted no es vendedor de drogas");
						}
					}
					// COMANDO: /Vender Peces
					else if (strcmp("/Vender Peces", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
		            	if ( PlayersData[playerid][Job] == PESCA )
		            	{
							if ( PlayersDataOnline[playerid][InPickup] == PickupInfo[JobsData[PESCA_PickupidVender]][PickupId] )
							{
						        if ( PlayersDataOnline[playerid][JobBonus] )
						        {
							        SendInfoMessage(playerid, 3, "0", "Haz vendido los peces por $800!");
							        PlayersDataOnline[playerid][JobBonus] = false;
									GivePlayerMoneyEx(playerid, 800);
								}
								else
								{
									SendInfoMessage(playerid, 0, "969", "No tienes peces para vender!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "970", "No estás en el punto de venta!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "971", "No eres pescador!");
						}
				    }
					// COMANDO: /Vender Ganzúas
				  	else if (strfind(cmdtext, "/Vender Ganzúas ", true) == 0 ||
	       				strfind(cmdtext, "/Vender Ganzuas ", true) == 0)
				    {
				        new playerid_ganzuas = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new dinero_ganzuas = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
						if ( PlayersData[playerid][Faccion] == TALLER_SF || PlayersData[playerid][Faccion] == TALLER_LS)
					    {
						 	if ( IsPlayerNearEx(playerid, playerid_ganzuas,
								 "701",
								 "702",
								 "703",
								 "El jugador que desea venderle ganzúas no se encuentra conectado",
								 "El jugador que desea venderle ganzúas no se encuentra logueado",
								 "El jugador que desea venderle ganzúas no se encuentra cerca de tí") )
						    {
						        if ( dinero_ganzuas >= 10 && dinero_ganzuas <= 20000 )
						        {
									new MsgGanzuas[MAX_TEXT_CHAT];
									new MsgGanzuasToPlayer[MAX_TEXT_CHAT];
									format(MsgGanzuas, sizeof(MsgGanzuas), "Ofresiste ganzúas a %s por $%i", PlayersDataOnline[playerid_ganzuas][NameOnlineFix], dinero_ganzuas);
									format(MsgGanzuasToPlayer, sizeof(MsgGanzuasToPlayer), "El mecánico %s quiere venderte 5 ganzúas por $%i usa (/Aceptar Ganzúas)", PlayersDataOnline[playerid][NameOnlineFix], dinero_ganzuas);

		                            SendInfoMessage(playerid, 3, "0", MsgGanzuas);
		                            SendInfoMessage(playerid_ganzuas, 3, "0", MsgGanzuasToPlayer);

									PlayersDataOnline[playerid_ganzuas][VGanzuas][0] = playerid;
									PlayersDataOnline[playerid_ganzuas][VGanzuas][1] = dinero_ganzuas;
								}
								else
								{
									SendInfoMessage(playerid, 0, "704", "El monto mínimo de venta de ganzúas es $10 y máximo $20000");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "705", "Usted no es mecánico");
						}
					}
					// COMANDO: /Vender Coche
				  	else if (strfind(cmdtext, "/Vender Coche ", true) == 0)
				    {
					    if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 2)
					    {
							new MyNearCar = IsPlayerInNearVehicle(playerid);
			   				if ( MyNearCar)
						    {
			   				    if ( MyNearCar <= MAX_CAR_DUENO )
			   				    {
				   				    if (  strlen(DataCars[MyNearCar][Dueno]) == 1 )
				   				    {
				   				        new PriceCar = coches_Todos_Precios[GetVehicleModel(MyNearCar) - 400];
				   				    	if ( PlayersData[playerid][Dinero] >= PriceCar / 3   )
				   				    	{
										    if ( IsPlayerNearEx(playerid, strval(cmdtext[14]),
												 "225",
												 "226",
												 "227",
												 "El jugador que desea venderle un vehículo no se encuentra conectado",
												 "El jugador que desea venderle un vehículo no se encuentra logueado",
												 "El jugador que desea venderle un vehículo no se encuentra cerca de tí") )
										    {
												new MsgToComprador[MAX_TEXT_CHAT], MsgToVendedor[MAX_TEXT_CHAT];
												format(MsgToComprador, sizeof(MsgToComprador),
												"El vendedor de vehículos %s, quiere venderte un vehículo modelo \"%s\" por $%i, Usa (/Aceptar Coche)",
												PlayersDataOnline[playerid][NameOnlineFix],
												coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400],
												PriceCar);
												format(MsgToVendedor, sizeof(MsgToVendedor),
												"Ofreciste vender un vehículos modelo \"%s\", a %s por $%i",
												coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400],
												PlayersDataOnline[strval(cmdtext[14])][NameOnlineFix],
												PriceCar);
												SendInfoMessage(strval(cmdtext[14]), 3, "0", MsgToComprador);
												SendInfoMessage(playerid, 3, "0", MsgToVendedor);

												PlayersDataOnline[strval(cmdtext[14])][VCoche][0] = playerid;
												PlayersDataOnline[strval(cmdtext[14])][VCoche][1] = MyNearCar;
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "234", "No tienes suficiente dinero para tramitar los papeles de éste vehículo!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "233", "Éste vehículo ya tiene dueño!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "232", "Esta vehículo no está en venta!");
								}
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "229", "No eres vendedor de vehículos!");
						}
				    }
					// COMANDO: /Vender Casa
				  	else if (strcmp("/Vender Casa", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				    {
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new HouseId = PlayersDataOnline[playerid][InPickupCasa];
							if ( IsMyHouse(playerid, HouseId) )
				            {
								PlayersDataOnline[playerid][MyPickupLock] = true;
                                format(HouseData[HouseId][Dueno], MAX_PLAYER_NAME, "No");
                                HouseData[HouseId][Lock] = true;
                                GivePlayerMoneyEx(playerid, HouseData[HouseId][Price]);
                                SaveHouse(HouseId, true);
                                GameTextForPlayer(playerid, "~B~Ha ~R~vendido su casa!", 2000, 0);
                                PlayersData[playerid][House] = -1;
                                PlayersData[playerid][Alquiler] = -1;

                                for ( new i = 0; i < MAX_PLAYERS; i++)
                                {
									CheckIsPlayerRentAndRemove(i, HouseId);
								}
								RemoveAllHouseFriend(HouseId);
							}
							else
							{
								SendInfoMessage(playerid, 0, "586", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "587", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Vender Negocio
				  	else if (strcmp("/Vender Negocio", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				    {
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
				                if ( !IsBizzOnRobo(playerid, BizzId) )
				                {
									PlayersDataOnline[playerid][MyPickupLock] = true;
									NegociosData[BizzId][Lock] = true;
	                                format(NegociosData[BizzId][Dueno], MAX_PLAYER_NAME, "0");
	                                format(NegociosData[BizzId][Extorsion], MAX_PLAYER_NAME, "No");
	                                GivePlayerMoneyEx(playerid, NegociosData[BizzId][Precio]);
	                                DataSaveBizz(BizzId, true);
	                                GameTextForPlayer(playerid, "~B~Has ~R~vendido un negocio!", 2000, 0);
                                }
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "301", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Vender Mi Coche
				  	else if (strcmp("/Vender Mi Coche", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				    {
						if ( IsPlayerInAnyVehicle(playerid) )
						{
							if ( IsVehicleMyVehicle(playerid, GetPlayerVehicleID(playerid))  )
							{
								ShowPlayerDialogEx(playerid, 6, DIALOG_STYLE_MSGBOX, "{00A5FF}Venta de su vehículo al estado", "{F0F0F0}¿Seguro que desea vender su vehículo?\n{F50000}IMPORTANTE: No obtendrá nada a cambio!", "Si", "No");
							}
							else
							{
								SendInfoMessage(playerid, 0, "221", "Este no es su vehículo");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "218", "Suba a su vehículo para poder venderlo");
						}
				    }
					// COMANDO: /Vender Móvil [ID] [Precio] [Número]
				  	else if (strfind(cmdtext, "/Vender Móvil ", true) == 0 ||
					  		 strfind(cmdtext, "/Vender Movil ", true) == 0)
				    {
						if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL )
					    {
 					        new playerSell = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new priceSell  = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new phoneNumber = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						 	if ( IsPlayerNearEx(playerid, playerSell,
								 "1477",
								 "1478",
								 "1479",
								 "El jugador que desea venderle un móvil no se encuentra conectado",
								 "El jugador que desea venderle un móvil no se encuentra logueado",
								 "El jugador que desea venderle un móvil no se encuentra cerca de tí") )
						    {
						        if ( priceSell >= 100 && priceSell <= 20000 )
						        {
						            if ( phoneNumber == 0 || phoneNumber > 1000 && phoneNumber <= 99999 && CheckNumberAvalible(phoneNumber) )
						            {
										new MsgMovil[MAX_TEXT_CHAT];
										new MsgMovilToPlayer[MAX_TEXT_CHAT];
										if ( phoneNumber == 0 )
										{
											format(MsgMovil, sizeof(MsgMovil), "Ofresiste a %s venderle un móvil con número aleatorio por $%i", PlayersDataOnline[playerSell][NameOnlineFix], priceSell);
											format(MsgMovilToPlayer, sizeof(MsgMovilToPlayer), "%s quiere venderte un móvil con número aleatorio por $%i. Use (/Aceptar Móvil)", PlayersDataOnline[playerid][NameOnlineFix], priceSell);
										}
										else
										{
											format(MsgMovil, sizeof(MsgMovil), "Ofresiste a %s venderle un móvil con número personalizado (%i) por $%i", PlayersDataOnline[playerSell][NameOnlineFix], phoneNumber, priceSell);
											format(MsgMovilToPlayer, sizeof(MsgMovilToPlayer), "%s quiere venderte un móvil con número personalizado (%i) por $%i. Use (/Aceptar Móvil)", PlayersDataOnline[playerid][NameOnlineFix], phoneNumber, priceSell);
										}

			                            SendInfoMessage(playerid, 3, "0", MsgMovil);
			                            SendInfoMessage(playerSell, 3, "0", MsgMovilToPlayer);

										PlayersDataOnline[playerSell][VPhone][0] = playerid;
										PlayersDataOnline[playerSell][VPhone][1] = priceSell;
										PlayersDataOnline[playerSell][VPhone][2] = phoneNumber;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1480", "El número introducido no esta disponible, recuerde que debe estar comprendido entre 1000 y 99999");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1481", "El precio del móvil debe ser como mínimo $100 y máximo $20000");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1482", "Usted no es vendedor de móviles");
						}
				    }
				    //      /Vender Local             - /Vender Local
	                else if (strcmp("/Vender Local", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
				        if (PlayersData[playerid][Local] == -1) return SendInfoMessage(playerid, 0, "", "Tú no tienes local.");
				        new localID = GetPlayerCloseLocal(playerid);
			        	if (localID != -1)
				        {
                            if (PlayersData[playerid][Local] != localID) return SendInfoMessage(playerid, 0, "", "Este no es tu local.");

							LocalData[localID][Seguro] = true;
							PlayersDataOnline[playerid][MyPickupLock] = true;
                         	format(LocalData[localID][Owner], MAX_PLAYER_NAME, "No");
                         	for (new i=0; i != MAX_LOCAL_KEYS; i++){
                         	RemoveLocalKey(localID, i);}
				            SaveLocal(localID, true);

				            PlayersData[playerid][Local] = -1;
				            GivePlayerMoneyEx(playerid, LocalData[localID][Precio]);
				            GameTextForPlayer(playerid, "~B~Ha ~R~vendido su local!", 2000, 0);
				            return 1;
				        }
				        else return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "228", "Quizás quiso decir: /Vender {Coche [ID], Negocio, Local, Mi Coche, Casa, Peces, Móvil [ID] [Precio] [Número]}");
					}
				}
				// COMANDO: /Cocinar [ID_Refrigerador]
		  		else if (strfind(cmdtext, "/Cocinar ", true) == 0)
			    {
			        new RefrigeradorID;
					if (sscanf(cmdtext[9], "i", RefrigeradorID)) return SendSyntaxError(playerid, "Cocinar", "Cocinar 1");

			        if( PlayersData[playerid][IsPlayerInHouse] )
			        {
			            if ( IsOpenRefrigerador(playerid, PlayersData[playerid][IsPlayerInHouse]) )
			            {
			                Cocinar(playerid, PlayersData[playerid][IsPlayerInHouse], RefrigeradorID);
		                }
                	}
                	else if (PlayersData[playerid][InLocal] != -1)
			        {
			            new localid = PlayersData[playerid][InLocal];
			            if (LocalData[localid][LRefrigeradorSeguro]) return SendInfoMessage(playerid, 0, "", "El refrigerador se encuentra cerrado!");
			            Cocinar(playerid, localid, RefrigeradorID);
			        }
                	else
                	{
						SendInfoMessage(playerid, 0, "1270", "No te encuentras en una casa o local");
					}
			    }
				// COMANDO: /Usar
				else if (strfind(cmdtext, "/Usar ", true) == 0)
				{
					// COMANDO: /Usar Bolsa [ID_Bolsa]
			  		if (strfind(cmdtext, "/Usar Bolsa ", true) == 0)
				    {
						new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						EatArticle(playerid, BolsaID);
				    }
					// COMANDO: /Usar Refrigerador [ID_Refrigerador]
			  		else if (strfind(cmdtext, "/Usar Refrigerador ", true) == 0)
				    {
				        if( PlayersData[playerid][IsPlayerInHouse] )
				        {
				            if ( IsOpenRefrigerador(playerid, PlayersData[playerid][IsPlayerInHouse]) )
				            {
								new RefrigeradorID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				                EatArticleRefrigerador(playerid, PlayersData[playerid][IsPlayerInHouse], RefrigeradorID);
			                }
	                	}
	                	else if( PlayersData[playerid][InLocal] != -1 )
				        {
				            if (LocalData[PlayersData[playerid][InLocal]][LRefrigeradorSeguro]) return SendInfoMessage(playerid, 0, "", "El refrigerador se encuentra cerrado!");
				            {
								new RefrigeradorID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				                EatArticleRefrigerador(playerid, PlayersData[playerid][InLocal], RefrigeradorID);
			                }
	                	}
	                	else
	                	{
							SendInfoMessage(playerid, 0, "1267", "No te encuentras en una casa o local");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1259", "Quizás quiso decir: /Usar {Bolsa [ID_Bolsa], Refrigerador [ID_Refrigerador]}");
					}
				}
				// COMANDO: /Coger
				else if (strfind(cmdtext, "/Coger ", true) == 0)
				{
				    // ALL COGER
        			// COMANDO: /Coger Artículo [ID_Refrigerador]
			  		if ( strfind(cmdtext, "/Coger Artículo ", true) == 0 ||
				  		 strfind(cmdtext, "/Coger Articulo ", true) == 0)
				    {
				        new RefrigeradorID;
						if (sscanf(cmdtext[16], "i", RefrigeradorID)) return SendSyntaxError(playerid, "Coger Articulo", "Coger Artículo 1");

						if ( PlayersData[playerid][IsPlayerInHouse] )
						{
							new HouseId = PlayersData[playerid][IsPlayerInHouse];
						    if ( IsOpenRefrigerador(playerid, HouseId) )
					        {
								RemoveArticleRefrigeradorFun(playerid, HouseId, RefrigeradorID);
							}
						}
						else if (PlayersData[playerid][InLocal] != -1)
				        {
				            new localid = PlayersData[playerid][InLocal];
				            if (LocalData[localid][LRefrigeradorSeguro]) return SendInfoMessage(playerid, 0, "", "El refrigerador se encuentra cerrado!");
				            RemoveArticleLRefrigerador(playerid, localid, RefrigeradorID);
				        }
						else
						{
							SendInfoMessage(playerid, 0, "1582", "No estas en una casa o local");
						}
			    	}
        			// COMANDO: /Coger Objeto
        			else if (strcmp("/Coger Objeto", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
        			{
        			    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
						{
	        			    if ( IsPlayerInsideVehicle(playerid) )
	        			    {
							    if ( IsGuanteraOpen(playerid) )
							    {
		        			        new VehicleIDGuantera = IsGuanteraOpen(playerid);
		        			        new SlotIDGet = -1;
									for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
									{
									    if ( DataCars[VehicleIDGuantera][GuanteraObjects][i] )
									    {
									        SlotIDGet = i;
							                break;
									    }
									}
									if ( SlotIDGet != -1 )
									{
									    new saveType = GetObjectByType(playerid, GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]));
									    if ( saveType == -1 )
									    {
											new MsgGiveGG[MAX_TEXT_CHAT];
											new MsgGiveGGME[MAX_TEXT_CHAT];
									        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
									        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
									        Acciones(playerid, 8, MsgGiveGG);
									        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

									        AddObjectHoldToPlayer(playerid, DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]);
									        DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet] = false;
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1585", "No puedes llevar más objetos de este tipo!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1586", "La guantera se encuentra vacía!");
									}
								}
	        			    }
	        			    else if ( PlayersData[playerid][IsPlayerInHouse] )
	        			    {
	        			        new Houseid = PlayersData[playerid][IsPlayerInHouse];
								if ( IsOpenGaveta(playerid, Houseid) )
								{
		        			        new SlotIDGet = -1;
									for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
									{
									    if ( HouseData[Houseid][GavetaObjects][i] )
									    {
									        SlotIDGet = i;
							                break;
									    }
									}
									if ( SlotIDGet != -1 )
									{
									    new saveType = GetObjectByType(playerid, GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet]));
									    if ( saveType == -1 )
									    {
											new MsgGiveGG[MAX_TEXT_CHAT];
											new MsgGiveGGME[MAX_TEXT_CHAT];
									        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
									        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
									        Acciones(playerid, 8, MsgGiveGG);
									        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

									        AddObjectHoldToPlayer(playerid, HouseData[Houseid][GavetaObjects][SlotIDGet]);
									        HouseData[Houseid][GavetaObjects][SlotIDGet] = false;
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1588", "No puedes llevar más objetos de este tipo!");
									    }
								    }
								    else
								    {
										SendInfoMessage(playerid, 0, "1593", "La gaveta se encuentra vacía!");
								    }
								}
	        			    }
	        			    else if (PlayersData[playerid][InLocal] != -1)
					        {
					            new localid = PlayersData[playerid][InLocal];
					            if (LocalData[localid][LGavetaSeguro]) return SendInfoMessage(playerid, 0, "", "La gaveta se encuentra cerrada!");
	        			        new SlotIDGet = -1;
								for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
								{
								    if ( LocalData[localid][LGavetaObjects][i] )
								    {
								        SlotIDGet = i;
						                break;
								    }
								}
								if ( SlotIDGet != -1 )
								{
								    new saveType = GetObjectByType(playerid, GetTypeObjectEx(LocalData[localid][LGavetaObjects][SlotIDGet]));
								    if ( saveType == -1 )
								    {
										new MsgGiveGG[MAX_TEXT_CHAT];
										new MsgGiveGGME[MAX_TEXT_CHAT];
								        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la gaveta", ObjectsNames[GetTypeObjectEx(LocalData[localid][LGavetaObjects][SlotIDGet])]);
								        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la gaveta", ObjectsNames[GetTypeObjectEx(LocalData[localid][LGavetaObjects][SlotIDGet])]);
								        Acciones(playerid, 8, MsgGiveGG);
								        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

								        AddObjectHoldToPlayer(playerid, LocalData[localid][LGavetaObjects][SlotIDGet]);
								        LocalData[localid][LGavetaObjects][SlotIDGet] = false;
								    }
								    else
								    {
										SendInfoMessage(playerid, 0, "1588", "No puedes llevar más objetos de este tipo!");
								    }
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1593", "La gaveta se encuentra vacía!");
							    }
					        }
	        			    else
	        			    {
								SendInfoMessage(playerid, 0, "1589", "No te encuentras en la guantera de un coche ni en la gaveta de una casa o local!");
	        			    }
        			    }
        			}
        			// COMANDO: /Coger ObjetoEx
			  		else if (strfind(cmdtext, "/Coger ObjetoEx ", true) == 0)
			    	{
						new SlotIDGet = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
        			    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
						{
	        			    if ( IsPlayerInsideVehicle(playerid) )
	        			    {
							    if ( IsGuanteraOpen(playerid) )
							    {
									if ( SlotIDGet >= 1 && SlotIDGet <= MAX_GUANTERA_GAVETA_SLOTS )
								    {
								        SlotIDGet--;
			        			        new VehicleIDGuantera = IsGuanteraOpen(playerid);
										if ( DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet] )
										{
										    new saveType = GetObjectByType(playerid, GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]));
										    if ( saveType == -1 )
										    {
												new MsgGiveGG[MAX_TEXT_CHAT];
												new MsgGiveGGME[MAX_TEXT_CHAT];
										        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
										        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
										        Acciones(playerid, 8, MsgGiveGG);
										        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

										        AddObjectHoldToPlayer(playerid, DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]);
										        DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet] = false;
										    }
										    else
										    {
												SendInfoMessage(playerid, 0, "1598", "No puedes llevar más objetos de este tipo!");
										    }
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta vacío", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1599", TempError);
										}
									}
									else
									{
	 									SendInfoMessage(playerid, 0, "1600", "El número del SLOT para la gaveta debe estar comprendido entre 1 y 8.");
									}
								}
	        			    }
	        			    else if ( PlayersData[playerid][IsPlayerInHouse] )
	        			    {
	        			        new Houseid = PlayersData[playerid][IsPlayerInHouse];
								if ( IsOpenGaveta(playerid, Houseid) )
								{
									if ( SlotIDGet >= 1 && SlotIDGet <= MAX_GUANTERA_GAVETA_SLOTS )
								    {
								        SlotIDGet--;
										if ( HouseData[Houseid][GavetaObjects][SlotIDGet] )
										{
										    new saveType = GetObjectByType(playerid, GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet]));
										    if ( saveType == -1 )
										    {
												new MsgGiveGG[MAX_TEXT_CHAT];
												new MsgGiveGGME[MAX_TEXT_CHAT];
										        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
										        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
										        Acciones(playerid, 8, MsgGiveGG);
										        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

										        AddObjectHoldToPlayer(playerid, HouseData[Houseid][GavetaObjects][SlotIDGet]);
										        HouseData[Houseid][GavetaObjects][SlotIDGet] = false;
										    }
										    else
										    {
												SendInfoMessage(playerid, 0, "1594", "No puedes llevar más objetos de este tipo!");
										    }
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta vacío", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1595", TempError);
										}
									}
									else
									{
	 									SendInfoMessage(playerid, 0, "1596", "El número del SLOT para la gaveta debe estar comprendido entre 1 y 8.");
									}
								}
	        			    }
	        			    else if (PlayersData[playerid][InLocal] != -1)
					        {
					            new localid = PlayersData[playerid][InLocal];
					            if (LocalData[localid][LGavetaSeguro]) return SendInfoMessage(playerid, 0, "", "La gaveta se encuentra cerrada!");
								if ( SlotIDGet >= 1 && SlotIDGet <= MAX_GUANTERA_GAVETA_SLOTS )
							    {
							        SlotIDGet--;
									if ( LocalData[localid][LGavetaObjects][SlotIDGet] )
									{
									    new saveType = GetObjectByType(playerid, GetTypeObjectEx(LocalData[localid][LGavetaObjects][SlotIDGet]));
									    if ( saveType == -1 )
									    {
											new MsgGiveGG[MAX_TEXT_CHAT];
											new MsgGiveGGME[MAX_TEXT_CHAT];
									        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la gaveta", ObjectsNames[GetTypeObjectEx(LocalData[localid][LGavetaObjects][SlotIDGet])]);
									        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la gaveta", ObjectsNames[GetTypeObjectEx(LocalData[localid][LGavetaObjects][SlotIDGet])]);
									        Acciones(playerid, 8, MsgGiveGG);
									        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

									        AddObjectHoldToPlayer(playerid, LocalData[localid][LGavetaObjects][SlotIDGet]);
									        LocalData[localid][LGavetaObjects][SlotIDGet] = false;
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1594", "No puedes llevar más objetos de este tipo!");
									    }
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta vacío", SlotIDGet + 1 );
							            SendInfoMessage(playerid, 0, "1595", TempError);
									}
								}
								else
								{
 									SendInfoMessage(playerid, 0, "1596", "El número del SLOT para la gaveta debe estar comprendido entre 1 y 8.");
								}
					        }
	        			    else
	        			    {
								SendInfoMessage(playerid, 0, "", "No te encuentras en la guantera de un coche ni en la gaveta de una casa o local!");
	        			    }
        			    }
			    	}
				    // COGER ALMACENES
					else if ( IsPlayerInAlmacen(playerid, false) != -1 )
					{
						new MyNearAlmacen = IsPlayerInAlmacen(playerid, false);
						new FaccionID = PlayersData[playerid][Faccion];
						if ( FaccionData[FaccionID][LockA][MyNearAlmacen] )
						{
		        			// COMANDO: /Coger Chaleco
					  		if (strfind(cmdtext, "/Coger Chaleco ", true) == 0)
					    	{
					    	    new ChalecoID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    	    if ( ChalecoID >= 1 && ChalecoID <= 4 )
					    	    {
					    	        ChalecoID--;
									if ( FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID] != 0 )
									{
		                                SetPlayerArmourEx(playerid, FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID]);
									    FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID] = 0;
								        Acciones(playerid, 8, "ha cogido un chaleco del almacén");
								        SendInfoMessage(playerid, 2, "0", "Has cogido un chaleco del almacén.");
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta vacío", ChalecoID + 1 );
							            SendInfoMessage(playerid, 0, "1383", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1384", "El número del SLOT para chaleco debe estar comprendido entre 1 y 4.");
								}
					    	}
		        			// COMANDO: /Coger Arma
							else if (strcmp("/Coger Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new EmpySlot = -1;
								for (new i = 0; i < 10; i++)
								{
								    if (  WeaponsFaccion[FaccionID][MyNearAlmacen][i] != 0 )
								    {
		                                EmpySlot = i;
										break;
								    }
								}
								if ( CheckWeapondCheat(playerid) && EmpySlot != -1 )
								{
		                            GivePlayerWeaponEx(playerid, WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot], AmmoFaccion[FaccionID][MyNearAlmacen][EmpySlot]);

									new MsgCoger[MAX_TEXT_CHAT];
									new MsgCogerMe[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido un %s del almacén.", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot]]);
							        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del almacén", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot]]);
							        Acciones(playerid, 8, MsgCogerMe);
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                            WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot] = 0;
		                            AmmoFaccion[FaccionID][MyNearAlmacen][EmpySlot] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "1385", "El almacén se encuentra vacío!");
								}
					    	}
		        			// COMANDO: /Coger ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Coger ArmaEx ", true) == 0)
						    {
					    	    new SlotID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								if ( SlotID >= 1 && SlotID <= 10 )
							    {
							        SlotID--;
							        if ( CheckWeapondCheat(playerid) && WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] != 0 )
							        {
			                            GivePlayerWeaponEx(playerid, WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID], AmmoFaccion[FaccionID][MyNearAlmacen][SlotID]);
										new MsgCoger[MAX_TEXT_CHAT];
										new MsgCogerMe[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %s del almacén.", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID]]);
								        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del almacén", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID]]);
								        Acciones(playerid, 8, MsgCogerMe);
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                                WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] 	= 0;
		                                AmmoFaccion[FaccionID][MyNearAlmacen][SlotID] 		= 0;
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" esta vacío", SlotID + 1 );
							            SendInfoMessage(playerid, 0, "1386", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1387", "La ID de el Slot a coger el arma tiene que estar comprendio entre 1 y 10");
								}
						    }
		        			// COMANDO: /Coger Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Drogas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( FaccionData[FaccionID][Drogas][MyNearAlmacen] > 0 && FaccionData[FaccionID][Drogas][MyNearAlmacen] >= CantidadItem )
						        {
							        PlayersData[playerid][Drogas]  += CantidadItem;
							        FaccionData[FaccionID][Drogas][MyNearAlmacen] -= CantidadItem;

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i drogas del almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha cogido drogas del almacén");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1388", "El almacén no tiene esa cantidad de drogas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Ganzúas ", true) == 0 || strfind(cmdtext, "/Coger Ganzuas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( FaccionData[FaccionID][Ganzuas][MyNearAlmacen] > 0 && FaccionData[FaccionID][Ganzuas][MyNearAlmacen] >= CantidadItem )
						        {
							        PlayersData[playerid][Ganzuas]  += CantidadItem;
							        FaccionData[FaccionID][Ganzuas][MyNearAlmacen] -= CantidadItem;

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i ganzúas del almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha cogido ganzúas del almacén");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1389", "El almacén no tiene esa cantidad de ganzúas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Materiales ", true) == 0)
						    {
								if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3  ||
									 PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 	||
									 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 2	||
									 PlayersData[playerid][Faccion] == YKZ ||
									 PlayersData[playerid][Faccion] == LCN ||
									 PlayersData[playerid][Faccion] == SICARIOS && PlayersData[playerid][Rango] <= 3 ||
	 								 PlayersData[playerid][Rango] <= 1 && (
									 PlayersData[playerid][Faccion] == COLTS    ||
	 								 PlayersData[playerid][Faccion] == AK	    ||
	 								 PlayersData[playerid][Faccion] == VELTRAN  ||
	 								 PlayersData[playerid][Faccion] == HEORS) 	)
								{
						    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
							        if ( FaccionData[FaccionID][Almacen][MyNearAlmacen] > 0 && FaccionData[FaccionID][Almacen][MyNearAlmacen] >= CantidadItem )
							        {
						                if ( IsNotFullMaterialsPlayer(playerid, CantidadItem) )
							            {
									        PlayersData[playerid][Materiales] 			   += CantidadItem;
									        FaccionData[FaccionID][Almacen][MyNearAlmacen] -= CantidadItem;

											new MsgCoger[MAX_TEXT_CHAT];
											format(MsgCoger, sizeof(MsgCoger), "Has cogido %i materiales del almacén.", CantidadItem);
											Acciones(playerid, 8, "ha cogido materiales del almacén");
									        SendInfoMessage(playerid, 2, "0", MsgCoger);
								        }
								        else
								        {
									    	SendInfoMessage(playerid, 0, "1390", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1391", "El almacén no tiene esa cantidad de materiales a coger!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1392", "Usted no puede retirar materiales del almacén");
								}
					    	}
		        			// COMANDO: /Coger Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Bombas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( FaccionData[FaccionID][Bombas][MyNearAlmacen] > 0 && FaccionData[FaccionID][Bombas][MyNearAlmacen] >= CantidadItem )
						        {
							        PlayersData[playerid][Bombas] 					+= CantidadItem;
							        FaccionData[FaccionID][Bombas][MyNearAlmacen] 	-= CantidadItem;

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i bombas del almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha cogido bombas del almacén");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1393", "El almacén no tiene esa cantidad de bombas a coger!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "1394", "Quizás quiso decir: /Coger {Arma, ArmaEx [ID_SLOT], Chaleco, Drogas [Cantidad], Bombas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "1394", "Quizás quiso decir: /Coger {Materiales [Cantidad], Artículo [ID_Refrigerador], Objeto, ObjetoEx [ID_SLOT]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1396", "El almacén se encuentra cerrado.");
						}
				    }
				    // COGER COCHES
				    else if ( GetPlayerInteriorEx(playerid) == 0 || PlayersData[playerid][IsPlayerInGarage] >= 0 || (!PlayersData[playerid][IsPlayerInHouse] && PlayersData[playerid][InLocal] == -1) )
				    {
					    new MyMalteroOpen = IsMaleteroOpen(playerid);
					    if ( MyMalteroOpen )
					    {
		        			// COMANDO: /Coger Chaleco
						  	if (strcmp("/Coger Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
					    	{
								if ( coches_Todos_Maleteros[MyMalteroOpen][7][0] != 0 )
								{
	                                SetPlayerArmourEx(playerid, coches_Todos_Maleteros[MyMalteroOpen][7][0]);
								    coches_Todos_Maleteros[MyMalteroOpen][7][0] = 0;
							        Acciones(playerid, 8, "ha cogido un chaleco del maletero");
							        SendInfoMessage(playerid, 2, "0", "Has cogido un chaleco del maletero.");
								}
								else
								{
									SendInfoMessage(playerid, 0, "263", "En el maletero no hay ningún chaleco.");
								}
					    	}
		        			// COMANDO: /Coger Arma
							else if (strcmp("/Coger Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new EmpySlot = -1;
								for (new i = 0; i < 7; i++)
								{
								    if ( coches_Todos_Maleteros[MyMalteroOpen][i][0] != 0 )
								    {
		                                EmpySlot = i;
										break;
								    }
								}
								if ( CheckWeapondCheat(playerid) && EmpySlot != -1 )
								{
		                            GivePlayerWeaponEx(playerid, coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0], coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][1]);
									new MsgCoger[MAX_TEXT_CHAT];
									new MsgCogerMe[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido un %s del maletero.", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0]]);
							        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del maletero", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0]]);
							        Acciones(playerid, 8, MsgCogerMe);
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0] = 0;
		                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][1] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "262", "El maletero se encuentra vacío!");
								}
					    	}
		        			// COMANDO: /Coger ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Coger ArmaEx ", true) == 0)
						    {
								if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
							    {
							        if ( CheckWeapondCheat(playerid) && coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] != 0 )
							        {
			                            GivePlayerWeaponEx(playerid, coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0], coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][1]);
										new MsgCoger[MAX_TEXT_CHAT];
										new MsgCogerMe[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %s del maletero.", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0]]);
								        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del maletero", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0]]);
								        Acciones(playerid, 8, MsgCogerMe);
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] = 0;
		                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][1] = 0;
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" esta vacío", strval(cmdtext[14]) );
							            SendInfoMessage(playerid, 0, "261", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "260", "La ID de el Slot a coger el arma tiene que estar comprendio entre 1 y 7");
								}
						    }
		        			// COMANDO: /Coger Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Drogas ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][8][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][8][0] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + strval(cmdtext[14]);
							        coches_Todos_Maleteros[MyMalteroOpen][8][0] = coches_Todos_Maleteros[MyMalteroOpen][8][0] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i drogas del maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido drogas del maletero");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "271", "El maletero no tiene esa cantidad de drogas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Ganzúas ", true) == 0 || strfind(cmdtext, "/Coger Ganzuas ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][9][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][9][0] >= strval(cmdtext[15]) )
						        {
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] + strval(cmdtext[15]);
							        coches_Todos_Maleteros[MyMalteroOpen][9][0] = coches_Todos_Maleteros[MyMalteroOpen][9][0] - strval(cmdtext[15]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i ganzúas del maletero.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha cogido ganzúas del maletero");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "270", "El maletero no tiene esa cantidad de ganzúas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Materiales ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][10][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][10][0] >= strval(cmdtext[17]) )
						        {
					                if ( IsNotFullMaterialsPlayer(playerid, strval(cmdtext[17])) )
						            {
								        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] + strval(cmdtext[17]);
								        coches_Todos_Maleteros[MyMalteroOpen][10][0] = coches_Todos_Maleteros[MyMalteroOpen][10][0] - strval(cmdtext[17]);

										new MsgCoger[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i materiales del maletero.", strval(cmdtext[17]));
								        Acciones(playerid, 8, "ha cogido materiales del maletero");
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
							        }
							        else
							        {
								    	SendInfoMessage(playerid, 0, "1041", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "269", "El maletero no tiene esa cantidad de materiales a coger!");
								}
					    	}
		        			// COMANDO: /Coger Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Bombas ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][11][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][11][0] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] + strval(cmdtext[14]);
							        coches_Todos_Maleteros[MyMalteroOpen][11][0] = coches_Todos_Maleteros[MyMalteroOpen][11][0] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i bombas del maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido bombas del maletero");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "268", "El maletero no tiene esa cantidad de bombas a coger!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "259", "Quizás quiso decir: /Coger {Arma, ArmaEx [ID_SLOT], Chaleco, Drogas [Cantidad], Bombas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "259", "Quizás quiso decir: /Coger {Materiales [Cantidad], Artículo [ID_Refrigerador], Objeto, ObjetoEx [ID_SLOT]}");
							}
						}
				    }
				    // COGER CASAS
					else if ( PlayersData[playerid][IsPlayerInHouse] )
					{
						new HouseId = PlayersData[playerid][IsPlayerInHouse];
	        			// COMANDO: /Coger Chaleco
					  	if (strcmp("/Coger Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
								if ( HouseData[HouseId][Chaleco] != 0 )
								{
									SetPlayerArmourEx(playerid, HouseData[HouseId][Chaleco]);
								    HouseData[HouseId][Chaleco] = 0;
							        Acciones(playerid, 8, "ha cogido un chaleco del armario");
							        SendInfoMessage(playerid, 2, "0", "Has cogido un chaleco del armario.");
								}
								else
								{
									SendInfoMessage(playerid, 0, "641", "En el armario no hay ningún chaleco.");
								}
							}
				    	}
	        			// COMANDO: /Coger Arma
						else if (strcmp("/Coger Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
								new EmpySlot = -1;
								for (new i = 0; i < 7; i++)
								{
								    if ( HouseData[HouseId][ArmarioWeapon][i] != 0 )
								    {
		                                EmpySlot = i;
										break;
								    }
								}
								if ( CheckWeapondCheat(playerid) && EmpySlot != -1 )
								{
		                            GivePlayerWeaponEx(playerid, HouseData[HouseId][ArmarioWeapon][EmpySlot], HouseData[HouseId][ArmarioAmmo][EmpySlot]);
									new MsgCoger[MAX_TEXT_CHAT];
									new MsgCogerMe[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido un %s del armario.", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][EmpySlot]]);
							        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del armario", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][EmpySlot]]);
							        Acciones(playerid, 8, MsgCogerMe);
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                            HouseData[HouseId][ArmarioWeapon][EmpySlot] = 0;
		                            HouseData[HouseId][ArmarioAmmo][EmpySlot] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "642", "El armario se encuentra vacío!");
								}
							}
				    	}
	        			// COMANDO: /Coger ArmaEx [ID_Slot]
				  		else if (strfind(cmdtext, "/Coger ArmaEx ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
								if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
							    {
							        if ( CheckWeapondCheat(playerid) && HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] != 0 )
							        {
			                            GivePlayerWeaponEx(playerid, HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1], HouseData[HouseId][ArmarioAmmo][strval(cmdtext[14]) - 1]);
										new MsgCoger[MAX_TEXT_CHAT];
										new MsgCogerMe[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %s del armario.", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1]]);
								        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del armario", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1]]);
								        Acciones(playerid, 8, MsgCogerMe);
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                                HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] = 0;
		                                HouseData[HouseId][ArmarioAmmo][strval(cmdtext[14]) - 1] = 0;
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" esta vacío", strval(cmdtext[14]) );
							            SendInfoMessage(playerid, 0, "643", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "644", "La ID de el Slot a coger el arma tiene que estar comprendio entre 1 y 7");
								}
							}
					    }
	        			// COMANDO: /Coger Drogas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Drogas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Drogas] > 0 && HouseData[HouseId][Drogas] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + strval(cmdtext[14]);
							        HouseData[HouseId][Drogas] = HouseData[HouseId][Drogas] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i drogas del armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido drogas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "645", "El armario no tiene esa cantidad de drogas a coger!");
								}
							}
				    	}
	        			// COMANDO: /Coger Ganzúas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Ganzúas ", true) == 0 || strfind(cmdtext, "/Coger Ganzuas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Ganzuas] > 0 && HouseData[HouseId][Ganzuas] >= strval(cmdtext[15]) )
						        {
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] + strval(cmdtext[15]);
							        HouseData[HouseId][Ganzuas] = HouseData[HouseId][Ganzuas] - strval(cmdtext[15]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i ganzúas del armario.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha cogido ganzúas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "646", "El armario no tiene esa cantidad de ganzúas a coger!");
								}
							}
				    	}
	        			// COMANDO: /Coger Materiales [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Materiales ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Materiales] > 0 && HouseData[HouseId][Materiales] >= strval(cmdtext[17]) )
						        {
					                if ( IsNotFullMaterialsPlayer(playerid, strval(cmdtext[17])) )
						            {
								        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] + strval(cmdtext[17]);
								        HouseData[HouseId][Materiales] = HouseData[HouseId][Materiales] - strval(cmdtext[17]);

										new MsgCoger[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i materiales del armario.", strval(cmdtext[17]));
								        Acciones(playerid, 8, "ha cogido materiales del armario");
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
							        }
							        else
							        {
								    	SendInfoMessage(playerid, 0, "1042", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "647", "El maletero no tiene esa cantidad de materiales a coger!");
								}
							}
				    	}
	        			// COMANDO: /Coger Bombas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Bombas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Bombas] > 0 && HouseData[HouseId][Bombas] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] + strval(cmdtext[14]);
							        HouseData[HouseId][Bombas] = HouseData[HouseId][Bombas] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i bombas del armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido bombas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "648", "El armario no tiene esa cantidad de bombas a coger!");
								}
							}
				    	}
				    	else
				    	{
							SendInfoMessage(playerid, 0, "649", "Quizás quiso decir: /Coger {Arma, ArmaEx [ID_SLOT], Chaleco, Drogas [Cantidad], Bombas [Cantidad], Ganzúas [Cantidad]}");
							SendInfoMessage(playerid, 0, "649", "Quizás quiso decir: /Coger {Materiales [Cantidad], Artículo [ID_Refrigerador], Objeto, ObjetoEx [ID_SLOT]}");
						}
					}
					// Coger Locales
					else if (PlayersData[playerid][InLocal] != -1)
					{
					    new localid = PlayersData[playerid][InLocal];
					    // COMANDO: /Coger Chaleco
					  	if (strcmp("/Coger Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    	{
							if (LocalData[localid][LRefrigeradorSeguro]) return SendInfoMessage(playerid, 0, "", "El refrigerador se encuentra cerrado!");
							if ( LocalData[localid][LArmarioChaleco] != 0 )
							{
								SetPlayerArmourEx(playerid, LocalData[localid][LArmarioChaleco]);
							    LocalData[localid][LArmarioChaleco] = 0;
						        Acciones(playerid, 8, "ha cogido un chaleco del armario");
						        SendInfoMessage(playerid, 2, "0", "Has cogido un chaleco del armario.");
							}
							else
							{
								SendInfoMessage(playerid, 0, "641", "En el armario no hay ningún chaleco.");
							}
				    	}
	        			// COMANDO: /Coger Arma
						else if (strcmp("/Coger Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    	{
							if (LocalData[localid][LArmarioSeguro] == 0)
							{
								new EmpySlot = -1;
								for (new i = 0; i < 7; i++)
								{
								    if ( LocalData[localid][LArmarioArma][i] != 0 )
								    {
		                                EmpySlot = i;
										break;
								    }
								}
								if ( CheckWeapondCheat(playerid) && EmpySlot != -1 )
								{
		                            GivePlayerWeaponEx(playerid, LocalData[localid][LArmarioArma][EmpySlot], LocalData[localid][LArmarioAmmo][EmpySlot]);
									new MsgCoger[MAX_TEXT_CHAT];
									new MsgCogerMe[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido un %s del armario.", SlotNameWeapon[LocalData[localid][LArmarioArma][EmpySlot]]);
							        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del armario", SlotNameWeapon[LocalData[localid][LArmarioArma][EmpySlot]]);
							        Acciones(playerid, 8, MsgCogerMe);
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                            LocalData[localid][LArmarioArma][EmpySlot] = 0;
		                            LocalData[localid][LArmarioAmmo][EmpySlot] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "642", "El armario se encuentra vacío!");
								}
							}
							else return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
				    	}
	        			// COMANDO: /Coger ArmaEx [ID_Slot]
				  		else if (strfind(cmdtext, "/Coger ArmaEx ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro] == 0)
							{
								if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
							    {
							        if ( CheckWeapondCheat(playerid) && LocalData[localid][LArmarioArma][strval(cmdtext[14]) - 1] != 0 )
							        {
			                            GivePlayerWeaponEx(playerid, LocalData[localid][LArmarioArma][strval(cmdtext[14]) - 1], LocalData[localid][LArmarioAmmo][strval(cmdtext[14]) - 1]);
										new MsgCoger[MAX_TEXT_CHAT];
										new MsgCogerMe[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %s del armario.", SlotNameWeapon[LocalData[localid][LArmarioArma][strval(cmdtext[14]) - 1]]);
								        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del armario", SlotNameWeapon[LocalData[localid][LArmarioArma][strval(cmdtext[14]) - 1]]);
								        Acciones(playerid, 8, MsgCogerMe);
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                                LocalData[localid][LArmarioArma][strval(cmdtext[14]) - 1] = 0;
		                                LocalData[localid][LArmarioAmmo][strval(cmdtext[14]) - 1] = 0;
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" esta vacío", strval(cmdtext[14]) );
							            SendInfoMessage(playerid, 0, "643", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "644", "La ID de el Slot a coger el arma tiene que estar comprendio entre 1 y 7");
								}
							}
							else return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
					    }
	        			// COMANDO: /Coger Drogas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Drogas ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro] == 0)
							{
						        if ( LocalData[localid][LArmarioDrogas] > 0 && LocalData[localid][LArmarioDrogas] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + strval(cmdtext[14]);
							        LocalData[localid][LArmarioDrogas] = LocalData[localid][LArmarioDrogas] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i drogas del armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido drogas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "645", "El armario no tiene esa cantidad de drogas a coger!");
								}
							}
							else return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
				    	}
	        			// COMANDO: /Coger Ganzúas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Ganzúas ", true) == 0 || strfind(cmdtext, "/Coger Ganzuas ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro] == 0)
							{
						        if ( LocalData[localid][LArmarioGanzuas] > 0 && LocalData[localid][LArmarioGanzuas] >= strval(cmdtext[15]) )
						        {
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] + strval(cmdtext[15]);
							        LocalData[localid][LArmarioGanzuas] = LocalData[localid][LArmarioGanzuas] - strval(cmdtext[15]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i ganzúas del armario.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha cogido ganzúas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "646", "El armario no tiene esa cantidad de ganzúas a coger!");
								}
							}
							else return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
				    	}
	        			// COMANDO: /Coger Materiales [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Materiales ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro] == 0)
							{
						        if ( LocalData[localid][LArmarioMateriales] > 0 && LocalData[localid][LArmarioMateriales] >= strval(cmdtext[17]) )
						        {
					                if ( IsNotFullMaterialsPlayer(playerid, strval(cmdtext[17])) )
						            {
								        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] + strval(cmdtext[17]);
								        LocalData[localid][LArmarioMateriales] = LocalData[localid][LArmarioMateriales] - strval(cmdtext[17]);

										new MsgCoger[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i materiales del armario.", strval(cmdtext[17]));
								        Acciones(playerid, 8, "ha cogido materiales del armario");
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
							        }
							        else
							        {
								    	SendInfoMessage(playerid, 0, "1042", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "647", "El maletero no tiene esa cantidad de materiales a coger!");
								}
							}
							else return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
				    	}
	        			// COMANDO: /Coger Bombas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Bombas ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro] == 0)
							{
						        if ( LocalData[localid][LArmarioBombas] > 0 && LocalData[localid][LArmarioBombas] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] + strval(cmdtext[14]);
							        LocalData[localid][LArmarioBombas] = LocalData[localid][LArmarioBombas] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i bombas del armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido bombas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "648", "El armario no tiene esa cantidad de bombas a coger!");
								}
							}
							else return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
				    	}
				    	else
				    	{
							SendInfoMessage(playerid, 0, "649", "Quizás quiso decir: /Coger {Arma, ArmaEx [ID_SLOT], Chaleco, Drogas [Cantidad], Bombas [Cantidad], Ganzúas [Cantidad]}");
							SendInfoMessage(playerid, 0, "649", "Quizás quiso decir: /Coger {Materiales [Cantidad], Artículo [ID_Refrigerador], Objeto, ObjetoEx [ID_SLOT]}");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "628", "No estas en una casa");
					}
				}
				// COMANDO: /Dejar
				else if (strfind(cmdtext, "/Dejar ", true) == 0)
				{
				    // ALL DEJAR
					// COMANDO: /Dejar Artículo [ID_Bolsa]
			  		if ( strfind(cmdtext, "/Dejar Artículo ", true) == 0 ||
				  		 strfind(cmdtext, "/Dejar Articulo ", true) == 0)
				    {
						if ( PlayersData[playerid][IsPlayerInHouse] )
						{
						    new HouseId = PlayersData[playerid][IsPlayerInHouse];
					        if ( IsOpenRefrigerador(playerid, HouseId) )
					        {
						        new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								if ( AddArticleRefrigeradorFun(playerid, HouseId, BolsaID) == -1)
								{
									SendInfoMessage(playerid, 0, "1590", "El refrigerador se encuentra lleno!");
								}
							}
						}
                        else if (PlayersData[playerid][InLocal] != -1)
				        {
				            new localid = PlayersData[playerid][InLocal];
				            if (LocalData[localid][LRefrigeradorSeguro]) return SendInfoMessage(playerid, 0, "", "El refrigerador se encuentra cerrado!");
				            new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				            if ( AddArticleLRefrigerador(playerid, localid, BolsaID) == -1)
							{
								SendInfoMessage(playerid, 0, "1590", "El refrigerador se encuentra lleno!");
							}
							return 1;
				        }
						else
						{
							SendInfoMessage(playerid, 0, "1591", "No estas en una casa o local");
						}
			    	}
				    // DEJAR ALAMACENES
					else if ( IsPlayerInAlmacen(playerid, false) != -1 )
					{
						new MyNearAlmacen = IsPlayerInAlmacen(playerid, false);
						new FaccionID = PlayersData[playerid][Faccion];
						if ( FaccionData[FaccionID][LockA][MyNearAlmacen] )
						{
		        			// COMANDO: /Dejar Chaleco
					  		if (strfind(cmdtext, "/Dejar Chaleco ", true) == 0)
					    	{
					    	    new ChalecoID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    	    if ( ChalecoID >= 1 && ChalecoID <= 4 )
					    	    {
					    	        ChalecoID--;
									new Float:Chaleco1;
									GetPlayerArmour(playerid, Chaleco1);
									if ( Chaleco1 != 0.0 )
									{
										SetPlayerArmourEx(playerid, -Chaleco1);
									    FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID] = Chaleco1;

								        Acciones(playerid, 8, "ha dejado un chaleco en el almacén");
								        SendInfoMessage(playerid, 2, "0", "Has dejado un chaleco en el almacén.");
									}
									else
									{
										SendInfoMessage(playerid, 0, "1397", "Usted no tienes ningún chaleco puesto encima.");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1398", "El número del SLOT para chaleco debe estar comprendido entre 1 y 4.");
								}
					    	}
		        			// COMANDO: /Dejar Arma
						  	else if (strcmp("/Dejar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
									new EmpySlot = -1;
									for (new i = 0; i < 10; i++)
									{
									    if ( WeaponsFaccion[FaccionID][MyNearAlmacen][i] == 0 )
									    {
		                                    EmpySlot = i;
											break;
									    }
									}
									if ( EmpySlot != -1 )
									{
			                            WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot] 	= MyWeapons;
			                            AmmoFaccion[FaccionID][MyNearAlmacen][EmpySlot] 	= MyAmmo;

			                            RemovePlayerWeapond(playerid, MyWeapons);

										new MsgDejar[MAX_TEXT_CHAT];
										new MsgDejarMe[MAX_TEXT_CHAT];
								        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el almacén.", SlotNameWeapon[MyWeapons]);
								        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el almacén", SlotNameWeapon[MyWeapons]);
								        Acciones(playerid, 8, MsgDejarMe);
								        SendInfoMessage(playerid, 2, "0", MsgDejar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1399", "El almacén se encuentra lleno!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1400", "No tienes un arma en las manos!");
								}
					    	}
		        			// COMANDO: /Dejar ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Dejar ArmaEx ", true) == 0)
						    {
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
									new SlotID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								    if ( SlotID >= 1 && SlotID <= 10 )
								    {
								        SlotID--;
								        if ( WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] == 0 )
								        {
			                                WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] = MyWeapons;
			                                AmmoFaccion[FaccionID][MyNearAlmacen][SlotID]    = MyAmmo;
			                                RemovePlayerWeapond(playerid, MyWeapons);

											new MsgDejar[MAX_TEXT_CHAT];
											new MsgDejarMe[MAX_TEXT_CHAT];
									        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el almacén.", SlotNameWeapon[MyWeapons]);
									        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el almacén", SlotNameWeapon[MyWeapons]);
									        Acciones(playerid, 8, MsgDejarMe);
									        SendInfoMessage(playerid, 2, "0", MsgDejar);
										}
										else
										{
								            new TempError[60];
								            format(TempError, sizeof(TempError), "En Slot número \"%i\" ya esta ocupado por otra arma",SlotID + 1 );
								            SendInfoMessage(playerid, 0, "1401", TempError);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1402", "La ID de el Slot a dejar el arma tiene que estar comprendio entre 1 y 10");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1403", "No tienes un arma en las manos!");
								}
						    }
		        			// COMANDO: /Dejar Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Drogas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Drogas][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Drogas] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i drogas en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado drogas en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1404", "No tienes esa cantidad de drogas para dejar!");
								}
					    	}
	        			// COMANDO: /Dejar Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Ganzúas ", true) == 0 || strfind(cmdtext, "/Dejar Ganzuas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Ganzuas][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Ganzuas] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i ganzúas en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado ganzúas en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1405", "No tienes esa cantidad de ganzúas para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Materiales ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Almacen][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Materiales] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i materiales en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado materiales en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1406", "No tienes esa cantidad de materiales para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Bombas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Bombas][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Bombas] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i bombas en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado bombas en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1382", "No tienes esa cantidad de bombas para dejar!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "1381", "Quizás quiso decir: /Dejar {Arma, ArmaEx [ID_SLOT], Chaleco [ID_SLOT], Drogas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "1381", "Quizás quiso decir: /Dejar {Materiales [Cantidad], Bombas [Cantidad], Artículo [ID_Bolsa]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "901", "El almacén se encuentra cerrado.");
						}
					}
					// DEJAR COCHES
				    else if ( GetPlayerInteriorEx(playerid) == 0 || PlayersData[playerid][IsPlayerInGarage] >= 0 || (!PlayersData[playerid][IsPlayerInHouse] && PlayersData[playerid][InLocal] == -1) )
				    {
					    new MyMalteroOpen = IsMaleteroOpen(playerid);
					    if ( MyMalteroOpen )
					    {
		        			// COMANDO: /Dejar Chaleco
						  	if (strcmp("/Dejar Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
					    	{
							    new Float:Chaleco1;
								GetPlayerArmour(playerid, Chaleco1);
								if ( Chaleco1 != 0.0 )
								{
								    coches_Todos_Maleteros[MyMalteroOpen][7][0] = floatround(Chaleco1);
									SetPlayerArmourEx(playerid, -Chaleco1);
							        Acciones(playerid, 8, "ha dejado un chaleco en el maletero");
							        SendInfoMessage(playerid, 2, "0", "Has dejado un chaleco en el maletero.");
								}
								else
								{
									SendInfoMessage(playerid, 0, "253", "Usted no tienes ningún chaleco puesto encima.");
								}
					    	}
		        			// COMANDO: /Dejar Arma
						  	else if (strcmp("/Dejar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
									new EmpySlot = -1;
									for (new i = 0; i < 7; i++)
									{
									    if ( coches_Todos_Maleteros[MyMalteroOpen][i][0] == 0 )
									    {
		                                    EmpySlot = i;
											break;
									    }
									}
									if ( EmpySlot != -1 )
									{
			                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0] = MyWeapons;
			                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][1] = MyAmmo;
			                            RemovePlayerWeapond(playerid, MyWeapons);

										new MsgDejar[MAX_TEXT_CHAT];
										new MsgDejarMe[MAX_TEXT_CHAT];
								        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el maletero.", SlotNameWeapon[MyWeapons]);
								        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el maletero", SlotNameWeapon[MyWeapons]);
								        Acciones(playerid, 8, MsgDejarMe);
								        SendInfoMessage(playerid, 2, "0", MsgDejar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "258", "El maletero se encuentra lleno!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "256", "No tienes un arma en las manos!");
								}
					    	}
		        			// COMANDO: /Dejar ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Dejar ArmaEx ", true) == 0)
						    {
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
								    if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
								    {
								        if ( coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] == 0 )
								        {
			                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] = MyWeapons;
			                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][1] = MyAmmo;
			                                RemovePlayerWeapond(playerid, MyWeapons);

											new MsgDejar[MAX_TEXT_CHAT];
											new MsgDejarMe[MAX_TEXT_CHAT];
									        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el maletero.", SlotNameWeapon[MyWeapons]);
									        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el maletero", SlotNameWeapon[MyWeapons]);
									        Acciones(playerid, 8, MsgDejarMe);
									        SendInfoMessage(playerid, 2, "0", MsgDejar);
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "En Slot número \"%i\" ya esta ocupado por otra arma", strval(cmdtext[14]) );
								            SendInfoMessage(playerid, 0, "255", TempError);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "254", "La ID de el Slot a dejar el arma tiene que estar comprendio entre 1 y 7");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "257", "No tienes un arma en las manos!");
								}
						    }
		        			// COMANDO: /Dejar Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Drogas ", true) == 0)
						    {
						        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= strval(cmdtext[14]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][8][0] = coches_Todos_Maleteros[MyMalteroOpen][8][0] + strval(cmdtext[14]);
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i drogas en el maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado drogas en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "267", "No tienes esa cantidad de drogas para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Ganzúas ", true) == 0 || strfind(cmdtext, "/Dejar Ganzuas ", true) == 0)
						    {
						        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= strval(cmdtext[15]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][9][0] = coches_Todos_Maleteros[MyMalteroOpen][9][0] + strval(cmdtext[15]);
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] - strval(cmdtext[15]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i ganzúas en el maletero.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha dejado ganzúas en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "266", "No tienes esa cantidad de ganzúas para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Materiales ", true) == 0)
						    {
						        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= strval(cmdtext[17]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][10][0] = coches_Todos_Maleteros[MyMalteroOpen][10][0] + strval(cmdtext[17]);
							        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - strval(cmdtext[17]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i materiales en el maletero.", strval(cmdtext[17]));
							        Acciones(playerid, 8, "ha dejado materiales en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "265", "No tienes esa cantidad de materiales para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Bombas ", true) == 0)
						    {
						        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= strval(cmdtext[14]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][11][0] = coches_Todos_Maleteros[MyMalteroOpen][11][0] + strval(cmdtext[14]);
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i bombas en el maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado bombas en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "264", "No tienes esa cantidad de bombas para dejar!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "252", "Quizás quiso decir: /Dejar {Arma, ArmaEx [ID_SLOT], Chaleco [ID_SLOT], Drogas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "252", "Quizás quiso decir: /Dejar {Materiales [Cantidad], Bombas [Cantidad], Artículo [ID_Bolsa]}");
							}
						}
					}
					// DEJAR CASA
					else if ( PlayersData[playerid][IsPlayerInHouse] )
					{
						new HouseId = PlayersData[playerid][IsPlayerInHouse];
						// COMANDO: /Dejar Chaleco
					  	if (strcmp("/Dejar Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
							    new Float:Chaleco1;
								GetPlayerArmour(playerid, Chaleco1);
								if ( Chaleco1 != 0.0 )
								{
								    HouseData[HouseId][Chaleco] = PlayersData[playerid][Chaleco];
									SetPlayerArmourEx(playerid, -Chaleco1);
							        Acciones(playerid, 8, "ha dejado un chaleco en el armario");
							        SendInfoMessage(playerid, 2, "0", "Has dejado un chaleco en el armario");
								}
								else
								{
									SendInfoMessage(playerid, 0, "640", "Usted no tienes ningún chaleco puesto encima.");
								}
							}
				    	}
	        			// COMANDO: /Dejar Arma
					  	else if (strcmp("/Dejar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( MyWeapons != 0 )
						        {
									new EmpySlot = -1;
									for (new i = 0; i < 7; i++)
									{
									    if ( HouseData[HouseId][ArmarioWeapon][i] == 0 )
									    {
		                                    EmpySlot = i;
											break;
									    }
									}
									if ( EmpySlot != -1 )
									{
			                            HouseData[HouseId][ArmarioWeapon][EmpySlot] = MyWeapons;
			                            HouseData[HouseId][ArmarioAmmo][EmpySlot] 	= MyAmmo;
			                            RemovePlayerWeapond(playerid, MyWeapons);

										new MsgDejar[MAX_TEXT_CHAT];
										new MsgDejarMe[MAX_TEXT_CHAT];
								        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el armario", SlotNameWeapon[MyWeapons]);
								        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el armario", SlotNameWeapon[MyWeapons]);
								        Acciones(playerid, 8, MsgDejarMe);
								        SendInfoMessage(playerid, 2, "0", MsgDejar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "639", "El armario se encuentra lleno!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "638", "No tienes un arma en las manos!");
								}
							}
				    	}
	        			// COMANDO: /Dejar ArmaEx [ID_Slot]
				  		else if (strfind(cmdtext, "/Dejar ArmaEx ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( MyWeapons != 0 )
						        {
								    if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
								    {
								        if ( HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] == 0 )
								        {
			                                HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] = MyWeapons;
			                                HouseData[HouseId][ArmarioAmmo][strval(cmdtext[14]) - 1] = MyAmmo;
			                                RemovePlayerWeapond(playerid, MyWeapons);

											new MsgDejar[MAX_TEXT_CHAT];
											new MsgDejarMe[MAX_TEXT_CHAT];
									        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el armario", SlotNameWeapon[MyWeapons]);
									        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el armario", SlotNameWeapon[MyWeapons]);
									        Acciones(playerid, 8, MsgDejarMe);
									        SendInfoMessage(playerid, 2, "0", MsgDejar);
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "En Slot número \"%i\" ya esta ocupado por otra arma", strval(cmdtext[14]) );
								            SendInfoMessage(playerid, 0, "630", TempError);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "637", "La ID de el Slot a dejar el arma tiene que estar comprendio entre 1 y 7");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "636", "No tienes un arma en las manos!");
								}
							}
					    }
	        			// COMANDO: /Dejar Drogas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Drogas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= strval(cmdtext[14]) )
						        {
							        HouseData[HouseId][Drogas] = HouseData[HouseId][Drogas] + strval(cmdtext[14]);
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i drogas en el armario", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado drogas en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "635", "No tienes esa cantidad de drogas para dejar!");
								}
							}
				    	}
	        			// COMANDO: /Dejar Ganzúas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Ganzúas ", true) == 0 || strfind(cmdtext, "/Dejar Ganzuas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= strval(cmdtext[15]) )
						        {
							        HouseData[HouseId][Ganzuas] = HouseData[HouseId][Ganzuas] + strval(cmdtext[15]);
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] - strval(cmdtext[15]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i ganzúas en el armario.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha dejado ganzúas en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "634", "No tienes esa cantidad de ganzúas para dejar!");
								}
							}
				    	}
	        			// COMANDO: /Dejar Materiales [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Materiales ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= strval(cmdtext[17]) )
						        {
							        HouseData[HouseId][Materiales] = HouseData[HouseId][Materiales] + strval(cmdtext[17]);
							        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - strval(cmdtext[17]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i materiales en el armario.", strval(cmdtext[17]));
							        Acciones(playerid, 8, "ha dejado materiales en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "633", "No tienes esa cantidad de materiales para dejar!");
								}
							}
				    	}
	        			// COMANDO: /Dejar Bombas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Bombas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= strval(cmdtext[14]) )
						        {
							        HouseData[HouseId][Bombas] = HouseData[HouseId][Bombas] + strval(cmdtext[14]);
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i bombas en el armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado bombas en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "632", "No tienes esa cantidad de bombas para dejar!");
								}
							}
				    	}
				    	else
				    	{
							SendInfoMessage(playerid, 0, "631", "Quizás quiso decir: /Dejar {Arma, ArmaEx [ID_SLOT], Chaleco [ID_SLOT], Drogas [Cantidad], Ganzúas [Cantidad]}");
							SendInfoMessage(playerid, 0, "631", "Quizás quiso decir: /Dejar {Materiales [Cantidad], Bombas [Cantidad], Artículo [ID_Bolsa]}");
						}
					}
					// Dejar Locales
					else if (PlayersData[playerid][InLocal] != -1)
			        {
			            new localid = PlayersData[playerid][InLocal];
			            if (strcmp("/Dejar Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    	{
							if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");

						    new Float:Chaleco1;
							GetPlayerArmour(playerid, Chaleco1);
							if ( Chaleco1 != 0.0 )
							{
								LocalData[localid][LArmarioChaleco] = PlayersData[playerid][Chaleco];
								SetPlayerArmourEx(playerid, -Chaleco1);
						        Acciones(playerid, 8, "ha dejado un chaleco en el armario");
						        SendInfoMessage(playerid, 2, "0", "Has dejado un chaleco en el armario");
							}
							else
							{
								SendInfoMessage(playerid, 0, "640", "Usted no tienes ningún chaleco puesto encima.");
							}
				    	}
	        			// COMANDO: /Dejar Arma
					  	else if (strcmp("/Dejar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    	{
							if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");

							new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
					        if ( MyWeapons != 0 )
					        {
								new EmpySlot = -1;
								for (new i = 0; i < 7; i++)
								{
								    if ( LocalData[localid][LArmarioArma][i] == 0 )
								    {
	                                    EmpySlot = i;
										break;
								    }
								}
								if ( EmpySlot != -1 )
								{
		                            LocalData[localid][LArmarioArma][EmpySlot] = MyWeapons;
		                            LocalData[localid][LArmarioAmmo][EmpySlot] = MyAmmo;
		                            RemovePlayerWeapond(playerid, MyWeapons);

									new MsgDejar[MAX_TEXT_CHAT];
									new MsgDejarMe[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el armario", SlotNameWeapon[MyWeapons]);
							        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el armario", SlotNameWeapon[MyWeapons]);
							        Acciones(playerid, 8, MsgDejarMe);
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "639", "El armario se encuentra lleno!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "638", "No tienes un arma en las manos!");
							}
				    	}
	        			// COMANDO: /Dejar ArmaEx [ID_Slot]
				  		else if (strfind(cmdtext, "/Dejar ArmaEx ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
							new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
					        if ( MyWeapons != 0 )
					        {
							    if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
							    {
							        if ( LocalData[localid][LArmarioArma][strval(cmdtext[14]) - 1] == 0 )
							        {
		                                LocalData[localid][LArmarioArma][strval(cmdtext[14]) - 1] = MyWeapons;
		                                LocalData[localid][LArmarioAmmo][strval(cmdtext[14]) - 1] = MyAmmo;
		                                RemovePlayerWeapond(playerid, MyWeapons);

										new MsgDejar[MAX_TEXT_CHAT];
										new MsgDejarMe[MAX_TEXT_CHAT];
								        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el armario", SlotNameWeapon[MyWeapons]);
								        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el armario", SlotNameWeapon[MyWeapons]);
								        Acciones(playerid, 8, MsgDejarMe);
								        SendInfoMessage(playerid, 2, "0", MsgDejar);
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" ya esta ocupado por otra arma", strval(cmdtext[14]) );
							            SendInfoMessage(playerid, 0, "630", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "637", "La ID de el Slot a dejar el arma tiene que estar comprendio entre 1 y 7");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "636", "No tienes un arma en las manos!");
							}
					    }
	        			// COMANDO: /Dejar Drogas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Drogas ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
					        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= strval(cmdtext[14]) )
					        {
						        LocalData[localid][LArmarioDrogas] = LocalData[localid][LArmarioDrogas] + strval(cmdtext[14]);
						        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - strval(cmdtext[14]);

								new MsgDejar[MAX_TEXT_CHAT];
						        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i drogas en el armario", strval(cmdtext[14]));
						        Acciones(playerid, 8, "ha dejado drogas en el armario");
						        SendInfoMessage(playerid, 2, "0", MsgDejar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "635", "No tienes esa cantidad de drogas para dejar!");
							}
				    	}
	        			// COMANDO: /Dejar Ganzúas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Ganzúas ", true) == 0 || strfind(cmdtext, "/Dejar Ganzuas ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
					        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= strval(cmdtext[15]) )
					        {
						        LocalData[localid][LArmarioGanzuas] = LocalData[localid][LArmarioGanzuas] + strval(cmdtext[15]);
						        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] - strval(cmdtext[15]);

								new MsgDejar[MAX_TEXT_CHAT];
						        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i ganzúas en el armario.", strval(cmdtext[15]));
						        Acciones(playerid, 8, "ha dejado ganzúas en el armario");
						        SendInfoMessage(playerid, 2, "0", MsgDejar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "634", "No tienes esa cantidad de ganzúas para dejar!");
							}
				    	}
	        			// COMANDO: /Dejar Materiales [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Materiales ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
					        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= strval(cmdtext[17]) )
					        {
						        LocalData[localid][LArmarioMateriales] = LocalData[localid][LArmarioMateriales] + strval(cmdtext[17]);
						        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - strval(cmdtext[17]);

								new MsgDejar[MAX_TEXT_CHAT];
						        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i materiales en el armario.", strval(cmdtext[17]));
						        Acciones(playerid, 8, "ha dejado materiales en el armario");
						        SendInfoMessage(playerid, 2, "0", MsgDejar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "633", "No tienes esa cantidad de materiales para dejar!");
							}
				    	}
	        			// COMANDO: /Dejar Bombas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Bombas ", true) == 0)
					    {
							if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
					        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= strval(cmdtext[14]) )
					        {
						        LocalData[localid][LArmarioBombas] = LocalData[localid][LArmarioBombas] + strval(cmdtext[14]);
						        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] - strval(cmdtext[14]);

								new MsgDejar[MAX_TEXT_CHAT];
						        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i bombas en el armario.", strval(cmdtext[14]));
						        Acciones(playerid, 8, "ha dejado bombas en el armario");
						        SendInfoMessage(playerid, 2, "0", MsgDejar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "632", "No tienes esa cantidad de bombas para dejar!");
							}
				    	}
						else
				    	{
							SendInfoMessage(playerid, 0, "", "Quizás quiso decir: /Dejar {Arma, ArmaEx [ID_SLOT], Chaleco [ID_SLOT], Drogas [Cantidad], Ganzúas [Cantidad]}");
							SendInfoMessage(playerid, 0, "", "Quizás quiso decir: /Dejar {Materiales [Cantidad], Bombas [Cantidad], Artículo [ID_Bolsa]}");
						}
			        }
					else
					{
						SendInfoMessage(playerid, 0, "629", "No estas en una casa o local");
					}
				}
				// COMANDO: /SuperMercado
				else if (strcmp("/SuperMercado", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				{
					if ( PlayersDataOnline[playerid][InPickup] == PickupInfo[SuperMercadosPickupid[0]][PickupId] ||
      					 PlayersDataOnline[playerid][InPickup] == PickupInfo[SuperMercadosPickupid[1]][PickupId] )
					{
					    ShowDialogSuperMercado(playerid);
					    /*
						ShowMenuForPlayer(SupermercadoArticulos, playerid);
						TogglePlayerControllableEx(playerid, 0);
						PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
						*/
					}
					else
					{
						SendInfoMessage(playerid, 0, "1225", "No estás en el Super Mercado!");
					}
				}
				// COMANDO: /Armario
				else if (strcmp("/Armario", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
				{
					if ( PlayersData[playerid][IsPlayerInHouse] )
					{
					    new HouseId = PlayersData[playerid][IsPlayerInHouse];
					    if ( IsOpenCloset(playerid, HouseId) )
					    {
							new MsgsArmario[MAX_TEXT_CHAT];
		                    Acciones(playerid, 8, "mira hacia dentro del armario");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Armario:. <<<<<<<<<");
							for (new i = 0; i < 7; i++)
							{
							    if ( HouseData[HouseId][ArmarioWeapon][i] == 0 )
							    {
							        format(MsgsArmario, sizeof(MsgsArmario), "** Armario Slot %i: Vacío", i + 1);
							    }
							    else
							    {
									format( MsgsArmario, sizeof(MsgsArmario), "** Armario Slot %i: %s ::: Munición: %i", i + 1, SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][i]],
									HouseData[HouseId][ArmarioAmmo][i] );
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
								MsgsArmario);
							}
							format(MsgsArmario, sizeof(MsgsArmario), "** Armario Chaleco: %.2f | Drogas: %i | Ganzúas: %i | Materiales: %i | Bombas: %i",
							HouseData[HouseId][Chaleco],
							HouseData[HouseId][Drogas],
							HouseData[HouseId][Ganzuas],
							HouseData[HouseId][Materiales],
							HouseData[HouseId][Bombas]);

							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							MsgsArmario);

							// 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS

							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else if (PlayersData[playerid][InLocal] != -1)
			        {
			            new localid = PlayersData[playerid][InLocal];
			            if (LocalData[localid][LArmarioSeguro]) return SendInfoMessage(playerid, 0, "", "El armario se encuentra cerrado!");
						new string[150];
						Acciones(playerid, 8, "mira haciendo dentro del armario");
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, ">>>>>>>>>> .:Armario:. <<<<<<<<<");
						for(new i=0; i != 7; i++)
						{
						    if (LocalData[localid][LArmarioArma][i] == 0)
						    format(string, sizeof(string), "** Armario Slot %i: Vacio", i + 1);
						    else
						    format(string, sizeof(string), "** Armario Slot %i: %s ::: Municion: %i", i + 1, SlotNameWeapon[LocalData[localid][LArmarioArma][i]], LocalData[localid][LArmarioAmmo][i]);
						    SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, string);
						}
						format(string, sizeof(string), "** Armario Chaleco: %.2f | Drogas: %i | Ganzúas: %i | Materiales: %i | Bombas: %i",
						    LocalData[localid][LArmarioChaleco],
						    LocalData[localid][LArmarioDrogas],
						    LocalData[localid][LArmarioGanzuas],
						    LocalData[localid][LArmarioMateriales],
						    LocalData[localid][LArmarioBombas]);
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, string);
						return 1;
			        }
					else
					{
						SendInfoMessage(playerid, 0, "610", "No se encuentra dentro de una casa o local");
					}
				}
				// COMANDO: /Almacén
				else if (strcmp("/Almacén", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 ||
						 strcmp("/Almacen", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
				{
					new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					if ( MyNearAlmacen != -1 )
					{
						new FaccionID = PlayersData[playerid][Faccion];
						if ( FaccionData[FaccionID][LockA][MyNearAlmacen] )
						{
							new MsgsAlmacen[256];
		                    Acciones(playerid, 8, "mira hacia dentro del almacén");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Almacén:. <<<<<<<<<");
							for (new i = 0; i < 10; i++)
							{
							    if ( WeaponsFaccion[FaccionID][MyNearAlmacen][i] == 0 )
							    {
							        format(MsgsAlmacen, sizeof(MsgsAlmacen), "** Almacén Slot %i: Vacío", i + 1);
							    }
							    else
							    {
									format( MsgsAlmacen, sizeof(MsgsAlmacen), "** Almacén Slot %i: %s ::: Munición: %i", i + 1,
									 SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][i]],
									AmmoFaccion[FaccionID][MyNearAlmacen][i]);
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
								MsgsAlmacen);
							}
							format(MsgsAlmacen, sizeof(MsgsAlmacen), "** Almacén Chaleco 1: %.2f | Chaleco 2: %.2f | Chaleco 3: %.2f | Chaleco 4: %.2f | Drogas: %i | Ganzúas: %i | Materiales: %i | Bombas: %i",
							FaccionesChaleco[FaccionID][MyNearAlmacen][0],
							FaccionesChaleco[FaccionID][MyNearAlmacen][1],
							FaccionesChaleco[FaccionID][MyNearAlmacen][2],
							FaccionesChaleco[FaccionID][MyNearAlmacen][3],
							FaccionData[FaccionID][Drogas][MyNearAlmacen],
							FaccionData[FaccionID][Ganzuas][MyNearAlmacen],
							FaccionData[FaccionID][Almacen][MyNearAlmacen],
							FaccionData[FaccionID][Bombas][MyNearAlmacen]);

							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							MsgsAlmacen);

							// 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS

							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1407", "Este almacén se encuentra cerrado");
						}
					}
				}
				// COMANDO: /Refrigerador
				else if (strcmp("/Refrigerador", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 )
				{
					if ( PlayersData[playerid][IsPlayerInHouse] )
					{
					    new Houseid = PlayersData[playerid][IsPlayerInHouse];
					    if ( IsOpenRefrigerador(playerid, Houseid) )
					    {
							new MsgRefrigerador[MAX_TEXT_CHAT];
		                    Acciones(playerid, 8, "mira dentro del refrigerador");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Refrigerador:. <<<<<<<<<");
							for (new i = 0; i < MAX_REFRIGERADOR_SLOTS_COUNT; i++)
							{
								format( MsgRefrigerador, sizeof(MsgRefrigerador), "** Refrigerador Artículo %i: %s (%i)", i + 1, Articulos[Refrigerador[Houseid][Articulo][i]][NameA], Refrigerador[Houseid][Cantidad][i]);
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,	MsgRefrigerador);
							}
							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else if (PlayersData[playerid][InLocal] != -1)
			        {
			            new localid = PlayersData[playerid][InLocal];
			            //LocalData[const localid][]
			            if (LocalData[localid][LRefrigeradorSeguro]) return SendInfoMessage(playerid, 0, "", "El refrigerador se encuentra cerrado!");
			            new MsgRefrigerador[150];
	                    Acciones(playerid, 8, "mira dentro del refrigerador");
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, ">>>>>>>>>> .:Refrigerador:. <<<<<<<<<");
						for (new i = 0; i != MAX_REFRIGERADOR_SLOTS_COUNT; i++)
						{
							format( MsgRefrigerador, sizeof(MsgRefrigerador), "** Refrigerador Artículo %i: %s (%i)", i + 1, Articulos[LRefrigerador[localid][Articulo][i]][NameA], LRefrigerador[localid][Cantidad][i]);
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,	MsgRefrigerador);
						}
						new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
						GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
						PlayerPlaySound(playerid, 1002,
						player_pos_x,
						player_pos_y,
						player_pos_z);
						return 1;
			        }
					else
					{
						SendInfoMessage(playerid, 0, "610", "No se encuentra dentro de una casa o local");
					}
				}
				// COMANDO: /Guantera
				else if (strcmp("/Guantera", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9 )
				{
				    if ( IsPlayerInsideVehicle(playerid) )
				    {
					    new MyGuanteraOpen = IsGuanteraOpen(playerid);
					    if ( MyGuanteraOpen )
					    {
							new MsgsGuantera[MAX_TEXT_CHAT];

		                    Acciones(playerid, 8, "mira hacia dentro de la guantera del vehículo");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Guantera:. <<<<<<<<<");
							for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
							{
							    if ( !DataCars[MyGuanteraOpen][GuanteraObjects][i] )
							    {
							        format(MsgsGuantera, sizeof(MsgsGuantera), "** Guantera Slot %i: %s",i + 1, ObjectsNames[0]);
							    }
							    else
							    {
									format( MsgsGuantera, sizeof(MsgsGuantera), "** Guantera Slot %i: %s", i + 1, ObjectsNames[GetTypeObjectEx(DataCars[MyGuanteraOpen][GuanteraObjects][i])]);
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
								MsgsGuantera);
							}
							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1592", "No se encuentra dentro del vehículo!");
					}
				}
				// COMANDO: /Gaveta
				else if (strcmp("/Gaveta", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
				{
					if ( PlayersData[playerid][IsPlayerInHouse] )
					{
					    new Houseid = PlayersData[playerid][IsPlayerInHouse];
					    if ( IsOpenGaveta(playerid, Houseid) )
					    {
							new MsgGaveta[MAX_TEXT_CHAT];
		                    Acciones(playerid, 8, "mira dentro de la gaveta");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Gaveta:. <<<<<<<<<");
							for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
							{
							    if ( !HouseData[Houseid][GavetaObjects][i] )
							    {
							        format(MsgGaveta, sizeof(MsgGaveta), "** Gaveta Slot %i: %s", i + 1, ObjectsNames[0]);
							    }
							    else
							    {
									format( MsgGaveta, sizeof(MsgGaveta), "** Gaveta Slot %i: %s", i + 1, ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][i])]);
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,	MsgGaveta);
							}
							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else if (PlayersData[playerid][InLocal] != -1)
			        {
			            new localid = PlayersData[playerid][InLocal];
			            //LocalData[const localid][]
						if (LocalData[localid][LGavetaSeguro]) return SendInfoMessage(playerid, 0, "", "La gaveta se encuentra cerrada!");
						new MsgGaveta[MAX_TEXT_CHAT];
	                    Acciones(playerid, 8, "mira dentro de la gaveta");
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
						 ">>>>>>>>>> .:Gaveta:. <<<<<<<<<");
						for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
						{
						    if ( LocalData[localid][LGavetaObjects][i] == 0)
						    format(MsgGaveta, sizeof(MsgGaveta), "** Gaveta Slot %i: %s", i + 1, ObjectsNames[0]);
						    else
							format( MsgGaveta, sizeof(MsgGaveta), "** Gaveta Slot %i: %s", i + 1, ObjectsNames[GetTypeObjectEx(LocalData[localid][LGavetaObjects][i])]);
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,	MsgGaveta);
						}
						new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
						GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
						PlayerPlaySound(playerid, 1002,
						player_pos_x,
						player_pos_y,
						player_pos_z);
			        }
					else
					{
						SendInfoMessage(playerid, 0, "1584", "No se encuentra dentro de una casa o local");
					}
				}
				// COMANDO: /Maletero
				else if (strcmp("/Maletero", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9 )
				{
				    new MyMalteroOpen = IsMaleteroOpen(playerid);
				    if ( MyMalteroOpen )
				    {
						new MsgsMaletero[MAX_TEXT_CHAT];

	                    Acciones(playerid, 8, "mira hacia dentro del maletero del vehículo");
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
						 ">>>>>>>>>> .:Maletero:. <<<<<<<<<");
						for (new i = 0; i < 7; i++)
						{
						    if ( coches_Todos_Maleteros[MyMalteroOpen][i][0] == 0 )
						    {
						        format(MsgsMaletero, sizeof(MsgsMaletero), "** Maltero Slot %i: Vacío", i + 1);
						    }
						    else
						    {
								format( MsgsMaletero, sizeof(MsgsMaletero), "** Maltero Slot %i: %s ::: Munición: %i", i + 1, SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][i][0]],
								coches_Todos_Maleteros[MyMalteroOpen][i][1] );
							}
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							MsgsMaletero);
						}
						format(MsgsMaletero, sizeof(MsgsMaletero), "** Maltero Chaleco: %i | Drogas: %i | Ganzúas: %i | Materiales: %i | Bombas: %i",
						coches_Todos_Maleteros[MyMalteroOpen][7][0],
						coches_Todos_Maleteros[MyMalteroOpen][8][0],
						coches_Todos_Maleteros[MyMalteroOpen][9][0],
						coches_Todos_Maleteros[MyMalteroOpen][10][0],
						coches_Todos_Maleteros[MyMalteroOpen][11][0]
						);
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
						MsgsMaletero);

						// 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS


						new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
						GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
						PlayerPlaySound(playerid, 1002,
						player_pos_x,
						player_pos_y,
						player_pos_z);
					}
				}
				// COMANDO: /Pescar
				else if (strcmp("/Pescar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
				{
	            	if ( PlayersData[playerid][Job] == PESCA )
	            	{
						if ( PlayersDataOnline[playerid][InPickup] == PickupInfo[JobsData[PESCA_PickupidPescar]][PickupId] )
						{
						    if ( !PlayersDataOnline[playerid][JobBonus] )
						    {
			            	    if ( IntentarAccion(playerid, "pescar algo", random(3)) )
			            	    {
				            		PlayersDataOnline[playerid][JobBonus] = true;
				            		SendInfoMessage(playerid, 3, "0", "Haz capturado unos peces! Ahora puedes ir a venderlos!");

									SetPlayerCheckpoint(playerid, PickupInfo[JobsData[PESCA_PickupidVender]][PosInfoX], PickupInfo[JobsData[PESCA_PickupidVender]][PosInfoY], PickupInfo[JobsData[PESCA_PickupidVender]][PosInfoZ], 1.0);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "964", "Ya tienes peces, vende esos antes de pescar más");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "965", "No te encuentras en la zona de pesca!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "966", "No eres pescador!");
					}
				}
				// COMANDO: /PAGAR Y /PAY
				else if (strfind(cmdtext, "/Pagar", true) == 0 || strfind(cmdtext, "/Pay", true) == 0)
				{
					if (strfind(cmdtext, "/Pagar ", true) == 0 || strfind(cmdtext, "/Pay ", true) == 0)
					{
					    new playeridpagar = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    new Dineropagar = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						if (playeridpagar != playerid)
						{
							if (IsPlayerConnected(playeridpagar))
							{
							    if ( Dineropagar <= 20000 && Dineropagar >= 1)
							    {
						        	new Float:Xplayerid, Float:Yplayerid, Float:Zplayerid;
									GetPlayerPos(playeridpagar, Xplayerid, Yplayerid, Zplayerid);

									if(IsPlayerInRangeOfPoint(playerid, 3.0, Xplayerid, Yplayerid, Zplayerid) && GetPlayerVirtualWorld(playeridpagar) == GetPlayerVirtualWorld(playerid))
									{
									    if (  PlayersData[playerid][Dinero] >= Dineropagar )
									    {
											new Mensaje_Pagar[81];
											new Mensaje_PagarME[70];

											// FORMATEO DEL MENSAJE MENSAJES
											format(Mensaje_Pagar, sizeof(Mensaje_Pagar),
											"Has recibido $%i de el jugador %s."
											, Dineropagar, PlayersDataOnline[playerid][NameOnlineFix]);

											format(Mensaje_PagarME, sizeof(Mensaje_PagarME),
											"Le has dado $%i a el jugador %s."
											,Dineropagar, PlayersDataOnline[playeridpagar][NameOnlineFix]);

										    new Texto_ME_PagarPay[70];
											format(Texto_ME_PagarPay, sizeof(Texto_ME_PagarPay), "le ha dado algo de dinero a %s", PlayersDataOnline[playeridpagar][NameOnlineFix]);
						                    Acciones(playerid, 8, Texto_ME_PagarPay);

											// ENVIO DEL MENSAJE
											SendInfoMessage(playeridpagar, 3, "0", Mensaje_Pagar);
											SendInfoMessage(playerid, 3, "0", Mensaje_PagarME);

											// PAGO
						            		GivePlayerMoneyEx(playeridpagar, Dineropagar);
						            		GivePlayerMoneyEx(playerid, -Dineropagar);

											new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
											GetPlayerPos(playeridpagar, player_pos_x, player_pos_y, player_pos_z);
											PlayerPlaySound(playeridpagar, 1002,
											player_pos_x,
											player_pos_y,
											player_pos_z);

											GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
											PlayerPlaySound(playerid, 1002,
											player_pos_x,
											player_pos_y,
											player_pos_z);
						            		return 1;
						            	}
						            	else
						            	{
											SendInfoMessage(playerid, 0, "243", "No tiene suficiente dinero para pagar.");
											return 1;
						            	}
					            	}
					            	else
									{
										SendInfoMessage(playerid, 0, "244", "El jugador que desea pagarle no se encuentra cerca de tí.");
										return 1;
						            }
								}
								else
								{
									SendInfoMessage(playerid, 0, "245", "No puedes pagar más de $20000 de una sola véz ni menos de $1");
									return 1;
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "247", "El jugador que desea pagarle no se encuentra conectado.");
						       	return 1;
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "248", "Has introducído tu misma ID a pagar.");
							return 1;
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "249", "Recuerde al utilizar el comando /Pagar o /Pay [ID] [CANTIDAD] dejar un [ESPACIO]. Ejemplo: /Pay 22 500");
						return 1;
				    }
				}
				// COMANDO: /Matrícula
			  	else if (strcmp("/Matrícula", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10 ||
			 	  	     strcmp("/Matricula", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
		    	{
		    	    if (!IsPlayerInAnyVehicle(playerid))
		    	    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
						    if ( MyNearCar <= MAX_CAR_FACCION )
						    {
								new MsgMatricula[100];
								format(MsgMatricula, sizeof(MsgMatricula), "~G~%i", DataCars[MyNearCar][Matricula]);
								GameTextForPlayer(playerid, MsgMatricula, 1000, 5);
								Acciones(playerid, 8, "mira la matrícula del vehículo");
								format(MsgMatricula,sizeof(MsgMatricula), "Matricula %i", DataCars[MyNearCar][Matricula]);
								SendInfoMessage(playerid, 2, "", MsgMatricula);
							}
							else
							{
								SendInfoMessage(playerid, 0, "399", "Éste vehículo no tiene matrícula");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "400", "Desde el interior no puedes ver la matrícula del vehículo");
					}
				}
				// COMANDO: /Localizar
				else if (strfind(cmdtext, "/Localizar ", true) == 0 )
				{
					// COMANDO: /Localizar Coche [Matrícula]
					if (strfind(cmdtext, "/Localizar Coche ", true) == 0 )
					{
					    if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 2 ||
							 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 4 ||
							 PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn])
						{
						    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
						    {

				        	}
				        	else
				        	{
								Acciones(playerid, 8, "utiliza su GPS");
							}
						    for(new i = 1; i <= MAX_CAR_FACCION; i++)
						    {
						        if(DataCars[i][Matricula] == strval(cmdtext[17]))
						        {
						            if ( DataCars[i][WorldLast] > 999 )
						            {
						                new HouseID = GetHouseidIdByWorld(DataCars[i][WorldLast]);
						                if ( HouseID )
						                {
						                    new GarageID = GetGarageIdByWorld(HouseID, DataCars[i][WorldLast]);
											if ( GarageID != -1 )
											{
											    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
											    {
													new MsgDatos[MAX_TEXT_CHAT];
													format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[i][Matricula], i);
													SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
       								        	}
       								        	else
       								        	{
	       								        	Acciones(playerid, 7, "GPS: Vehículo localizado");
												}
                                                SetPlayerCheckpoint(playerid, Garages[HouseID][GarageID][Xg], Garages[HouseID][GarageID][Yg], Garages[HouseID][GarageID][Zg], 2.0);
       											return 1;
   											}
						                }
									}
									else if ( DataCars[i][WorldLast] == 4 )
									{

									    new GarageExID = IsVehicleInGarageEx(i);
									    if ( GarageExID != -1 )
									    {
										    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
										    {
												new MsgDatos[MAX_TEXT_CHAT];
												format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[i][Matricula], i);
												SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
   								        	}
   								        	else
   								        	{
       								        	Acciones(playerid, 7, "GPS: Vehículo localizado");
											}
									        SetPlayerCheckpoint(playerid, GaragesEx[GarageExID][PosXTwoP], GaragesEx[GarageExID][PosYTwoP], GaragesEx[GarageExID][PosZTwoP], 2.0);
	   									    return 1;
									    }
									}
									else if ( DataCars[i][WorldLast] == 0 )
									{
									    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
									    {
											new MsgDatos[MAX_TEXT_CHAT];
											format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[i][Matricula], i);
											SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							        	}
							        	else
							        	{
   								        	Acciones(playerid, 7, "GPS: Vehículo localizado");
										}
								        new Float:VehPos[3]; GetVehiclePos(i, VehPos[0], VehPos[1], VehPos[2]);
								        SetPlayerCheckpoint(playerid, VehPos[0], VehPos[1], VehPos[2], 8.0);
							            return 1;
						            }
								    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
								    {

						        	}
						        	else
						        	{
							        	Acciones(playerid, 7, "GPS: Error al localizar el vehículo.");
									}
					                return 1;
								}
							}
						    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
						    {

				        	}
				        	else
				        	{
						        Acciones(playerid, 7, "GPS: La Matrícula insertada es inválida");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "401", "Usted no es detective");
						}
					}
					// COMANDO: /Localizar Persona [ID]
					else if (strfind(cmdtext, "/Localizar Persona ", true) == 0 )
					{
					    if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 2 ||
							 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 4 )
						{
						    new numberphone = strval(cmdtext[19]);
							Acciones(playerid, 8, "utiliza su GPS");
				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == numberphone && PlayersDataOnline[i][PhoneOnline] && GetPlayerInteriorEx(i) == 0 )
								{
									if ( PlayersDataOnline[i][InCall] == -1 )
									{
								        Acciones(playerid, 7, "GPS: Persona localizada");
								        new Float:PersonPos[3]; GetPlayerPos(i, PersonPos[0], PersonPos[1], PersonPos[2]);
								        SetPlayerCheckpoint(playerid, PersonPos[0], PersonPos[1], PersonPos[2], 3.0);
							            return 1;
						            }
								}
							}
					        Acciones(playerid, 7, "GPS: Está persona está fuera del alcanze en el GPS");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "402", "Usted no es detective");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "403", "Quizás quiso decir: /Localizar {Coche [Matrícula], Persona [ID]}");
					}
				}
				// COMANDO: /Prueba [ID]
		  		else if (strfind(cmdtext, "/Prueba ", true) == 0 )
			    {
					if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
						 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
						 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 2 ||
						 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 4 )
				    {
						new IdTest = strval(cmdtext[8]);
					    if ( IsPlayerNearEx(playerid, IdTest,
								 "1143",
								 "1144",
								 "1145",
								 "El jugador que le deseas hacer una prueba de Coche no se encuentra conectado",
								 "El jugador que le deseas hacer una prueba de Coche no se ha logueado",
								 "El jugador que le deseas hacer una prueba de Coche no se encuentra cerca de tí") )
					    {
							new MyNearCar = IsPlayerInNearVehicle(playerid);
							if ( MyNearCar )
							{
						        if ( !PlayersData[IdTest][Licencias][coches_Todos_Type[GetVehicleModel(MyNearCar) - 400]] )
						        {
								    if ( IsVehicleMyFaccion(playerid, MyNearCar) )
								    {
								        if ( !DataCars[MyNearCar][Lock] )
								        {
	                                        new Empty = true;
											for ( new i = 0; i < MAX_PLAYERS; i++)
											{
											    if ( IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == MyNearCar && GetPlayerVehicleSeat(i) == 0 )
											    {
	                                                Empty = false;
													break;
												}
											}
											if ( Empty )
											{
											    new MsgToPrueba[MAX_TEXT_CHAT];
											    new MsgToPruebaYou[MAX_TEXT_CHAT];
											    new MsgToPruebaMe[MAX_TEXT_CHAT];
										        format(MsgToPrueba, sizeof(MsgToPrueba), "Le has dado una licencia de pruebas a %s", PlayersDataOnline[IdTest][NameOnlineFix]);
										        format(MsgToPruebaYou, sizeof(MsgToPruebaYou), "%s te ha dado una licencia de pruebas.", PlayersDataOnline[playerid][NameOnlineFix]);
										        format(MsgToPruebaMe, sizeof(MsgToPruebaMe), "le da una licencia de pruebas a %s", PlayersDataOnline[IdTest][NameOnlineFix]);
										        Acciones(playerid, 8, MsgToPruebaMe);
										        SendInfoMessage(playerid, 2, "0", MsgToPrueba);
										        SendInfoMessage(IdTest, 2, "0", MsgToPruebaYou);
										        PlayersDataOnline[IdTest][LicenciaTest] = true;
										        PutPlayerInVehicle(IdTest, MyNearCar, 0);
											}
											else
											{
												SendInfoMessage(playerid, 0, "1139", "El asiento del conductor de éste vehículo ya se encuentra ocupado!");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1146", "Éste vehículo se encuentra cerrado! No puedes hacer una prueba de conducción en el!");
										}
							        }
									else
									{
										SendInfoMessage(playerid, 0, "1140", "Este coche no pertenece a tu facción!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1141", "Ya ese jugador tiene una licencia de éste vehículo, no necesitas hacerle una prueba!");
								}
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1142", "Usted no es licenciero");
					}
			    }
				// COMANDO: /Tiempo Coche
			  	else if (strcmp("/Tiempo Coche", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
		    	{
					new MyNearCar = IsPlayerInNearVehicle(playerid);
					if ( MyNearCar )
					{
					    if ( MyNearCar <= MAX_CAR_DUENO && MyNearCar == PlayersData[playerid][Car])
					    {
					        new MsgTiempoCoche[MAX_TEXT_CHAT];
					        format(MsgTiempoCoche, sizeof(MsgTiempoCoche), "Le falta, %i días, %i horas para que los papeles del vehículo caduquen", DataCars[MyNearCar][Time] / 24, DataCars[MyNearCar][Time] % 24);
							SendInfoMessage(playerid, 2, "0", MsgTiempoCoche);
					    }
						else
						{
							SendInfoMessage(playerid, 0, "555", "Este no es su vehículo");
						}
					}
			    }
				// COMANDO: /Papeles [ID]
				else if (strfind(cmdtext, "/Papeles ", true) == 0 )
				{
					new MyNearCar = IsPlayerInNearVehicle(playerid);
					if ( MyNearCar )
					{
					    if ( MyNearCar <= MAX_CAR_DUENO && MyNearCar == PlayersData[playerid][Car])
					    {
					        if ( strval(cmdtext[9]) == playerid )
					        {
								Acciones(playerid, 8, "mira los papeles de su vehículo");
								ShowPapelesToPlayer(playerid, playerid);
					        }
						    else if ( IsPlayerNearEx(playerid, strval(cmdtext[9]),
								 "410",
								 "411",
								 "412",
								 "El jugador que desea mostrarle los papeles del vehículo no se encuentra conectado",
								 "El jugador que desea mostrarle los papeles del vehículo no se encuentra logueado",
								 "El jugador que desea mostrarle los papeles del vehículo no se encuentra cerca de tí") )
						    {
								new MsgPapelesMe[MAX_TEXT_CHAT];
								format(MsgPapelesMe, sizeof(MsgPapelesMe), "le muestra los papeles de su vehículo a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
								Acciones(playerid, 8, MsgPapelesMe);
								ShowPapelesToPlayer(playerid, strval(cmdtext[9]));
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "413", "Este no es su vehículo");
						}
					}
				}
				// COMANDO: /Datos [ID]
				else if (strfind(cmdtext, "/Datos ", true) == 0 )
				{
				    if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 2 ||
						 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 4	||
						 PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn] )
					{
				        if(IsPlayerConnected(strval(cmdtext[7])) && PlayersDataOnline[strval(cmdtext[7])][State] == 3 )
				        {
					        new MsgDatos[MAX_TEXT_CHAT];
				            if ( PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn] )
				            {
						        format(MsgDatos, sizeof(MsgDatos), "Casa: %i", PlayersData[strval(cmdtext[7])][House]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
						        format(MsgDatos, sizeof(MsgDatos), "Alquiler: %i", PlayersData[strval(cmdtext[7])][Alquiler]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
						        format(MsgDatos, sizeof(MsgDatos), "Amigo: %i", PlayersData[strval(cmdtext[7])][SpawnAmigo]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
					        }
					        else
					        {
								Acciones(playerid, 8, "utiliza su GPS");
						        Acciones(playerid, 7, "GPS: Datos localizados");
							}
					        format(MsgDatos, sizeof(MsgDatos), "Nombre: %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
					        if ( PlayersData[strval(cmdtext[7])][Car] != -1 )
					        {
				 				format(MsgDatos, sizeof(MsgDatos), "Vehículo: %s", coches_Todos_Nombres[GetVehicleModel(PlayersData[strval(cmdtext[7])][Car]) - 400]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
					            if ( PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn] )
					            {
			 						format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[PlayersData[strval(cmdtext[7])][Car]][Matricula], PlayersData[strval(cmdtext[7])][Car]);
		 						}
		 						else
		 						{
			 						format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i", DataCars[PlayersData[strval(cmdtext[7])][Car]][Matricula]);
								}

						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
			 				}
			 				else
			 				{
				 				format(MsgDatos, sizeof(MsgDatos), "Vehículo: Ninguno");
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
				            return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "405", "El jugador que desea verle los datos no se encuentra conectado");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "404", "Usted no es detective");
					}
				}
				//////////--- /AD [Anuncio]
				else if (strfind(cmdtext, "/Ad ", true) == 0)
				{
		    	    if (strlen(cmdtext) > 9 && strlen(cmdtext) <= 83)
		    	    {
		    	        if (PlayersData[playerid][Phone] != 0)
		    	        {
		    	            new MensajeAD[MAX_TEXT_CHAT];
		    	            new MensajeADA[MAX_TEXT_CHAT];
		    	            if (gettime() - TimerAd >= 60)
		    	            {
								if (PlayersData[playerid][Dinero] > (strlen(MensajeAD) -3))
								{
								    TimerAd = gettime();
									strmid(MensajeAD, cmdtext, 4, strlen(cmdtext), sizeof(MensajeAD));
								    if ( !DetectSpam(playerid, MensajeAD) )
								    {
										format(MensajeADA, sizeof(MensajeADA), "Anuncio: %s. Móvil: %i (([%i]))", MensajeAD, PlayersData[playerid][Phone], playerid);
										format(MensajeAD, sizeof(MensajeAD), "Anuncio: %s. Móvil: %i", MensajeAD, PlayersData[playerid][Phone]);

									    if ( PlayersData[playerid][Admin] >= 1 )
									    {
									        SendClientMessage(playerid, 0x0FFF00FF, MensajeADA);
									    }
									    else
									    {
									        SendClientMessage(playerid, 0x0FFF00FF, MensajeAD);
										}
									}
									else
									{
									    switch ( random(10) )
									    {
									        case 0:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Busco ADP. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 1:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro Sabre. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 2:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Busco NFS. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 3:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro coche o moto. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 4:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Vendo sentinel $2500. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 5:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro moto, no más de $2500. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 6:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Vendo casa en $80000. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 7:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Busco alquiler barato. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 8:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro transporte público. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 9:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Contrato servicios de ADP. Móvil: %i", PlayersData[playerid][Phone]);
											}
										}
										format(MensajeADA, sizeof(MensajeADA), "%s (([%i]))", MensajeAD, playerid);
										format(MensajeAD, sizeof(MensajeAD), "%s", MensajeAD);
									}
									for (new i = 0; i < MAX_PLAYERS; i++)
									{
										if (playerid != i && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
										{
										    if ( PlayersData[i][Admin] >= 1 )
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeADA);
										    }
										    else
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeAD);
											}
										}
									}

									FaccionData[CNN][Deposito] = FaccionData[CNN][Deposito] + (strlen(MensajeAD) -3);

									format(MensajeAD, sizeof(MensajeAD), "Has gastado $%i en el anuncio.", strlen(MensajeAD) -3);
									SendInfoMessage(playerid, 2, "0", MensajeAD);
									GivePlayerMoneyEx(playerid, -strlen(MensajeAD) -3);
									print(MensajeAD);
									return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "409", "No tiene suficiente dinero para colgar un anuncio");
	 								return 1;
								}
							}
							else
							{
							    new MsgTimerAd[MAX_TEXT_CHAT];
							    format(MsgTimerAd, sizeof(MsgTimerAd), "Tienes que esperar %i segundos para el próximo anuncio", 60 - (gettime() - TimerAd));
								SendInfoMessage(playerid, 0, "408", MsgTimerAd);
							   	return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "407", "Tienes que comprarte un móvil para poder enviar anuncios");
					    	return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "406", "El anuncio tiene que contener más de 5 caracteres y menos de 80");
				    	return 1;
					}

		    	}
				// COMANDO: /Pasaporte [ID]
				else if (strfind(cmdtext, "/Pasaporte ", true) == 0 )
				{
				    if ( playerid == strval(cmdtext[11]) )
				    {
				        Acciones(playerid, 8, "mira su pasaporte");
				        ShowPasaporteToPlayer(playerid, strval(cmdtext[11]));
				    }
				    else if ( IsPlayerNearEx(playerid, strval(cmdtext[11]),
						 "140",
						 "141",
						 "142",
						 "El jugador que desea mostrarle el pasaporte no se encuentra conectado",
						 "El jugador que desea mostrarle el pasaporte no se encuentra logueado",
						 "El jugador que desea mostrarle el pasaporte no se encuentra cerca de tí") )
				    {
						new MsgPasaporteMe[MAX_TEXT_CHAT];
						format(MsgPasaporteMe, sizeof(MsgPasaporteMe), "le enseña su pasaporte a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgPasaporteMe);

						ShowPasaporteToPlayer(playerid, strval(cmdtext[11]));
				    }
				}
				// COMANDO: /Al [Alemán]
				else if (strfind(cmdtext, "/Al ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][0] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 0);
					}
					else
					{
						SendInfoMessage(playerid, 0, "483", "Usted no tiene título de alemán");
					}
				}
				// COMANDO: /Fr [Francés]
				else if (strfind(cmdtext, "/Fr ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][1] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 1);
					}
					else
					{
						SendInfoMessage(playerid, 0, "482", "Usted no tiene título de fancrés");
					}
				}
				// COMANDO: /Po [Portugés]
				else if (strfind(cmdtext, "/Po ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][2] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 2);
					}
					else
					{
						SendInfoMessage(playerid, 0, "481", "Usted no tiene título de portugués");
					}
				}
				// COMANDO: /It [Italiano]
				else if (strfind(cmdtext, "/It ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][3] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 3);
					}
					else
					{
						SendInfoMessage(playerid, 0, "448", "Usted no tiene título de italiano");
					}
				}
				// COMANDO: /In [Inglés]
				else if (strfind(cmdtext, "/In ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][4] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 4);
					}
					else
					{
						SendInfoMessage(playerid, 0, "449", "Usted no tiene título de inglés");
					}
				}
				// COMANDO: /Ja [Janponés]
				else if (strfind(cmdtext, "/Ja ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][5] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 5);
					}
					else
					{
						SendInfoMessage(playerid, 0, "450", "Usted no tiene título de japonés");
					}
				}
				// COMANDO: /Licencias [ID]
				else if (strfind(cmdtext, "/Licencias ", true) == 0 )
				{
				    if ( playerid == strval(cmdtext[11]) )
				    {
				        Acciones(playerid, 8, "mira sus licencias");
				        ShowLicenciasToPlayer(playerid, strval(cmdtext[11]));
				    }
				    else if ( IsPlayerNearEx(playerid, strval(cmdtext[11]),
						 "442",
						 "443",
						 "444",
						 "El jugador que desea mostrarle sus licencias no se encuentra conectado",
						 "El jugador que desea mostrarle sus licencias no se encuentra logueado",
						 "El jugador que desea mostrarle sus licencias no se encuentra cerca de tí") )
				    {
						new MsgLicenciasMe[MAX_TEXT_CHAT];
						format(MsgLicenciasMe, sizeof(MsgLicenciasMe), "le enseña sus licencias a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgLicenciasMe);

						ShowLicenciasToPlayer(playerid, strval(cmdtext[11]));
				    }
				}
				// COMANDO: /Idiomas [ID]
				else if (strfind(cmdtext, "/Idiomas ", true) == 0 )
				{
				    if ( playerid == strval(cmdtext[9]) )
				    {
				        Acciones(playerid, 8, "mira sus diplomas de idiomas");
				        ShowIdiomasToPlayer(playerid, strval(cmdtext[9]));
				    }
				    else if ( IsPlayerNearEx(playerid, strval(cmdtext[9]),
						 "445",
						 "446",
						 "447",
						 "El jugador que desea mostrarle sus idiomas no se encuentra conectado",
						 "El jugador que desea mostrarle sus idiomas no se encuentra logueado",
						 "El jugador que desea mostrarle sus idiomas no se encuentra cerca de tí") )
				    {
						new MsgIdiomasMe[MAX_TEXT_CHAT];
						format(MsgIdiomasMe, sizeof(MsgIdiomasMe), "le enseña sus diplomas idiomas a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgIdiomasMe);

						ShowIdiomasToPlayer(playerid, strval(cmdtext[9]));
				    }
				}
				// COMANDO: /N [Normal]
				else if (strfind(cmdtext, "/N ", true) == 0 )
				{
					SendChatStreamNormal(playerid, cmdtext[3], "Dice:");
		    	}
				// COMANDO: /Altavoz
			  	else if (strcmp("/Altavoz", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
		    	{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
				        if ( PlayersDataOnline[playerid][InCall] != -1 )
				        {
							if ( PlayersDataOnline[playerid][InCall] != 888 )
							{
							    if ( PlayersDataOnline[playerid][Altavoz] )
							    {
							        PlayersDataOnline[playerid][Altavoz] = false;
								    Acciones(playerid, 8, "descativa el altavoz del móvil");
							    }
							    else
							    {
							        PlayersDataOnline[playerid][Altavoz] = true;
								    Acciones(playerid, 8, "activa el altavoz del móvil");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1021", "Para este número no puede activar el altavoz!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1022", "Usted no se encuentra en una llamada");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1023", "Tú no tienes móvil");
					}
		    	}
				// COMANDO: /C (Colgar)
			  	else if (strcmp("/C", cmdtext, true, 2) == 0 && strlen(cmdtext) == 2)
		    	{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
				        if ( PlayersDataOnline[playerid][InCall] != -1 )
				        {
							PayCall(playerid);
							if ( PlayersDataOnline[playerid][InCall] != 888 )
							{
								PayCall(PlayersDataOnline[playerid][InCall]);
								Acciones(PlayersDataOnline[playerid][InCall], 8, "guarda su móvil");
								SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_COLGAR_DESCOLGAR, " Han colgado!");
				                PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado] = false;
								SetPlayerColgar(PlayersDataOnline[playerid][InCall]);
				                PlayersDataOnline[PlayersDataOnline[playerid][InCall]][InCall] = -1;
							}
							else
							{
								if ( CallCNN == playerid )
								{
									SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica finalizada.");
								    CallCNN = -1;
								}
							}
							Acciones(playerid, 8, "guarda su móvil");
			                PlayersDataOnline[playerid][IsDescolgado] = false;
							SendClientMessage(playerid, COLOR_COLGAR_DESCOLGAR, " Colgaste");
							SetPlayerColgar(playerid);
			                PlayersDataOnline[playerid][InCall] = -1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "388", "Usted no se encuentra en una llamada");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "389", "Tú no tienes móvil");
					}
		    	}
				// COMANDO: /D (Descolgar)
			  	else if (strcmp("/D", cmdtext, true, 2) == 0 && strlen(cmdtext) == 2)
		    	{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
				        if ( PlayersDataOnline[playerid][InCall] != -1 )
				        {
				            if ( !PlayersDataOnline[playerid][IsDescolgado] )
				            {
					            PlayersDataOnline[playerid][Altavoz] = false;
                                PlayersDataOnline[playerid][ICall] = false;
				                PlayersDataOnline[PlayersDataOnline[playerid][InCall]][TimeCall] = gettime();
						        PlayersDataOnline[playerid][TimeCall] = gettime();
				                PlayersDataOnline[playerid][IsDescolgado] = true;

								Acciones(playerid, 8, "descuelga su móvil");
								SendClientMessage(playerid, COLOR_COLGAR_DESCOLGAR, " Descolgaste el móvil!");
								SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_COLGAR_DESCOLGAR, " Han descolgado!");

								SetPlayerDescolgar(playerid);
							}
							else
							{
	                        	SendInfoMessage(playerid, 0, "390", "Usted ya descolgó esta llamada");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "391", "Usted no se encuentra en una llamada");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "392", "Tú no tienes móvil");
					}
				}
				// COMANDO: /SMS [Número] [Texto]
				else if (strfind(cmdtext, "/SMS ", true) == 0 )
				{
					SendSMS(playerid, strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]), cmdtext[GetPosSpace(cmdtext, 2)]);
				}
				// COMANDO: /Casar [ID] [ID]
				else if (strfind(cmdtext, "/Casar ", true) == 0 )
				{
					if ( PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] <= 3 )
					{
						new FistID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						new SecondID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						if ( FistID != SecondID )
						{
						    if ( IsPlayerNearEx(playerid, FistID,
								 "926",
								 "927",
								 "928",
								 "El primer jugador que deseas casar no se encuentra conectado",
								 "El primer jugador que deseas casar no se ha logueado",
								 "El primer jugador que deseas casar no se encuentra cerca de tí") &&
								 IsPlayerNearEx(playerid, SecondID,
								 "929",
								 "930",
								 "931",
								 "El segundo jugador que deseas casar no se encuentra conectado",
								 "El segundo jugador que deseas casar no se ha logueado",
								 "El segundo jugador que deseas casar no se encuentra cerca de tí") 						 )
						    {
								if ( strlen(PlayersData[FistID][GirlFreind]) == 2 && strlen(PlayersData[SecondID][GirlFreind]) == 2)
								{
									format(PlayersData[FistID][GirlFreind], MAX_PLAYER_NAME, "%s", PlayersDataOnline[SecondID][NameOnline]);
									format(PlayersData[SecondID][GirlFreind], MAX_PLAYER_NAME, "%s", PlayersDataOnline[FistID][NameOnline]);

									new MsgCasados[MAX_TEXT_CHAT];
									format(MsgCasados, sizeof(MsgCasados), "Has casado a %s con %s", PlayersDataOnline[FistID][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(playerid, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "%s te ha casado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[FistID][NameOnlineFix]);
									SendInfoMessage(SecondID, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "%s te ha casado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(FistID, 3, "0", MsgCasados);
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "932", "Uno de los jugadores que deseas casar, ya se encuentra casado.");
								}
						    }
						}
					    else
					    {
							SendInfoMessage(playerid, 0, "943", "Has introducído las mismas IDs para casar.");
						}
					}
				    else SendAccessError(playerid, "Casar");
				}
				// COMANDO: /DivorciarEx
				else if (strfind(cmdtext, "/DivorciarEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
					    if ( IsPlayerConnected(strval(cmdtext[13])) )
					    {
					        if ( strlen(PlayersData[strval(cmdtext[13])][GirlFreind]) != 2 )
					        {
								format(PlayersData[strval(cmdtext[13])][GirlFreind], MAX_PLAYER_NAME, "No");

								new MsgDivorciarAdm[MAX_TEXT_CHAT];
								format(MsgDivorciarAdm, sizeof(MsgDivorciarAdm), "%s Has divorciado a %s con el comando /DivorciarEx [ID]", LOGO_STAFF, PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDivorciarAdm);
								format(MsgDivorciarAdm, sizeof(MsgDivorciarAdm), "%s Has sido devorciado por %s con el comando /DivorciarEx [ID]", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix]);
								SendInfoMessage(strval(cmdtext[13]), 3, "0", MsgDivorciarAdm);
							}
							else
							{
								SendInfoMessage(playerid, 0, "942", "El jugador que desea divorciar ya se encuentra divorciado");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "924", "El jugador que desea divorciar no se encuentra conectado.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "925", "Tú no tienes acceso a el comando /DivorciarEx.");
				        return 1;
					}
				}
				// COMANDO: /Divorciar [ID] [ID]
				else if (strfind(cmdtext, "/Divorciar ", true) == 0 )
				{
					if ( PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] <= 3 )
					{
						new FistID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						new SecondID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						if ( FistID != SecondID )
						{
						    if ( IsPlayerNearEx(playerid, FistID,
								 "934",
								 "935",
								 "936",
								 "El primer jugador que deseas divorciar no se encuentra conectado",
								 "El primer jugador que deseas divorciar no se ha logueado",
								 "El primer jugador que deseas divorciar no se encuentra cerca de tí") &&
								 IsPlayerNearEx(playerid, SecondID,
								 "937",
								 "938",
								 "939",
								 "El segundo jugador que deseas divorciar no se encuentra conectado",
								 "El segundo jugador que deseas divorciar no se ha logueado",
								 "El segundo jugador que deseas divorciar no se encuentra cerca de tí") 						 )
						    {
								if ( strlen(PlayersData[FistID][GirlFreind]) != 2 && strlen(PlayersData[SecondID][GirlFreind]) != 2 &&
									 strfind(PlayersData[FistID][GirlFreind], PlayersDataOnline[SecondID][NameOnline], false) == 0 &&
									 strlen(PlayersData[FistID][GirlFreind]) == strlen(PlayersDataOnline[SecondID][NameOnline]) &&
									 strfind(PlayersData[SecondID][GirlFreind], PlayersDataOnline[FistID][NameOnline], false) == 0 &&
									 strlen(PlayersData[SecondID][GirlFreind]) == strlen(PlayersDataOnline[FistID][NameOnline]) )
								{
									format(PlayersData[FistID][GirlFreind], MAX_PLAYER_NAME, "No");
									format(PlayersData[SecondID][GirlFreind], MAX_PLAYER_NAME, "No");

									new MsgCasados[MAX_TEXT_CHAT];
									format(MsgCasados, sizeof(MsgCasados), "Has divorciado a %s con %s", PlayersDataOnline[FistID][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(playerid, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "%s te ha divorciado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[FistID][NameOnlineFix]);
									SendInfoMessage(SecondID, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "%s te ha divorciado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(FistID, 3, "0", MsgCasados);
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "940", "Uno de los jugadores que deseas divorciar, ya se encuentra divorciado.");
								}
						    }
						}
					    else
					    {
							SendInfoMessage(playerid, 0, "943", "Has introducído las mismas IDs para divorciar.");
						}
					}
				    else SendAccessError(playerid, "Divorciar");
				}
				// COMANDO: /Llamar [Número]
				else if (strfind(cmdtext, "/Llamar ", true) == 0 )
				{
	                SetPlayerCall(playerid, strval(cmdtext[8]));
				}
				// COMANDO: /Dados
				else if (strcmp("/Dados", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6 )
				{
				    if ( IsObjectInBolsillo(playerid, 2) )
				    {
				        new MsgDados[MAX_TEXT_CHAT];
						new RndDados = random(7) + 1;
						format(MsgDados, sizeof(MsgDados), "Salió el número %i en los dados que tiró %s", RndDados, PlayersDataOnline[playerid][NameOnlineFix]);
				        Acciones(playerid, 8, "tira los dados");
				        Acciones(playerid, 7, MsgDados);
					}
					else
					{
						SendInfoMessage(playerid, 0, "373", "Tú no tienes dados");
					}
				}
				// COMANDO: /Patinar
				else if (strcmp("/Patinar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
				{
				    if ( IsObjectInBolsillo(playerid, 1) )
				    {
				        Acciones(playerid, 8, "se calza unos patines y echa andar");
						ApplyAnimation(playerid,"SKATE",SKATE_ANIMATIONS [1], 4.0, 1, 1, 1, 1, 1, 1);
					}
					else
					{
						SendInfoMessage(playerid, 0, "372", "Tú no tienes patines");
					}
				}
				// COMANDO: /Agenda
				else if (strcmp("/Agenda", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
				{
				    if ( IsObjectInBolsillo(playerid, 4) )
				    {
				        Acciones(playerid, 8, "saca su agenda");
				        ShowHomeAgenda(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "893", "Tú no tienes agenda");
					}
				}
				// COMANDO: /Tirar
				else if (strfind(cmdtext, "/Tirar ", true) == 0)
				{
					if (strcmp("/Tirar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11 )
					{
						new MyWeapons; MyWeapons = GetPlayerWeapon(playerid);
				        if ( MyWeapons != 0 )
				        {
				            RemovePlayerWeapond(playerid, MyWeapons);
							new MsgTirar[MAX_TEXT_CHAT];
					        format(MsgTirar, sizeof(MsgTirar), "tiró un %s", SlotNameWeapon[MyWeapons]);
					        Acciones(playerid, 8, MsgTirar);
					        SendInfoMessage(playerid, 2, "0", "Tiraste un arma");
						}
						else
						{
							SendInfoMessage(playerid, 0, "281", "No tienes un arma en las manos!");
						}
					}
					// COMANDO: /Tirar Cartera [ID_Cartera]
			  		else if (strfind(cmdtext, "/Tirar Cartera ", true) == 0)
				    {
				        new CarteraID   = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        if ( CarteraID >= 1 && CarteraID <= MAX_COUNT_CARTERA )
				        {
				            CarteraID--;
				            if ( PlayersData[playerid][Cartera][CarteraID] != CARTERA_TYPE_NADA )
				            {
								new ObjectRemove = RemoveObjectToCartera(playerid, CarteraID);

								new MsgTirarCartera[MAX_TEXT_CHAT];
								format(MsgTirarCartera, sizeof(MsgTirarCartera), "tiró un %s", CarteraNames[ObjectRemove]);
						        Acciones(playerid, 8, MsgTirarCartera);

								new MsgDarCarteraYOU[MAX_TEXT_CHAT];
							    format(MsgDarCarteraYOU, sizeof(MsgDarCarteraYOU), "Tiraste un %s.", CarteraNames[ObjectRemove]);
								SendInfoMessage(playerid, 2, "0", MsgDarCarteraYOU);
				            }
				            else
				            {
								SendInfoMessage(playerid, 0, "1328", "No tienes nada en esa parte de la cartera!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1327", "El número de cartera debe estár comprendido entre 1 y 6");
						}

				    }
					else if (strcmp("/Tirar Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 )
					{
						new Float:Chaleco1;
						GetPlayerArmour(playerid, Chaleco1);
						if ( Chaleco1 > 0.0 )
						{
							SetPlayerArmourEx(playerid, -Chaleco1);
					        Acciones(playerid, 8, "tiró su chaleco");
					        SendInfoMessage(playerid, 2, "0", "Has tirado tu chaleco");
						}
						else
						{
							SendInfoMessage(playerid, 0, "880", "Usted no tienes ningún chaleco puesto encima.");
						}
					}
					// COMANDO: /Tirar Artículo [ID_Bolsa]
			  		else if (strfind(cmdtext, "/Tirar Artículo ", true) == 0 ||
					  		 strfind(cmdtext, "/Tirar Articulo ", true) == 0)
				    {
				        new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						DropArticlePlayerToPlayer(playerid, BolsaID);
				    }
					else if (strcmp("/Tirar Patines", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 )
					{
					    if ( IsObjectInBolsillo(playerid, 1) )
					    {
								RemoveObjectBolsillo(playerid, 1);
						        Acciones(playerid, 8, "ha tirado unos patines al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tus patines, ahora tendrás que caminar más");
						        ClearAnimations(playerid, true);
						}
						else
						{
							SendInfoMessage(playerid, 0, "371", "Tú no tienes patines");
						}
					}
					// COMANDO: /Tirar Dados
					else if (strcmp("/Tirar Dados", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 )
					{
					    if ( IsObjectInBolsillo(playerid, 2) )
					    {
								RemoveObjectBolsillo(playerid, 2);
						        Acciones(playerid, 8, "ha tirado unos dados al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tus dados de la suerte, ahora no podrá jugar con ellos");
						}
						else
						{
							SendInfoMessage(playerid, 0, "370", "Tú no tienes dados");
						}
					}
					// COMANDO: /Tirar Agenda
					else if ( strcmp("/Tirar Agenda", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 )
					{
					    if ( IsObjectInBolsillo(playerid, 4) )
					    {
								RemoveObjectBolsillo(playerid, 4);
						        Acciones(playerid, 8, "ha tirado su agenda al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tu agenda!");
						}
						else
						{
							SendInfoMessage(playerid, 0, "1068", "Tú no tienes agenda!");
						}
					}
					// COMANDO: /Tirar Bolsa
					else if ( strcmp("/Tirar Bolsa", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 )
					{
					    if ( PlayersData[playerid][HaveBolsa] )
					    {
								PlayersData[playerid][HaveBolsa] = false;
						        Acciones(playerid, 8, "ha tirado su bolsa al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tu bolsa!");
						        CleanArticulosBolsa(playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1229", "Tú no tienes bolsa!");
						}
					}
					// COMANDO: /Tirar Móvil
					else if (strcmp("/Tirar Móvil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
							 strcmp("/Tirar Movil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
					{
					    if ( PlayersData[playerid][Phone] != 0)
					    {
					        if ( PlayersDataOnline[playerid][InCall] == -1 )
					        {
								RemoveObjectBolsillo(playerid, 3);
								PlayersData[playerid][Phone] = 0;
						        Acciones(playerid, 8, "ha tirado su móvil al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado su móvil, ahora no podrá realizar llamadas");

						        new query[200];
						        mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='0' WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
							    mysql_query(dataBase, query, false);
							}
							else
							{
								SendInfoMessage(playerid, 0, "369", "Finalize su llamada telefónica antes de tirar su móvil");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "368", "Tú no tienes móvil");
						}
					}
					// COMANDO: /Tirar Coche [ID]
					else if (strfind(cmdtext, "/Tirar Coche ", true) == 0)
					{
					    if ( IsPlayerInAnyVehicle(playerid) )
					    {
					        if ( GetPlayerVehicleSeat(playerid) == 0 )
					        {
								if ( IsPlayerConnected(strval(cmdtext[13])) )
								{
								    if ( strval(cmdtext[13]) != playerid )
								    {
										if ( GetPlayerVehicleID(playerid) == GetPlayerVehicleID(strval(cmdtext[13])) )
										{
											new MsgFormatTirar[50];
											format(MsgFormatTirar, sizeof(MsgFormatTirar), "tirar del vehículo a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
										    if ( IntentarAccion(playerid, MsgFormatTirar, random(4)) )
										    {
							                    RemovePlayerFromVehicle(strval(cmdtext[13]));
						                   	}
											return 1;
										}
										else
										{
											SendInfoMessage(playerid, 0, "103", "El jugador que le desea tirar del vehículo no se encuentra en el.");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "104", "Has introducído tu misma ID a tirar del vehículo.");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "105", "El jugador que le desea tirar del vehículo no se encuentra conectado.");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "106", "Tienes que estar en el asiento del conductor para poder tirar a alguién.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "107", "No te encuentras dentro de un vehículo.");
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "367", "Quizás quiso decir: /Tirar {Coche [ID], Móvil, Dados, Patines, Chaleco, Arma, Agenda, Bolsa, Artículo [ID_Bolsa]}");
						SendInfoMessage(playerid, 0, "367", "Quizás quiso decir: /Tirar {Cartera [ID_Cartera]}");
					}
				}
				// COMANDO: /P [DM]
				else if (strfind(cmdtext, "/P ", true) == 0)
				{
				    if ( PlayersDataOnline[playerid][ModeDM] )
				    {
					    SendMessageDM(playerid, cmdtext[3]);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1149", "No te encuentras en modo DeathMatch!");
					}
				}
				// COMANDO: /E [Texto]
				else if (strfind(cmdtext, "/E ", true) == 0)
				{
				    if ( PlayersDataOnline[playerid][ModeDM] )
				    {
						new MsgDM[MAX_TEXT_CHAT];
						format(MsgDM, sizeof(MsgDM), "* DM Equipo %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[3]);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] && PlayersDataOnline[i][TeamDM] == PlayersDataOnline[playerid][TeamDM])
							{
								SendClientMessage(i, COLOR_DM_TEAM, MsgDM);
							}
						}
						print(MsgDM);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1341", "No te encuentras en modo DeathMatch!");
					}
				}
				// COMANDO: /F [Family]
				else if (strfind(cmdtext, "/F ", true) == 0)
				{
				    if ( FaccionData[PlayersData[playerid][Faccion]][Family] )
				    {
						if ( PlayersDataOnline[playerid][StateChannelFamily] )
						{
						    SendMessageFamily(playerid, cmdtext[3]);
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "108", "Tú tienes cerrado el canal Family personal, abrelo con /Estado Family y luego usa /F [Family]");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "109", "Su Facción no tiene canal /F [Family]");
					}
				}
				// COMANDO: /R [Radio]
				else if (strfind(cmdtext, "/R ", true) == 0)
				{
				    if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
				    {
						if ( PlayersDataOnline[playerid][StateChannelRadio] )
						{
							Acciones(playerid, 8, "habla por radio");
						    SendMessageRadio(playerid, PlayersDataOnline[playerid][Frecuencia], cmdtext[3]);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "110", "Tú tienes cerrado el canal Radio personal, abrelo con /Estado Radio y luego usa /R [Radio]");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "111", "Su Facción no tiene canal /R [Radio]");
					}
				}
				// COMANDO: /Rg [Radio General]
				else if (strfind(cmdtext, "/Rg ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD ||
						 PlayersData[playerid][Faccion] == SFMD ||
						 PlayersData[playerid][Faccion] == LSMD )
				    {
						if ( PlayersDataOnline[playerid][StateChannelFamily] )
						{
							Acciones(playerid, 8, "habla por radio");
							if ( PlayersData[playerid][Faccion] == SFPD ||
						 	     PlayersData[playerid][Faccion] == LSPD  )
						 	{
						    	SendMessageRadioGeneral(playerid, cmdtext[4]);
					    	}
					    	else
					    	{
						    	SendMessageRadioGeneralSAMD(playerid, cmdtext[4]);
					    	}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1502", "Tú tienes cerrado el canal de Radio General, abrelo con /Estado Rg y luego usa /Rg [Radio General]");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1503", "Usted no es médico ni policía!");
					}
				}
				// COMANDO: /Stats
			  	else if (strcmp("/Stats", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
		    	{
		    	    GetPlayerStats(playerid, playerid);
				}
				// COMANDO: /Tr [Transmitir]
				else if (strfind(cmdtext, "/Tr ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 5 )
				    {
				        new MsgTransmision[MAX_TEXT_CHAT];
				        if ( PlayersData[playerid][Sexo] )
				        {
				        	format(MsgTransmision, sizeof(MsgTransmision), "** Reportera %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
			        	}
			        	else
			        	{
				        	format(MsgTransmision, sizeof(MsgTransmision), "** Reportero %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
						}
			            for (new i = 0; i < MAX_PLAYERS; i++)
			            {
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN] )
							{
						   		SendClientMessage(i, COLOR_DE_TRANSMISION, MsgTransmision);
					   		}
				   		}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "224", "Tú no eres reportero!");
					}
				}
				// COMANDO: /Na [Narrar]
				else if (strfind(cmdtext, "/Na ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 4)
				    {
				        if (IsPlayerInRangeOfPoint(playerid, 20.0, 1118.3374,1260.9243,10.8203) )
				        {
					        new MsgTransmision[MAX_TEXT_CHAT];
					        if ( PlayersData[playerid][Sexo] )
					        {
						        format(MsgTransmision, sizeof(MsgTransmision), "** Narradora %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
					   		}
					   		else
					   		{
						        format(MsgTransmision, sizeof(MsgTransmision), "** Narrador %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
							}
				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN] )
								{
							   		SendClientMessage(i, COLOR_DE_NARRACION, MsgTransmision);
						   		}
					   		}
						}
					    else
					    {
							SendInfoMessage(playerid, 0, "907", "Tienes que estár en el estudio para narrar!");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "906", "Tú no eres narrador!");
					}
				}
				// COMANDO: /Rango [ID] [ID_Rango]
				else if (strfind(cmdtext, "/Rango ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
						new idTochange = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						new RangoID = strval(cmdtext[GetPosSpace(cmdtext,2)]) -1;
						if ( strlen(cmdtext) > 3 )
						{
						    if ( IsPlayerNearEx(playerid, idTochange,
								 "140",
								 "141",
								 "142",
								 "El jugador que desea dar rango no se encuentra conectado",
								 "El jugador que desea dar rango no se encuentra logueado",
								 "El jugador que desea dar rango no se encuentra cerca de tí") )
						    {
								if ( PlayersData[idTochange][Faccion] == PlayersData[playerid][Faccion] )
								{
								    if ( RangoID >= 1 && RangoID <= GetMaxFaccionRango(PlayersData[playerid][Faccion]) )
								    {
								        if ( PlayersData[playerid][Rango] == 1 && PlayersData[idTochange][Rango] <= 1 ) return SendInfoMessage(playerid, 0, "", "No puedes cambiarle el rango a este usuario");
								        if ( PlayersData[playerid][Rango] == 1 && RangoID == 1 ) return SendInfoMessage(playerid, 0, "", "Solo el lider puede asignar ese rango");

								        if ( RangoID != PlayersData[idTochange][Rango] )
								        {
				                            PlayersData[idTochange][Rango] = RangoID;
											new MsgRangoUser[MAX_TEXT_CHAT]; format(MsgRangoUser, sizeof(MsgRangoUser), "Has asignado el rango \"%s\" ha %s", FaccionesRangos[PlayersData[playerid][Faccion]][RangoID], PlayersDataOnline[idTochange][NameOnlineFix]);
											new MsgRangoMe[MAX_TEXT_CHAT]; format(MsgRangoMe, sizeof(MsgRangoMe), "%s te ha asignado el rango \"%s\"", PlayersDataOnline[playerid][NameOnlineFix], FaccionesRangos[PlayersData[playerid][Faccion]][RangoID]);
				                            SendInfoMessage(idTochange, 3, "0", MsgRangoMe);
				                            SendInfoMessage(playerid, 3, "0", MsgRangoUser);
	  			                            SetPlayerSelectedTypeSkin(idTochange, true);
			                            }
			                            else
			                            {
											SendInfoMessage(playerid, 0, "281", "Ese jugador ya tiene ese rango asignado.");
										}
		                           	}
									else
									{
										SendInfoMessage(playerid, 0, "114", "El rango introducído no existe para tu facción");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "115", "El jugador que desea dar rango no pertenece a su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "116", "Ha introducído mal el sintaxis del comando /Rango. Ejemplo correcto: /Rango 2 7");
						}
					}
					else SendAccessError(playerid, "Rango");
				}
				// COMANDO: /Expulsar [ID]
				else if (strfind(cmdtext, "/Expulsar ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
					    new IdSend[4]; strmid(IdSend, cmdtext, 10, strlen(cmdtext), sizeof(IdSend));
					    if ( IsPlayerNearEx(playerid, strval(IdSend),
							 "135",
							 "136",
							 "137",
							 "El jugador que desea expulsar no se encuentra conectado",
							 "El jugador que desea expulsar no se encuentra logueado",
							 "El jugador que desea expulsar no se encuentra cerca de tí") )
					    {
							if ( PlayersData[strval(IdSend)][Faccion] == PlayersData[playerid][Faccion] )
							{
							    if ( PlayersData[playerid][Rango] == 1 && PlayersData[strval(IdSend)][Rango] <= 1 ) return SendInfoMessage(playerid, 0, "", "No puedes expulsar a este usuario");

	                            PlayersData[strval(IdSend)][Faccion] = 0;
	                            PlayersData[strval(IdSend)][Rango]   = 7;
								PlayersData[strval(IdSend)][HorasWork] = 0;
								PlayersData[strval(IdSend)][SpawnFac] = 0;

								new MsgExpulsarUser[MAX_TEXT_CHAT]; format(MsgExpulsarUser, sizeof(MsgExpulsarUser), "%s te ha expulsado de la facción!", PlayersDataOnline[playerid][NameOnlineFix]);
								new MsgExpulsarMe[MAX_TEXT_CHAT]; format(MsgExpulsarMe, sizeof(MsgExpulsarMe), "Expulsaste a %s de tú facción.", PlayersDataOnline[strval(IdSend)][NameOnlineFix]);
	                            SendInfoMessage(strval(IdSend), 3, "0", MsgExpulsarUser);
	                            SendInfoMessage(playerid, 3, "0", MsgExpulsarMe);

					   		    if ( PlayersData[playerid][Sexo] )
							    {
									PlayersData[strval(IdSend)][Skin] = 56;
								}
								else
								{
									PlayersData[strval(IdSend)][Skin] = 26;
								}
								SetPlayerSkinEx(strval(IdSend), PlayersData[strval(IdSend)][Skin]);
							    CheckAsignados(playerid);
								SetPlayerLockAllVehicles(strval(IdSend));
							    UpdateSpawnPlayer(strval(IdSend));
							}
							else
							{
								SendInfoMessage(playerid, 0, "118", "El jugador que desea expulsar no pertenece a su facción");
							}
						}
					}
					else SendAccessError(playerid, "Expulsar");
				}
				// COMANDO: /Invitar [ID]
				else if (strfind(cmdtext, "/Invitar ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] == 0 )
				    {
					    new IdSend[4]; strmid(IdSend, cmdtext, 9, strlen(cmdtext), sizeof(IdSend));
					    if ( IsPlayerNearEx(playerid, strval(IdSend),
							 "120",
							 "121",
							 "122",
							 "El jugador que desea invitar no se encuentra conectado",
							 "El jugador que desea invitar no se encuentra logueado",
							 "El jugador que desea invitar no se encuentra cerca de tí") )
					    {
							if ( PlayersData[strval(IdSend)][Faccion] == 0 )
							{
		                      	PlayersDataOnline[strval(IdSend)][InvitePlayer]  = playerid;
								PlayersDataOnline[strval(IdSend)][InviteFaccion] = PlayersData[playerid][Faccion];

								new MsgInviteUser[MAX_TEXT_CHAT]; format(MsgInviteUser, sizeof(MsgInviteUser), "Enviaste un invite a %s.", PlayersDataOnline[strval(IdSend)][NameOnlineFix]);
								new MsgInviteMe[MAX_TEXT_CHAT]; format(MsgInviteMe, sizeof(MsgInviteMe), "Has recibido una invite del líder %s para entrar en la Facción \"%s\", Usa (/Aceptar Invite)",PlayersDataOnline[playerid][NameOnlineFix], FaccionData[PlayersData[playerid][Faccion]][NameFaccion]);
	                            SendInfoMessage(strval(IdSend), 3, "0", MsgInviteMe);
	                            SendInfoMessage(playerid, 3, "0", MsgInviteUser);
							}
							else
							{
								SendInfoMessage(playerid, 0, "120", "El jugador que desea invitar ya pertenece a una facción");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "121", "Tú no eres líder.");
					}
				}
				// COMANDO: /Precio coche
			  	else if (strcmp("/Precio Coche", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
		    	{
					if ( PlayersData[playerid][Faccion] == NFS )
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
		   				if ( MyNearCar)
					    {
		   				    if ( MyNearCar <= MAX_CAR_DUENO && strlen(DataCars[MyNearCar][Dueno]) == 1 )
		   				    {
		   				        new MsgNFSPrecio[MAX_TEXT_CHAT];
			   				    format(MsgNFSPrecio, sizeof(MsgNFSPrecio), "Éste vehículo modelo \"%s\" tiene un precio de $%i.", coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400], coches_Todos_Precios[GetVehicleModel(MyNearCar) - 400]);
			   				    SendInfoMessage(playerid, 2, "0", MsgNFSPrecio);
							}
							else
							{
								SendInfoMessage(playerid, 0, "978", "Éste vehículo no está en venta!");
							}
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "977", "No eres vendedor de vehículos!");
					}
		    	}
				// COMANDO: /Izquierda
			  	else if (strcmp("/Izquierda", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
		    	{
					IntermitenteIzquierdo(playerid);
		    	}
				// COMANDO: /Derecha
			  	else if (strcmp("/Derecha", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
		    	{
					IntermitenteDerecho(playerid);
		    	}
				// COMANDO: /Estacionamiento
			  	else if (strcmp("/Estacionamiento", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
		    	{
					IntermitenteEstacionamiento(playerid);
		    	}
				// COMANDO: /Luces
			  	else if (strcmp("/Luces", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
		    	{
					IntermitenteEncendido(playerid);
		    	}
		    	// Testing Commands
			    // /play [soundid]
				else if (strfind(cmdtext, "/play ", true) == 0)
				{
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new soundidPlay = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
                        PlayerPlaySound(playerid, soundidPlay,0.0,0.0,0.0);
				    }
			    }
				// COMANDO: /Objetos
			  	else if (strcmp("/Objetos", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
		    	{
				    ShowObjectos(playerid);
				    return 1;
		    	}
				// COMANDO: /Hora
			  	else if (strcmp("/Hora", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
		    	{
				    MostrarHora(0 ,playerid);
				    return 1;
		    	}
				// COMANDO: /Estado
				else if (strfind(cmdtext, "/Estado", true) == 0)
				{
					// /Estado
					if (strcmp("/Estado", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
					{
	                    ShowMenuDescription(playerid);
					}
			//		16- *       /Estado Whisper                  - Cierra y Abre los wisper
					else if (strcmp("/Estado Whisper", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
					{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 1)
						{
							Comandos_Admin(16, playerid, 0, PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "186", "Tú no tienes acceso a el comando /Estado Whisper.");
						}
					}
			//      /Estado Commands
					else if (strcmp("/Estado Commands", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 && PlayersData[playerid][Admin] == 9 )
					{
						new MensajeWisperCerradoAbierto[50];
						if ( PlayersDataOnline[playerid][SendCommands] )
						{
						    PlayersDataOnline[playerid][SendCommands] = false;
					        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Avisos de SendCommands cerrado!", LOGO_STAFF);
			 			}
			 			else if  ( !PlayersDataOnline[playerid][SendCommands] )
			 			{
							PlayersDataOnline[playerid][SendCommands] = true;
					        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Avisos de SendCommands abierto!.", LOGO_STAFF);
			 			}
				        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeWisperCerradoAbierto);
					}
					// /Estado Capó
					else if (strcmp("/Estado Capó", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
							 strcmp("/Estado Capo", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
					{
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
							new Float:VelocityVehicle[3];
							GetVehicleVelocity(MyNearCar, VelocityVehicle[0], VelocityVehicle[1], VelocityVehicle[2]);
							if ((VelocityVehicle[0] + VelocityVehicle[1] + VelocityVehicle[2]) == 0.0)
							{
								if ( !DataCars[MyNearCar][Lock] ||
					    			strlen(DataCars[MyNearCar][Dueno]) == 1 && MyNearCar <= MAX_CAR_DUENO )
								{
								    if ( DataCars[MyNearCar][CapoState] )
								    {
								    	DataCars[MyNearCar][CapoState] = false;
							    	}
							    	else
							    	{
								    	DataCars[MyNearCar][CapoState] = true;
									}
									IsVehicleOff(MyNearCar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1015", "Éste vehículo se encuentra cerrado!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1008", "No puedes abrir el capó de un vehículo en movimiento");
							}
						}
					}
					// /Estado Alarma
					else if (strcmp("/Estado Alarma", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
					{
						LockAlarma(playerid);
					}
				    // COMANDO: /Estado Taxí
				  	else if (strcmp("/Estado Taxí", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
					  		 strcmp("/Estado Taxi", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 )
			    	{
						if ( PlayersData[playerid][Faccion] == TAXI )
					    {
							new MyNearCar = IsPlayerInNearVehicle(playerid);
							if ( MyNearCar )
							{
								new TaxiID = IsVehicleTaxi(MyNearCar);
							    if ( TaxiID != -1 )
							    {
							        new MsgEstadoTaxi[MAX_TEXT_CHAT];
									if ( TaxisTaximetro[TaxiID][TaxiOn] )
									{
									    TaxisTaximetro[TaxiID][TaxiOn] = false;
									    format(MsgEstadoTaxi, sizeof(MsgEstadoTaxi), "desactiva el taxímetro del taxí");
				   					}
				   					else
				   					{
									    TaxisTaximetro[TaxiID][TaxiOn] = true;
									    format(MsgEstadoTaxi, sizeof(MsgEstadoTaxi), "activa el taxímetro del taxí");

									    for ( new i = 0; i < MAX_PLAYERS; i++)
									    {
									        if ( IsPlayerConnected(i) &&
												 PlayersDataOnline[i][State] == 3 &&
											     IsPlayerInAnyVehicle(i) &&
												 CheckValidPlayerToTaxi(i, TaxiID) )
									        {
									            SetPlayerTaxi(i, TaxiID, GetPlayerVehicleSeat(i));
											}
										}
									}
								    Acciones(playerid, 8, MsgEstadoTaxi);
								}
								else
								{
									SendInfoMessage(playerid, 0, "975", "Éste vehículo no es un taxí!");
								}
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "976", "Usted no es Taxísta!!");
						}
			    	}
				    // COMANDO: /Estado OOC
				  	else if (strcmp("/Estado OOC", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
						if ( PlayersDataOnline[playerid][StateChannelOOC] )
						{
	      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal OOC personal.");
	      					PlayersDataOnline[playerid][StateChannelOOC] = false;
	   					}
	   					else
	   					{
	      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal OOC personal.");
	                        PlayersDataOnline[playerid][StateChannelOOC] = true;
						}
			    	}
					// COMANDO: /Estado Trabajo
				  	else if (strcmp("/Estado Trabajo", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersData[playerid][Faccion] == TAXI ||
							 PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD )
			    	    {
							new MsgServicio[MAX_TEXT_CHAT];
							if ( PlayersDataOnline[playerid][StateJob] )
							{
								if ( PlayersData[playerid][Faccion] == TAXI )
								{
								    if ( PlayersData[playerid][Rango] == 4 )
								    {
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Autobús %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else if ( PlayersData[playerid][Rango] == 5 )
									{
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Tren %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgServicio, sizeof(MsgServicio), "** El taxísta %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
								}
								else
								{
								    if ( PlayersData[playerid][Rango] == 5 || PlayersData[playerid][Rango] == 2)
								    {
										format(MsgServicio, sizeof(MsgServicio), "** El bombero %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgServicio, sizeof(MsgServicio), "** El médico %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
								}

		      					SendInfoMessage(playerid, 2, "0", "Ya no estás de servicio.");
		      					PlayersDataOnline[playerid][StateJob] = false;
		   					}
		   					else
		   					{
								if ( PlayersData[playerid][Faccion] == TAXI )
								{
								    if ( PlayersData[playerid][Rango] == 4 )
								    {
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Autobús %s está de servicio. Llamar al 145.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else if ( PlayersData[playerid][Rango] == 5 )
									{
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Tren %s está de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgServicio, sizeof(MsgServicio), "** El taxísta %s está de servicio. Llamar al 145.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
								}
								else
								{
								    if ( PlayersData[playerid][Rango] == 5 || PlayersData[playerid][Rango] == 2)
								    {
								        if ( PlayersData[playerid][Faccion] == LSMD )
								        {
											format(MsgServicio, sizeof(MsgServicio), "** El bombero %s está de servicio. Llamar al 106.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
										else
										{
											format(MsgServicio, sizeof(MsgServicio), "** El bombero %s está de servicio. Llamar al 105.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
									}
									else
									{
									    if ( PlayersData[playerid][Faccion] == LSMD )
									    {
											format(MsgServicio, sizeof(MsgServicio), "** El médico %s está de servicio. Llamar al 106.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
										else
										{
											format(MsgServicio, sizeof(MsgServicio), "** El médico %s está de servicio. Llamar al 105.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
									}
								}

		      					SendInfoMessage(playerid, 2, "0", "Ahora estás de servicio.");
		                        PlayersDataOnline[playerid][StateJob] = true;
							}
							SendClientMessageToAll(0x0FFF00FF, MsgServicio);
						}
						else
						{
							SendInfoMessage(playerid, 0, "877", "No eres Taxísta, LSMD ni SFMD!");
						}
			    	}
				    // COMANDO: /Estado Family
				  	else if (strcmp("/Estado Family", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
						if ( PlayersDataOnline[playerid][StateChannelFamily] )
						{
	      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal Family personal.");
	      					PlayersDataOnline[playerid][StateChannelFamily] = false;
	   					}
	   					else
	   					{
	      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal Family personal.");
	                        PlayersDataOnline[playerid][StateChannelFamily] = true;
						}
			    	}
				    // COMANDO: /Estado Rg
				  	else if (strcmp("/Estado Rg", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    	{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD ||
							 PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD  )
					    {
							if ( PlayersDataOnline[playerid][StateChannelFamily] )
							{
							    Acciones(playerid, 8, "apaga su radio general");
		      					SendInfoMessage(playerid, 2, "0", "Has apagado la Radio General.");
		      					PlayersDataOnline[playerid][StateChannelFamily] = false;
		   					}
		   					else
		   					{
							    Acciones(playerid, 8, "enciende su radio general");
		      					SendInfoMessage(playerid, 2, "0", "Has encendido la Radio General.");
		                        PlayersDataOnline[playerid][StateChannelFamily] = true;
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1504", "Usted no es LSPD ni SFPD!");
						}
			    	}
				    // COMANDO: /Estado Radio
				  	else if (strcmp("/Estado Radio", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
						{
							if ( PlayersDataOnline[playerid][StateChannelRadio] )
							{
							    Acciones(playerid, 8, "apaga su radio");
		      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal Radio personal.");
		      					PlayersDataOnline[playerid][StateChannelRadio] = false;
		   					}
		   					else
		   					{
							    Acciones(playerid, 8, "enciende su radio");
		      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal Radio personal.");
		                        PlayersDataOnline[playerid][StateChannelRadio] = true;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1530", "Su facción no tiene radio.");
						}
			    	}
				    // COMANDO: /Estado CNN
				  	else if (strcmp("/Estado CNN", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
						if ( PlayersDataOnline[playerid][StateChannelCNN] )
						{
	      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal CNN personal.");
	      					PlayersDataOnline[playerid][StateChannelCNN] = false;
	   					}
	   					else
	   					{
	      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal CNN personal.");
	                        PlayersDataOnline[playerid][StateChannelCNN] = true;
						}
			    	}
					// COMANDO: 15 * /Estado Dudas              		- Cerrar y Abrir el canal /Duda
				  	else if (strcmp("/Estado Dudas", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 5)
						{
							new MensajeCanalTodosCerradoAbierto[50];
							new MensajeATodos[70];

							if ( !CanalDudas )
							{
							    CanalDudas = true;
						        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has abierto el canal /Duda.", LOGO_STAFF);
								format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /Duda ha sido abierto.", LOGO_STAFF);
				 			}
				 			else if  ( CanalDudas  )
				 			{
								CanalDudas = false;
						        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has cerrado el canal /Duda.", LOGO_STAFF);
								format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /Duda ha sido cerrado.", LOGO_STAFF);
				 			}

					        SendClientMessageToAll(COLOR_MENSAJES_DE_AVISOS, MensajeATodos);
					        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeCanalTodosCerradoAbierto);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "1485", "Tú no tienes acceso a el comando /Estado Dudas.");
					        return 1;
						}
					}
					// COMANDO: 15 * /Estado Todos                		- Cerrar y Abrir el canal /O (OOC)
					else if (strcmp(cmdtext, "/Estado Todos", true, 13) == 0 && strlen(cmdtext) == 13 )
					{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 1)
						{
							Comandos_Admin(15, playerid, 0, PlayersData[playerid][Admin], 0, "0");
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "124", "Tú no tienes acceso a el comando /Estado Todos.");
					        return 1;
						}
					}
					// COMANDO: 15 * /Estado Móvil                		- Apagar y Encender el móvil
					else if (strcmp(cmdtext, "/Estado Móvil", true, 13) == 0 && strlen(cmdtext) == 13 ||
			 				 strcmp(cmdtext, "/Estado Movil", true, 13) == 0 && strlen(cmdtext) == 13)
					{
						if ( PlayersDataOnline[playerid][PhoneOnline] )
						{
						    if ( PlayersDataOnline[playerid][InCall] == -1 )
						    {
								Acciones(playerid, 8, "apaga su móvil");
		      					PlayersDataOnline[playerid][PhoneOnline] = false;
	      					}
	      					else
	      					{
								SendInfoMessage(playerid, 0, "1521", "Finalize la llamada antes de apagar el móvil.");
							}
	   					}
	   					else
	   					{
							Acciones(playerid, 8, "enciende su móvil");
	                        PlayersDataOnline[playerid][PhoneOnline] = true;
						}
					}
			    	else
					{
						SendInfoMessage(playerid, 0, "125", "Quizás quiso decir: /Estado {OOC, Family, Radio, Móvil, Trabajo, Alarma, Capó, Rg}");
						SendInfoMessage(playerid, 0, "125", "Quizás quiso decir: /Estado");
					}
				}
				// COMANDO: /GOB [Noticia]
	  			else if (strfind(cmdtext, "/GOB ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] == 0   	  ||
						 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] == 0      ||
						 PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] <= 1  )
				    {
						new MsgGob[MAX_TEXT_CHAT];
						format(MsgGob, sizeof(MsgGob), "* %s %s: %s", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
						SendClientMessageToAll(0xF0F0F0FF, "|_______________NOTICIAS DEL GOBIERNO_______________|");
						SendClientMessageToAll(0x005FFFFF, MsgGob);
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "441", "Usted no puede anunciar noticias del gobierno.");
					}
			    }
				// COMANDO: /O [Texto]
	  			else if (strfind(cmdtext, "/O ", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
				    if ( CanalOOC || PlayersData[playerid][Admin] >= 1 )
				    {
						if ( PlayersDataOnline[playerid][StateChannelOOC] )
						{
					        if ( strlen(cmdtext) > 3 )
					        {
						        new MsgOOC[MAX_TEXT_CHAT];
						        strmid(MsgOOC, cmdtext, 3, strlen(cmdtext), sizeof(MsgOOC));
						        format(MsgOOC, sizeof(MsgOOC), "[OOC][%i] %s: %s",playerid, PlayersDataOnline[playerid][NameOnline], MsgOOC);

						        for(new i=0;i<MAX_PLAYERS;i++)
						        {
						            if (IsPlayerConnected(i)&&PlayersDataOnline[i][StateChannelOOC]&& PlayersDataOnline[i][State] == 3)
							        SendClientMessage(i, COLOR_OOC_CHANNEL, MsgOOC);
								}
								print(MsgOOC);
					        }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "126", "Tú tienes cerrado el canal OOC general, abrelo con /Estado OOC y luego usa /O");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "127", "El canal /O se encuentra cerrado.");
					}
				}
				// COMANDO: /B [OOC]
	  			else if (strfind(cmdtext, "/B ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 3 )
			        {
					    new TextOOC[MAX_TEXT_CHAT];
					    new Float:PosOOC[3]; GetPlayerPos(playerid, PosOOC[0], PosOOC[1], PosOOC[2]);
		    			format(TextOOC, sizeof(TextOOC), "[OOC] %s: (( %s ))", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[3]);
	                    SendChatStreamAnonymous(TextOOC, GetPlayerVirtualWorld(playerid), PosOOC[0], PosOOC[1], PosOOC[2]);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "128", "Tienes que poner algún texto para /B [OOC].");
			        }
			    }
				// COMANDO: /Meg [Hablar]
	  			else if (strfind(cmdtext, "/Meg ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        if ( strlen(cmdtext) > 5 )
				        {
			        	    new TextMegafono[MAX_TEXT_CHAT];
						    strmid(TextMegafono, cmdtext, 5, sizeof(TextMegafono), sizeof(TextMegafono));
		                    Acciones(playerid, 9, TextMegafono);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "883", "Tienes que poner algún texto para el megáfono.");
				        }
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "884", "Usted no es LSPD ni SFPD!");
					}
			    }
				// COMANDO: /Me [Acción]
	  			else if (strfind(cmdtext, "/Me ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 4 )
			        {
					    new TextAccion[MAX_TEXT_CHAT];
					    strmid(TextAccion, cmdtext, 4, sizeof(TextAccion), sizeof(TextAccion));
	                    Acciones(playerid, 0, TextAccion);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "129", "Tienes que poner algún texto de acción para /Me [Acción].");
			        }
			    }
				// COMANDO: /Intentar [Acción]
	  			else if (strfind(cmdtext, "/Intentar ", true) == 0)
			    {
					if ( strlen(cmdtext) > 10 )
					{
						IntentarAccion(playerid, cmdtext[10], random(2));
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "131", "Tienes que poner algún texto de acción para /Intentar [Acción].");
				    }
			    }
			    // COMANDO: /Ame [Efecto]
	  			else if (strfind(cmdtext, "/Ame ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 4 )
			        {
					    new TextAccion[MAX_TEXT_CHAT];
					    strmid(TextAccion, cmdtext, 4, sizeof(TextAccion), sizeof(TextAccion));

	                    Acciones(playerid, 1, TextAccion);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "132", "Tiene que poner algún texto de efecto para /Ame [Efecto].");
			        }
			    }
			    // COMANDO: /G [Gritar]
	  			else if (strfind(cmdtext, "/G ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 3 )
			        {
                        SendChatStreamGritar(playerid, cmdtext[3]);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "133", "Tiene que poner algún texto a gritar.");
			        }
			    }
			    // COMANDO: /S [Susurrar]
	  			else if (strfind(cmdtext, "/s ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 3 )
			        {
					    new TextAccion[150];
					    strmid(TextAccion, cmdtext, 3, sizeof(TextAccion), sizeof(TextAccion));
	                    Acciones(playerid, 5, TextAccion);

						ApplyPlayerAnimCustom(playerid,
						ModeTalkLibraryAnim[PlayersData[playerid][MyStyleTalk]],
						ModeTalkNameAnim[PlayersData[playerid][MyStyleTalk]], true);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "134", "Tiene que poner algún texto a susurrar.");
			        }
			    }
			    // COMANDO: /Warn [ID] [Razón]
	  			else if (strfind(cmdtext, "/Warn ", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
			        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					if ( PlayersData[playerid][Admin] >= 2 )
					{
						if (playeridto != playerid)
						{
							if (IsPlayerConnected(playeridto) )
							{
								PlayersData[playeridto][Warn]++;
								new MsgToAdmin[MAX_TEXT_CHAT];
								new MsgToUser[MAX_TEXT_CHAT];
								format(MsgToAdmin, sizeof(MsgToAdmin), "%s Han dado un Warn a %s por %s. Razón: %s", LOGO_STAFF, PlayersDataOnline[playeridto][NameOnline], PlayersDataOnline[playerid][NameOnline], cmdtext[GetPosSpace(cmdtext, 2)]);
								format(MsgToUser, sizeof(MsgToUser), "%s Has dado un warn a %s, ya ese usuario tiene %i warns",LOGO_STAFF, PlayersDataOnline[playeridto][NameOnline], PlayersData[playeridto][Warn]);
								MsgKBJWReportsToAdmins(playeridto, MsgToAdmin);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgToUser);
							}
							else
							{
								SendInfoMessage(playerid, 0, "549", "El jugador que desea darle un Warn, no se encuentra conectado");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "550", "La ID que has introducído es la suya");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "551", "No tienes acceso al comando /Warn [ID]");
					}
	  			}
				// COMANDO: /W [ID] [DUDA]
		  		else if (strfind(cmdtext, "/W", true) == 0)
			    {
		  			if (strfind(cmdtext, "/W ", true) == 0)
				    {
				        new PlayerIDDuda = strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]);
		    		    if ( IsPlayerConnected(PlayerIDDuda) )
					    {
							MsgAdminUseCommands(9, playerid, cmdtext);
					        if ( PlayersData[PlayerIDDuda][Admin] >= 1 || PlayersData[playerid][Admin] >= 1 )
					        {
					            if ( PlayersDataOnline[PlayerIDDuda][Wispers] && PlayersDataOnline[PlayerIDDuda][State] == 3 )
					            {
						            new MensajeME[256];
						            new Mensaje[256];
						            format(MensajeME, sizeof(MensajeME), "%s Whispeaste a %s[%i]: %s",LOGO_STAFF, PlayersDataOnline[PlayerIDDuda][NameOnline], PlayerIDDuda, cmdtext[GetPosSpace(cmdtext, 2)]);
						            format(Mensaje, sizeof(Mensaje), "%s %s[%i] te whispea: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, cmdtext[GetPosSpace(cmdtext, 2)]);

									SendClientMessage(PlayerIDDuda, COLOR_DE_WISPEO, Mensaje);
									SendClientMessage(playerid, COLOR_DE_WISPEO, MensajeME);
									print(Mensaje);
									return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "135", "El admin que le desea whispear tiene los whispers cerrados.");
									return 1;
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "136", "Solo se puede whispear a admnistradores.");
								return 1;
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "137", "El administrador que quiere whispear no se encuentra conectado.");
							return 1;
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "138", "Recuerde al utilizar el comando /W [ID] [Duda] dejar un [ESPACIO]. Ejemplo: /W 22 Hola, me encuentro bugueado, me podrias ayudar?");
						return 1;
					}
				}
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////		    ADMINISTRACIÓN COMMANDS		    ////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
				// COMANDO: /FacciónEx [Nombre_Apellido] [ID_Faccion] [Rango]
	  			else if (strfind(cmdtext, "/FacciónEx ", true) == 0 ||
					  	 strfind(cmdtext, "/FaccionEx ", true) == 0)
			    {
					SetPlayerFaccionEx(playerid, cmdtext);
				}
				// COMANDO: /Facción [ID] [ID_Faccion] [Rango]
	  			else if (strfind(cmdtext, "/Facción ", true) == 0 ||
					  	 strfind(cmdtext, "/Faccion ", true) == 0)
			    {
					SetPlayerFaccion(playerid, cmdtext);
				}
			    // /Tele
				else if (strfind(cmdtext, "/Tele ", true) == 0)
				{
				    //      /Tele Tipo [Tipo]
				    if (strfind(cmdtext, "/Tele Tipo", true) == 0)
					{
					    if (!PlayersData[playerid][Mapper]) return SendAccessError(playerid, "Tele Tipo");
					    if (PlayersDataOnline[playerid][InPickupTele] == -1) return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun tele");
					    new teleid = PlayersDataOnline[playerid][InPickupTele];

					    if (strcmp("/Tele Tipo Banco", cmdtext, true) == 0)
					    {
							Teles[teleid][IsBankTele] = true;
							Teles[teleid][IsHotelTele] = false;
					    	SendAdviseMessage(playerid, "Ahora este tele es la entrada un banco.");
					    }
					    else if (strcmp("/Tele Tipo Hotel", cmdtext, true) == 0)
					    {
							Teles[teleid][IsHotelTele] = true;
					        Teles[teleid][IsBankTele] = false;
					    	SendAdviseMessage(playerid, "Ahora este tele es la entrada un hotel.");
					    }
					    else return SendInfoMessage(playerid, 0, "", "Quizas quiso decir: /Tele Tipo {Banco, Hotel}");
					}
					else
					{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 6 )
						{
						    new InteriorID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						    if ( InteriorID >= 0 && InteriorID <= 19 )
						    {
							    new Float:X = floatstr(cmdtext[GetPosSpace(cmdtext, 2)]);
							    new Float:Y = floatstr(cmdtext[GetPosSpace(cmdtext, 3)]);
							    new Float:Z = floatstr(cmdtext[GetPosSpace(cmdtext, 4)]);
							    SetPlayerInteriorEx(playerid, InteriorID);
							    SetPlayerPos(playerid, X, Y, Z);
							    new MsgPos[MAX_TEXT_CHAT];
							    format(MsgPos, sizeof(MsgPos), "%s Has ido a la posición %f - %f - %f con interior [%i]", LOGO_STAFF, X, Y, Z, InteriorID);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPos);
								ChangeHouseOrOther(playerid, 0);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1119", "El número del interior tiene que ser mayor de 0 y menor de 19");
							}
				    	}
						else
						{
							SendInfoMessage(playerid, 0, "1118", "No tienes acceso al comando /Tele");
						}
					}
				}
			    // //SpawnDM [Equipo]
				else if (strfind(cmdtext, "/SpawnDM ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new TeamPos = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    if ( TeamPos >= 1 && TeamPos <= 2 )
					    {
					        TeamPos--;
							GetPlayerPos(playerid, PosDM[TeamPos][0], PosDM[TeamPos][1], PosDM[TeamPos][2]);
							GetPlayerFacingAngle(playerid, PosDM[TeamPos][3]);
							InteriorDM[TeamPos] = GetPlayerInteriorEx(playerid);
							WorldDM[TeamPos] = GetPlayerVirtualWorld(playerid);
						    new MsgSpawnDM[MAX_TEXT_CHAT];
						    format(MsgSpawnDM, sizeof(MsgSpawnDM), "%s Este será el nuevo Spawn para el Modo DM para el equipo número: %i", LOGO_STAFF, TeamPos + 1);
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgSpawnDM);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1342", "El número de equipo tiene que estár comprendido entre 1 y 2");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1120", "No tienes acceso al comando /SpawnDM");
					}
				}
			    // //SkinDM [Equipo]
				else if (strfind(cmdtext, "/SkinDM ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new TeamSkin = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    new SkinDMS = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( TeamSkin >= 1 && TeamSkin <= 2 )
					    {
						    if ( SkinDMS >= 0 && SkinDMS <= 299 )
						    {
						        TeamSkin--;
								SkinDM[TeamSkin] = SkinDMS;
							    new MsgSkinDM[MAX_TEXT_CHAT];
							    if ( SkinDMS )
							    {
								    format(MsgSkinDM, sizeof(MsgSkinDM), "%s El nuevo skin para el equipo %i será el número: %i", LOGO_STAFF, TeamSkin + 1, SkinDMS);
								}
								else
								{
								    format(MsgSkinDM, sizeof(MsgSkinDM), "%s Has deshabilitado los skines de DM para el equipo %i", LOGO_STAFF, TeamSkin + 1);
								}
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgSkinDM);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1343", "El número de Skin tiene que estár comprendido entre 0 y 299 (Donde 0 = Deshabilitado)");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1344", "El número de equipo tiene que estár comprendido entre 1 y 2");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1120", "No tienes acceso al comando /SkinDM");
					}
				}
			    // //Reiniciar
			  	else if (strcmp("/Reiniciar", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    ShowPlayerDialogEx(playerid, 65, DIALOG_STYLE_INPUT, "{00A5FF}Reiniciar servidor", "{F50000}IMPORTANTE: {E6E6E6}¿Desea reiniciar el servidor?\n\nPorfavor especifique una razón del reinicio", "Reiniciar", "Cancelar");
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1132", "No tienes acceso al comando /Reiniciar");
					}
	  			}
			    // //Reiniciar
			  	else if (strcmp("/Cerrar Servidor", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    ShowPlayerDialogEx(playerid, 138, DIALOG_STYLE_INPUT, "{00A5FF}Cerrar servidor", "{F50000}IMPORTANTE: {E6E6E6}¿Desea cerrar el servidor?\n\nPorfavor especifique una razón por la cuál cerrará el servidor", "Cerrar", "Cancelar");
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1505", "No tienes acceso al comando /Cerrar Servidor");
					}
	  			}
			    // //DmArmas
			  	else if (strcmp("/DmArmas", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
						ShowMenuDMWeapon(playerid);
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1148", "No tienes acceso al comando /DmArmas");
					}
				}

			    // /Dm Equipo
			  	else if (strcmp("/DM Equipo", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new MsgDMToAll[MAX_TEXT_CHAT];
					    if ( IsDMTeam )
					    {
					    	format(MsgDMToAll, sizeof(MsgDMToAll), "%s Ahora el DM ya NO será en equipo", LOGO_STAFF);
                            IsDMTeam = false;
				    	}
				    	else
				    	{
					    	format(MsgDMToAll, sizeof(MsgDMToAll), "%s Ahora el DM será en equipo", LOGO_STAFF);
                            IsDMTeam = true;
						}
						SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1346", "No tienes acceso al comando /Dm Equipo");
					}
				}
			    // //DM Off
			  	else if (strcmp("/DM Off", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new MsgDMToAll[MAX_TEXT_CHAT];
					    format(MsgDMToAll, sizeof(MsgDMToAll), "%s Ahora ya no estás en Modo DeathMatch", LOGO_STAFF);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
						    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM])
						    {
						        RemovePlayerToDM(i);
								SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
						    }
					    }
					    format(MsgDMToAll, sizeof(MsgDMToAll), "%s Has sacado a todos los jugadores del Modo DeathMatch", LOGO_STAFF);
						SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1116", "No tienes acceso al comando /DM Off");
					}
				}
			    // /Race [ID]
				else if (strfind(cmdtext, "/Race ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 6 )
					{
					    new playeridRace = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if (IsPlayerConnected(playeridRace) )
						{
						    new MsgRaceMe[MAX_TEXT_CHAT];
							if ( PlayersDataOnline[playeridRace][ModeRace] )
							{
							    if ( playeridRace != playerid )
							    {
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s %s te ha quitado el Modo Race", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
    								SendClientMessage(playeridRace, COLOR_MENSAJES_DE_AVISOS, MsgRaceMe);
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Has quitado el Modo Race a %s", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
   								}
   								else
   								{
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Te has quitado el modo Race", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
								}
						    	PlayersDataOnline[playeridRace][ModeRace] = false;
							}
							else
							{
							    if ( playeridRace != playerid )
							    {
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s %s te ha puesto el Modo Race", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
    								SendClientMessage(playeridRace, COLOR_MENSAJES_DE_AVISOS, MsgRaceMe);
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Has puesto en Modo Race a %s", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
   								}
   								else
   								{
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Te has puesto en Modo Race", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
								}
						    	PlayersDataOnline[playeridRace][ModeRace] = true;
							}
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgRaceMe);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1444", "El jugador que desea darle Modo Race no se encuentra conectado.");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1445", "No tienes acceso al comando /Race");
					}
				}
			    // /DM [ID] [Team]
				else if (strfind(cmdtext, "/DM ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new playeridDM = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if (IsPlayerConnected(playeridDM) )
						{
						    new MsgDMMe[MAX_TEXT_CHAT];
						    if ( playeridDM!= playerid )
						    {
							    new MsgDMToPlayer[MAX_TEXT_CHAT];
								if ( PlayersDataOnline[playeridDM][ModeDM] )
								{
								    format(MsgDMMe, sizeof(MsgDMMe), "%s Ha quitado el modo DeathMatch a %s", LOGO_STAFF, PlayersDataOnline[playeridDM][NameOnline]);
								    format(MsgDMToPlayer, sizeof(MsgDMToPlayer), "%s %s te ha quitado el modo DeathMatch", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
									RemovePlayerToDM(playeridDM);
								}
								else
								{
								    new TeamDMP = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								    if ( TeamDMP >= 1 && TeamDMP <= 2 )
								    {
									    format(MsgDMMe, sizeof(MsgDMMe), "%s Has puesto en modo DeathMatch a %s en el equipo %i", LOGO_STAFF, PlayersDataOnline[playeridDM][NameOnline], TeamDMP);
									    format(MsgDMToPlayer, sizeof(MsgDMToPlayer), "%s %s te ha puesto el modo DeathMatch en el equipo %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], TeamDMP);
								    	AddPlayerToDM(playeridDM, TeamDMP - 1);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1340", "El número de equipo tiene que estár comprendido entre 1 y 2");
										return 1;
									}
								}
								SendClientMessage(playeridDM, COLOR_MENSAJES_DE_AVISOS, MsgDMToPlayer);
							}
							else
							{
								if ( PlayersDataOnline[playeridDM][ModeDM] )
								{
           							format(MsgDMMe, sizeof(MsgDMMe), "%s Has salido del modo DeathMatch", LOGO_STAFF);
   									RemovePlayerToDM(playeridDM);
								}
								else
								{
								    new TeamDMP = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								    if ( TeamDMP >= 1 && TeamDMP <= 2 )
								    {
									    format(MsgDMMe, sizeof(MsgDMMe), "%s Ahora estás en modo DeathMatch en el equipo %i", LOGO_STAFF, TeamDMP);
   								    	AddPlayerToDM(playeridDM, TeamDMP - 1);
							    	}
									else
									{
										SendInfoMessage(playerid, 0, "1339", "El número de equipo tiene que estár comprendido entre 1 y 2");
										return 1;
									}
								}
							}
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDMMe);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1115", "El jugador que desea darle Modo DeathMatch no se encuentra conectado.");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1114", "No tienes acceso al comando /DM");
					}
				}
			    // /ICoche
			  	else if (strcmp("/ICoche", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 6 )
					{
						new MyNearCar = IsPlayerInNearVehicleEx(playerid);
		   				if ( MyNearCar)
					    {
							new MsgDatos[MAX_TEXT_CHAT];
			 				format(MsgDatos, sizeof(MsgDatos), "ID: %i || Vehículo: %s Modelo ID:(%i) Mundo Spawn: (%i) Interior Spawn: (%i)",MyNearCar, coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400], GetVehicleModel(MyNearCar), DataCars[MyNearCar][World], DataCars[MyNearCar][Interior]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
			 				format(MsgDatos, sizeof(MsgDatos), "Mundo Actual: (%i) | Interior Actual: (%i)", DataCars[MyNearCar][WorldLast], DataCars[MyNearCar][InteriorLast]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
		   				    if ( MyNearCar <= MAX_CAR_DUENO )
		   				    {
				 				format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ", DataCars[MyNearCar][Matricula]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", DataCars[MyNearCar][Dueno]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Tiempo: %i", DataCars[MyNearCar][Time]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
							else
							{
				 				format(MsgDatos, sizeof(MsgDatos), "ID: %i", MyNearCar);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", FaccionData[DataCars[MyNearCar][Time]][NameFaccion]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "554", "No tienes acceso al comando /ICoche");
					}
			    }
				//////////--- /ICocheEx [ID]              - Saber la información de un vehículo por su ID
				else if (strfind(cmdtext, "/ICocheEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 6 )
					{
						new MyNearCar = strval(cmdtext[10]);
		   				if ( MyNearCar > 0 && MyNearCar <= MAX_CAR )
					    {
							new MsgDatos[MAX_TEXT_CHAT];
			 				format(MsgDatos, sizeof(MsgDatos), "ID: %i || Vehículo: %s Modelo ID:(%i) Mundo Spawn: (%i) Interior Spawn: (%i)",MyNearCar, coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400], GetVehicleModel(MyNearCar), DataCars[MyNearCar][World], DataCars[MyNearCar][Interior]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
			 				format(MsgDatos, sizeof(MsgDatos), "Mundo Actual: (%i) | Interior Actual: (%i)", DataCars[MyNearCar][WorldLast], DataCars[MyNearCar][InteriorLast]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
		   				    if ( MyNearCar <= MAX_CAR_DUENO )
		   				    {
				 				format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ", DataCars[MyNearCar][Matricula]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", DataCars[MyNearCar][Dueno]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Tiempo: %i", DataCars[MyNearCar][Time]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
							else
							{
				 				format(MsgDatos, sizeof(MsgDatos), "ID: %i", MyNearCar);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", FaccionData[DataCars[MyNearCar][Time]][NameFaccion]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1164", "El vehículo que desea saber su información no existe.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "554", "No tienes acceso al comando /ICoche");
					}
			    }
			    // /VCoche
			  	else if (strcmp("/VCoche", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						new MyNearCar = IsPlayerInNearVehicleEx(playerid);
		   				if ( MyNearCar)
					    {
		   				    if ( MyNearCar <= MAX_CAR_DUENO )
		   				    {
				 				if ( strlen(DataCars[MyNearCar][Dueno]) != 1 )
								{
									new playerid_vender = RemoveDuenoOfVehicle(MyNearCar, 0);
									new MsgVentaCocheEx[MAX_TEXT_CHAT];
									format(MsgVentaCocheEx, sizeof(MsgVentaCocheEx), "Has vendido éste vehículo al estado, erá propiedad de %s", PlayersDataOnline[playerid_vender][NameOnline]);
									SendInfoMessage(playerid, 3, "0", MsgVentaCocheEx);
								}
								else
								{
									SendInfoMessage(playerid, 0, "552", "Éste vehículo no tiene dueño");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "547", "Éste vehículo no es de venta!");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "548", "No tienes acceso al comando /VCoche");
					}
	  			}
				//////////--- /CPos [ID]              - CAMBIAR LA POSICIóN DE UNA CASA
				else if (strfind(cmdtext, "/CPos ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    new NewPosHouse = strval(cmdtext[6]);
				        if ( NewPosHouse > 0 && NewPosHouse <= MAX_HOUSE )
				        {
					        new Float:PlayerPosHouse[4];
					        GetPlayerPos(playerid, PlayerPosHouse[0], PlayerPosHouse[1], PlayerPosHouse[2]);
					        GetPlayerFacingAngle(playerid, PlayerPosHouse[3]);
						    HouseData[NewPosHouse][PosX]      = PlayerPosHouse[0];
						    HouseData[NewPosHouse][PosY]		= PlayerPosHouse[1];
						    HouseData[NewPosHouse][PosZ]		= PlayerPosHouse[2];
						    HouseData[NewPosHouse][PosZZ] 	= PlayerPosHouse[3];
						    HouseData[NewPosHouse][Interior]  = GetPlayerInteriorEx(playerid);
                            SaveHouse(NewPosHouse, true);

                            new MsgPersonalizado[250];
	                        format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Cambiaste la posición de la casa con ID[%i] a la: ( X: %f Y: %f Z: %f ZZ: %f ) con interior %i", LOGO_STAFF, NewPosHouse, PlayerPosHouse[0], PlayerPosHouse[1], PlayerPosHouse[2], PlayerPosHouse[3], GetPlayerInteriorEx(playerid));
			                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
							printf("%s", MsgPersonalizado);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1158", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1159", "No tienes acceso al comando /CPos");
					}
				}
				//////////--- /NPos [ID]              - CAMBIAR LA POSICIóN DE UN NEGOCIO
				else if (strfind(cmdtext, "/NPos ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    new NewPosBizz = strval(cmdtext[6]);
				        if ( NewPosBizz > 0 && NewPosBizz <= MAX_BIZZ )
				        {

					        new Float:PlayerPosBizz[4];
					        GetPlayerPos(playerid, PlayerPosBizz[0], PlayerPosBizz[1], PlayerPosBizz[2]);
					        GetPlayerFacingAngle(playerid, PlayerPosBizz[3]);

						    NegociosData[NewPosBizz][PosOutX]       = PlayerPosBizz[0];
						    NegociosData[NewPosBizz][PosOutY]		= PlayerPosBizz[1];
						    NegociosData[NewPosBizz][PosOutZ]		= PlayerPosBizz[2];
						    NegociosData[NewPosBizz][PosOutZZ] 		= PlayerPosBizz[3];
						    NegociosData[NewPosBizz][InteriorOut]   = GetPlayerInteriorEx(playerid);

                            DataSaveBizz(NewPosBizz, true);

                            new MsgPersonalizado[250];
	                        format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Cambiaste la posición del negocio ID[%i] a la: ( X: %f Y: %f Z: %f ZZ: %f ) con interior %i", LOGO_STAFF, NewPosBizz, PlayerPosBizz[0], PlayerPosBizz[1], PlayerPosBizz[2], PlayerPosBizz[3], GetPlayerInteriorEx(playerid));
			                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
							printf("%s", MsgPersonalizado);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1160", "El ID del negocio introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1161", "No tienes acceso al comando /NPos");
					}
				}
				//////////--- /Nprecio [ID]              - CAMBIAR EL PRECIo DE UN NEGOCIO
				else if (strfind(cmdtext, "/Nprecio ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( strval(cmdtext[9]) >= 0 && strval(cmdtext[9]) <= 500000 )
				            {
		                        NegociosData[BizzId][Precio] = strval(cmdtext[9]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el precio de este negocio a: $%i", strval(cmdtext[9]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            DataSaveBizz(BizzId, true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "658", "El precio de negocio introducído tiene que estar entre 0 y 500000");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "659", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "660", "No tienes acceso al comando /Nprecio");
					}
				}
				//////////--- /Nnivel [ID]              - CAMBIAR EL NIVEL DE UN NEGOCIO
				else if (strfind(cmdtext, "/Nnivel ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( strval(cmdtext[8]) >= 0 && strval(cmdtext[8]) <= 50 )
				            {
		                        NegociosData[BizzId][Level] = strval(cmdtext[8]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el nivel de este negocio a: %i", strval(cmdtext[8]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            DataSaveBizz(BizzId, true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "661", "El nivel de negocio introducído tiene que estar entre 0 y 50");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "662", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "663", "No tienes acceso al comando /Nnivel");
					}
				}
				//////////--- /Ntipo [ID]              - CAMBIAR EL TIPO DE UN NEGOCIO
				else if (strfind(cmdtext, "/Ntipo ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( strval(cmdtext[7]) >= 0 && strval(cmdtext[7]) <= MAX_BIZZ_TYPE )
				            {
		                        NegociosData[BizzId][Type] = strval(cmdtext[7]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el tipo de este negocio a tipo: %i", strval(cmdtext[7]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            DataSaveBizz(BizzId, true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "664", "El tipo de negocio introducído no existe");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "665", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "666", "No tienes acceso al comando /Ntipo");
					}
				}
				//////////--- /Cprecio [ID]              - CAMBIAR EL PRECIO DE UNA CASA
				else if (strfind(cmdtext, "/Cprecio ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new houseid = PlayersDataOnline[playerid][InPickupCasa];
				            if ( strval(cmdtext[9]) >= 0 && strval(cmdtext[9]) <= 1000000 )
				            {
		                        HouseData[houseid][Price] = strval(cmdtext[9]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el precio de esta casa a: %i", strval(cmdtext[9]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            SaveHouse(houseid, true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "667", "El precio de la casa introducído tiene que estar entre 0 y 1000000");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "668", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "669", "No tienes acceso al comando /Cprecio");
					}
				}
				//////////--- /Enfermar [ID] [ID]             - CAMBIAR EL PRECIO DE UNA CASA
				else if (strfind(cmdtext, "/Enfermar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        new PlayerIDEnfermar = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new EnfermedadID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        if ( IsPlayerConnected(PlayerIDEnfermar) )
				        {
				            if ( EnfermedadID >= 0 && EnfermedadID <= 6 )
				            {
								new MsgEnfermedad[MAX_TEXT_CHAT];
								if ( PlayerIDEnfermar != playerid)
								{
									format(MsgEnfermedad, sizeof(MsgEnfermedad), "has puesto a %s [%i] la enfermedad \"%s\".", PlayersDataOnline[PlayerIDEnfermar][NameOnline], PlayerIDEnfermar, EnfermedadName[EnfermedadID]);
								}
								else
								{
									format(MsgEnfermedad, sizeof(MsgEnfermedad), "Te has enfermado con \"%s\" tú mismo.", EnfermedadName[EnfermedadID]);
								}
					            SendAdviseMessage(playerid, MsgEnfermedad);
								ChangeEnfermedad(PlayerIDEnfermar, EnfermedadID);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "1409", "El número de enfermedad tiene que estár comprendido entre 0 y 6");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1410", "El jugador que deseas enfermar no se encuentra conectado");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1411", "No tienes acceso al comando /Enfermar");
					}
				}
				//////////--- /Nombre [ID] [Nombre_Apellido]             - CAMBIAR EL NOMBRE A UN JUGADOR
				else if (strfind(cmdtext, "/Nombre ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    if ( strlen(cmdtext) >= 13 )
					    {
						    new NewName[MAX_PLAYER_NAME];
						    new LastName[MAX_PLAYER_NAME];
						    new playeridChange;
						    format(NewName, sizeof(NewName), "%s", cmdtext[GetPosSpace(cmdtext, 2) + 1]);
						    playeridChange = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						    format(LastName, sizeof(LastName), "%s", PlayersDataOnline[playeridChange][NameOnline]);

							if ( IsPlayerConnected(playeridChange) )
							{
							    if ( IsValidName(NewName) )
							    {

									new query[100], Cache:cacheid, cuentaExiste;
									mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, NewName);
									cacheid = mysql_query(dataBase, query);
									cache_get_row_count(cuentaExiste);
									cache_delete(cacheid);

									if ( !cuentaExiste )
									{
								        switch(SetPlayerName(playeridChange, NewName))
								        {
											case 1:
											{
										        format(PlayersDataOnline[playeridChange][NameOnline], MAX_PLAYER_NAME, "%s", NewName);
										        RemoveRallaName(playeridChange);
										        // NEGOCIOS
												for (new i = 1; i <= MAX_BIZZ; i++)
												{
													if ( strfind(NegociosData[i][Dueno], LastName, true) == 0 && strlen(NegociosData[i][Dueno]) == strlen(LastName) )
													{
														format(NegociosData[i][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
														DataSaveBizz(i, true);
													}
												    if ( strfind(NegociosData[i][Extorsion], LastName, false) == 0 && strlen(NegociosData[i][Extorsion]) == strlen(LastName) )
													{
														format(NegociosData[i][Extorsion], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
														DataSaveBizz(i, true);
													}
												}
										        // COCHE
										        if ( PlayersData[playeridChange][Car] != -1 )
										        {
													format(DataCars[PlayersData[playeridChange][Car]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
													SaveDataVehicle(PlayersData[playeridChange][Car], DIR_VEHICLES);
												}
										        // CASA
										        if ( PlayersData[playeridChange][House] != -1 )
										        {
													format(HouseData[PlayersData[playeridChange][House]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
										            SaveHouse(PlayersData[playeridChange][House], true);
												}
												// Llaves Amigo
									            for(new i=1;i<=MAX_HOUSE;i++)
									            {
									                new IsLlavesAmigo = IsPlayerInHouseFriend(playeridChange, i);

									                if ( IsLlavesAmigo != -1 )
									                {
							                        	format(HouseFriends[i][IsLlavesAmigo][Name], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
							                        	SaveHouse(i, false);
									                }
								                }
								                // Banco
								                if ( PlayersData[playerid][AccountBankingOpen] )
								                {
								                    SaveAccountBanking(playeridChange);
								                }

												mysql_format(dataBase, query, 100, "UPDATE `%s` SET `Nombre`='%e' WHERE `Nombre`='%e';", DIR_USERS, NewName, LastName);
												mysql_query(dataBase, query, false);
												DataUserSave(playeridChange);

												new MsgNombreCambiadoMe[MAX_TEXT_CHAT];
												if ( playerid != playeridChange )
												{
													new MsgNombreCambiadoYou[MAX_TEXT_CHAT];
													format(MsgNombreCambiadoYou, sizeof(MsgNombreCambiadoYou), "%s El administrador %s te ha cambiado el nombre \"%s\"por \"%s\"", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], LastName, PlayersDataOnline[playeridChange][NameOnline]);
													format(MsgNombreCambiadoMe, sizeof(MsgNombreCambiadoMe), "%s Cambiaste el nick \"%s\" por \"%s\" a este jugador", LOGO_STAFF, LastName, PlayersDataOnline[playeridChange][NameOnline]);
													SendClientMessage(playeridChange, COLOR_MENSAJES_DE_AVISOS, MsgNombreCambiadoYou);
												}
												else
												{
													format(MsgNombreCambiadoMe, sizeof(MsgNombreCambiadoMe), "%s Te cambiaste el nick \"%s\" por \"%s\"", LOGO_STAFF, LastName, PlayersDataOnline[playeridChange][NameOnline]);
												}
	        							        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgNombreCambiadoMe);
											}
											case 0:
											{
												SendInfoMessage(playerid, 0, "1031", "Ya ese jugador está usando ese mismo nick");
											}
											case -1:
											{
												SendInfoMessage(playerid, 0, "1030", "Ese nick está siendo usado ya por otro jugador o contiene caracteres no permitidos");
											}
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1029", "Ese nick está siendo usado ya por otro jugador");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1028", "El nuevo nombre a cambiar, no es válido");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1027", "El jugador que desea cambiarle el nombre, no se encuentra conectado");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1026", "Ha introducido mal el sintaxis del comando /Nombre, Ejemplo: /Nombre 20 Manolo_Talvez");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1025", "No tienes acceso al comando /Nombre");
					}
				}
				//////////--- /CCambiar [ID]              - CAMBIAR EL MODELO DE UN COCHE
				else if (strfind(cmdtext, "/CCambiar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    new MyNearCar = IsPlayerInNearVehicleEx(playerid);
					    if ( MyNearCar )
					    {
							if ( MyNearCar <= MAX_CAR_PUBLIC )
		   				    {
		   				        new ModelCar = strval(cmdtext[10]);
		   				        if ( ModelCar >= 400 && ModelCar <= 610)
		   				        {
									if ( coches_Todos_Type[ModelCar - 400] != TREN )
									{
										ChangeVehicle(playerid, MyNearCar, ModelCar, GetPlayerVirtualWorld(playerid), GetPlayerInteriorEx(playerid));
									}
									else
									{
										SendInfoMessage(playerid, 0, "1272", "Los trenes están deshabilitados por cuestiones de seguridad.");
									}
			   				    }
								else
								{
									SendInfoMessage(playerid, 0, "921", "El ID del vehículo debe estár comprendido entre 400 y 610");
								}
		   				    }
							else
							{
								SendInfoMessage(playerid, 0, "919", "Sólo se puede cambiar el modelo del vehículo a los en públicos");
							}
				        }
					}
					else
					{
						SendInfoMessage(playerid, 0, "920", "No tienes acceso al comando /CCambiar");
					}
				}
				//////////--- /Cnivel [ID]              - CAMBIAR EL NIVEL DE UNA CASA
				else if (strfind(cmdtext, "/Cnivel ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new houseid = PlayersDataOnline[playerid][InPickupCasa];
				            if ( strval(cmdtext[8]) >= 0 && strval(cmdtext[8]) <= 50 )
				            {
		                        HouseData[houseid][Level] = strval(cmdtext[8]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el nivel a está casa a: %i", strval(cmdtext[8]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            SaveHouse(houseid, true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "670", "El nivel de casa introducído tiene que estar entre 0 y 50");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "671", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "672", "No tienes acceso al comando /Cnivel");
					}
				}
				//////////--- /Desbanear [Nombre_Del_Jugador]              - Desbanear a un jugador
				else if (strfind(cmdtext, "/Desbanear ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    if ( strlen(cmdtext[11]) >= 3 && strlen(cmdtext[11]) <= 24)
					    {
							UnBanUser(playerid, cmdtext[11], false);
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "675", "El nombre tiene que contener entre 3 y 24 caracteres");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "674", "No tienes acceso al comando /Desbanear");
					}
				}
				//////////--- /Editar Pistas
			  	else if (strcmp("/Editar Pistas", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 4 )
					{
						ShowEditorPistas(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1428", "No tienes acceso al comando /Editor Pistas");
					}
				}
				//////////--- /BanEx [Nombre_Del_Jugador]              - Desbanear a un jugador
				else if (strfind(cmdtext, "/BanEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    if ( strlen(cmdtext[7]) >= 3 && strlen(cmdtext[7]) <= 24)
					    {
							UnBanUser(playerid, cmdtext[7], true);
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "973", "El nombre tiene que contener entre 3 y 24 caracteres");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "974", "No tienes acceso al comando /BanEx");
					}
				}
				//////////--- /Gtipo [ID]              - CAMBIAR EL TIPO DE UNA CASA
				else if (strfind(cmdtext, "/Gtipo ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
			            if ( strval(cmdtext[7]) >= 0 && strval(cmdtext[7]) <= MAX_GARAGE_TYPE )
			            {
       	       				new GarageID, HouseID; IsPlayerInGarageFun(playerid, HouseID, GarageID);
			                if ( GarageID != -1 )
			                {
		                        Garages[HouseID][GarageID][TypeGarageE] = strval(cmdtext[7]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste este garage a tipo: %i", strval(cmdtext[7]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);
	                            SaveHouse(HouseID, true);
                            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1174", "El tipo de garage introducído no existe");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1176", "No tienes acceso al comando /Gtipo");
					}
				}
				//////////--- /Ctipo [ID]              - CAMBIAR EL TIPO DE UNA CASA
				else if (strfind(cmdtext, "/Ctipo ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new houseid = PlayersDataOnline[playerid][InPickupCasa];
				            if ( strval(cmdtext[7]) >= 0 && strval(cmdtext[7]) <= MAX_HOUSE_TYPE )
				            {
		                        HouseData[houseid][TypeHouseId] = strval(cmdtext[7]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el tipo de esta casa a tipo: %i", strval(cmdtext[7]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

								RemoveAllGarage(houseid);

	                            SaveHouse(houseid, true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "657", "El tipo de casa introducído no existe");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "655", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "656", "No tienes acceso al comando /Ctipo");
					}
				}
				//////////--- /Design Garage [ID]            - COMENZAR A DISEñAR UN GARAGE
				else if (strfind(cmdtext, "/Design Garage ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    if ( strval(cmdtext[15]) >= 0 && strval(cmdtext[15]) < MAX_GARAGES_DESING )
						{
							PlayersDataOnline[playerid][DesignGarageId] = strval(cmdtext[15]);
	                        new MsgChangeDesing[MAX_TEXT_CHAT];
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "Ahora tienes el ID: %i para Design Garage", strval(cmdtext[15]));
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1206", "El númmero de Design introducido, supera el número actual soportado");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1177", "No tienes acceso al comando /Desing Garage");
					}
				}
				//
				//////////--- /Garages [ID_Casa]            - VER GARAGES DE UNA CASA
				else if (strfind(cmdtext, "/Garages ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
	                        ShowGarages(playerid, IdHouse);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1178", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1179", "No tienes acceso al comando /Garages");
					}
				}
				//////////--- /Dg aP
				else if (strfind(cmdtext, "/Dg Rand ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									Garages[IdHouse][IdGarage][WorldG] = random(999999 + 1000);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nuevo WORLD RANDOM (%i) MODIFICADA GARAGEID[%i]  PARA LA CASA ID[%i]-",Garages[IdHouse][IdGarage][WorldG], IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1199", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1198", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1197", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1196", "No tienes acceso al comando /Dg Rand");
					}
				}
				//////////--- /Dg a
				else if (strcmp("/Dg a", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        GetPlayerPos(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Xg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Yg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Zg]);
				        GetPlayerFacingAngle(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZg]);

                        new MsgChangeDesing[MAX_TEXT_CHAT];
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS Desing ID[%i] \"AFUERA A PIE\"  -", PlayersDataOnline[playerid][DesignGarageId]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Xg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Yg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Zg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZg]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1180", "No tienes acceso al comando /Dg a");
					}
				}
				//////////--- /Dg aP
				else if (strfind(cmdtext, "/Dg aP ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									GetPlayerPos(playerid, Garages[IdHouse][IdGarage][Xg], Garages[IdHouse][IdGarage][Yg], Garages[IdHouse][IdGarage][Zg]);
									GetPlayerFacingAngle(playerid, Garages[IdHouse][IdGarage][ZZg]);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS MODIFICADA \"AFUERA A PIE\" GARAGEID[%i]  PARA LA CASA ID[%i]-", IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f ", Garages[IdHouse][IdGarage][Xg], Garages[IdHouse][IdGarage][Yg], Garages[IdHouse][IdGarage][Zg], Garages[IdHouse][IdGarage][ZZg]);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1195", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1194", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1193", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1192", "No tienes acceso al comando /Dg aP");
					}
				}
				//////////--- //Dg c
				else if (strcmp("/Dg c", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        GetPlayerPos(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgOut]);
				        GetPlayerFacingAngle(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgOut]);

                        new MsgChangeDesing[MAX_TEXT_CHAT];
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS Desing ID[%i] \"AFUERA COCHE\" -", PlayersDataOnline[playerid][DesignGarageId]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgOut]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1181", "No tienes acceso al comando /Dg c");
					}
				}
				//////////--- /Dg cP
				else if (strfind(cmdtext, "/Dg cP ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									GetPlayerPos(playerid, Garages[IdHouse][IdGarage][XgOut], Garages[IdHouse][IdGarage][YgOut], Garages[IdHouse][IdGarage][ZgOut]);
									GetPlayerFacingAngle(playerid, Garages[IdHouse][IdGarage][ZZgOut]);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS MODIFICADA \"AFUERA COCHE\" GARAGEID[%i]  PARA LA CASA ID[%i]-", IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f ", Garages[IdHouse][IdGarage][XgOut], Garages[IdHouse][IdGarage][YgOut], Garages[IdHouse][IdGarage][ZgOut], Garages[IdHouse][IdGarage][ZZgOut]);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1191", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1190", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1189", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1188", "No tienes acceso al comando /Dg cP");
					}
				}
				//////////--- //Dg d
				else if (strcmp("/Dg d", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        GetPlayerPos(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgIn]);
				        GetPlayerFacingAngle(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgIn]);

                        new MsgChangeDesing[MAX_TEXT_CHAT];
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS Desing ID[%i] \"DENTRO\" -", PlayersDataOnline[playerid][DesignGarageId]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgIn]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1182", "No tienes acceso al comando /Dg d");
					}
				}
				//////////--- /Dg dP
				else if (strfind(cmdtext, "/Dg dP ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									GetPlayerPos(playerid, Garages[IdHouse][IdGarage][XgIn], Garages[IdHouse][IdGarage][YgIn], Garages[IdHouse][IdGarage][ZgIn]);
									GetPlayerFacingAngle(playerid, Garages[IdHouse][IdGarage][ZZgIn]);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS MODIFICADA \"DENTRO\" GARAGE ID[%i]  PARA LA CASA ID[%i]-", IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ", Garages[IdHouse][IdGarage][XgIn], Garages[IdHouse][IdGarage][YgIn], Garages[IdHouse][IdGarage][ZgIn], Garages[IdHouse][IdGarage][ZZgIn]);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1187", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1186", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1185", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1172", "No tienes acceso al comando /Dg cP");
					}
				}
				//////////--- /VCasa              - VENDER UNA CASA
			  	else if (strcmp("/VCasa", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickupCasa] )
						{
						    new houseid = PlayersDataOnline[playerid][InPickupCasa];
				            if ( strlen(HouseData[houseid][Dueno]) != 2 )
				            {
								new playerid_vender = RemoveDuenoOfHouse(houseid);
								new MsgVentaCasaEx[MAX_TEXT_CHAT];
								format(MsgVentaCasaEx, sizeof(MsgVentaCasaEx), "Has vendido esta casa al estado, erá propiedad de %s", PlayersDataOnline[playerid_vender][NameOnline]);
								SendInfoMessage(playerid, 3, "0", MsgVentaCasaEx);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "673", "Ésta casa no tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "674", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "675", "No tienes acceso al comando /Vcasa");
					}
				}
				//////////--- /VNegocio	              - VENDER UN NEGOCIO
			  	else if (strcmp("/Vnegocio", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickupNegocio] )
				        {
							new BizzId = PlayersDataOnline[playerid][InPickupNegocio];
				            if ( strlen(NegociosData[BizzId][Dueno]) != 1 )
				            {
								new MsgVentaNegocioEx[MAX_TEXT_CHAT];
								format(MsgVentaNegocioEx, sizeof(MsgVentaNegocioEx), "Has vendido este negocio al estado, erá propiedad de %s", NegociosData[BizzId][Dueno]);
								SendInfoMessage(playerid, 3, "0", MsgVentaNegocioEx);
								RemoveDuenoOfBizz(BizzId);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "676", "Éste negocio no tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "677", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "678", "No tienes acceso al comando /Vnegocio");
					}
				}
			    // COMANDO: /Borrar Warn [ID]
	  			else if (strfind(cmdtext, "/Borrar Warn ", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        new playeridto	= strval(cmdtext[13]);
						if (IsPlayerConnected(playeridto) )
						{
							PlayersData[playeridto][Warn] = 0;
							new MsgToAdmin[MAX_TEXT_CHAT];
							new MsgToUser[MAX_TEXT_CHAT];
							format(MsgToAdmin, sizeof(MsgToAdmin), "%s Has quitado todos los Warns a %s", LOGO_STAFF, PlayersDataOnline[playeridto][NameOnline]);
							format(MsgToUser, sizeof(MsgToUser), "%s El administrador %s te quitado todos los Warns", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
							SendClientMessage(playerid, COLOR_KICK_JAIL_BAN, MsgToAdmin);
							SendClientMessage(playeridto, COLOR_KICK_JAIL_BAN, MsgToUser);
						}
						else
						{
							SendInfoMessage(playerid, 0, "922", "El jugador que desea quitarle los Warns, no se encuentra conectado");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "923", "No tienes acceso al comando /Borrar Warn [ID]");
					}
	  			}
			    // /Borrar
			  	else if (strcmp("/Borrar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 1 )
					{
		  			    for ( new i = 0; i < 100; i++)
		  			    {
		  			    	SendClientMessageToAll(0x000000FF, " ");
				    	}
						SendClientMessageToAll(COLOR_MESSAGES[2], " El chat a sido limpiado!");
					}
					else
					{
						SendInfoMessage(playerid, 0, "855", "No tienes acceso al comando /Borrar");
					}
	  			}
			    // /Adminon
			  	else if (strcmp("/AdminOn", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 1 )
					{
						new MsgAdminOn[MAX_TEXT_CHAT];
						if ( PlayersDataOnline[playerid][AdminOn] )
						{
							format(MsgAdminOn, sizeof(MsgAdminOn), "%s Has desactivado el AdminOn", LOGO_STAFF);
			            	SetPlayerColor(playerid, PLAYERS_COLOR);
							PlayersDataOnline[playerid][AdminOn] = false;
						}
						else
						{
							format(MsgAdminOn, sizeof(MsgAdminOn), "%s Has activado el AdminOn", LOGO_STAFF);
							SetPlayerColor(playerid, AdminsRangosColors[PlayersData[playerid][Admin] -1]);
							PlayersDataOnline[playerid][AdminOn] = true;
						}
						SendClientMessage(playerid, COLOR_MESSAGES[1], MsgAdminOn);
					}
					else
					{
						SendInfoMessage(playerid, 0, "144", "No tienes acceso al comando /AdminOn");
					}
	  			}
				//////////--- /Teles [ID]
				else if (strfind(cmdtext, "/Teles ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 7, strlen(cmdtext), sizeof(SendString));
						new Float:X_Y_Z_ALL[4];
						switch (strval(SendString))
						{
						    case 0:
							{
						        new Float:X_Y_Z[4] = {2495.3357,-1687.1404,13.5153,357.6980}; //Groove
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
						    case 1:
						    {
	                            new Float:X_Y_Z[4] = {1479.6165, -1737.7754, 13.5469, 359.5288}; //Ayuntamiento
	                        	X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
						    case 2:
						    {
						        new Float:X_Y_Z[4] = {1444.3427, -858.3128,52.3409, 74.2515}; //Vinewood
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
	                        case 3:
		     				{
						        new Float:X_Y_Z[4] = {1753.5795, -2622.3982, 13.5469, 0.1541}; // Aero LS
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 4:
							{
						        new Float:X_Y_Z[4] = {-121.3143,-980.9033,26.2507,134.6347}; // LS & SF
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 5:
							{
						        new Float:X_Y_Z[4] = {-1335.8469,-409.1505,14.1484,260.8257}; // Aero SF
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 6:
							{
						        new Float:X_Y_Z[4] = {-2026.5255,-97.7325,35.1641,0.4050}; // Autoescuela
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 7:
						    {
						        new Float:X_Y_Z[4] = {-1574.1990,662.2103,7.1875,269.1603}; // Police SF
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 8:
							{
						        new Float:X_Y_Z[4] = {-2623.7808,1410.0333,7.0938,198.2430}; // Jizzy
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 9:
							{
						        new Float:X_Y_Z[4] = {-2504.1143,2421.4956,16.5979,32.8509}; // Bayside
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 10:
							{
						        new Float:X_Y_Z[4] = {-1496.1182,2600.6624,55.6875,358.7807}; // El quebrado
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 11:
							{
						        new Float:X_Y_Z[4] = {-236.7057,2628.7227,62.6907,359.8041}; // Ejercito
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 12:
							{
						        new Float:X_Y_Z[4] = {213.8932,1870.1552,17.6406,1.7001}; // AREA 59
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 13:
							{
						        new Float:X_Y_Z[4] = {1685.7563,1447.7520,10.7697,269.1385}; // Aero LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 14:
							{
						        new Float:X_Y_Z[4] = {2034.6119,1342.9308,10.8203,269.2883}; // LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 15:
							{
						        new Float:X_Y_Z[4] = {2350.2805,2143.4919,10.6797,90.4581}; // Casino LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 16:
							{
						        new Float:X_Y_Z[4] = {2337.1001,2455.9500,14.9688,180.0000}; // Police LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 17:
							{
						        new Float:X_Y_Z[4] = {1379.8220,2181.3489,11.0234,133.8801}; // Stadium LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 18:
							{
						        new Float:X_Y_Z[4] = {744.3160,-523.0973,16.3359,179.7914}; // Dillimore
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 19:
							{
						        new Float:X_Y_Z[4] = {232.8348,-71.7456,1.4233,357.7764}; // Blue Berry
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 20:
							{
						        new Float:X_Y_Z[4] = {1317.7798,313.0467,19.4063,336.1668}; // Montgomery
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 21:
							{
						        new Float:X_Y_Z[4] = {-2146.3064,-2411.0188,30.4765,320.4872}; // Angel Alpine
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 22:
							{
						        new Float:X_Y_Z[4] = {868.6628,-28.8207,63.1953,159.8571}; // Monte
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 23:
							{
						        new Float:X_Y_Z[4] = {-2756.8635,376.3777,4.3359,271.0996}; // Hall 2
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 24:
							{
						        new Float:X_Y_Z[4] = {-302.6161,1512.5471,75.3594,182.8583}; // Drift
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 25:
							{
						        new Float:X_Y_Z[4] = {1131.9738,-2036.8430,69.0078,269.3504}; // Drift
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 26:
							{
						        new Float:X_Y_Z[4] = {1428.3345947266,1325.5063476563,11.149431228638,269.3504}; // Death Match
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];

						        SetPlayerInteriorEx(playerid, 5);
						        SetPlayerVirtualWorldEx(playerid, 10);
							}
							default:
							{
								SendInfoMessage(playerid, 0, "145", "Ese tele no existe.");
								return 1;
							}
						}

						if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
						{
							SetVehiclePos(GetPlayerVehicleID(playerid), X_Y_Z_ALL[0], X_Y_Z_ALL[1], X_Y_Z_ALL[2]);
							SetVehicleZAngle(GetPlayerVehicleID(playerid), X_Y_Z_ALL[3]);
							LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid), 0);
							SetVehicleVirtualWorldEx(GetPlayerVehicleID(playerid), 0);
							
							for (new j=0, k=GetPlayerPoolSize(); j <= k; j++)
							{
							    if ( IsPlayerConnected(j) && IsPlayerInVehicle(j, GetPlayerVehicleID(playerid)))
							    {
						        	SetPlayerVirtualWorldEx(j, 0);
						        	SetPlayerInteriorEx(j, 0);
							    }
							}
						}
						else
						{
							SetPlayerPos(playerid, X_Y_Z_ALL[0], X_Y_Z_ALL[1], X_Y_Z_ALL[2]);
							SetPlayerFacingAngle(playerid, X_Y_Z_ALL[3]);
							SetCameraBehindPlayer(playerid);
						}
						SetPlayerInteriorEx(playerid, 0);
						ChangeHouseOrOther(playerid, 0);
						ChangeLocal(playerid, -1);

						if ( strval(SendString) != 26 )
						{
							SetPlayerVirtualWorldEx(playerid, 0);
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "146", "Tú no tienes acceso a el comando /Teles.");
				        return 1;
					}
		    	}
				//////////--- /Test
				else if (strfind(cmdtext, "/Test ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 6, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
				        	new Float:Xplayerid, Float:Yplayerid, Float:Zplayerid;
							GetPlayerPos(strval(SendString), Xplayerid, Yplayerid, Zplayerid);
							SetPlayerPos(strval(SendString), Xplayerid, Yplayerid, Zplayerid + 10);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "148", "El jugador al que desea hacerle un test no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "149", "Tú no tienes acceso a el comando /Test.");
				        return 1;
					}
		    	}
		//		02-	*		/A [Texto]						- Canal de la administración
				else if (strfind(cmdtext, "/A ", true) == 0)
				{
					if ( PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[150];
					    new Mid[120];
						strmid(Mid, cmdtext, 3, strlen(cmdtext), sizeof(Mid));
					    format(SendString, sizeof(SendString), "%s", Mid);
						Comandos_Admin(2, playerid, 0, PlayersData[playerid][Admin], 0, SendString);
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "150", "Tú no tienes acceso a el canal de el Staff, si desea hablar con alguno puede whispear con /W [ID] [Duda].");
				        return 1;
					}

				}
		//		03-	*		/Vida [ID]						- Llevar la vida a un jugador
				else if (strfind(cmdtext, "/Vida ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 6, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(3, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "151", "El jugador que desea darle vida no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "152", "Tú no tienes acceso a el comando /Vida.");
				        return 1;
					}
				}
		//		04-	*		/Chaleco [ID]					- Llenar el chaleco a un jugador
				else if (strfind(cmdtext, "/Chaleco ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 9, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(4, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "153", "El jugador que desea darle chaleco no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "154", "Tú no tienes acceso a el comando /Chaleco.");
				        return 1;
					}
				}
		//		05-	*		/Espectar [ID]					- Espectar a un jugador
				else if (strfind(cmdtext, "/Espectar", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
						if (strlen(cmdtext) == 9)
						{
						    Comandos_Admin(5, playerid, false, PlayersData[playerid][Admin], 2, "0");
						}
						else if (IsPlayerConnected(strval(cmdtext[10])))
						{
						    if ( strval(cmdtext[10]) != playerid )
						    {
						        if ( PlayersDataOnline[strval(cmdtext[10])][StateDeath] != 2 )
						        {
									Comandos_Admin(5, playerid, strval(cmdtext[10]), PlayersData[playerid][Admin], 1, "0");
	 							}
								else
								{
									SendInfoMessage(playerid, 0, "1151", "El jugador que desea espectar se encuentra muerto en estos momentos, intentelo de nuevo en unos segundos.");
								}
 							}
							else
							{
								SendInfoMessage(playerid, 0, "1150", "Has introducido tu misma ID a espectar.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "155", "El jugador que desea espectar no se encuentra conectado.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "156", "Tú no tienes acceso a el comando /Espectar.");
				        return 1;
					}
				}
		//		06-	-		/Jail [ID] [Tiempo] [Razón]		- Jaliar a un jugador
				else if (strfind(cmdtext, "/Jail ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
						if (strlen(cmdtext) > 7 )
						{
							if (IsPlayerConnected(strvalEx(cmdtext[GetPosSpace(cmdtext, 1)])))
							{
								if ( strvalEx(cmdtext[GetPosSpace(cmdtext, 2)]) != -1 )
								{
									if ( strvalEx(cmdtext[GetPosSpace(cmdtext, 3)]) != -1 )
									{
										Comandos_Admin(6, playerid, strvalEx(cmdtext[GetPosSpace(cmdtext, 1) + 1]),
										PlayersData[playerid][Admin],
										strvalEx(cmdtext[GetPosSpace(cmdtext, 2)]),
										cmdtext[GetPosSpace(cmdtext, 3)]);
	   							        return 1;
									}
									else
									{
										SendInfoMessage(playerid, 0, "157", "El argumento 'Razón' no se puede dejar vacío.");
										return 1;
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "158", "Ha introducído mal el sintaxis del comando /Jail. Ejemplo correcto: /Jail 22 10 No respetar las normas el servidor.");
									return 1;
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "159", "El jugador que desea Jaliar no se encuentra conectado.");
								return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "160", "Ha introducído mal el sintaxis del comando /Jail. Ejemplo correcto: /Jail 22 10 No respetar las normas el servidor.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "161", "Tú no tienes acceso a el comando /Jail.");
				        return 1;
					}
				}
		//		07-	*		/Kick [ID] [Razón]				- Kikear a un jugador
				else if (strfind(cmdtext, "/Kick", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (!PlayersData[playerid][Admin]) return SendAccessError(playerid, "Kick");
					new PlayerKickID = -1;
					new kickreason[80];
					if (sscanf(cmdtext[6], "us[80]", PlayerKickID, kickreason)) return SendSyntaxError(playerid, "Kick", "Kick 12 No respetar las normas el servidor");
					if (PlayerKickID == playerid) return SendInfoMessage(playerid, 0, "", "La ID que has introducído es la suya.");
					if (!IsPlayerConnected(PlayerKickID)) return SendClientMessage(playerid, COLOR_MESSAGES[0], "El jugador no se encuentra conectado.");
					if (strlen(kickreason) > 80 ) return SendInfoMessage(playerid, 0, "", "La razon no debe ecceder los 80 caracteres.");

					new StringFormat[250];
					new StringFormatEX[100];
					format(StringFormat, sizeof(StringFormat), "%s Han kickeado a %s[%i] por %s. Razón: %s", LOGO_STAFF, PlayersDataOnline[PlayerKickID][NameOnline], PlayerKickID, PlayersDataOnline[playerid][NameOnline], kickreason);
					format(StringFormatEX, sizeof(StringFormatEX), "%s Has kickeado a %s[%i].", LOGO_STAFF, PlayersDataOnline[PlayerKickID][NameOnline], PlayerKickID);
		            MsgKBJWReportsToAdmins(PlayerKickID, StringFormat);
		            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

					print(StringFormat);
					KickEx(PlayerKickID, 6);
				}
		//		// /Silenciar [ID]
				else if (strfind(cmdtext, "/Silenciar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
						if (IsPlayerConnected(strval(cmdtext[11])) && PlayersData[strval(cmdtext[11])][Admin] != 9)
						{
						    new MsgSilenciadoMe[MAX_TEXT_CHAT];
						    new MsgSilenciadoToPlayer[MAX_TEXT_CHAT];
							if ( PlayersDataOnline[strval(cmdtext[11])][IsNotSilenciado] )
							{
							    format(MsgSilenciadoMe, sizeof(MsgSilenciadoMe), "%s Has silenciado a %s", LOGO_STAFF, PlayersDataOnline[strval(cmdtext[11])][NameOnline]);
							    format(MsgSilenciadoToPlayer, sizeof(MsgSilenciadoToPlayer), "%s %s te ha silenciado", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
								PlayersDataOnline[strval(cmdtext[11])][IsNotSilenciado] = false;
							}
							else
							{
							    format(MsgSilenciadoMe, sizeof(MsgSilenciadoMe), "Ha quitado el silencio a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnline]);
							    format(MsgSilenciadoToPlayer, sizeof(MsgSilenciadoToPlayer), "%s %s te ha quitado el silencio", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
								PlayersDataOnline[strval(cmdtext[11])][IsNotSilenciado] = true;
							}
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgSilenciadoMe);
							SendClientMessage(strval(cmdtext[11]), COLOR_MENSAJES_DE_AVISOS, MsgSilenciadoToPlayer);
						}
						else
						{
							SendInfoMessage(playerid, 0, "848", "El jugador que desea silenciar no se encuentra conectado.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "849", "Tú no tienes acceso a el comando /Silenciar.");
					}
				}
				// /Tutorial [ID]
				else if (strfind(cmdtext, "/Tutorial ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
						if ( playerid == strval(cmdtext[10]) || IsPlayerConnected(strval(cmdtext[10])) && PlayersData[strval(cmdtext[10])][Admin] != 9)
						{
							new StringFormat[250];
						    if ( !PlayersData[strval(cmdtext[10])][InTutorial] )
						    {
								PlayersData[strval(cmdtext[10])][InTutorial] = true;
							    TogglePlayerControllableEx(strval(cmdtext[10]), false);
								PlayersDataOnline[strval(cmdtext[10])][IsNotSilenciado] = false;
								format(StringFormat, sizeof(StringFormat), "%s Han mandado a ver el tutorial de reglas a %s por %s",LOGO_STAFF, PlayersDataOnline[strval(cmdtext[10])][NameOnline], PlayersDataOnline[playerid][NameOnline]);
								SetPlayerTutorial(strval(cmdtext[10]), 7);
							}
							else
							{
								format(StringFormat, sizeof(StringFormat), "%s Le han recomenzado el tutorial de reglas a %s por %s",LOGO_STAFF, PlayersDataOnline[strval(cmdtext[10])][NameOnline], PlayersDataOnline[playerid][NameOnline]);
							}
							SendClientMessageToAll(COLOR_KICK_JAIL_BAN, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "856", "El jugador que desea mandar a ver el tutorial no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "855", "Tú no tienes acceso a el comando /Tutorial.");
				        return 1;
					}
				}
				//COMANDO: /Numero
				else if (strcmp("/Numero", cmdtext, true) == 0)
                {
                    if(PlayersData[playerid][Phone] != 0)
                    {
                        new MsgNumber[144];
                    	format(MsgNumber, sizeof(MsgNumber), "Su numero de telefono es: %i.", PlayersData[playerid][Phone]);
                        Acciones(playerid, 8, "revisa su numero de telefono");
                        SendInfoMessage(playerid, 2, "0", MsgNumber);
                    }
                    else
                    {
						SendInfoMessage(playerid, 0, "", "Usted no tiene movil, tiene que ir a un 24/7 para conseguir uno!");
                    }
                }
		//		/Número [Número]
				else if (strfind(cmdtext, "/Número ", true) == 0 || strfind(cmdtext, "/Numero ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
         				new query[200], numberExist, PhoneOwner[MAX_PLAYER_NAME];

					    mysql_format(dataBase, query, 200, "SELECT `Nombre`,`Phone` FROM `%s` WHERE `Phone`='%i';", DIR_USERS, strval(cmdtext[8]));
					    new Cache:cacheid = mysql_query(dataBase, query);
					    cache_get_row_count(numberExist);
					    if ( numberExist )
						cache_get_value_name(0, "Nombre", PhoneOwner);
					    cache_delete(cacheid);
						if ( numberExist && strval(cmdtext[8]) != 0)
						{
							new MsgNumber[MAX_TEXT_CHAT];
						    format(MsgNumber, sizeof(MsgNumber), "%s El número %i pertenece al jugador %s", LOGO_STAFF, strval(cmdtext[8]), PhoneOwner);
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgNumber);
						}
						else SendInfoMessage(playerid, 0, "954", "Ese número no pertenece a ningún jugador!");
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "955", "Tú no tienes acceso a el comando /Número.");
					}
				}
		//		08-	*		/Ban [ID] [Razón]				- Banear a un jugador
				else if (strfind(cmdtext, "/Ban ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
				        new PlayerIDBan = strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]);
						if (strlen(cmdtext) >= 9)
						{
							if (PlayerIDBan != playerid)
							{
								if (IsPlayerConnected(PlayerIDBan) && PlayersData[PlayerIDBan][Admin] != 9)
								{
								    Comandos_Admin(8, playerid, PlayerIDBan, PlayersData[playerid][Admin], 0, cmdtext[GetPosSpace(cmdtext, 2)]);
		       						return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "166", "El jugador que desea banear no se encuentra conectado.");
									return 1;
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "167", "La ID que has introducído es la suya.");
			                    return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "168", "Ha introducído mal el sintaxis del comando /Ban. Ejemplo correcto: /Ban 22 No respetar las normas el servidor.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "169", "Tú no tienes acceso a el comando /Ban.");
				        return 1;
					}
				}
		//		09-	*		/Revisar [ID]					- Revisar a un jugador
				else if (strfind(cmdtext, "/Revisar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 9, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(9, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "170", "El jugador que desea revisar no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "171", "Tú no tienes acceso a el comando /Revisar.");
				        return 1;
					}

				}
		//		10-	*		/Traer [ID]						- Traer un jugador a tu posición
				else if (strfind(cmdtext, "/Traer ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 7, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							if (strval(SendString) != playerid)
							{
								Comandos_Admin(10, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
							}
							else
							{
								SendInfoMessage(playerid, 0, "172", "La ID que has introducído es la suya.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "173", "El jugador que desea traer no se encuentra conectado.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "174", "Tú no tienes acceso a el comando /Traer");
				        return 1;
					}

				}
		//		11- *		/Ir [ID]						- Ir a la poición de un jugador
				else if (strfind(cmdtext, "/Ir ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 4, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							if (strval(SendString) != playerid)
							{
								Comandos_Admin(11, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
							}
							else
							{
								SendInfoMessage(playerid, 0, "175", "La ID que has introducído es la suya.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "176", "El jugador al que desea ir no se encuentra conectado.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "177", "Tú no tienes acceso a el comando /Ir.");
				        return 1;
					}

				}
		//		12- *       /Limpiar [ID]                   - Quitar todas las armas a un jugador
				else if (strfind(cmdtext, "/Limpiar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 5 )
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 9, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(12, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "178", "El jugador al que desea limpiar no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "179", "Tú no tienes acceso a el comando /Limpiar.");
				        return 1;
					}

				}
		//		13- *       /Parar [ID]                     - Freezar a un jugador
				else if (strfind(cmdtext, "/Parar", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
					    new Myplayerid = playerid;
					    if (sscanf(cmdtext[7], "u", playerid)) return SendSyntaxError(playerid, "Parar", "Parar 12");
					    if (!IsPlayerLoguedEx(Myplayerid, playerid)) return 1;

					    new string[150], Mystring[150];
					    if (PlayersDataOnline[playerid][Freeze])
					    {
					        format(string, sizeof(string), "%s te ha descongelado.", PlayersDataOnline[Myplayerid][NameOnline]);
							format(Mystring, sizeof(Mystring), "Has descongelado a %s[%i]", PlayersDataOnline[playerid][NameOnline], playerid);
					    }
					    else
					    {
					        format(string, sizeof(string), "%s Te ha congelado.", PlayersDataOnline[Myplayerid][NameOnline]);
							format(Mystring, sizeof(Mystring), "Has congelado a %s [%i]", PlayersDataOnline[playerid][NameOnline], playerid);
					    }
					    SendAdviseMessage(playerid, string);
					    SendAdviseMessage(Myplayerid, Mystring);
					    PlayersDataOnline[playerid][Freeze] = !PlayersDataOnline[playerid][Freeze];
					    TogglePlayerControllableEx(playerid, !PlayersDataOnline[playerid][Freeze]);
						SetPlayerArmedWeapon(playerid, 0);
					}
					else
					{
						SendInfoMessage(playerid, 0, "182", "Tú no tienes acceso a el comando /Parar.");
				        return 1;
					}

				}
				else if (strcmp("/Matar DM", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						new MsgDMToAll[MAX_TEXT_CHAT];
				    	format(MsgDMToAll, sizeof(MsgDMToAll), "%s Han matado a todos los del modo DeathMatch", LOGO_STAFF);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM])
							{
                                SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
                                SetPlayerHealthEx(i, -100);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1345", "Tú no tienes acceso a el comando /Matar DM.");
					}
				}
		//		14- *       /Spawn [ID]         - Spawnear a un Jugador
				else if (strfind(cmdtext, "/Spawn ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
					    new PlayreSpawn = strval(cmdtext[7]);
						if (IsPlayerConnected(PlayreSpawn))
						{
							if ( IsPlayerInAnyVehicle(PlayreSpawn) )
							{
								PlayersDataOnline[PlayreSpawn][StateMoneyPass] 	= gettime() + 5;
								PlayersDataOnline[PlayreSpawn][VidaOn] = 80.0;
								new Float:PlayerPos[3]; GetPlayerPos(PlayreSpawn, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
								SetPlayerPos(PlayreSpawn, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
							}
							PlayersDataOnline[PlayreSpawn][StateDeath] = 3;
						    SpawnPlayerEx(PlayreSpawn);
						    SetPlayerInteriorEx(PlayreSpawn, 0);
						    SetPlayerVirtualWorldEx(PlayreSpawn, 0);
							CleanDataDeath(PlayreSpawn);

							new StringFormat[MAX_TEXT_CHAT];
							new StringFormatEX[MAX_TEXT_CHAT];

							if ( PlayreSpawn != playerid)
							{
								format(StringFormat, sizeof(StringFormat), "%s Te ha spawneado %s con el comando /Spawn [ID].",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
								format(StringFormatEX, sizeof(StringFormatEX), "%s Has spawneado a %s [%i] con el comando /Spawn [ID].",LOGO_STAFF, PlayersDataOnline[PlayreSpawn][NameOnline], PlayreSpawn);
					            SendClientMessage(PlayreSpawn, COLOR_MENSAJES_DE_AVISOS, StringFormat);
							}
							else
							{
								format(StringFormatEX, sizeof(StringFormatEX), "%s Te has spawneado tú mismo con el comando /Spawn [ID].",LOGO_STAFF);
							}

				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "1317", "El jugador que desea spawnearlo no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1431", "Tú no tienes acceso a el comando /Spawn.");
				        return 1;
					}
				}
		//		14- *       /Matar [ID]         - Matar a un jugador
				else if (strfind(cmdtext, "/Matar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
						new ID_JugadorAMatar[11];
						strmid(ID_JugadorAMatar, cmdtext, 7, strlen(cmdtext), sizeof(ID_JugadorAMatar));
						if (IsPlayerConnected(strval(ID_JugadorAMatar)))
						{
						    Comandos_Admin(14, playerid, strval(ID_JugadorAMatar), PlayersData[playerid][Admin], 0, "0");
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "183", "El jugador que desea matarlo no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "184", "Tú no tienes acceso a el comando /Matar.");
				        return 1;
					}
				}
		//		15- *       /Estado Todos                		- Cerrar y Abrir el canal /o (Todos)
				else if (strcmp(cmdtext, "/Estado Todos", true, 13) == 0 && strlen(cmdtext) == 13 )
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
						Comandos_Admin(15, playerid, 0, PlayersData[playerid][Admin], 0, "0");
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "185", "Tú no tienes acceso a el comando /Estado Todos.");
				        return 1;
					}
				}
				 //ShowServerStats(playerid)
		//		19-	*		/Server Stats					- Ver las estadísticas del servidor
				else if (strcmp("/Server Stats", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 8)
					{
                        ShowServerStats(playerid);
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "1309", "Tú no tienes acceso a el comando /Server Stats.");
				        return 1;
					}
				}
		//		19-	*		/Respawn TodosEx					- Respawear todos los coches
				else if (strcmp("/Respawn TodosEx", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						new StringFormat[120];
						format(StringFormat, sizeof(StringFormat), "%s Has echo un respawn general.",LOGO_STAFF);
			            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

						new IsRespawn[MAX_VEHICLE_COUNT];
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) == 1 && GetPlayerVehicleSeat(i) == 0 )
							{
							    IsRespawn[GetPlayerVehicleID(i)] = 1;
							}
						}

						for (new i = 1; i <= MAX_CAR; i++)
						{
						    if ( IsRespawn[i] != 1 )
						    {
								SetVehicleToRespawnEx(i);
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "188", "Tú no tienes acceso a el comando /Respawn TodosEx.");
					}
				}
		//		19-	*		/Respawn Todos					- Respawear todos los coches
				else if (strcmp("/Respawn Todos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						Comandos_Admin(19, playerid, 0, PlayersData[playerid][Admin], 0, "0");
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "188", "Tú no tienes acceso a el comando /Respawn Todos.");
				        return 1;
					}
				}
		//		//  	/Respawn Facción [ID]					- Respawenar Todos los coches de facción
				else if (strfind(cmdtext, "/Respawn Facción ", true) == 0 ||
						 strfind(cmdtext, "/Respawn Faccion ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 5)
					{
						new FaccionID = strval(cmdtext[17]);
					    if ( FaccionID >= CIVIL && FaccionID <= MAX_FACCION )
					    {
							new StringFormat[120];
							format(StringFormat, sizeof(StringFormat), "%s Has echo un respawn a todos los vehículos de la facción: %s.",LOGO_STAFF, FaccionData[FaccionID][NameFaccion]);
				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

							new IsRespawn[MAX_VEHICLE_COUNT];
							for (new i = 0; i < MAX_PLAYERS; i++)
							{
								if( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) == 1 && GetPlayerVehicleSeat(i) == 0 )
								{
								    IsRespawn[GetPlayerVehicleID(i)] = 1;
								}
							}
							if (FaccionID)
							{
								for (new i = MAX_CAR_DUENO + 1; i <= MAX_CAR_FACCION; i++)
								{
								    if ( IsRespawn[i] != 1 && DataCars[i][Time] == FaccionID)
								    {
										SetVehicleToRespawnExTwo(i);
									}
							    }
						    }
						    else
						    {
								for ( new i = MAX_CAR_FACCION + 1; i <= MAX_CAR_PUBLIC; i++)
								{
								    if ( IsRespawn[i] != 1)
								    {
										SetVehicleToRespawnExTwo(i);
									}
							    }
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "888", "El ID de facción introducida no existe");
					        return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "889", "Tú no tienes acceso a el comando /Respawn Facción");
				        return 1;
					}
				}

		//		18- *    	/Respawn [ID]					- Respawenar un coche
				else if (strfind(cmdtext, "/Respawn ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
						if (strval(cmdtext[9]) > 0 && strval(cmdtext[9]) <= MAX_CAR_PUBLIC)
						{
							Comandos_Admin(18, playerid, 0, PlayersData[playerid][Admin], strval(cmdtext[9]), "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "189", "El vehículo que desea hacerle spawn no existe.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "190", "Tú no tienes acceso a el comando /Respawn.");
				        return 1;
					}

				}
		//			/Incendios					- Ver los incendios actuales
				else if (strcmp(cmdtext, "/Incendios", true, 10) == 0 && strlen(cmdtext) == 10 )
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						ShowIncendios(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1278", "Tú no tienes acceso a el comando /Incendios.");
				        return 1;
					}

				}
				//		23-	*		/Dinero [ID/Nombre] [Monto]
				else if (strfind(cmdtext, "/Dinero ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 9)
					{
					    new getid, monto;
					    if (!sscanf(cmdtext[8], "ui", getid, monto))
					    {
					        if (IsPlayerConnected(getid) && PlayersDataOnline[getid][State] == 3)
		                    {
                                if (monto < -100000 || monto > 100000 && monto != 0)
			                    {
			                        SendInfoMessage(playerid, 0, "1618", "El monto de dinero debe ser entre $-100.000 y $100.000.");
							        return 1;
			                    }
			                    new string[150], stringA[150];

			                    if (monto >= 0)
			                    {
			                        format(stringA, sizeof(stringA), "Le diste $%i a %s[%i].", monto, PlayersDataOnline[getid][NameOnline], getid);
			                        format(string, sizeof(string), "%s[%i] te dio $%i.", PlayersDataOnline[playerid][NameOnline], playerid, monto);
			                    }
			                    else
			                    {
			                        format(stringA, sizeof(stringA), "Le quitaste $%i a %s[%i].", monto, PlayersDataOnline[getid][NameOnline], getid);
			                        format(string, sizeof(string), "%s[%i] te quito $%i.", PlayersDataOnline[playerid][NameOnline], playerid, monto);
			                    }
			                    SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, stringA);
								SendClientMessage(getid, COLOR_MENSAJES_DE_AVISOS, string);
								GivePlayerMoneyEx(getid, monto);
			                    return 1;
		                    }
		                    else
		                    {
		                        SendInfoMessage(playerid, 0, "1617", "El jugador no se encuentra logueado.");
		                    	return 1;
		                    }
					    }
					    else
					    {
					        SendInfoMessage(playerid, 0, "1616", "Ha introducído mal el sintaxis del comando /Dinero. Ejemplo correcto: /Dinero 22 1000");
					        return 1;
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1619", "Tú no tienes acceso a el comando /Dinero.");
				        return 1;
					}
				}
				// COMANDO: /Res [ID] [DUDA]
		  		else if (strfind(cmdtext, "/Res", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
				    if (PlayersData[playerid][Admin] || PlayersData[playerid][Ayudante])
				    {
			  			if (strfind(cmdtext, "/Res ", true) == 0)
					    {
					        new PlayerIDDuda = strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]);
			    		    if ( IsPlayerConnected(PlayerIDDuda) )
						    {
					            new MensajeME[256];
					            new Mensaje[256];
					            new MensajeDudas[256];
					            format(MensajeME, sizeof(MensajeME), "[Dudas] Respondíste a %s[%i]: %s", PlayersDataOnline[PlayerIDDuda][NameOnline], PlayerIDDuda, cmdtext[GetPosSpace(cmdtext, 2)]);
					            format(Mensaje, sizeof(Mensaje), "[Dudas] %s[%i] te responde una duda: %s", PlayersDataOnline[playerid][NameOnline], playerid, cmdtext[GetPosSpace(cmdtext, 2)]);
								format(MensajeDudas, sizeof(MensajeDudas), "[Dudas] %s respondió una duda a %s[%i]: %s", PlayersDataOnline[playerid][NameOnline], PlayersDataOnline[PlayerIDDuda][NameOnline], PlayerIDDuda, cmdtext[GetPosSpace(cmdtext, 2)]);
								SendClientMessage(PlayerIDDuda, COLOR_DUDAS, Mensaje);
								SendClientMessage(playerid, COLOR_DUDAS, MensajeME);

								for (new i = 0; i < MAX_PLAYERS; i++)
								{
									if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Admin] )
									{
									    SendClientMessage(i, COLOR_DUDAS, MensajeDudas);
									}
								}

								print(Mensaje);
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1488", "Al usuario que desea contestarle un duda no se encuentra conectado");
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1489", "Recuerde al utilizar el comando /Res [ID] [Duda] dejar un [ESPACIO]. Ejemplo: /Res 22 MG es Metagaming");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1490", "Tú no tienes acceso a el comando /Res.");
					}
				}
		//			/IrC [ID]					- Ir a un Coche
				else if (strfind(cmdtext, "/IrC ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
					    if (strval(cmdtext[5]) >= 1 && strval(cmdtext[5]) <= MAX_CAR )
					    {
						    new Float:VehiclePoss[3];GetVehiclePos(strval(cmdtext[5]), VehiclePoss[0], VehiclePoss[1], VehiclePoss[2]);
						    SetPlayerPos(playerid,  VehiclePoss[0], VehiclePoss[1], VehiclePoss[2] + 2);

						    SetPlayerInteriorEx(playerid, DataCars[strval(cmdtext[5])][InteriorLast]);
						    SetPlayerVirtualWorldEx(playerid, DataCars[strval(cmdtext[5])][WorldLast]);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "553", "El ID el vehículo introducído no existe.");
					        return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "891", "Tú no tienes acceso a el comando /IrC.");
				        return 1;
					}

				}
		//			/IrCa [ID]					- Ir a una casa
				else if (strfind(cmdtext, "/IrCa ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
				        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
							SetPlayerPos(playerid, HouseData[IdHouse][PosX], HouseData[IdHouse][PosY], HouseData[IdHouse][PosZ]);
							SetPlayerFacingAngle(playerid, HouseData[IdHouse][PosZZ]);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1275", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1274", "Tú no tienes acceso a el comando /IrCa.");
					}

				}
		//			/IrN [ID]					- Ir a un negocio
				else if (strfind(cmdtext, "/IrN ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
				        new BizzID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if ( BizzID > 0 && BizzID <= MAX_BIZZ )
						{
							SetPlayerPos(playerid, NegociosData[BizzID][PosOutX], NegociosData[BizzID][PosOutY], NegociosData[BizzID][PosOutZ]);
							SetPlayerFacingAngle(playerid, NegociosData[BizzID][PosOutZZ]);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1277", "El ID de negocio introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1276", "Tú no tienes acceso a el comando /IrN.");
					}

				}
		//			/Debug Info
			  	else if (strcmp("/Debug Info", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 8)
					{
					    new Found;
						new StringFormat[MAX_TEXT_CHAT];
						for (new i = 1; i <= MAX_CAR; i++)
						{
					        if ( IsVehicleBug(i, false) )
					        {
								format(StringFormat, sizeof(StringFormat), "%s El coche con ID %i se encuentra bugueado.",LOGO_STAFF, i);
					            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
								Found++;
							}
						}
						if ( Found )
						{
							format(StringFormat, sizeof(StringFormat), "%s Hay en total %i coches bugueados.",LOGO_STAFF, Found);
				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1370", "No se encontrarón vehículos bugueados!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1371", "Tú no tienes acceso a el comando /Debug Info.");
				        return 1;
					}
				}
		//			/Traerc Bug
			  	else if (strcmp("/Traerc Bug", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 8)
					{
					    new Found;
						new Float:MyPoss[3];GetPlayerPos(playerid, MyPoss[0], MyPoss[1], MyPoss[2]);
						for (new i = 1; i <= MAX_CAR; i++)
						{
						    if ( GetVehicleVirtualWorld(i) > 999 && !IsWorldOfGarage(GetVehicleVirtualWorld(i)) )
						    {
								SetVehiclePos(i,  MyPoss[0] + 3, MyPoss[1], MyPoss[2]);
								LinkVehicleToInteriorEx(i, GetPlayerInteriorEx(playerid));
								SetVehicleVirtualWorldEx(i, GetPlayerVirtualWorld(playerid));
								Found++;
							}
						}
						if ( Found )
						{
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "%s Has desbugueado %i coches.",LOGO_STAFF, Found);
				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1308", "No se encontrarón vehículos bugueados!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1307", "Tú no tienes acceso a el comando /Traerc Bug.");
				        return 1;
					}
				}
		//			/TraerC [ID]					- Traer un coche
				else if (strfind(cmdtext, "/TraerC ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						if (strval(cmdtext[8]) > 0 && strval(cmdtext[8]) <= MAX_CAR_PUBLIC)
						{

							RemoveVehicleHidden(strval(cmdtext[8]));
							new Float:MyPoss[3];GetPlayerPos(playerid, MyPoss[0], MyPoss[1], MyPoss[2]);
							SetVehiclePos(strval(cmdtext[8]),  MyPoss[0] + 3, MyPoss[1], MyPoss[2]);

							LinkVehicleToInteriorEx(strval(cmdtext[8]), GetPlayerInteriorEx(playerid));
							SetVehicleVirtualWorldEx(strval(cmdtext[8]), GetPlayerVirtualWorld(playerid));
							GetVehiclePos(strval(cmdtext[8]), DataCars[strval(cmdtext[8])][LastX], DataCars[strval(cmdtext[8])][LastY], DataCars[strval(cmdtext[8])][LastZ]);
                       		GetVehicleZAngle(strval(cmdtext[8]), DataCars[strval(cmdtext[8])][LastZZ]);
                       		
                       		for (new j=0, k=GetPlayerPoolSize(); j <= k; j++)
							{
							    if ( IsPlayerConnected(j) && IsPlayerInVehicle(j, strval(cmdtext[8])))
							    {
						        	SetPlayerVirtualWorldEx(j, GetPlayerVirtualWorld(playerid));
						        	SetPlayerInteriorEx(j, GetPlayerInteriorEx(playerid));
							    }
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1447", "El vehículo que desea traer no existe.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "189", "Tú no tienes acceso a el comando /TraerC.");
				        return 1;
					}
				}
		//		20-	*		/Clima [Tipo]					- Cambiar el clima
				else if (strfind(cmdtext, "/Clima ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 4)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 7, strlen(cmdtext), sizeof(SendString));

						if ( strval(SendString) > 45)
						{
							SendInfoMessage(playerid, 0, "191", "El tipo de clima esta fuera de los límites, recuerda que el máximo es 45.");
						}
						else
						{
		       				Comandos_Admin(20, playerid, 0, PlayersData[playerid][Admin], strval(SendString), "0");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "192", "Tú no tienes acceso a el comando /Clima.");
				        return 1;
					}

				}
		//		21- *       /MsgEX [Estilo] [Texto]         - Mensaje EX
				else if (strfind(cmdtext, "/MsgEX ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 9)
					{
						new Datos_Picados[4];
						new DatosOriginales[150];

						strmid(DatosOriginales, cmdtext, 7, strlen(cmdtext), sizeof(DatosOriginales));
						new wPos;

						wPos = strfind(DatosOriginales, " ", false); // HOLA³QUE³PASA³
						if (wPos != -1 || wPos > 4)
						{
							strmid(Datos_Picados[0], DatosOriginales, 0, wPos, sizeof(DatosOriginales));
							strdel(DatosOriginales, 0, wPos + 1);

							if ( strval(Datos_Picados[0]) >= 0 && strval(Datos_Picados[0]) <= 6  )
							{
							    if (strval(Datos_Picados[0]) != 2)
							    {
									Comandos_Admin(21, playerid, 0, PlayersData[playerid][Admin], strval(Datos_Picados[0]), DatosOriginales);
								}
								else
								{
									SendInfoMessage(playerid, 0, "193", "El estilo número 2 esta deshabilitado por razones de bugs.");
								}
	    					}
							else
							{
									SendInfoMessage(playerid, 0, "194", "El número tipo de estilo esta fuera de los límites, recurde que el estilo debe comprender entre 0 y 6.");
							}
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "195", "Ha introducído mal el sintaxis del comando /MsgEX [ESTILO] [TEXTO]. Ejemplo correcto: /MsgEx 2 Hola Mundo.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "196", "Tú no tienes acceso a el comando /MsgEX.");
				        return 1;
					}
				}
				// /Staff
				else if (strcmp("/Staff", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
				{
				    new MsgAdminsOn[100];
				    new FoundAdmin;
					for (new i = 0; i < MAX_PLAYERS; i++)
					{
						if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Admin] && PlayersData[i][Admin] != 9 )
						{
						    if ( !FoundAdmin )
						    {
							    SendClientMessage(playerid, 0x505050FF, "{505050}»»»»»»»»»»»»»»»»»» {008228}S{00B428}taff {008228}O{00B428}nline {505050}««««««««««««««««««");
								FoundAdmin++;
							}
							format(MsgAdminsOn, sizeof(MsgAdminsOn), "{0037FF}* %s %s[%i]", AdminsRangos[PlayersData[i][Admin] - 1], PlayersDataOnline[i][NameOnlineFix], i);
						    SendClientMessage(playerid, 0x505050FF, MsgAdminsOn);
						}
					}
					if ( !FoundAdmin )
					{
					    SendClientMessage(playerid, 0x505050FF, "{910000}»»»»»»»»»»»»» {E10000}No hay miembros del staff en servicio {910000}«««««««««««««");
					}
				}
		//		22- *		/Staff [ID] [Nivel]				- Dar un nivel a un miembro de el Staff
				else if (strfind(cmdtext, "/Staff ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 9 || IsPlayerAdmin(playerid))
					{
						new Datos_Picados[4];
						new DatosOriginales[120];

						strmid(DatosOriginales, cmdtext, 7, strlen(cmdtext), sizeof(DatosOriginales));
						new wPos;

						wPos = strfind(DatosOriginales, " ", false); // HOLA³QUE³PASA³
						if (wPos != -1 || wPos > 4)
						{
							strmid(Datos_Picados[0], DatosOriginales, 0, wPos, sizeof(DatosOriginales));
							strdel(DatosOriginales, 0, wPos + 1);
							if ( strval(DatosOriginales) <= 9 && strval(DatosOriginales) >= 0 )
							{
								if (IsPlayerConnected(strval(Datos_Picados[0])))
								{
								    Comandos_Admin(22, playerid, strval(Datos_Picados[0]), PlayersData[playerid][Admin], strval(DatosOriginales), "0");
								    return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "197", "El jugador del Staff al que se refiere no esta conectado.");
									return 1;
								}
						    }
						    else
							{
								SendInfoMessage(playerid, 0, "198", "El número de level de Staff debe estar comprendido entre 0 y 8, donde 0 sera igual a expulsión.");
								return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "199", "Ha introducído mal el sintaxis del comando /Staff. Ejemplo correcto: /Staff 22 1.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "200", "Tú no tienes acceso a el comando /Staff.");
				        return 1;
					}
				}
				else if (strcmp("/Mappers", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
			    {
				    new string[100];
				    new foundMapper;
					for (new i = 0, maxid = GetPlayerPoolSize(); i <= maxid; i++)
					{
						if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Mapper] )
						{
						    if ( !foundMapper )
						    {
							    SendClientMessage(playerid, 0x505050FF, "{505050}»»»»»»»»»»»»»»»»»» {008228}M{00B428}appers {008228}O{00B428}nline {505050}««««««««««««««««««");
								foundMapper++;
							}
							format(string, sizeof(string), "* Mapper %s[%i]", PlayersDataOnline[i][NameOnlineFix], i);
							if (PlayersData[i][Mapper] == 2) strcat(string, " {"COLOR_ROJO"}(Oficial)", sizeof(string));
						    SendClientMessage(playerid, 0xF5FF00FF, string);
						}
					}
					if ( !foundMapper )
					{
					    SendClientMessage(playerid, 0x505050FF, "{910000}»»»»»»»»»»»»»»»»»» {E10000}No hay Mappers conectados {910000}««««««««««««««««««");
					}
				}
                // 		/Mapper [ID][Level]
                else if (strfind(cmdtext, "/Mapper", true) == 0)
                {
                    if (PlayersData[playerid][Admin] < 9) return SendAccessError(playerid, "Mapper");

                    new getid, level;
                    if (sscanf(cmdtext[7], "ui", getid, level)) return SendSyntaxError(playerid, "Mapper", "Mapper 12 1");
                    if (IsPlayerLoguedEx(playerid, getid) == 0) return 1;
                    if (level < 0 || level > 2 ) return SendInfoMessage(playerid, 0, "", "El nivel de mapper debe ser 1 o 2! Nivel 0 para expulsar.");
                    if (!PlayersData[getid][Mapper] && level == 0) return SendInfoMessage(playerid, 0, "", "Este usuario no es mapper del servidor.");

                    new Mystring[150], Pstring[150], Astring[150];


                    if ( level )
    				{
    				    if (!PlayersData[getid][Mapper])
	                    {
	                        SendAdviseMessage(getid, "Ahora formas parte del equipo de mappers del servidor! Usa /Ayuda Mapper para ver los comandos.");
	                        format(Mystring, sizeof(Mystring), "Metiste a %s[%i] como %s.", PlayersDataOnline[getid][NameOnline], getid, MapperRangos[level - 1]);
				            format(Astring, sizeof(Astring), "%s %s[%i] metio a %s[%i] como %s.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[getid][NameOnline], getid, MapperRangos[level - 1]);
	                    }
	                    else
	                    {
	                        format(Mystring, sizeof(Mystring), "Asignaste a %s[%i] como %s.", PlayersDataOnline[getid][NameOnline], getid, MapperRangos[level - 1]);
				            format(Astring, sizeof(Astring), "%s %s[%i] asigno a %s[%i] como %s.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[getid][NameOnline], getid, MapperRangos[level - 1]);
	                    }
	                    format(Pstring, sizeof(Pstring), "%s[%i] te asigno como %s", PlayersDataOnline[playerid][NameOnline], playerid, MapperRangos[level - 1]);
    				}
    				else
    				{
    				    format(Mystring, sizeof(Mystring), "Expulsaste al %s %s[%i] del equipo de mappers", MapperRangos[PlayersData[getid][Mapper] - 1], PlayersDataOnline[getid][NameOnline], getid);
            			format(Pstring, sizeof(Pstring), "%s[%i] te expulso el equipo de mappers", PlayersDataOnline[playerid][NameOnline], playerid);
				        format(Astring, sizeof(Astring), "%s %s[%i] expulso al %s %s[%i]", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, MapperRangos[PlayersData[getid][Mapper] - 1], PlayersDataOnline[getid][NameOnline], getid);
    				}
                    SendAdviseMessage(playerid, Mystring);
    				SendAdviseMessage(getid, Pstring);
		            MsgCheatsReportsToAdminsEx(Astring, 9);

                    PlayersData[getid][Mapper] = level;
                }
				//		/Skin [ID]                  - Forzar a cambiar un Skin a un jugador
				else if (strfind(cmdtext, "/Skin ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 6)
					{
					    new playeridSkin[5];
					    strmid(playeridSkin, cmdtext, 6, strlen(cmdtext), sizeof(playeridSkin));
						if ( IsPlayerConnected(strval(playeridSkin)) )
						{
	                        SetPlayerSelectedTypeSkin(strval(playeridSkin), false);
						}
						else
						{
							SendInfoMessage(playerid, 0, "202", "El jugador no se encuentra conectado.");
      }
					}
					else
					{
						SendInfoMessage(playerid, 0, "203", "Tú no tienes acceso a el comando /Skin.");
				        return 1;
					}
				}
		//			/StatsEx [ID]                  - Ver las estadisticas de un jugador
				else if (strfind(cmdtext, "/StatsEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
					    new getid = -1;
					    if (sscanf(cmdtext[9], "u", getid)) return SendSyntaxError(playerid, "StatsEx", "StatsEx 12");
						if (!IsPlayerLoguedEx(playerid, getid)) return 1;
						
						GetPlayerStats(getid, playerid);
					}
					else return SendAccessError(playerid, "StatsEx");
				}
		//			/Aparcar NFS                   - Aparcar un coche un NFS en un concecionarios
			  	else if (strcmp("/Aparcar NFS", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    {
					if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 1)
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
		   				if ( MyNearCar)
					    {
					        if ( MyNearCar <= MAX_CAR_DUENO)
					        {
					            if ( IsPlayerInConcencionario(playerid) )
					            {
					                if ( strlen(DataCars[MyNearCar][Dueno]) == 1 )
					                {
								        AparcarVehicle(playerid, MyNearCar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "712", "Vehículos con dueño no puedes aparcar");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "713", "No te encuentras en el concecionario");
								}
					        }
							else
							{
								SendInfoMessage(playerid, 0, "714", "Solo se pueden aparcar vehículos públicos");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "715", "Usted no es Jefe ni Encargado de NFS");
				    }
			    }
		//			/AparcarEx                   - Aparcar cualquier coche donde quieras
			  	else if (strcmp("/AparcarEx", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						new MyNearCar = IsPlayerInNearVehicle(playerid);
		   				if ( MyNearCar)
					    {
					        if ( MyNearCar <= MAX_CAR_DUENO)
					        {
						        AparcarVehicle(playerid, MyNearCar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "287", "Solo se pueden aparcar vehículos públicos");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "286", "Tú no tienes acceso a el comando /AparcarEx.");
				        return 1;
					}
				}
				else if (strfind(cmdtext, "/Bonus", true) == 0)
				{
				    MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] < 9)
					{
					    SendInfoMessage(playerid, 0, "1607", "Tú no tienes acceso a el comando /Bonus.");
					    return 1;
					}
					new string[150];
					if (strfind(cmdtext, "/Bonus ", true) == 0)
					{
					    new nuevoBonus = strval(cmdtext[7]);

					    if (nuevoBonus < 0 || nuevoBonus > 500)
					    {
					        SendInfoMessage(playerid, 0, "1608", "El monto de los Bonus debe ser entre 0 y 500.");
					        return 1;
					    }
					    if (!nuevoBonus)
					    {
					        SendInfoMessage(playerid, 2, "0", "Desactivaste los Bonus.");
					        format(string, sizeof(string), "%s %s[%i] desactivo los Bonus.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
					        MsgCheatsReportsToAdminsEx(string, 9);
					    }
					    else if (Bonus)
					    {
					        format(string, sizeof(string), "Cambiaste el monto de los Bonus a $%i (Antes $%i).", nuevoBonus, Bonus);
					        SendInfoMessage(playerid, 2, "0", string);
					        format(string, sizeof(string), "%s %s[%i] cambio el monto de los Bonus a $%i (Antes $%i).", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, nuevoBonus, Bonus);
					        MsgCheatsReportsToAdminsEx(string, 9);
					    }
					    else
					    {
					        format(string, sizeof(string), "Activaste los Bonus a $%i.", nuevoBonus);
				        	SendInfoMessage(playerid, 2, "0", string);
				        	format(string, sizeof(string), "%s %s[%i] activo los Bonus a $%i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, nuevoBonus);
				        	MsgCheatsReportsToAdminsEx(string, 9);
					    }
				        Bonus = nuevoBonus;
				        return 1;
					}
					else
					{
					    if (Bonus)
					    format(string, sizeof(string), "Los Bonus de Payday son de $%i.", Bonus);
					    else
					    format(string, sizeof(string), "Los Bonus estan desactivados.");
					    SendInfoMessage(playerid, 2, "0", string);
					    return 1;
					}
				}
				//	/Runpaga
				else if (strcmp("/Runpaga", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 9)
					{
						new Hora, Minutos, Segundos;
						new Ano, Mes, Dia;
						new FechaHoraFormateada[150];


						gettime( Hora, Minutos, Segundos );
						getdate(Ano, Mes, Dia);
						Mes--;

                        if (Bonus)
                        format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~Hora de la Paga!~N~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i~N~~p~¡~r~B~g~O~b~N~r~U~b~S~p~!", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos);
                        else
						format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~Hora de la Paga!~N~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos);

						new MensajeBanco[4][70];
						new Intereses;
						new Float:Xpaga, Float:Ypaga, Float:Zpaga;

					    for (new i = 0; i < MAX_PLAYERS; i++)
					    {
							if (IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
							{
							    Intereses = PlayersData[i][Banco] / 2000;

						   		PlayersData[i][Banco] = PlayersData[i][Banco] + FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] + Intereses + Bonus;

								if (Bonus)
						        format(MensajeBanco[0], 70, "Nuevo Balance: $%i Paga: $%i (+%i BONUS)", PlayersData[i][Banco], ( FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] + Bonus ), Bonus);
				   				else
				   				format(MensajeBanco[0], 70, "Nuevo Balance: $%i Paga: $%i", PlayersData[i][Banco], FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]]);
						   		format(MensajeBanco[1], 70, "Intereses: $%i", Intereses);
						   		format(MensajeBanco[2], 70, "Antiguo Balance: $%i", PlayersData[i][Banco] - FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] - Intereses);

								GameTextForPlayer(i, FechaHoraFormateada, 5000, 1 );

				    			SendInfoMessage(i, 1, " ", "|___________________  Banco ___________________|");
				    			SendInfoMessage(i, 1, MensajeBanco[0], "Banco: ");
				    			SendInfoMessage(i, 1, MensajeBanco[1], "Banco: ");
				    			SendInfoMessage(i, 1, MensajeBanco[2], "Banco: ");
				    			SendInfoMessage(i, 1, " ", "|_____________________ Fin ____________________|");
								if ( PlayersData[i][Faccion] != CIVIL )
						        {
				    				PlayersData[i][HorasWork]++;
				   				}
								PlayersData[i][HoursPlaying]++;
								SetPlayerScore(i, GetPlayerScoreEx(i));
								GameTextForPlayer(i, FechaHoraFormateada, 6000, 1 );
								GetPlayerPos(i, Xpaga, Ypaga, Zpaga);
							    PlayerPlaySound(i, 1133, Xpaga, Ypaga, Zpaga);
							    SetPlayerOrginalTime(i);
							}
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "1609", "Tú no tienes acceso a el comando /Runpaga.");
				        return 1;
					}
				}
				//		/Facciones - Lista de todas las facciones disponibles en el servidor
                else if (strcmp("/Facciones", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
				{
                    new string[1024];
                    for (new faccionid = 1; faccionid <= MAX_FACCION; faccionid++)
					{
					    if (PlayersData[playerid][Faccion] == faccionid )
					    format(string, sizeof(string), "%s{E6E6E6}%i\t{00A5FF}%s\n", string, faccionid, FaccionData[faccionid][NameFaccion]);
					    else
                    	format(string, sizeof(string), "%s{E6E6E6}%i\t{00F50A}%s\n", string, faccionid, FaccionData[faccionid][NameFaccion]);
                    }
                    ShowPlayerDialogEx(playerid, 69, DIALOG_STYLE_LIST, "{00A5FF}Lista de Facciones", string, "Aceptar", "");
                    return 1;
                }
                else if (strcmp("/Freno", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
                {
                    if (IsPlayerInAnyVehicle(playerid) && PlayersDataOnline[playerid][InCarId] && coches_Todos_Type[GetVehicleModel(PlayersDataOnline[playerid][InCarId]) - 400] == COCHE)
                    {
                        new vehicleid = PlayersDataOnline[playerid][InCarId];
                        new Float:Speed[3]; GetVehicleVelocity(vehicleid, Speed[0], Speed[1], Speed[2]);

						if (!DataCars[vehicleid][Freno] && Speed[0] != 0.0 && Speed[1] != 0.0 && Speed[2]!= 0.0 )
                        {
                            SendInfoMessage(playerid, 0, "1620", "El vehículo no debe estar en movimiento para aplicar el freno.");
                            return 1;
                        }

                        if (DataCars[vehicleid][Freno])
                        SendInfoMessage(playerid, 2, "0", "Sacaste el freno de mano al vehículo.");
                        else
                        SendInfoMessage(playerid, 2, "0", "Pusiste freno de mano al vehículo.");
                        PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);
                        GetVehiclePos(vehicleid, DataCars[vehicleid][LastX], DataCars[vehicleid][LastY], DataCars[vehicleid][LastZ]);
                        GetVehicleZAngle(vehicleid, DataCars[vehicleid][LastZZ]);
                        DataCars[vehicleid][Freno] = !DataCars[vehicleid][Freno];
                        return 1;
                    }
                    else
                    {
                        SendInfoMessage(playerid, 0, "1610", "Debes estar en un coche para usar /Freno.");
                        return 1;
                    }
                }
                //      /J [Texto]
                else if (strfind(cmdtext, "/J ", true) == 0)
                {
                    if (PlayersData[playerid][Ayudante] || PlayersData[playerid][Admin])
                    {
                        new string[150];
                        format(string, sizeof(string), "%s %s: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], cmdtext[3]);
                        MsgHelperChat(string);
                        return 1;
                    }
                    else
                    {
                        SendInfoMessage(playerid, 0, "1614", "Tú no tienes acceso a el comando /J.");
                        return 1;
                    }
                }
                else if (strfind(cmdtext, "/Materiales ", true) == 0)
                {
                    new getid, monto, string[150], stringA[150];
				    if (sscanf(cmdtext[12], "ui", getid, monto))
				    {
				        SendInfoMessage(playerid, 0, "160", "Ha introducído mal el sintaxis del comando /Materiales. Ejemplo correcto: /Materiales Jose 5");
				        return 1;
				    }
				    if (IsPlayerConnected(getid) && PlayersDataOnline[getid][State] == 3)
                    {
                        if (monto < -2500 || monto > 2500)
	                    {
	                        SendInfoMessage(playerid, 0, "1618", "El monto de materiales debe ser entre -2500 y 2500.");
					        return 1;
					    }
                        else if (IsNotFullMaterialsPlayer(getid, monto))
	                    {
	                        PlayersData[getid][Materiales] += monto;

	                        format(stringA, sizeof(stringA), "Estableciste los materiales de %s[%i] en %i.", PlayersDataOnline[getid][NameOnline], getid, PlayersData[getid][Materiales]);
	                        format(string, sizeof(string), "%s[%i] establecio tus materiales en %i.", PlayersDataOnline[playerid][NameOnline], playerid, PlayersData[getid][Materiales]);
	                        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, stringA);
                        	SendClientMessage(getid, COLOR_MENSAJES_DE_AVISOS, string);
	                        return 1;
	                    }
	                    else
						{
							SendInfoMessage(playerid, 0, "980", "Al jugador que le deseas dar los materiales, no le cabe esa cantidad indícada!");
							return 1;
				        }
					}
					else
					{
					    SendInfoMessage(playerid, 0, "1617", "El jugador no se encuentra logueado.");
					    return 1;
					}
                }
                else if (strfind(cmdtext, "/Ganzuas ", true) == 0)
                {
                    new getid, monto, string[150], stringA[150];
				    if (sscanf(cmdtext[9], "ui", getid, monto))
				    {
				        SendInfoMessage(playerid, 0, "160", "Ha introducído mal el sintaxis del comando /Ganzuas. Ejemplo correcto: /Ganzuas Pepito 5");
				        return 1;
				    }
				    if (IsPlayerConnected(getid) && PlayersDataOnline[getid][State] == 3)
                    {
                        PlayersData[getid][Ganzuas] += monto;

	                    format(stringA, sizeof(stringA), "Estableciste las ganzuas de %s[%i] en %i.", PlayersDataOnline[getid][NameOnline], getid, PlayersData[getid][Ganzuas]);
	                    format(string, sizeof(string), "%s[%i] establecio tus ganzuas en %i.", PlayersDataOnline[playerid][NameOnline], playerid, PlayersData[getid][Ganzuas]);
                        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, stringA);
                        SendClientMessage(getid, COLOR_MENSAJES_DE_AVISOS, string);
                        return 1;
					}
					else
					{
					    SendInfoMessage(playerid, 0, "1617", "El jugador no se encuentra logueado.");
					    return 1;
					}
                }
                //      /IrL [ID]       - Ir Local
                else if (strfind(cmdtext, "/IrL ", true) == 0)
                {
                    if (PlayersData[playerid][Admin] < 7) return SendAccessError(playerid, "IrL.");
                    new getID = strval(cmdtext[5]);
                    new localID = getID-1;
					if (localID >= 0 && localID <= MAX_LOCAL_ID && LocalData[localID][Tipo] != 0)
                    {
                        new string[150];

                        SetPlayerPos(playerid, LocalData[localID][PosX], LocalData[localID][PosY], LocalData[localID][PosZ]);
                        SetPlayerInteriorEx(playerid, 0);
                        SetPlayerVirtualWorldEx(playerid, WORLD_NORMAL);

                        format(string,sizeof(string),"Has ido hacia el local %i.", getID);
                        SendAdviseMessage(playerid, string);
                        return 1;
                    }
                    else
                    {
                        SendInfoMessage(playerid, 0, "204", "El ID de local introducido es invalido o no existe.");
                        return 1;
                    }
                }
                //      /LPos [ID]      - /LocalPos
                else if (strfind(cmdtext, "/LPos ", true) == 0)
				{
					if (PlayersData[playerid][Admin] < 7) return SendAccessError(playerid, "LPos.");
					new getID = strval(cmdtext[5]);
					new localID = getID-1;
					if (localID >= 0 && localID <= MAX_LOCAL_ID && LocalData[localID][Tipo] != 0)
					{
						new string[150];
						new Float:Pos[4];

						GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
						GetPlayerFacingAngle(playerid, Pos[3]);

						LocalData[localID][PosX] = Pos[0];
						LocalData[localID][PosY] = Pos[1];
						LocalData[localID][PosZ] = Pos[2];
						LocalData[localID][PosZZ] = Pos[3]-180.0;
						SaveLocal(localID, true);

						format(string,sizeof(string),"Moviste el local %i a tu posicion.", getID);
						SendAdviseMessage(playerid, string);
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "204", "El ID de local introducido es invalido o no existe.");
						return 1;
                    }
                }
                //      /LPrecio [Precio]       - /Local Precio
                else if (strfind(cmdtext, "/LPrecio ", true) == 0)
			    {
			        if (PlayersData[playerid][Admin] < 8) return SendAccessError(playerid, "LPrecio.");
			        new localID = GetPlayerCloseLocal(playerid);
			        if (localID != -1)
			        {
				        new price = strval(cmdtext[9]);
				        if (price < 0 || price > 1000000) return SendInfoMessage(playerid, 0, "", "El precio del local debe ser entre $0 y $1.000.000");

			            new string[150];

			            format(string,sizeof(string), "Cambiaste el precio del local [%i] de $%i a $%i.", localID+1, LocalData[localID][Precio], price);
			            SendAdviseMessage(playerid, string);

                        LocalData[localID][Precio] = price;
			            SaveLocal(localID, true);
			            return 1;
			        }
			        else return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
			    }
			    //      /LNivel [Precio]       - /Local Nivel
                else if (strfind(cmdtext, "/LNivel ", true) == 0)
			    {
			        if (PlayersData[playerid][Admin] < 7) return SendAccessError(playerid, "LNivel.");
			        new localID = GetPlayerCloseLocal(playerid);
			        if (localID != -1)
			        {
				        new level = strval(cmdtext[8]);
				        if (level < 0 || level > 99) return SendInfoMessage(playerid, 0, "", "El nivel del local debe ser entre 0 y 99");

			            new string[150];

			            format(string,sizeof(string), "Cambiaste el nivel del local [%i] de %i a %i.", localID+1, LocalData[localID][Nivel], level);
			            SendAdviseMessage(playerid, string);

                        LocalData[localID][Nivel] = level;
			            SaveLocal(localID, true);
			            return 1;
			        }
			        else return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
			    }
			    //      /VLocal             - /Vender Local Admin
                else if (strcmp("/VLocal", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
                {
			        if (PlayersData[playerid][Admin] < 8) return SendAccessError(playerid, "VLocal.");
			        new localID = GetPlayerCloseLocal(playerid);
           			if (localID != -1)
			        {
			            if (IsLocalForSale(localID)) return SendInfoMessage(playerid, 0, "", "Este local ya esta a la venta.");

			            new string[500];
			            format(string, sizeof(string), "Has vendido este local [%i]. El propietario era %s", localID+1, LocalData[localID][Owner]);
				        SendAdviseMessage(playerid, string);

			            for(new i=0; i <= MAX_PLAYERS; i++){
			            if (IsPlayerLogued(i) && PlayersData[i][Local] == localID)
			            {
			                PlayersData[i][Local] = -1;
		                    break;
						}}

						LocalData[localID][Seguro] = true;
						PlayersDataOnline[playerid][MyPickupLock] = true;
			            format(LocalData[localID][Owner], MAX_PLAYER_NAME, "No");
			            for (new i=0; i != MAX_LOCAL_KEYS; i++){
                        RemoveLocalKey(localID, i);}
			            SaveLocal(localID, true);
			            return 1;
			        }
			        else return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
			    }
			    //      /Borrar Local
			    else if (strcmp("/Borrar Local", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    {
			        if (PlayersData[playerid][Admin] < 8) return SendAccessError(playerid, "Borrar Local.");
			        new localID = GetPlayerCloseLocal(playerid);
			        if (localID != -1)
				    {
                        new pickupid = LocalData[localID][Pickup];
					    DestroyDynamicPickup(pickupid);
					    PickupIndex[pickupid][Tipo] = PICKUP_TYPE_NINGUNO;
                        DestroyDynamic3DTextLabel(LocalData[localID][TextLabel]);
                        DestroyDynamic3DTextLabel(LocalData[localID][TextLabelIn]);
                        ClearLocalData(localID);
                        MAX_LOCAL--;

                        SaveLocal(localID, false);

			            for(new i=0; i <= MAX_PLAYERS; i++){
			            if (IsPlayerLogued(i) && PlayersData[i][Local] == localID)
			            {
		                    PlayersData[i][Local] = -1;
		                    break;
						}}
						new string[150];
						format(string,sizeof(string), "Borraste este local [%i].", localID+1);
						SendAdviseMessage(playerid, string);
						return 1;
				    }
				    else return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun local.");
			    }
			    //      /CrearO             -/Crearo Objeto
			    else if (strfind(cmdtext, "/CrearO ", true) == 0)
				{
				    if (!PlayersData[playerid][Admin]) return SendAccessError(playerid, "CrearO");
					if (PlayersData[playerid][InLocal] != -1 ||
						PlayersData[playerid][IsPlayerInHouse] ||
						PlayersData[playerid][IsPlayerInBizz]    ) return SendInfoMessage(playerid, 0, "", "No puedes usar este comando aquí");
				    
				    new modelid = strval(cmdtext[8]);
				    
				    if (modelid >= 321 && modelid <=373 || modelid >=615 && modelid <= 19999)
				    {
				        new string[144];
				        
				        if (MAX_MAPEOS == MAX_MAPEOS_COUNT)
						{
						    format(string, sizeof(string), "Se alcanzo el maximo de mapeos (%i)", MAX_MAPEOS_COUNT);
						    return SendInfoMessage(playerid, 0, "", string);
						}
				        
				        new Float:Pos[3]; GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

						new mapeoid = CrearMapeo(playerid, modelid, Pos[0], Pos[1], Pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

					    format(string, sizeof(string), "Creaste un mapeo modelo %i, Objetoid %i con el ID %i", modelid, Mapeo[mapeoid][ID_Objeto], mapeoid);
						SendAdviseMessage(playerid, string);
				    }
				    else SendInfoMessage(playerid, 0, "", "Modelo invalido");
				}
				//      /Sel
				else if (strcmp("/sel", cmdtext, true) == 0)
				{
				    if (!PlayersData[playerid][Admin]) return SendAccessError(playerid, "Sel");
				    SelectObject(playerid);
				    return 1;
				}
				//      /Sel [ID_Mapeo]
				else if (strfind(cmdtext, "/sel ", true) == 0)
				{
				    if (!PlayersData[playerid][Admin]) return SendAccessError(playerid, "Sel [ID_Mapeo]");
				    
				    new mapeoid = strval(cmdtext[5]);
				    
				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de mapeo invalido");
				    
				    if (Mapeo[mapeoid][Modelo] != 0)
				    {
				        PlayersDataOnline[playerid][EditingType] = EDITING_TYPE_MAPEO;
						PlayersDataOnline[playerid][EditingMapeo] = mapeoid;
						PlayersDataOnline[playerid][EditingObjectID] = Mapeo[mapeoid][ID_Objeto];
				        ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
				    }
				    else return SendInfoMessage(playerid, 0, "", "El ID de mapeo no existe.");
				}
				//      /IrM               -/Ir Mapeo
				else if (strfind(cmdtext, "/irM ", true) == 0)
				{
				    if (!PlayersData[playerid][Admin]) return SendAccessError(playerid, "IrM [ID_Mapeo]");

				    new mapeoid = strval(cmdtext[5]);

				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de mapeo invalido");

				    if (Mapeo[mapeoid][Modelo] != 0)
				    {
				        new string[144];
				        
				        SetPlayerPos(playerid, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
				        SetPlayerVirtualWorldEx(playerid, Mapeo[mapeoid][Mundo]);
				        SetPlayerInteriorEx(playerid, Mapeo[mapeoid][Interior]);
				        format(string, sizeof(string), "Fuiste al mapeo ID %i", mapeoid);
				        SendAdviseMessage(playerid, string);
				    }
				    else return SendInfoMessage(playerid, 0, "", "El ID de mapo no existe.");
				}
				//      /IrPuerta
				else if (strfind(cmdtext, "/IrPuerta ", true) == 0)
				{
				    new puertaid = strval(cmdtext[10]);
				    
				    if(puertaid < 0 || puertaid > MAX_PUERTAS_COUNT ) return SendInfoMessage(playerid, 0, "", "ID de puerta invalida");
				    if(!Puerta[puertaid][Creada]) return SendInfoMessage(playerid, 0, "", "El ID de puerta no existe.");
				    
				    new string[144],
				        mapeoid = Puerta[puertaid][ID_Mapeo];

			        SetPlayerPos(playerid, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
			        SetPlayerVirtualWorldEx(playerid, Mapeo[mapeoid][Mundo]);
			        SetPlayerInteriorEx(playerid, Mapeo[mapeoid][Interior]);
			        format(string, sizeof(string), "Fuiste a la puerta ID %i[%i]", puertaid, mapeoid);
			        SendAdviseMessage(playerid, string);
				}
				//      /IrPeaje
				else if (strfind(cmdtext, "/IrPeaje ", true) == 0)
				{
				    new peajeid = strval(cmdtext[9]);

				    if(peajeid < 0 || peajeid > MAX_PEAJES_COUNT ) return SendInfoMessage(playerid, 0, "", "ID de peaje invalido");
				    if(!Peajes[peajeid][Creado]) return SendInfoMessage(playerid, 0, "", "El ID de peaje no existe.");

				    new string[144],
				        mapeoid = Peajes[peajeid][ID_Mapeo];

			        SetPlayerPos(playerid, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
			        SetPlayerVirtualWorldEx(playerid, Mapeo[mapeoid][Mundo]);
			        SetPlayerInteriorEx(playerid, Mapeo[mapeoid][Interior]);
			        format(string, sizeof(string), "Fuiste al peaje ID %i[%i]", peajeid, mapeoid);
			        SendAdviseMessage(playerid, string);
				}
				//      /IrParqueo
				else if (strfind(cmdtext, "/IrParqueo ", true) == 0)
				{
				    new parqueoid = strval(cmdtext[11]);

				    if(parqueoid < 0 || parqueoid > MAX_PARQUEOS_COUNT ) return SendInfoMessage(playerid, 0, "", "ID de parqueo invalido");
				    if(!Parqueo[parqueoid][Creado]) return SendInfoMessage(playerid, 0, "", "El ID de peaje no existe.");

				    new string[144],
				        mapeoid = Parqueo[parqueoid][ID_Mapeo];

			        SetPlayerPos(playerid, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
			        SetPlayerVirtualWorldEx(playerid, Mapeo[mapeoid][Mundo]);
			        SetPlayerInteriorEx(playerid, Mapeo[mapeoid][Interior]);
			        format(string, sizeof(string), "Fuiste al parqueo ID %i[%i]", parqueoid, mapeoid);
			        SendAdviseMessage(playerid, string);
				}
				//      /Ox             -Ajustar coordenada X de un mapeo
				else if (strfind(cmdtext, "/ox ", true) == 0)
				{
				    new mapeoid, Float:Pos;
				    
				    if (sscanf(cmdtext[4], "if", mapeoid, Pos)) return SendSyntaxError(playerid, "ox", "ox 12 1.0");
				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de objeto invalido");
				    if (Mapeo[mapeoid][Modelo] == 0) return SendInfoMessage(playerid, 0, "", "El ID de objeto no existe.");
				    if (!IsPlayerInRangeOfPoint(playerid, 20, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]) || GetPlayerVirtualWorld(playerid) != Mapeo[mapeoid][Mundo]) return SendInfoMessage(playerid, 0, "", "Debes estar cerca del mapeo");
				    
				    Mapeo[mapeoid][PosX] += Pos;
				    SetDynamicObjectPos(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
				}
				//      /Oy             -Ajustar coordenada Y de un mapeo
				else if (strfind(cmdtext, "/oy ", true) == 0)
				{
				    new mapeoid, Float:Pos;

				    if (sscanf(cmdtext[4], "if", mapeoid, Pos)) return SendSyntaxError(playerid, "oy", "oy 12 1.0");
				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de objeto invalido");
				    if (Mapeo[mapeoid][Modelo] == 0) return SendInfoMessage(playerid, 0, "", "El ID de objeto no existe.");
				    if (!IsPlayerInRangeOfPoint(playerid, 20, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]) || GetPlayerVirtualWorld(playerid) != Mapeo[mapeoid][Mundo]) return SendInfoMessage(playerid, 0, "", "Debes estar cerca del mapeo");

				    Mapeo[mapeoid][PosY] += Pos;
				    SetDynamicObjectPos(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
				}
				//      /Oz             -Ajustar coordenada Z de un mapeo
				else if (strfind(cmdtext, "/oz ", true) == 0)
				{
				    new mapeoid, Float:Pos;

				    if (sscanf(cmdtext[4], "if", mapeoid, Pos)) return SendSyntaxError(playerid, "oz", "oz 12 0.5");
				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de objeto invalido");
				    if (Mapeo[mapeoid][Modelo] == 0) return SendInfoMessage(playerid, 0, "", "El ID de objeto no existe.");
				    if (!IsPlayerInRangeOfPoint(playerid, 20, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]) || GetPlayerVirtualWorld(playerid) != Mapeo[mapeoid][Mundo]) return SendInfoMessage(playerid, 0, "", "Debes estar cerca del mapeo");

				    Mapeo[mapeoid][PosZ] += Pos;
				    SetDynamicObjectPos(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
				}
				//      /Rx             -Ajustar rotacion de un mapeo
				else if (strfind(cmdtext, "/rx ", true) == 0)
				{
				    new mapeoid, Float:Pos;

				    if (sscanf(cmdtext[4], "if", mapeoid, Pos)) return SendSyntaxError(playerid, "rx", "rx 12 1.0");
				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de objeto invalido");
				    if (Mapeo[mapeoid][Modelo] == 0) return SendInfoMessage(playerid, 0, "", "El ID de objeto no existe.");
				    if (!IsPlayerInRangeOfPoint(playerid, 20, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]) || GetPlayerVirtualWorld(playerid) != Mapeo[mapeoid][Mundo]) return SendInfoMessage(playerid, 0, "", "Debes estar cerca del mapeo");

				    Mapeo[mapeoid][PosRX] += Pos;
				    SetDynamicObjectRot(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ]);
				}
				//      /Ry             -Ajustar rotacion de un mapeo
				else if (strfind(cmdtext, "/ry ", true) == 0)
				{
				    new mapeoid, Float:Pos;

				    if (sscanf(cmdtext[4], "if", mapeoid, Pos)) return SendSyntaxError(playerid, "ry", "ry 12 1.0");
				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de objeto invalido");
				    if (Mapeo[mapeoid][Modelo] == 0) return SendInfoMessage(playerid, 0, "", "El ID de objeto no existe.");
				    if (!IsPlayerInRangeOfPoint(playerid, 20, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]) || GetPlayerVirtualWorld(playerid) != Mapeo[mapeoid][Mundo]) return SendInfoMessage(playerid, 0, "", "Debes estar cerca del mapeo");

				    Mapeo[mapeoid][PosRY] += Pos;
				    SetDynamicObjectRot(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ]);
				}
				//      /Rz             -Ajustar rotacion de un mapeo
				else if (strfind(cmdtext, "/rz ", true) == 0)
				{
				    new mapeoid, Float:Pos;

				    if (sscanf(cmdtext[4], "if", mapeoid, Pos)) return SendSyntaxError(playerid, "rz", "rx 12 90.0");
				    if (mapeoid < 0 || mapeoid > MAX_MAPEOS_COUNT - 1) return SendInfoMessage(playerid, 0, "", "ID de objeto invalido");
				    if (Mapeo[mapeoid][Modelo] == 0) return SendInfoMessage(playerid, 0, "", "El ID de objeto no existe.");
				    if (!IsPlayerInRangeOfPoint(playerid, 20, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]) || GetPlayerVirtualWorld(playerid) != Mapeo[mapeoid][Mundo]) return SendInfoMessage(playerid, 0, "", "Debes estar cerca del mapeo");

				    Mapeo[mapeoid][PosRZ] += Pos;
				    SetDynamicObjectRot(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ]);
				}
				//      /Mundo [ID] [Mundo]
				else if (strfind(cmdtext, "/Mundo ", true) == 0)
				{
				    new mundoid;
				    if (sscanf(cmdtext[7], "i", mundoid)) return SendSyntaxError(playerid, "Mundo", "Mundo 0");
				    new string[144];
				    format(string, sizeof(string), "Cambiaste del mundo %i al %i", GetPlayerVirtualWorld(playerid), mundoid);
				    SetPlayerVirtualWorldEx(playerid, mundoid);
				    SendAdviseMessage(playerid, string);
				}
				//      /Interiorex [ID] [Interior]
				else if (strfind(cmdtext, "/Interiorex ", true) == 0)
				{
				    new interior;
				    if (sscanf(cmdtext[12], "i", interior)) return SendSyntaxError(playerid, "Interiorex", "Interiorex 0");
				    new string[144];
				    format(string, sizeof(string), "Cambiaste del interior %i al %i.", GetPlayerInterior(playerid), interior);
				    SetPlayerInteriorEx(playerid, interior);
				    SendAdviseMessage(playerid, string);
				}
				//      /IrTele [ID_Tele]
				else if (strfind(cmdtext, "/IrTele ", true) == 0)
				{
				    if (!PlayersData[playerid][Mapper]) return SendAccessError(playerid, "IrTele");
				    new teleid = strval(cmdtext[8]);
				    if (teleid < 0 || teleid >= MAX_TELES_COUNT ) return SendInfoMessage(playerid, 0, "", "ID de Tele invalido");
				    if (Teles[teleid][PickupID] == 0) return SendInfoMessage(playerid, 0, "", "El tele no existe");
				    
				    SetPlayerPos(playerid, Teles[teleid][PosX], Teles[teleid][PosY], Teles[teleid][PosZ]);
				    SetPlayerVirtualWorldEx(playerid, Teles[teleid][World]);
					SetPlayerInteriorEx(playerid, Teles[teleid][Interior]);
					
					new string[144]; format(string,sizeof(string), "Fuiste al Tele ID %i.", teleid);
					SendAdviseMessage(playerid, string);
				}
				//      /TelePos [ID_Tele]
				else if (strcmp("/TelePos", cmdtext, true) == 0) return SendSyntaxError(playerid, "TelePos", "TelePos 12");
				else if (strfind(cmdtext, "/TelePos ", true) == 0)
				{
				    if (!PlayersData[playerid][Mapper]) return SendAccessError(playerid, "TelePos");
				    new teleid = -1;
				    if (sscanf(cmdtext[9], "i", teleid)) return SendSyntaxError(playerid, "TelePos", "TelePos 12");
				    if (teleid < 0 || teleid >= MAX_TELES_COUNT ) return SendInfoMessage(playerid, 0, "", "ID de Tele invalido");
				    if (Teles[teleid][PickupID] == 0) return SendInfoMessage(playerid, 0, "", "El tele no existe");

				    GetPlayerPos(playerid, Teles[teleid][PosX], Teles[teleid][PosY], Teles[teleid][PosZ]);
				    GetPlayerFacingAngle(playerid, Teles[teleid][PosZZ]);
				    Teles[teleid][PosZZ] += 180.0;
				    Teles[teleid][World] = GetPlayerVirtualWorld(playerid);
					Teles[teleid][Interior] = GetPlayerInterior(playerid);
					SaveTele(teleid, true);

					new string[144]; format(string,sizeof(string), "Moviste el tele id %i a esta posicion.", teleid);
					SendAdviseMessage(playerid, string);
				}
				//      /Borra Tele
				else if (strcmp(cmdtext, "/Borrar Tele", true) == 0)
				{
				    if (!PlayersData[playerid][Mapper]) return SendAccessError(playerid, "Borrar Tele");
				    
				    if (PlayersDataOnline[playerid][InPickupTele] == -1) return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun tele");
				    new teleid = PlayersDataOnline[playerid][InPickupTele];  
				    
				    new string[144]; format(string,sizeof(string), "Borraste el tele id %i, estaba vinculado al tele %i.", teleid, Teles[teleid][PickupIDGo]);
					
					BorrarTele(teleid);
					SendAdviseMessage(playerid, string);
				}
				//      /TeleP [Tipo_Propietario] [Propietario_ID]             -Tele Propietario
				else if (strfind(cmdtext, "/TeleP", true) == 0)
				{
				    if (!PlayersData[playerid][Mapper]) return SendAccessError(playerid, "TeleP");
				    
				    if(strfind(cmdtext, "/TeleP ", true) == 0)
				    {
				        new tipo, tipoid;
				        if (sscanf(cmdtext[7], "ii", tipo, tipoid))
						{
						 	SendSyntaxError(playerid, "TeleP", "TeleP 0 1");
							SendInfoMessage(playerid, 0, "", "Tipo de propietarios {0: Faccion | 1: Negocio | 2: Casa | 3: Local}");
						    return 1;
				        }
				        if (tipo < 0 || tipo > 3) return SendInfoMessage(playerid, 0, "", "Tipo de propietarios {0: Faccion | 1: Negocio | 2: Casa | 3: Local}");
				        switch (tipo)
				        {
				            case 0: if (tipoid < 0 || tipoid > MAX_FACCION) return SendInfoMessage(playerid, 0, "", "ID de Faccion Invalida");
				            case 1..3: if (tipoid <= 0) return SendInfoMessage(playerid, 0, "", "ID de Propiedad invalido.");
				        }
						if (PlayersDataOnline[playerid][InPickupTele] == -1) return SendInfoMessage(playerid, 0, "", "No te encuentras en ningun tele");	
				    	new
						teleid = PlayersDataOnline[playerid][InPickupTele],
						teleidGo = Teles[teleid][PickupIDGo];
							   
				        Teles[teleidGo][IsNegocioTele] = false;
				        Teles[teleidGo][IsCasaTele] = false;
				        Teles[teleidGo][IsLocalTele] = false;
						Teles[teleidGo][DuenoType] = tipo;
				        Teles[teleidGo][Dueno] = tipoid;
				        //////////////////
				        Teles[teleid][IsNegocioTele] = false;
				        Teles[teleid][IsCasaTele] = false;
				        Teles[teleid][IsLocalTele] = false;
						Teles[teleid][DuenoType] = tipo;
				        Teles[teleid][Dueno] = tipoid;
				        
				        new string[144]; 
						if (tipo == 0) format(string,sizeof(string), "El tele %i y %i ahora tiene como llaves la faccion %s[%i]", teleid, teleidGo, FaccionData[tipoid][NameFaccion], tipoid);
				        else if (tipo == 1)
						{
							format(string,sizeof(string), "El tele %i y %i ahora tiene como llaves el negocio %i", teleid, teleidGo, tipoid);
							Teles[teleid][IsNegocioTele] = true;
				        }
				        else if (tipo == 2)
						{
							format(string,sizeof(string), "El tele %i y %i ahora tiene como llaves la casa %i", teleid, teleidGo, tipoid);
							Teles[teleid][IsCasaTele] = true;
				        }
				        else if (tipo == 3)
						{
							format(string,sizeof(string), "El tele %i y %i ahora tiene como llaves el local %i", teleid, teleidGo, tipoid);
							Teles[teleidGo][Dueno] = tipoid-1;
							Teles[teleid][Dueno] = tipoid-1;
							Teles[teleid][IsLocalTele] = true;
				        }
				        
				    	SendAdviseMessage(playerid, string);
				    }
				    else SendSyntaxError(playerid, "TeleP [Tipo_Propietario] [Propietario_ID]", "TeleP 0 1");
				}
				else if (strfind(cmdtext, "/GPS ", true) == 0)
				{
				    if (PlayersData[playerid][Admin] < 9) return 0;
				    if (strfind(cmdtext, "/GPS PC-", true) == 0)
				    {
				        new houseid = strval(cmdtext[8]);
				        if (houseid > 0 || houseid < MAX_HOUSE_COUNT )
				        {
				            SetPlayerMapIcon(playerid, 0, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ], 0, 0x00FF00FF, MAPICON_GLOBAL_CHECKPOINT);
				        }
				    }
				    else if (strfind(cmdtext, "/GPS PN-", true) == 0)
				    {
				        new bizzid = strval(cmdtext[8]);
				        if (bizzid > 0 || bizzid < MAX_BIZZ_COUNT )
				        {
				            SetPlayerMapIcon(playerid, 1, NegociosData[bizzid][PosOutX], NegociosData[bizzid][PosOutY], NegociosData[bizzid][PosOutZ], 0, 0x0000FFFF, MAPICON_GLOBAL_CHECKPOINT);
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid,-1,"Direccion invalida");
				    }
				}
			    // NO COMMANDS SEND
				else
				{
					SendInfoMessage(playerid, 0, "204", "El comando introducído no es válido, para más información consulte /Ayuda");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "205", "El comando introducído no existe, para más información consulte /Ayuda");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1091", "No puede utilizar comandos mientras está en las cámaras de seguridad!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "206", "Debe ingresar a el servidor antes de utilizar cualquier comando o ha sido silenciado.");
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if ( IsVehicleOpen(playerid, vehicleid, ispassenger) )
	{
   		SetVehicleParamsForPlayer(vehicleid, playerid, 0, 0);
	}
	else if ( vehicleid <= MAX_CAR_FACCION )
	{
		SetVehicleParamsForPlayer(vehicleid, playerid, 0, 1);
	    if (IsFixBikeEnter(playerid, vehicleid) )
	    {
	        if (coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == TREN )
	        {
	   			SendInfoMessage(playerid, 0, "1052", "Este Tren se encuentra cerrado");
   			}
   			else if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == BOTE )
   			{
	   			SendInfoMessage(playerid, 0, "1105", "Este bote se encuentra cerrado");
			}
   			else
   			{
	   			SendInfoMessage(playerid, 0, "219", "Esta moto se encuentra cerrada");
   			}
		}
		else
		{
	   		SendInfoMessage(playerid, 0, "220", "Este coche se encuentra cerrado");
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] != BICI )
	{
	    if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
	    {
			ForcePutPlayerInVehicle(playerid, PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR],0);
			if (Pistas[PlayersDataOnline[playerid][PistaIDp]][Used] != RACE_STATE_COMPITIENDO)
			{
				TogglePlayerControllable(playerid, false);
			}
	    }
	    else
	    {
			new Float:CurrentDamageVeh;
			GetVehicleHealth(vehicleid, CurrentDamageVeh);
			IsVehicleExplotion(playerid, vehicleid, CurrentDamageVeh, GetPlayerVehicleSeat(playerid));
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	if ( issuerid != INVALID_PLAYER_ID )
	{
	   if ( HaveObjectByTypeAndShow(issuerid, TYPE_TASER) && (
	   		PlayersData[issuerid][Faccion] == LSPD ||
			PlayersData[issuerid][Faccion] == SFPD ||
			PlayersData[issuerid][Faccion] == GOBIERNO 		  ) )
	   {
			new MsgTaserIntentar[MAX_TEXT_CHAT];
			if ( PlayersDataOnline[playerid][IsTeazer] <= gettime() )
			{
				format(MsgTaserIntentar, sizeof(MsgTaserIntentar), "darle con el táser a %s", PlayersDataOnline[playerid][NameOnlineFix]);
				if (IntentarAccion(issuerid, MsgTaserIntentar, random(3)))
				{
				    PlayersDataOnline[playerid][IsTeazer] = gettime() + 180;
					SetPlayerDrunkLevel(playerid, 5000);
				}
				PlayPlayerStreamSound(playerid, 6003);
			}
			else
			{
				SendInfoMessage(issuerid, 0, "746", "Ya ha ese jugador le dierón con un táser!");
			}
	   }
	}
}
public OnPlayerEnterCheckpoint(playerid)
{
	if ( PlayersData[playerid][IsPlayerInBizz] )
	{
		new TypeBizz = NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type];
		// Tiendas de ropa
		if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[TypeBizz][TypeName], "Ropa", false) == 0)
		{
			SendInfoMessage(playerid, 2, "0", "Use (/Comprar {Ropa, Lentes, Gorra, Reloj, Casco}) para ingresar en el vestidor!");
		}
		// Barberías
		else if ( TypeBizz >= 27 && TypeBizz <= 29 )
		{
			SendInfoMessage(playerid, 2, "0", "Use (/Comprar Peluca) para comprar pelucas o (/Comprar Boina) para boinas.");
		}
		// CluckinBell;
		else if ( TypeBizz == 22 )
		{
			ShowMenuForPlayer(CluckinBell, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// BurgerShot;
		else if ( TypeBizz == 23 )
		{
			ShowMenuForPlayer(BurgerShot, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// PizzaStack;
		else if ( TypeBizz == 24 )
		{
			ShowMenuForPlayer(PizzaStack, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// JaysDiner;
		else if ( TypeBizz == 7 )
		{
			ShowMenuForPlayer(JaysDiner, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// RingDonuts;
		else if (TypeBizz == 6 )
		{
			ShowMenuForPlayer(RingDonuts, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// Armerias;
		else if ( TypeBizz >= 8 &&
				TypeBizz <= 12 )
		{
			if ( PlayersData[playerid][Licencias][0] )
			{
				ShowMenuForPlayer(Menu_Principal_Armas, playerid);
				PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
				TogglePlayerControllableEx(playerid, 0);
			}
			else
			{
				SendInfoMessage(playerid, 0, "1092", "Necesitas una licencia de armas para comprar en la armeria");
			}
		}
		// 27/7;
		else if ( TypeBizz >= 16 &&
				TypeBizz <= 17 )
		{
		    ShowDialog247(playerid);
		}
	}
	else
	{
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
	{
	    if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 1 ||
			 PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] == 3 )
	    {
			if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
			{
				if ( GetPlayerVehicleID(playerid) <= MAX_CAR_DUENO )
				{
					if ( strlen(DataCars[GetPlayerVehicleID(playerid)][Dueno]) != 1 )
					{
					    if ( !DataCars[GetPlayerVehicleID(playerid)][Lock] )
					    {
						    RemoveDuenoOfVehicle(GetPlayerVehicleID(playerid), 1);
						    new MsgDropeo[MAX_TEXT_CHAT];
						    format(MsgDropeo, sizeof(MsgDropeo), "Vehículo dropeado correctamente, recompenza de $%i", coches_Todos_Precios[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] / 3);
							SendInfoMessage(playerid, 3, "0", MsgDropeo);
							GivePlayerMoneyEx(playerid, coches_Todos_Precios[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] / 3);
						}
						else
						{
							SendInfoMessage(playerid, 0, "718", "Éste vehículo se encuentra cerrado, no puede dropear un vehículo cerrado!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "719", "Éste vehículo ya está sin dueño, no necesita dropeo");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "720", "Éste vehículo no es público de venta, no se puede dropear");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "721", "Monte en el vehículo que desea dropear de conductor para finalizar el dropeo"); //
			}
		}
		else
		{
			DisablePlayerRaceCheckpoint(playerid);
		}
	}
	else
	{
		SetPlayerNextCheckPointRace(playerid);
	}
	return 1;
}
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}
public OnPlayerRequestSpawn(playerid)
{
	if (PlayersDataOnline[playerid][State] == 1)
	{
		SendInfoMessage(playerid, 0, "207", "Debe loguearse antes de entrar al servidor.");
	}
	else if (PlayersDataOnline[playerid][State] == 2)
	{
		SendInfoMessage(playerid, 0, "208", "Debe regístrarse antes de entrar al servidor.");
	}
	return 0;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    IsPlayerInPincho(playerid, pickupid);
	if ( PlayersDataOnline[playerid][InPickup] != pickupid )
	{
		ClearPlayerPickups(playerid);
	    PlayersDataOnline[playerid][InPickup] = pickupid;

	    // FACCIONES
	    if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_FACCION)
	    {
	        new faccionid = PickupIndex[pickupid][Tipoid];

	        if ( FaccionData[faccionid][PickupidOutF] == pickupid || FaccionData[faccionid][PickupidInF] == pickupid )
            {
                if ( FaccionData[faccionid][PickupidOutF] == pickupid )
                {
                    PlayersDataOnline[playerid][MyPickupX]  = FaccionData[faccionid][PickupIn_X];
                    PlayersDataOnline[playerid][MyPickupY]  = FaccionData[faccionid][PickupIn_Y];
                    PlayersDataOnline[playerid][MyPickupZ]  = FaccionData[faccionid][PickupIn_Z];
                    PlayersDataOnline[playerid][MyPickupZZ] = FaccionData[faccionid][PickupIn_ZZ];
                    PlayersDataOnline[playerid][MyPickupInterior] = FaccionData[faccionid][InteriorFaccion];

					PlayersDataOnline[playerid][MyPickupX_Now] = FaccionData[faccionid][PickupOut_X];
					PlayersDataOnline[playerid][MyPickupY_Now] = FaccionData[faccionid][PickupOut_Y];
					PlayersDataOnline[playerid][MyPickupZ_Now] = FaccionData[faccionid][PickupOut_Z];
					PlayersDataOnline[playerid][MyPickupWorld] = FaccionData[faccionid][World];
                }
                else
                {
                    PlayersDataOnline[playerid][MyPickupX]  = FaccionData[faccionid][PickupOut_X];
                    PlayersDataOnline[playerid][MyPickupY]  = FaccionData[faccionid][PickupOut_Y];
                    PlayersDataOnline[playerid][MyPickupZ]  = FaccionData[faccionid][PickupOut_Z];
                    PlayersDataOnline[playerid][MyPickupZZ] = FaccionData[faccionid][PickupOut_ZZ];
					PlayersDataOnline[playerid][MyPickupWorld] = 0;
                    PlayersDataOnline[playerid][MyPickupInterior] = 0;

					PlayersDataOnline[playerid][MyPickupX_Now] = FaccionData[faccionid][PickupIn_X];
					PlayersDataOnline[playerid][MyPickupY_Now] = FaccionData[faccionid][PickupIn_Y];
					PlayersDataOnline[playerid][MyPickupZ_Now] = FaccionData[faccionid][PickupIn_Z];
				}
				PlayersDataOnline[playerid][InPickupFaccion] = faccionid;
				PlayersDataOnline[playerid][MyPickupLock] = FaccionData[faccionid][Lock];

	            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
			}
	    }
	    // TELES
	    else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_TELE)
	    {
	        new teleid = PickupIndex[pickupid][Tipoid];

	        if ( Teles[teleid][PickupID] == pickupid )
            {
                PlayersDataOnline[playerid][MyPickupX] = Teles[Teles[teleid][PickupIDGo]][PosX];
                PlayersDataOnline[playerid][MyPickupY] = Teles[Teles[teleid][PickupIDGo]][PosY];
                PlayersDataOnline[playerid][MyPickupZ] = Teles[Teles[teleid][PickupIDGo]][PosZ];
                PlayersDataOnline[playerid][MyPickupZZ] = Teles[Teles[teleid][PickupIDGo]][PosZZ];
                PlayersDataOnline[playerid][MyPickupInterior] = Teles[Teles[teleid][PickupIDGo]][Interior];
                PlayersDataOnline[playerid][MyPickupWorld] = Teles[Teles[teleid][PickupIDGo]][World];
                
                if (PlayersData[playerid][IsPlayerInVehInt])
                {
                    PlayersDataOnline[playerid][MyPickupWorld] = PlayersData[playerid][IsPlayerInVehInt];
                }

				PlayersDataOnline[playerid][MyPickupLock] = Teles[teleid][Lock];

                PlayersDataOnline[playerid][MyPickupX_Now] = Teles[teleid][PosX];
                PlayersDataOnline[playerid][MyPickupY_Now] = Teles[teleid][PosY];
                PlayersDataOnline[playerid][MyPickupZ_Now] = Teles[teleid][PosZ];

	            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
                PlayersDataOnline[playerid][InPickupTele] = teleid;
            }
	    }
		// NEGOCIOS
	    else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_NEGOCIO)
	    {
	        new negocioid = PickupIndex[pickupid][Tipoid];

	        if ( NegociosData[negocioid][PickupOutId] == pickupid )
            {
	            PlayersDataOnline[playerid][MyPickupX]  	= NegociosType[NegociosData[negocioid][Type]][PosInX];
	            PlayersDataOnline[playerid][MyPickupY]  	= NegociosType[NegociosData[negocioid][Type]][PosInY];
	            PlayersDataOnline[playerid][MyPickupZ]  	= NegociosType[NegociosData[negocioid][Type]][PosInZ];
	            PlayersDataOnline[playerid][MyPickupZZ] 	= NegociosType[NegociosData[negocioid][Type]][PosInZZ];
	            PlayersDataOnline[playerid][MyPickupInterior] = NegociosType[NegociosData[negocioid][Type]][InteriorId];
				PlayersDataOnline[playerid][MyPickupWorld] 	= NegociosData[negocioid][World];
				PlayersDataOnline[playerid][MyPickupLock]  	= NegociosData[negocioid][Lock];

	            PlayersDataOnline[playerid][MyPickupX_Now]  = NegociosData[negocioid][PosOutX];
	            PlayersDataOnline[playerid][MyPickupY_Now]  = NegociosData[negocioid][PosOutY];
	            PlayersDataOnline[playerid][MyPickupZ_Now]  = NegociosData[negocioid][PosOutZ];


	            PlayersDataOnline[playerid][InSpecialAnim]  = GetPlayerSpecialAction(playerid);
	            PlayersDataOnline[playerid][InPickupNegocio] = negocioid;
	            
	            RemovePlayerMapIcon(playerid, 1);
            }
	    }
	    // NEGOCIOS TYPE
	    else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_NEGOCIO_TYPE)
	    {
	        new tipoid = PickupIndex[pickupid][Tipoid];

	        if ( NegociosType[tipoid][PickupId] == pickupid )
            {
                new negocioid = PlayersData[playerid][IsPlayerInBizz];
	            PlayersDataOnline[playerid][MyPickupX]  	= NegociosData[negocioid][PosOutX];
	            PlayersDataOnline[playerid][MyPickupY]  	= NegociosData[negocioid][PosOutY];
	            PlayersDataOnline[playerid][MyPickupZ]  	= NegociosData[negocioid][PosOutZ];
	            PlayersDataOnline[playerid][MyPickupZZ] 	= NegociosData[negocioid][PosOutZZ];
	            PlayersDataOnline[playerid][MyPickupInterior] = NegociosData[negocioid][InteriorOut];
				PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
				PlayersDataOnline[playerid][MyPickupLock]  	= NegociosData[negocioid][Lock];

	            PlayersDataOnline[playerid][MyPickupX_Now]  = NegociosType[tipoid][PosInX];
	            PlayersDataOnline[playerid][MyPickupY_Now]  = NegociosType[tipoid][PosInY];
	            PlayersDataOnline[playerid][MyPickupZ_Now]  = NegociosType[tipoid][PosInZ];

	            PlayersDataOnline[playerid][InSpecialAnim]  = GetPlayerSpecialAction(playerid);
            }
	    }
		// CASAS
	    else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_CASA)
	    {
	        new casaid = PickupIndex[pickupid][Tipoid];

	        if ( HouseData[casaid][PickupId] == pickupid )
            {
	            PlayersDataOnline[playerid][MyPickupX]  	= TypeHouse[HouseData[casaid][TypeHouseId]][PosX];
	            PlayersDataOnline[playerid][MyPickupY]  	= TypeHouse[HouseData[casaid][TypeHouseId]][PosY];
	            PlayersDataOnline[playerid][MyPickupZ]  	= TypeHouse[HouseData[casaid][TypeHouseId]][PosZ];
	            PlayersDataOnline[playerid][MyPickupZZ] 	= TypeHouse[HouseData[casaid][TypeHouseId]][PosZZ];
	            PlayersDataOnline[playerid][MyPickupInterior] = TypeHouse[HouseData[casaid][TypeHouseId]][Interior];
				PlayersDataOnline[playerid][MyPickupWorld] 	= HouseData[casaid][World];
				PlayersDataOnline[playerid][MyPickupLock]  	= HouseData[casaid][Lock];

	            PlayersDataOnline[playerid][MyPickupX_Now]  = HouseData[casaid][PosX];
	            PlayersDataOnline[playerid][MyPickupY_Now]  = HouseData[casaid][PosY];
	            PlayersDataOnline[playerid][MyPickupZ_Now]  = HouseData[casaid][PosZ];

	            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
	            PlayersDataOnline[playerid][InPickupCasa] = casaid;
	            
	            RemovePlayerMapIcon(playerid, 0);
            }
	    }
	    // CASAS TIPO
	    else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_CASA_TYPE)
	    {
	        new tipoid = PickupIndex[pickupid][Tipoid];

	        if ( TypeHouse[tipoid][PickupId] == pickupid )
	        {
	            new houseid = PlayersData[playerid][IsPlayerInHouse];
	            PlayersDataOnline[playerid][MyPickupX]  	= HouseData[houseid][PosX];
	            PlayersDataOnline[playerid][MyPickupY]  	= HouseData[houseid][PosY];
	            PlayersDataOnline[playerid][MyPickupZ]  	= HouseData[houseid][PosZ];
	            PlayersDataOnline[playerid][MyPickupZZ] 	= HouseData[houseid][PosZZ];
	            PlayersDataOnline[playerid][MyPickupInterior] = 0;
				PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
				PlayersDataOnline[playerid][MyPickupLock]  	= HouseData[houseid][Lock];

	            PlayersDataOnline[playerid][MyPickupX_Now]  = TypeHouse[tipoid][PosX];
	            PlayersDataOnline[playerid][MyPickupY_Now]  = TypeHouse[tipoid][PosY];
	            PlayersDataOnline[playerid][MyPickupZ_Now]  = TypeHouse[tipoid][PosZ];

	            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
	        }
	    }
	    // GARAGES CASA
	    else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_GARAGE_CASA)
	    {
	    	new i = PickupIndex[pickupid][Tipoid];
	        new h = PickupIndex[pickupid][Tipoidextra];

	    	if ( Garages[h][i][PickupidIn] == pickupid || Garages[h][i][PickupidOut] == pickupid )
	    	{
	    	    if ( Garages[h][i][PickupidOut] == pickupid )
				{
		            PlayersDataOnline[playerid][MyPickupX]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosX];
		            PlayersDataOnline[playerid][MyPickupY]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosY];
	    	        PlayersDataOnline[playerid][MyPickupZ]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosZ];
					PlayersDataOnline[playerid][MyPickupZZ] 	= TypeGarage[Garages[h][i][TypeGarageE]][PosZZ];
	        	    PlayersDataOnline[playerid][MyPickupInterior] = TypeGarage[Garages[h][i][TypeGarageE]][Interior];
					PlayersDataOnline[playerid][MyPickupWorld] 	= Garages[h][i][WorldG];
					PlayersDataOnline[playerid][MyPickupLock]  	= Garages[h][i][LockOut];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = Garages[h][i][Xg];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = Garages[h][i][Yg];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = Garages[h][i][Zg];
				}
				else if ( PlayersData[playerid][IsPlayerInHouse] )
				{
		            PlayersDataOnline[playerid][MyPickupX]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosXh];
		            PlayersDataOnline[playerid][MyPickupY]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosYh];
	    	        PlayersDataOnline[playerid][MyPickupZ]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosZh];
					PlayersDataOnline[playerid][MyPickupZZ] 	= TypeGarage[Garages[h][i][TypeGarageE]][PosZZh];
	        	    PlayersDataOnline[playerid][MyPickupInterior] = TypeGarage[Garages[h][i][TypeGarageE]][Interior];
					PlayersDataOnline[playerid][MyPickupWorld] 	= Garages[h][i][WorldG];
					PlayersDataOnline[playerid][MyPickupLock]  	= Garages[h][i][LockIn];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = Garages[h][i][XgIn];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = Garages[h][i][YgIn];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = Garages[h][i][ZgIn];
				}
	            PlayersDataOnline[playerid][InSpecialAnim]  = GetPlayerSpecialAction(playerid);
	    	}
	    }
	    // GARAGES CASA TIPO
	    else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_GARAGE_CASA_TYPE)
	    {
	        new i = PickupIndex[pickupid][Tipoid];
	        new houseid = PlayersData[playerid][IsPlayerInHouse];

	        if ( TypeGarage[i][PickupId] == pickupid || TypeGarage[i][PickupIdh] == pickupid )
            {
                if ( TypeGarage[i][PickupIdh] == pickupid )
                {
		            PlayersDataOnline[playerid][MyPickupX]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][XgIn];
		            PlayersDataOnline[playerid][MyPickupY]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][YgIn];
		            PlayersDataOnline[playerid][MyPickupZ]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][ZgIn];
		            PlayersDataOnline[playerid][MyPickupZZ] 	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][ZZgIn];
		            PlayersDataOnline[playerid][MyPickupInterior] = TypeHouse[HouseData[houseid][TypeHouseId]][Interior];
					PlayersDataOnline[playerid][MyPickupWorld] 	= PlayersData[playerid][IsPlayerInHouse];
					PlayersDataOnline[playerid][MyPickupLock]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][LockIn];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = TypeGarage[i][PosXh];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = TypeGarage[i][PosYh];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = TypeGarage[i][PosZh];
				}
				else
				{
		            PlayersDataOnline[playerid][MyPickupX]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][Xg];
		            PlayersDataOnline[playerid][MyPickupY]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][Yg];
		            PlayersDataOnline[playerid][MyPickupZ]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][Zg];
		            PlayersDataOnline[playerid][MyPickupZZ] 	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][ZZg];
		            PlayersDataOnline[playerid][MyPickupInterior] = 0;
					PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
					PlayersDataOnline[playerid][MyPickupLock]  	= Garages[houseid][PlayersData[playerid][IsPlayerInGarage]][LockOut];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = TypeGarage[i][PosX];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = TypeGarage[i][PosY];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = TypeGarage[i][PosZ];
	            }
	            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
            }
	    }
	    // INFO PICKUPS
        else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_INFO)
        {
            new pickupinfoid = PickupIndex[pickupid][Tipoid];
            if ( PickupInfo[pickupinfoid][PickupId] == pickupid )
            {
	            PlayersDataOnline[playerid][MyPickupX_Now] = PickupInfo[pickupinfoid][PosInfoX];
	            PlayersDataOnline[playerid][MyPickupY_Now] = PickupInfo[pickupinfoid][PosInfoY];
	            PlayersDataOnline[playerid][MyPickupZ_Now] = PickupInfo[pickupinfoid][PosInfoZ];
             	PlayersDataOnline[playerid][MyPickupLock] = false;
            }
        }
        // GARAGES EX
        else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_GARAGE_EX)
        {
            new gid = PickupIndex[pickupid][Tipoid];

			if ( GaragesEx[gid][PickupIDOneP] == pickupid || GaragesEx[gid][PickupIDTwoP] == pickupid )
		    {
		        if ( GaragesEx[gid][PickupIDOneP] == pickupid )
		        {
		            PlayersDataOnline[playerid][MyPickupX]  	= GaragesEx[gid][PosXTwoP];
		            PlayersDataOnline[playerid][MyPickupY]  	= GaragesEx[gid][PosYTwoP];
	    	        PlayersDataOnline[playerid][MyPickupZ]  	= GaragesEx[gid][PosZTwoP];
					PlayersDataOnline[playerid][MyPickupZZ] 	= GaragesEx[gid][PosZZTwoP];
	        	    PlayersDataOnline[playerid][MyPickupInterior] = 0;
					PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
					PlayersDataOnline[playerid][MyPickupLock]  	= GaragesEx[gid][Lock];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = GaragesEx[gid][PosXOneP];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = GaragesEx[gid][PosYOneP];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = GaragesEx[gid][PosZOneP];
				}
				else
				{
		            PlayersDataOnline[playerid][MyPickupX]  	= GaragesEx[gid][PosXOneP];
		            PlayersDataOnline[playerid][MyPickupY]  	= GaragesEx[gid][PosYOneP];
	    	        PlayersDataOnline[playerid][MyPickupZ]  	= GaragesEx[gid][PosZOneP];
					PlayersDataOnline[playerid][MyPickupZZ] 	= GaragesEx[gid][PosZZOneP];
	        	    PlayersDataOnline[playerid][MyPickupInterior] = GaragesEx[gid][Interior];
					PlayersDataOnline[playerid][MyPickupWorld] 	= GaragesEx[gid][World];
					PlayersDataOnline[playerid][MyPickupLock]  	= GaragesEx[gid][Lock];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = GaragesEx[gid][PosXTwoP];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = GaragesEx[gid][PosYTwoP];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = GaragesEx[gid][PosZTwoP];
				}
	            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
			}
		}
		// LOCALES
		else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_LOCAL)
	    {
	        new localid = PickupIndex[pickupid][Tipoid];
	        new type = LocalData[localid][Tipo] - 1;

	        if (LocalData[localid][Pickup] == pickupid)
	        {
	            PlayersDataOnline[playerid][MyPickupX] = LocalTipo[type][PosX];
	            PlayersDataOnline[playerid][MyPickupY] = LocalTipo[type][PosY];
    	        PlayersDataOnline[playerid][MyPickupZ] = LocalTipo[type][PosZ];
				PlayersDataOnline[playerid][MyPickupZZ] = LocalTipo[type][PosZZ];
        	    PlayersDataOnline[playerid][MyPickupInterior] = LocalTipo[type][Interior];
				PlayersDataOnline[playerid][MyPickupWorld] = localid+1;
				PlayersDataOnline[playerid][MyPickupLock] = LocalData[localid][Seguro];

                PlayersDataOnline[playerid][MyPickupX_Now] = LocalData[localid][PosX];
	            PlayersDataOnline[playerid][MyPickupY_Now] = LocalData[localid][PosY];
	            PlayersDataOnline[playerid][MyPickupZ_Now] = LocalData[localid][PosZ];

	            PlayersDataOnline[playerid][InPickupLocal] = localid;
		    }
	    }
	    // LOCALES TIPO
		else if (PickupIndex[pickupid][Tipo] == PICKUP_TYPE_LOCAL_TYPE)
		{
		    new type = PickupIndex[pickupid][Tipoid];
		    new localid = PlayersData[playerid][InLocal];

		    if (LocalTipo[type][Pickup] == pickupid)
	        {
	            PlayersDataOnline[playerid][MyPickupX] = LocalData[localid][PosX];
	            PlayersDataOnline[playerid][MyPickupY] = LocalData[localid][PosY];
    	        PlayersDataOnline[playerid][MyPickupZ] = LocalData[localid][PosZ];
				PlayersDataOnline[playerid][MyPickupZZ] = LocalData[localid][PosZZ];
        	    PlayersDataOnline[playerid][MyPickupInterior] = 0;
				PlayersDataOnline[playerid][MyPickupWorld] = WORLD_NORMAL;
				PlayersDataOnline[playerid][MyPickupLock] = LocalData[localid][Seguro];

	            PlayersDataOnline[playerid][MyPickupX_Now] = LocalTipo[type][PosX];
	            PlayersDataOnline[playerid][MyPickupY_Now] = LocalTipo[type][PosY];
	            PlayersDataOnline[playerid][MyPickupZ_Now] = LocalTipo[type][PosZ];
		    }
		}
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{


	return 1;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
	new MsgAvisoBug[MAX_TEXT_CHAT];
    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Tunning´s Owned - El jugador %s[%i] le puso un componente con ID[%i] al vehículo ID[%i].", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, componentid, vehicleid);
	MsgCheatsReportsToAdmins(MsgAvisoBug);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	if ( PlayersDataOnline[playerid][InMenu] == Menu_Principal_Armas )
	{
	     ShowMenuForPlayer(Menues_Armas[row], playerid);
	     PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == CamerasM[0])
	{
     	if ( Cameras[row][Page] )
     	{
			SetPlayerCameraPos(playerid, Cameras[row][PosXLook], Cameras[row][PosYLook], Cameras[row][PosZLook]);
			SetPlayerCameraLookAt(playerid, Cameras[row][PosXAt], Cameras[row][PosYAt], Cameras[row][PosZAt]);
		    SetPlayerInteriorEx(playerid, Cameras[row][Interior]);
	     	SetPlayerVirtualWorldEx(playerid, Cameras[row][World]);
			ShowMenuForPlayer(CamerasM[0], playerid);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		PlayersDataOnline[playerid][SubAfterMenuRow] = row;
		if ( Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][row] == 1 )
		{
			if ( CheckWeapondCheat(playerid) && PlayersData[playerid][Dinero] >= Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row] )
			{
		        new MsgCompra[MAX_TEXT_CHAT];
			    if ( PlayersDataOnline[playerid][AfterMenuRow] == 8 && row == 1 )
			    {
                    format(MsgCompra, sizeof(MsgCompra), "Has comprado un chaleco por $%i", Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
					SetPlayerArmourEx(playerid, 80);
				}
				else
				{
                    format(MsgCompra, sizeof(MsgCompra), "Has comprado %s por $%i", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][row][4], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
                    GivePlayerWeaponEx(playerid, Armas_ID[PlayersDataOnline[playerid][AfterMenuRow]][row], 1);
				}
                SendInfoMessage(playerid, 2, "0", MsgCompra);
				GivePlayerMoneyEx(playerid, -Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			}
			else
			{
				SendInfoMessage(playerid, 0, "356", "No tienes suficiente dinero para comprar este accesorio de la armeria");
			}
			ShowMenuForPlayer(Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
		}
		else
		{
		    new MsgComprarArmaDialogPresupuesto[MAX_TEXT_CHAT];
		    format(MsgComprarArmaDialogPresupuesto, sizeof(MsgComprarArmaDialogPresupuesto), "{F0F0F0}¿Desea comprar %s con %i de munición\n{F0F0F0}por el precio de $%i?",
			Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4],
			Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]]);

			ShowPlayerDialogEx(playerid, 9, DIALOG_STYLE_MSGBOX, "{00A5FF}Finalize su compra!", MsgComprarArmaDialogPresupuesto, "Comprar!", "Modificar");
			PlayersDataOnline[playerid][MyAmmoSelect] = Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]];
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Savanna[PlayersDataOnline[playerid][AfterMenuRow]] ) // SAVANNA - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_SavannaID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Savanna[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Blade[PlayersDataOnline[playerid][AfterMenuRow]] ) // Blade - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_BladeID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Blade[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Remington[PlayersDataOnline[playerid][AfterMenuRow]] ) // Remington - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_RemingtonID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Remington[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Slamvan[PlayersDataOnline[playerid][AfterMenuRow]] ) // Slamvan - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_SlamvanID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Slamvan[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == SupermercadoArticulos )
	{
    	if ( PlayersData[playerid][HaveBolsa] )
    	{
			if (PlayersData[playerid][Dinero] >= SupermercadoArticulosPrecios[row] )
			{
			    new MsgCompra[MAX_TEXT_CHAT];
			    new ArticuloID;
			    new CantidadA;
			    switch(row)
			    {
			        // Pack 6 Cervezas
			        case 0:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado un Pack de 6 cervezas por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_CERVEZA;
	                	CantidadA  = 6;
					}
			        // 5 Vodkas
			        case 1:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado 5 vodkas por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_VODKA;
	                	CantidadA  = 5;
					}
			        // 5 Refrescos
			        case 2:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado 5 refrescos por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_REFRESCO;
	                	CantidadA  = 5;
					}
			        // Pollo Crudo
			        case 3:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado un pollo por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_POLLO;
	                	CantidadA  = 1;
					}
			        // Papas
			        case 4:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado papas por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_PAPAS;
	                	CantidadA  = 1;
					}
			        // Arroz
			        case 5:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado arroz por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_ARROZ;
	                	CantidadA  = 1;
					}
			    }
			    switch (AddArticuloBolsa(playerid, ArticuloID, CantidadA))
			    {
			        case 0:
			        {
	       				SendInfoMessage(playerid, 0, "1230", "La bolsa se encuentra llena!");

					}
					case 1:
					{
						SendInfoMessage(playerid, 3, "0", MsgCompra);
					    GivePlayerMoneyEx(playerid, -SupermercadoArticulosPrecios[row]);
					}
					case 2:
					{
	       				SendInfoMessage(playerid, 0, "1244", "No te caben más de esos artículos en la bolsa!");
					}
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1226", "No tienes suficiente dinero para comprar este artículo");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1271", "Usted no tiene bolsa!");
		}
		ShowMenuForPlayer(SupermercadoArticulos, playerid);
		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == TallerPrincipal )
	{
		if ( IsTunnigContinue(playerid) )
		{
			switch (row)
			{
			    // Pintura
				case 0:
				{
					ShowPlayerDialogEx(playerid, 12, DIALOG_STYLE_MSGBOX , "{00A5FF}Seleccione color", "{F0F0F0}¿Qué color desea cambiar al vehículo?", "Color 1", "Color 2");
				}
				// Nitro
				case 1:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Nitro, playerid);
					}
					else
					{
						ShowMenuForPlayer(TallerPrincipal, playerid);
						SendInfoMessage(playerid, 0, "1097", "Éste vehículo no se le puede agregar nitro!");
					}
				}
				// Hidráulica
				case 2:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], 1087);
						PlayPlayerStreamSound(playerid, SOUND_TUNNING);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1096", "Éste vehículo no se le puede agregar hidráulica!");
					}
					ShowMenuForPlayer(TallerPrincipal, playerid);
				}
				// Estéreo
				case 3:
				{
				    if ( coches_Todos_Type[GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning]) - 400] != BICI )
				    {
						//AddVehicleCommponentTaller(GetPlayerVehicleID(playerid), 1086);
						PlayPlayerStreamSound(playerid, SOUND_TUNNING);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1095", "Éste vehículo no se le puede agregar estereo!");
					}
					ShowMenuForPlayer(TallerPrincipal, playerid);
				}
				// Llantas I
				case 4:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Llantas1, playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1094", "Éste vehículo no se le puede agregar llantas!");
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
				// Llantas II
				case 5:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Llantas2, playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1093", "Éste vehículo no se le puede agregar llantas!");
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
				// Tunning
				case 6:
				{
					switch ( GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning]) )
					{
					    // SULTAN
					    case 560:
					    {
	    					ShowMenuForPlayer(Principal_Sultan, playerid);
						}
					    // ELEGY
					    case 562:
					    {
	    					ShowMenuForPlayer(Principal_Elegy, playerid);
						}
					    // FLASH
					    case 565:
					    {
	    					ShowMenuForPlayer(Principal_Flash, playerid);
						}
					    // STRATUM
					    case 561:
					    {
	    					ShowMenuForPlayer(Principal_Stratum, playerid);
						}
					    // JESTER
					    case 559:
					    {
	    					ShowMenuForPlayer(Principal_Jester, playerid);
						}
					    // URANUS
					    case 558:
					    {
	    					ShowMenuForPlayer(Principal_Uranus, playerid);
						}
					    // SAVANNA
					    case 567:
					    {
	    					ShowMenuForPlayer(Principal_Savanna, playerid);
						}
					    // REMINGTON
					    case 534:
					    {
	    					ShowMenuForPlayer(Principal_Remington, playerid);
						}
					    // Slamvan
					    case 535:
					    {
	    					ShowMenuForPlayer(Principal_Slamvan, playerid);
						}
					    // Blade
					    case 536:
					    {
	    					ShowMenuForPlayer(Principal_Blade, playerid);
						}
						default:
						{
						    new IsTunning = IsTunningForVehicle(GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning]));
							if ( IsTunning )
							{
							    switch ( IsTunning )
							    {
							        case 1:
							        {
				    					ShowMenuForPlayer(XFlowYAlien_Escape, playerid);
							        }
							        case 2:
							        {
				    					ShowMenuForPlayer(XFlowYAlien_Sentinel, playerid);
							        }
							        case 3:
							        {
				    					ShowMenuForPlayer(XFlowYAlien_Euros, playerid);
							        }
								}
	    					}
	    					else
	    					{
								SendInfoMessage(playerid, 0, "700", "No tenemos tunning para éste vehículo por el momento :(");
		    					ShowMenuForPlayer(TallerPrincipal, playerid);
	    					}
						}
					}
				}
				// Vinilos
				case 7:
				{
				    if ( IsValidVehiclePaintJob(GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Vinilos, playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1110", "Éste vehículo no acepta Vinilos.");
    					ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
				// Cambiar Matrícula
				case 8:
				{
				    if ( PlayersData[playerid][Rango] <= 3 )
				    {
						if ( PlayersData[playerid][TimeEquipo] <= gettime() || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn])
					    {
							if ( PlayersDataOnline[playerid][MyIDVehicleTunning] <= MAX_CAR_DUENO )
							{
								ShowChangePlate(playerid);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1310", "Éste vehículo no acepta cambio de matrícula.");
			  					ShowMenuForPlayer(TallerPrincipal, playerid);
							}
	   					}
					    else
					    {
							new MsgPersonalizado[MAX_TEXT_CHAT];
							format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a poner una nueva matrícula!", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
							SendInfoMessage(playerid, 0, "1311", MsgPersonalizado);
		  					ShowMenuForPlayer(TallerPrincipal, playerid);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1312", "Tú no puedes cambiar la matrícula de un vehículo.");
	  					ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
			}
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sultan[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_SultanID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Sultan[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Elegy[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_ElegyID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Elegy[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Flash[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_FlashID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Flash[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Stratum[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_StratumID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Stratum[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Jester[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_JesterID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Jester[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Uranus[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_UranusID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Uranus[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Escape ) // SOLAMENTE TUBOS DE ESCAPE
	{
	    if ( IsTunnigContinue(playerid) )
	    {
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_EscapeID[row]);
			ShowMenuForPlayer(XFlowYAlien_Escape, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sentinel ) // TUBOS DE ESCAPE + ALERONES
	{
	    if ( IsTunnigContinue(playerid) )
	    {
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_SentinelID[row]);
			ShowMenuForPlayer(XFlowYAlien_Sentinel, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Euros ) // TODO
	{
	    if ( IsTunnigContinue(playerid) )
	    {
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_EurosID[row]);
			ShowMenuForPlayer(XFlowYAlien_Euros, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Sultan 	) // SULTAN
	{
		ShowMenuForPlayer(XFlowYAlien_Sultan[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Elegy 	) // ELEGY
	{
		ShowMenuForPlayer(XFlowYAlien_Elegy[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Flash  	) // FLASH
	{
		ShowMenuForPlayer(XFlowYAlien_Flash[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Stratum 	) // STRATUM
	{
		ShowMenuForPlayer(XFlowYAlien_Stratum[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Jester	) // JESTER
	{
		ShowMenuForPlayer(XFlowYAlien_Jester[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Uranus	) // URANUS
	{
		ShowMenuForPlayer(XFlowYAlien_Uranus[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Savanna	) // SAVANNA
	{
		ShowMenuForPlayer(Opciones_Savanna[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Blade	) // BLADE
	{
		ShowMenuForPlayer(Opciones_Blade[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Remington	) // Remington
	{
		ShowMenuForPlayer(Opciones_Remington[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Slamvan	) // Slamvan
	{
		ShowMenuForPlayer(Opciones_Slamvan[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Nitro )                /// NITRO
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], NitrosID[row]);
			ShowMenuForPlayer(Nitro, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Llantas1 )                /// LLANTAS 1
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], LlantasID1[row]);
			ShowMenuForPlayer(Llantas1, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Llantas2 )                /// LLANTAS 2
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], LlantasID2[row]);
			ShowMenuForPlayer(Llantas2, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Vinilos )                /// VINILOS
	{
		if ( IsTunnigContinue(playerid) )
		{
		    if ( row != 10 )
		    {
		    	ChangeVehiclePaintjob(PlayersDataOnline[playerid][MyIDVehicleTunning], row);
		    	DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Vinillo] = row;
			}
			else
			{
			    if ( DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Vinillo] != -1 )
			    {
			        DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Vinillo] = -1;
			        ChangeVehiclePaintjob(PlayersDataOnline[playerid][MyIDVehicleTunning], 4);
			    }
			}
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
			ShowMenuForPlayer(Vinilos, playerid);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == CluckinBell )
	{
		if (PlayersData[playerid][Dinero] >= CluckinBellPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), CluckinBellPrecios[row]);
			    GivePlayerMoneyEx(playerid, -CluckinBellPrecios[row]);
				SetPlayerHealthEx(playerid, CluckinBellPrecios[row]);
			}
			else
			{
				SendInfoMessage(playerid, 0, "330", "Este Cluckin' Bell no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "329", "No tienes suficiente dinero para comprar esta comida del Cluckin' Bell");
		}
		ShowMenuForPlayer(CluckinBell, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == BurgerShot)
	{
		if (PlayersData[playerid][Dinero] >= BurgerShotPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), BurgerShotPrecios[row]);
			    GivePlayerMoneyEx(playerid, -BurgerShotPrecios[row]);

				SetPlayerHealthEx(playerid, BurgerShotPrecios[row]);
				ShowMenuForPlayer(BurgerShot, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "328", "Este Burger Shot no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "327", "No tienes suficiente dinero para comprar esta comida del Burger Shot");
		}
		ShowMenuForPlayer(BurgerShot, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == PizzaStack)
	{
		if (PlayersData[playerid][Dinero] >= PizzaStackPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), PizzaStackPrecios[row]);
			    GivePlayerMoneyEx(playerid, -PizzaStackPrecios[row]);

				SetPlayerHealthEx(playerid, PizzaStackPrecios[row]);
				ShowMenuForPlayer(PizzaStack, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "326", "Este Pizza Stack no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "325", "No tienes suficiente dinero para comprar esta comida del Pizza Stack");
		}
		ShowMenuForPlayer(PizzaStack, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == JaysDiner)
	{
		if (PlayersData[playerid][Dinero] >= JaysDinerPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), JaysDinerPrecios[row]);
			    GivePlayerMoneyEx(playerid, -JaysDinerPrecios[row]);


				SetPlayerHealthEx(playerid, JaysDinerPrecios[row]);
				ShowMenuForPlayer(JaysDiner, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "324", "Este restaurante no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "323", "No tienes suficiente dinero para comprar esta comida del Restaurante");
		}
		ShowMenuForPlayer(JaysDiner, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == RingDonuts)
	{
		if (PlayersData[playerid][Dinero] >= RingDonutsPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), RingDonutsPrecios[row]);
			    GivePlayerMoneyEx(playerid, -RingDonutsPrecios[row]);

				SetPlayerHealthEx(playerid, RingDonutsPrecios[row]);
				ShowMenuForPlayer(RingDonuts, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "322", "Este restaurante no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "321", "No tienes suficiente dinero para comprar esta comida del Restaurante");
		}
		ShowMenuForPlayer(RingDonuts, playerid);
	}
    PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	if ( PlayersDataOnline[playerid][InMenu] == CamerasM[0] )
	{
    	TogglePlayerSpectating(playerid, 0);
        PlayersDataOnline[playerid][Spawn]      = true;
    	SetSpawnInfoEx(playerid);
		TogglePlayerControllableEx(playerid, true);
		PlayersDataOnline[playerid][InCamera] = false;

		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] != Menu_Principal_Armas &&
			  PlayersData[playerid][IsPlayerInBizz] &&
		 	  NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] >= 8 &&
   	     	  NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] <= 12 )
	{
	     ShowMenuForPlayer(Menu_Principal_Armas, playerid);
	     PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Nitro 				||
			  PlayersDataOnline[playerid][InMenu] == Llantas1 			||
			  PlayersDataOnline[playerid][InMenu] == Llantas2   		||
			  PlayersDataOnline[playerid][InMenu] == Vinilos   			||
			  PlayersDataOnline[playerid][InMenu] == Principal_Sultan   ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Elegy    ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Flash    ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Stratum  ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Jester   ||
			  PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Escape ||
			  PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sentinel ||
			  PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Euros  ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Savanna  ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Remington ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Slamvan ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Blade

			  )
	{
		ShowMenuForPlayer(TallerPrincipal, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Menu_Principal_Armas)
	{
		TogglePlayerControllableEx(playerid, true);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Savanna[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Savanna, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Blade[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Blade, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Remington[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Remington, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Slamvan[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Slamvan, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sultan[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Sultan, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Elegy[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Elegy, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Flash[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Flash, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Stratum[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Stratum, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Jester[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Jester, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Uranus[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Uranus, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else
	{
		TogglePlayerControllableEx(playerid, true);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	/*
	 16 - 1	= Enter 			- Entrar a un coche
	  2 	= C/H Mayuscula     - Agacharse / Bocina
	 32 	= CONTROL 			- Saltar
	  8 	= SHIFT Y ESPACIO	- Correr
	  4     = Click izquierdo (MAYUS)  - Golpear, acciones
	128     = Click derecho		- Apuntar (Sin coche)
	128     = ESPACIO			- Frenar (En coche)
	8     	= ESPACIO			- Frenar (En coche)
	512     = Rueda del ratón   - Rueda del ratón
	  1     = TAB               - Musestra los jugadores online
  1024      = DEL               - Andar (Caminar suave)
  2048      = J                 - Nada
  4096      = K                 - Nada
	*/
	/*new Keys[MAX_TEXT_CHAT]; format(Keys, sizeof(Keys), "Key: %i", newkeys);
    SendClientMessage(playerid, COLOR_MESSAGES[0], Keys);*/
    if (newkeys == KEY_WALK)
    {
        if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO && PlayersDataOnline[playerid][EditingMovement] == 0)
        {
            new objectid = PlayersDataOnline[playerid][EditingObjectID];
            if (objectid != 0 && GetPVarFloat(playerid, "editingobjectX") != 0)
            {
                DuplicarMapeoEx(playerid, PlayersDataOnline[playerid][EditingMapeo]);
                return 1;
            }
        }
    }
	if (newkeys == 16 || newkeys == 8192)
	{
		if( PlayersDataOnline[playerid][InPickup] )
		{
	    	if (!IsPlayerInPickup(playerid)) return 1;

			if ( PlayersData[playerid][IsPlayerInVehInt] )
		    {
		        if (PlayersDataOnline[playerid][InPickupTele] != -1 )
		        {
		            if (PlayersDataOnline[playerid][MyPickupLock]) return GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
		            SetPlayerVirtualWorldEx(playerid, PlayersDataOnline[playerid][MyPickupWorld]);
				    SetPlayerPos(playerid, PlayersDataOnline[playerid][MyPickupX], PlayersDataOnline[playerid][MyPickupY], PlayersDataOnline[playerid][MyPickupZ]);
					SetPlayerFacingAngle(playerid, PlayersDataOnline[playerid][MyPickupZZ]);
					SetCameraBehindPlayer(playerid);
					return 1;
		        }
		        if ( PickupInfo[PickupidAmbulance][PickupId] == PlayersDataOnline[playerid][InPickup] ||
				  	 PickupInfo[PickupidFurgoCNN][PickupId] == PlayersDataOnline[playerid][InPickup] ||
					 PickupInfo[PickupidPoliceFurgo][PickupId] == PlayersDataOnline[playerid][InPickup] ||
					 PickupInfo[PickupExitVagones[0]][PickupId] == PlayersDataOnline[playerid][InPickup] ||
					 PickupInfo[PickupExitVagones[1]][PickupId] == PlayersDataOnline[playerid][InPickup] ||
					 PickupInfo[PickupExitVagones[2]][PickupId] == PlayersDataOnline[playerid][InPickup] )
				{
		            new vehicleid = PlayersData[playerid][IsPlayerInVehInt];
			        if ( GetPlayerVirtualWorld(playerid) > 0 && GetPlayerVirtualWorld(playerid) <= MAX_CAR)
			        {
			            if ( !DataCars[vehicleid][Lock] )
			            {
				            PlayersData[playerid][IsPlayerInVehInt] = false;
				            SetPlayerInteriorEx(playerid, DataCars[vehicleid][InteriorLast]);
							SetPlayerVirtualWorldEx(playerid, DataCars[vehicleid][WorldLast]);
							if ( GetVehicleVirtualWorld(vehicleid) != 999 )
							{
							    if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == TREN )
							    {
							        new Float:VehiclePos[3]; GetVehiclePos(vehicleid, VehiclePos[0], VehiclePos[1], VehiclePos[2]);
									SetPlayerPos(playerid, VehiclePos[0] + 2, VehiclePos[1] + 2, VehiclePos[2]);
					            }
					            else
					            {
						            PlayersDataOnline[playerid][ExitedVehicle] = true;
									PutPlayerInVehicle(playerid, vehicleid, 2);
									RemovePlayerFromVehicle(playerid);
						            SetTimerEx("PlayerRestoreVarExitedVehicle", 1000, false, "d", playerid);
								}
							}
							else
							{
							    SetPlayerPos(playerid, DataCars[vehicleid][PosX], DataCars[vehicleid][PosY], DataCars[vehicleid][PosZ]);
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
						}
					}
					return 1;
				}
			}

            if ( PlayersDataOnline[playerid][MyPickupLock] && (!PlayersDataOnline[playerid][AdminOn] || PlayersData[playerid][Admin] < 4) ) return GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);

		    // NEGOCIOS
	        if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_NEGOCIO )
			{
			    new bizzid = PlayersDataOnline[playerid][InPickupNegocio];
			    if (PlayersData[playerid][Dinero] >= NegociosData[bizzid][PriceJoin] )
				{
				    NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] + NegociosData[bizzid][PriceJoin];
				    GivePlayerMoneyEx(playerid, -NegociosData[bizzid][PriceJoin]);

			        SetFunctionsForBizz(playerid, NegociosData[bizzid][Type]);
			        PlayersData[playerid][IsPlayerInBizz] = bizzid;
				}
				else
				{
					SendInfoMessage(playerid, 0, "295", "No tienes suficiente dinero para entrar a este negocio");
					return 1;
				}
			}
			// TELES
			else if ( PlayersDataOnline[playerid][InPickupTele] != -1 )
	        {
	            new teleid = PlayersDataOnline[playerid][InPickupTele];
	            
	            if (Teles[teleid][PrecioEntrada] && Teles[teleid][DuenoType] == 0 && Teles[teleid][Dueno] > 0 )
	            {
					if (Teles[teleid][PrecioEntrada] > PlayersData[playerid][Dinero]) return SendInfoMessage(playerid, 0, "", "No tiene suficiente dinero para entrar a este lugar.");
					
					FaccionData[Teles[teleid][Dueno]][Deposito] += Teles[teleid][PrecioEntrada];
					GivePlayerMoneyEx(playerid, - Teles[teleid][PrecioEntrada]);
	            }
	            if (Teles[teleid][IsBankTele])
				{
				    PlayersData[playerid][IsPlayerInBank] = true;
				}
				else if (Teles[teleid][IsHotelTele])
				{
				    PlayersDataOnline[playerid][IsPlayerInHotel] = true;
				}
				else if (Teles[teleid][IsNegocioTele])
	            {
	                new bizzid = Teles[teleid][Dueno];
	                if (PlayersData[playerid][Dinero] >= NegociosData[bizzid][PriceJoin] )
					{
					    NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] + NegociosData[bizzid][PriceJoin];
					    GivePlayerMoneyEx(playerid, -NegociosData[bizzid][PriceJoin]);

				        SetFunctionsForBizz(playerid, NegociosData[bizzid][Type]);
				        PlayersData[playerid][IsPlayerInBizz] = bizzid;
					}
					else
					{
						SendInfoMessage(playerid, 0, "295", "No tienes suficiente dinero para entrar a este negocio");
						return 1;
					}
	            }
				else if (Teles[teleid][IsCasaTele])
	            {
	                PlayersData[playerid][IsPlayerInHouse] = Teles[teleid][Dueno];
               		OnPlayerEnterInHouse(playerid);
	            }
				else if (Teles[teleid][IsLocalTele])
	            {
	                new localID = Teles[teleid][Dueno];
				    if (LocalData[localID][PrecioEntrada] > PlayersData[playerid][Dinero]) return SendInfoMessage(playerid, 0, "", "No tiene suficiente dinero para entrar a este local.");

				    GivePlayerMoneyEx(playerid, -LocalData[localID][PrecioEntrada]);
			        LocalData[localID][Deposito] += LocalData[localID][PrecioEntrada];

				    PlayersData[playerid][InLocal] = localID;

				    ChangeLocal(playerid, localID);
	            }
	            else
	            {
	                DisablePlayerCheckpoint(playerid);
			        PlayersData[playerid][IsPlayerInHouse] = false;
					PlayersData[playerid][IsPlayerInGarage] = -1;
			        PlayersData[playerid][IsPlayerInBizz] = false;
					PlayersData[playerid][IsPlayerInBank] = false;
					PlayersDataOnline[playerid][IsPlayerInHotel] = false;
					PlayersData[playerid][InLocal] = -1;
					OnPlayerExitHouse(playerid);
	            }
			}
			// CASAS
			else if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_CASA)
			{
			    PlayersData[playerid][IsPlayerInHouse] = PlayersDataOnline[playerid][InPickupCasa];
                OnPlayerEnterInHouse(playerid);
			}
			// CASAS GARAGE
			else if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_GARAGE_CASA)
			{
			    PlayersData[playerid][IsPlayerInGarage] = PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipoid];
			    PlayersData[playerid][IsPlayerInHouse] = PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipoidextra];
			    OnPlayerEnterInHouse(playerid);
			}
			// CASAS GARAGE TIPO
			else if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_GARAGE_CASA_TYPE)
			{
			    new tipoid = PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipoid];

			    if ( PlayersDataOnline[playerid][InPickup] == TypeGarage[tipoid][PickupId])
				{
					PlayersData[playerid][IsPlayerInHouse] = 0;
					OnPlayerExitHouse(playerid);
			    }
				PlayersData[playerid][IsPlayerInGarage] = -1;
			}
			// INFO PICKUPS
			else if (PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_INFO)
			{
			    return 1;
			}
			// LOCALES
			else if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_LOCAL )
			{
			    new localID = PlayersDataOnline[playerid][InPickupLocal];
			    if (LocalData[localID][PrecioEntrada] > PlayersData[playerid][Dinero]) return SendInfoMessage(playerid, 0, "", "No tiene suficiente dinero para entrar a este local.");

			    GivePlayerMoneyEx(playerid, -LocalData[localID][PrecioEntrada]);
		        LocalData[localID][Deposito] += LocalData[localID][PrecioEntrada];

			    PlayersData[playerid][InLocal] = localID;
			    
			    ChangeLocal(playerid, localID);
			}
	        else
	        {
		        DisablePlayerCheckpoint(playerid);
		        PlayersData[playerid][IsPlayerInHouse] = false;
				PlayersData[playerid][IsPlayerInGarage] = -1;
		        PlayersData[playerid][IsPlayerInBizz] = false;
				PlayersData[playerid][IsPlayerInBank] = false;
				PlayersDataOnline[playerid][IsPlayerInHotel] = false;
				PlayersData[playerid][InLocal] = -1;
				OnPlayerExitHouse(playerid);
			}
			new InterioridTele = PlayersDataOnline[playerid][MyPickupInterior];
			new WorldTele = PlayersDataOnline[playerid][MyPickupWorld];
			SetPlayerInteriorEx(playerid, InterioridTele);
			SetPlayerVirtualWorldEx(playerid, WorldTele);
		    SetPlayerPos(playerid, PlayersDataOnline[playerid][MyPickupX], PlayersDataOnline[playerid][MyPickupY], PlayersDataOnline[playerid][MyPickupZ]);
			SetPlayerFacingAngle(playerid, PlayersDataOnline[playerid][MyPickupZZ]);
			SetCameraBehindPlayer(playerid);

			if(PlayersDataOnline[playerid][IsEspectando])
			{
				UpdateSpectatedPlayers(playerid, false, InterioridTele, WorldTele);
			}
			if ( newkeys == 8192 )
			{
				SetPlayerSpecialAction(playerid, 0);
		    	ClearAnimations(playerid, true);
				SetPlayerSpecialAction(playerid, PlayersDataOnline[playerid][InSpecialAnim]);
			}
		}
		else if ( PlayersDataOnline[playerid][InAnim] )
		{
		    ApplyAnimation(playerid,"PED",PED_ANIMATIONS[ModeWalkID[4]], 4.0, 0, 1, 1, 0, 1, 1);
			PlayersDataOnline[playerid][InAnim] = false;
		}
		IsPlayerNearTram(playerid);
		if ( PlayersDataOnline[playerid][InSleep] )
		{
			PlayersDataOnline[playerid][InSleep] = false;
			TogglePlayerControllableEx(playerid, true);
		}
	}
	else if ( newkeys == 16384 )
	{
		RemoveSpectatePlayer(playerid);
	}
	else if ( newkeys == 0 )
	{
	    if ( PlayersDataOnline[playerid][InWalk])
	    {
		    ApplyAnimation(playerid,"PED",PED_ANIMATIONS[ModeWalkID[PlayersData[playerid][MyStyleWalk]]], 4.0, 0, 1, 1, 0, 1, 1);
		    PlayersDataOnline[playerid][InWalk] = false;
		}
	}
	else if ( newkeys == 1024)
	{
		ApplyPlayerAnimCustom(playerid,
		"PED",
		PED_ANIMATIONS[ModeWalkID[PlayersData[playerid][MyStyleWalk]]], true);
		PlayersDataOnline[playerid][InWalk] = true;
	}
	else if ( newkeys == 8)
	{
	    if ( PlayersDataOnline[playerid][Espectando] != -1 )
	    {
			SetPlayerSpectateToPlayer(playerid, PlayersDataOnline[playerid][Espectando]);
		}
	}
	else if ( newkeys == 4 )
	{
	    if ( GetPlayerSpecialAction(playerid) == 22 || GetPlayerSpecialAction(playerid) == 21 )
	    {
	        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 200);
		    if ( GetPlayerDrunkLevel(playerid) >= 20000 )
		    {
			    GameTextForPlayer(playerid, "~W~Vaya ~B~nota llevas!", 5000, 1);
				SetPlayerSpecialAction(playerid, 0);
			}
		    if ( GetPlayerDrunkLevel(playerid) >= 5000 )
		    {
				ApplyPlayerAnimCustom(playerid,
				"PED",
				PED_ANIMATIONS[257], true);
		    }
		}
		if ( PlayersDataOnline[playerid][InCarId] && IsPlayerInAnyVehicle(playerid) && !DataCars[GetPlayerVehicleID(playerid)][StateEncendido] ||
			 PlayersDataOnline[playerid][InVehicle] && IsPlayerInAnyVehicle(playerid) && !DataCars[GetPlayerVehicleID(playerid)][StateEncendido] )
		{
			EncenderVehicle(playerid);
		}
		if ( !PlayersData[playerid][IntermitentState] )
		{
			IntermitenteEncendido(playerid);
		}
		LastPlayerSpect(playerid);
	}
	else if ( newkeys == 128 || newkeys == 512 )
	{
	    if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] == COCHE )
	    {
 			ApplyPlayerAnimCustom(playerid,
			"CAR",
			CAR_ANIMATIONS[4], false);
	    }
		NextPlayerSpect(playerid);
	}
	else if ( newkeys == 2048 )
	{
		if ( !PlayersData[playerid][IntermitentState] )
		{
			IntermitenteIzquierdo(playerid);
		}
	}
	else if ( newkeys == 4096 )
	{
		if ( !PlayersData[playerid][IntermitentState] )
		{
			IntermitenteDerecho(playerid);
		}
	}
	else if ( newkeys == 132 )
	{
		if ( !PlayersData[playerid][IntermitentState] )
		{
			IntermitenteEstacionamiento(playerid);
		}
	}
	else if ( newkeys == 2 )
	{
	    if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0 && PlayersDataOnline[playerid][IsCleanAnimCar] == 2 && GetPlayerWeapon(playerid))
	    {
			PlayersDataOnline[playerid][LastWeapondRow] = GetPlayerWeapon(playerid);
			PlayersDataOnline[playerid][IsCleanAnimCar] = 0;
            SetPlayerArmedWeapon(playerid, 0);
	        if ( coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] == MOTO )
	        {
	 			ApplyPlayerAnimCustom(playerid,
				"MD_CHASE",
				CHASE_ANIMATIONS[3], false);
			}
			else
			{
	 			ApplyPlayerAnimCustom(playerid,
				"PED",
				PED_ANIMATIONS[59], false);
			}
		}
		else if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0 && PlayersDataOnline[playerid][IsCleanAnimCar] <= 1)
		{
			SetPlayerArmedWeapon(playerid, PlayersDataOnline[playerid][LastWeapondRow]);
			PlayersDataOnline[playerid][IsCleanAnimCar]++;
		}
		else if ( PlayersDataOnline[playerid][InCarId] && IsPlayerInVehicle(playerid, PlayersDataOnline[playerid][InCarId])  && GetPlayerVehicleSeat(playerid) == 0  )
		{
            new Float:Speed[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), Speed[0], Speed[1], Speed[2]);
		    if (Speed[0] == 0.0 && Speed[1] == 0.0 && Speed[2] == 0.0 )
            {
                GetMyNearDoor(playerid, true);
				if ( !IsPlayerNearGarage(GetPlayerVehicleID(playerid), playerid) )
				{
					IsPlayerNearGarageEx(GetPlayerVehicleID(playerid), playerid);
				}
			}
		}
	}
	else if ( newkeys == 1 )
	{
	    if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 ||
			 IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
 			 IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
 			 IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
		{
			new MySecondNearVehicle = GetMySecondNearVehicle(playerid);
			if ( GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(MySecondNearVehicle) != 591 &&
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(MySecondNearVehicle) != 435 &&
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(MySecondNearVehicle) != 584 ||
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(MySecondNearVehicle) != 591 &&
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(MySecondNearVehicle) != 435 &&
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(MySecondNearVehicle) != 584 ||
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(MySecondNearVehicle) != 591 &&
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(MySecondNearVehicle) != 435 &&
				 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(MySecondNearVehicle) != 584  )
			{
				return 1;
			}
		    // printf("Segundo coche cerca: %i", MySecondNearVehicle);
		    if ( MySecondNearVehicle )
		    {
		        if ( PlayersData[playerid][Faccion] == TALLER_LS ||
		        	 PlayersData[playerid][Faccion] == TALLER_SF ||
			         PlayersData[playerid][Faccion] == CAMIONEROS ||
			         PlayersData[playerid][Faccion] == NFS ||
 			         PlayersData[playerid][Faccion] == LSPD ||
				     PlayersData[playerid][Faccion] == SFPD)
				{
					if ( !GetVehicleTrailer(GetPlayerVehicleID(playerid)) )
					{
					    AttachTrailerToVehicle(MySecondNearVehicle, GetPlayerVehicleID(playerid));

					    if ( GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
							 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
							 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
					    {
							Acciones(playerid, 8, "remolca un trailer");
						}
						else
						{
							Acciones(playerid, 8, "remolca un vehículo");
						}
					}
					else
					{
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					    if ( GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
							 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
 							 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
					    {
							Acciones(playerid, 8, "desengancha un trailer");
						}
						else
						{
							Acciones(playerid, 8, "desengancha un vehículo");
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
    /*if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32];
        new animname[32];
        new msg[128];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        format(msg, 128, "Running anim: %s %s", animlib, animname);
        SendClientMessage(playerid, 0xFFFFFFFF, msg);
    }*/

    //////////////// The begin.
	if ( PlayersDataOnline[playerid][State] == 3 )
	{
  		//////////////// Mode Death Match
	    /*if (!PlayersDataOnline[playerid][ModeDM])
	    {*/
	    static Keys,UD,LR;
	    GetPlayerKeys(playerid,Keys,UD,LR);
	    if(LR > 0 || LR < 0 || UD > 0 || UD < 0)
	    {
			if ( PlayersData[playerid][Cansansio] <= 1 )
			{
				ApplyAnimation(playerid,"PED",PED_ANIMATIONS[258], 4.0, 0, 1, 1, 0, 1, 1);
			}
		}
		else
		{
			if ( PlayersData[playerid][Cansansio] <= 1 )
			{
				ApplyAnimation(playerid,"FAT",FAT_ANIMATIONS[17], 4.0, 1, 1, 1, 1, 1, 1);
			}
		}
		//}
        //////////////// The Time....
	    static MyTime; MyTime = gettime();

        //////////////// The Check Fire....
	    if ( (MyTime - PlayersDataOnline[playerid][IsCheckUser]) >= 2)
	    {
        	PlayersDataOnline[playerid][IsCheckUser] = MyTime;
			SetPlayerOrginalTime(playerid);
			CheckFire(playerid);
		}
		if ( HaveObjectByTypeAndShow(playerid, TYPE_TASER) )
		{
			SetPlayerArmedWeapon(playerid, 0);
		}

		if ( PlayersDataOnline[playerid][InPickup] )
		{
		    IsPlayerInPickup(playerid);
		}

        //////////////// Jail
		if ( PlayersData[playerid][IsInJail] != -1 && PlayersData[playerid][Jail] <= MyTime )
		{
			PlayersData[playerid][Jail] = 0;
			PlayersDataOnline[playerid][StateDeath] = 4;
			SetPlayerVirtualWorldEx(playerid, JailsType[PlayersData[playerid][IsInJail]][WorldLiberado]);
			SetPlayerInteriorEx(playerid, JailsType[PlayersData[playerid][IsInJail]][Interior_Liberado]);
		    PlayersData[playerid][IsInJail] = -1;
			SendInfoMessage(playerid, 2, "0", "Has cumplido tu condena de jail.");
		    SpawnPlayerEx(playerid);
		}

        //////////////// AdminOn
		if ( PlayersDataOnline[playerid][AdminOn] )
		{
			SetPlayerHealth(playerid, INFINITY_HEALTH);
			PlayersDataOnline[playerid][ChangeVC] = 10;
		}
        //////////////// Check Health...
		else
		{
			GetPlayerHealth(playerid, PlayersDataOnline[playerid][CurrentHealth]);
			GetPlayerArmour(playerid, PlayersDataOnline[playerid][CurrentArmour]);
			if ( PlayersDataOnline[playerid][ChangeVC] <= 0 )
			{
			    UpdateArmourAndArmour(playerid, PlayersDataOnline[playerid][CurrentHealth], PlayersDataOnline[playerid][CurrentArmour]);
				if ( PlayersDataOnline[playerid][CurrentHealth] <= VIDA_CRACK || PlayersDataOnline[playerid][IsTeazer] > MyTime )
				{
					ApplyAnimation(playerid,"CRACK",CRACK_ANIMATIONS[3], 4.0, 1, 1, 1, 1, 1, 1);
				}
				if ( MyTime - PlayersDataOnline[playerid][LoginTime] > EnfermedadTiempo[PlayersData[playerid][Enfermedad]] )
				{
	             	SetPlayerHealthEx(playerid, -1);
					PlayersDataOnline[playerid][LoginTime] = MyTime;
				    if (PlayersDataOnline[playerid][CansansioConteo] == 20 && PlayersData[playerid][Cansansio] > 1 )
				    {
				        PlayersDataOnline[playerid][CansansioConteo] = 0;
				    	PlayersData[playerid][Cansansio]--;
				    }

					PlayersDataOnline[playerid][CansansioConteo]++;

					if ( PlayersDataOnline[playerid][CurrentHealth] <= VIDA_CRACK || PlayersData[playerid][Cansansio] <= 1)
					{
					    SendClientMessage(playerid, COLOR_MESSAGES[0], " Se encuentra muy cansado, debe descansar un poco puede llamar a un médico al \"105\"");
					}
				}
			}
			else if( PlayersDataOnline[playerid][ChangeVC] )
			{
		        SetPlayerHealth(playerid, PlayersDataOnline[playerid][VidaOn]);
		        SetPlayerArmour(playerid, PlayersDataOnline[playerid][ChalecoOn]);
			    PlayersDataOnline[playerid][ChangeVC]--;
			}
		}
        //////////////// Vehicles...
	    if ( IsPlayerInAnyVehicle(playerid) )
	    {
	        if ( !PlayersDataOnline[playerid][InCarId] && !PlayersDataOnline[playerid][InVehicle] )
	        {
		        if ( IsVehicleOpen(playerid, GetPlayerVehicleID(playerid), GetPlayerVehicleSeat(playerid)) || PlayersDataOnline[playerid][LicenciaTest])
		        {
		        	if ( coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] != BICI )
		        	{
						if ( GetPlayerVehicleSeat(playerid) == 0 )
						{
					    	PlayersDataOnline[playerid][InCarId] = GetPlayerVehicleID(playerid);
							ShowTextDrawFijosVelocimentros(playerid);
							if ( !coches_Todos_Velocidad[DataCars[PlayersDataOnline[playerid][InCarId]][Modelo] - 400] )
							{
							    TextDrawShowForPlayer(playerid, TemperaturaTextDraws[41]);
							    PlayersDataOnline[playerid][LastTextDrawTemperatura] = 41;
							}
							DataCars[PlayersDataOnline[playerid][InCarId]][GasNotShow] = true;
						    DataCars[PlayersDataOnline[playerid][InCarId]][OilNotShow] = true;

							IsVehicleOff(PlayersDataOnline[playerid][InCarId]);


							if ( !PlayersDataOnline[playerid][LicenciaTest] )
							{
								if ( !PlayersData[playerid][Licencias][coches_Todos_Type[GetVehicleModel(PlayersDataOnline[playerid][InCarId]) - 400]] )
								{
									static MsgNotLicencias[MAX_TEXT_CHAT];
									format(MsgNotLicencias, sizeof(MsgNotLicencias), "No tienes licencia de %s. ¡Cuidado con la policia!", LicenciasNames[coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]]);
									SendInfoMessage(playerid, 2, "517", MsgNotLicencias);
							    }
						    }
						    if ( PlayersDataOnline[playerid][InCarId] <= MAX_CAR_DUENO && DataCars[PlayersDataOnline[playerid][InCarId]][Puente] && strlen(DataCars[PlayersDataOnline[playerid][InCarId]][Dueno]) == 1)
						    {
							    SendInfoMessage(playerid, 2, "0", "No tienes las llaves de éste vehículo, pero puedes hacerle un puente. Usa (/Puente) o (Enter)");
							}
							else if ( !DataCars[PlayersDataOnline[playerid][InCarId]][StateEncendido] )
							{
							    if (DataCars[PlayersDataOnline[playerid][InCarId]][Freno])
							    SendInfoMessage(playerid, 2, "0", "Éste vehículo se encuentra con freno. Usa /Freno.");
							    else
							    SendInfoMessage(playerid, 2, "0", "Éste vehículo se encuentra apagado. Usa (Click Izquierdo) o (Enter)");
							}
							if ( DataCars[PlayersDataOnline[playerid][InCarId]][LockPolice] )
							{
								static MsgIsLock[144];
								format(MsgIsLock, sizeof(MsgIsLock), " Éste vehículo tiene un candado policial! Departamento %s", DataCars[PlayersDataOnline[playerid][InCarId]][ReasonLock]);
								SendInfoMessage(playerid, 2, "", MsgIsLock);
							}
						    if ( PlayersDataOnline[playerid][LicenciaTest] )
						    {
		                        PlayersDataOnline[playerid][LicenciaTest] = false;
							}

							static Float:Estado; GetVehicleHealth(PlayersDataOnline[playerid][InCarId], Estado);
							DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage]     = Estado;
	                        UpdateDamage(playerid, Estado);
							UpdateGasAndOil(PlayersDataOnline[playerid][InCarId]);
							OnPlayerEnterVehicleEx(playerid, PlayersDataOnline[playerid][InCarId], 0);
						}
						else
						{
							PlayersDataOnline[playerid][InVehicle] = GetPlayerVehicleID(playerid);

						    if ( !PlayersDataOnline[playerid][ExitedVehicle] )
						    {
								if ( IsVehicleWithInterior(playerid) || IsPlayerInTrain(playerid) )
								{
								    PlayersData[playerid][IsPlayerInVehInt] = GetPlayerVirtualWorld(playerid);
								}
							}
 							static TaxiID; TaxiID = IsVehicleTaxi(PlayersDataOnline[playerid][InVehicle]);
 							if ( TaxiID != -1 && TaxisTaximetro[TaxiID][TaxiOn] && CheckValidPlayerToTaxi(playerid, TaxiID) )
 							{
 							    SetPlayerTaxi(playerid, TaxiID, GetPlayerVehicleSeat(playerid));
							}
							OnPlayerEnterVehicleEx(playerid, PlayersDataOnline[playerid][InVehicle], GetPlayerVehicleSeat(playerid));
						}
						PlayAudioPlayerVehicle(playerid, GetPlayerVehicleID(playerid));
					}
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					IsFixBikeEnter(playerid, GetPlayerVehicleID(playerid));
				}
			}
			else if ( PlayersDataOnline[playerid][InCarId] )
			{
	            if ( GetPlayerVehicleID(playerid) == PlayersDataOnline[playerid][InCarId] )
				{
					UpdateTextDrawVehicle(playerid, PlayersDataOnline[playerid][InCarId]);
					if ( DataCars[PlayersDataOnline[playerid][InCarId]][StateEncendido] )
					{
						if ( DataCars[PlayersDataOnline[playerid][InCarId]][Gas] < 1 && DataCars[PlayersDataOnline[playerid][InCarId]][GasNotShow] )
					    {
						    DataCars[PlayersDataOnline[playerid][InCarId]][GasNotShow] = false;
							SendInfoMessage(playerid, 0, "0", "Vehículo sin gas! Use (Enter) para salir del mismo.");
						}
      					if ( DataCars[PlayersDataOnline[playerid][InCarId]][Oil] < 1 && DataCars[PlayersDataOnline[playerid][InCarId]][OilNotShow] )
					    {
						    DataCars[PlayersDataOnline[playerid][InCarId]][OilNotShow] = false;
							SendInfoMessage(playerid, 0, "0", "Vehículo sin aceíte! Use (Enter) para salir del mismo.");
					    }
						if ( DataCars[PlayersDataOnline[playerid][InCarId]][TemperaturaC] )
						{
							Acciones(playerid, 7, "Vehículo: Sobrecalentado.");
						}
	 					if ( DataCars[PlayersDataOnline[playerid][InCarId]][Gas] < 1 || DataCars[PlayersDataOnline[playerid][InCarId]][Oil] < 1 || DataCars[PlayersDataOnline[playerid][InCarId]][TemperaturaC] )
						{
							DataCars[PlayersDataOnline[playerid][InCarId]][StateEncendido] = false;
							DataCars[PlayersDataOnline[playerid][InCarId]][TemperaturaC] = false;
							IsVehicleOff(PlayersDataOnline[playerid][InCarId]);
						}
					}
					if ( DataCars[PlayersDataOnline[playerid][InCarId]][LockPolice] || DataCars[PlayersDataOnline[playerid][InCarId]][Freno])
					{
						SetVehicleVelocity(PlayersDataOnline[playerid][InCarId], 0.0, 0.0, 0.0);
					}
				}
				else
				{
				    RemovePlayerFromVehicleEx(playerid, false, MyTime);
				}
			}
			else if ( PlayersDataOnline[playerid][InVehicle] )
			{
				if ( GetPlayerVehicleID(playerid) != PlayersDataOnline[playerid][InVehicle] )
				{
    				RemovePlayerFromVehicleEx(playerid, true, MyTime);
				}
				else if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
				{
			 	 	UpdateTaximetroSeat(playerid);
				}
			}
    	}
    	else
    	{
	        if ( PlayersDataOnline[playerid][InCarId])
	        {
			    RemovePlayerFromVehicleEx(playerid, false, MyTime);
			    StopAudioStreamForPlayer(playerid);
	        }
	        else if ( PlayersDataOnline[playerid][InVehicle] )
	        {
			    RemovePlayerFromVehicleEx(playerid, true, MyTime);
			    StopAudioStreamForPlayer(playerid);
			}
    	}

	    //////////////// Anticheat Money...
		if ( PlayersData[playerid][Dinero] != GetPlayerMoney(playerid) )
		{
		    if ( PlayersDataOnline[playerid][StateMoneyPass] <= MyTime )
			{
				IsCheatMoney(playerid, GetPlayerMoney(playerid));
			}
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PlayersData[playerid][Dinero]);
		}

		return CheckWeapondCheat(playerid);
	}
	else
	{
	    return 0;
	}
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if ( PlayersDataOnline[playerid][CurrentDialog] != dialogid )
	{
		SendInfoMessage(playerid, 0, "1315", "Hacking attempt? || Why? Because this's Another Reality!");
		return true;
	}
	switch ( dialogid )
	{
	    // LOGIN
	    case 1:
	    {
	        if ( response == 1 )
	        {
	            if ( PlayersData[playerid][AccountState] != 3 )
	            {
			        if ( strcmp(PlayersData[playerid][Password], inputtext, false) == 0 && strlen(inputtext) ==  strlen(PlayersData[playerid][Password]))
			        {
						SetPlayerColor(playerid, PLAYERS_COLOR);
						KillTimer(PlayersDataOnline[playerid][TimerLoginId]);
						if ( PlayersData[playerid][IsInJail] != -1)
				        {
							PlayersData[playerid][Jail] = gettime() + PlayersData[playerid][Jail];
							SendInfoMessage(playerid, 2, "0", "Todavía te encuentras en jail de la última vez que jugaste.");
						}
						if ( PlayersData[playerid][Alquiler] != -1 )
						{
							CheckIsPlayerRentAndRemove(playerid, PlayersData[playerid][Alquiler]);
						}

						new HoraPaga, MinutosPaga, SegundosPaga;
						gettime(HoraPaga, MinutosPaga, SegundosPaga);

						if ( MinutosPaga >= 8 && MinutosPaga <= 50 )
						{
							PlayersDataOnline[playerid][Paga] = true;
						}
						else
						{
							PlayersDataOnline[playerid][Paga] = false;
						}
						if ( PlayersData[playerid][Interior] == 0 && PlayersData[playerid][World] == 0)
						{
							PlayersData[playerid][Spawn_Z] = PlayersData[playerid][Spawn_Z] + 2;
						}

						GetPlayerIp(playerid, PlayersData[playerid][MyIP],16);
						
						PlayersDataOnline[playerid][State] = 3;
						SetPlayerScore(playerid, GetPlayerScoreEx(playerid));
   						SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z], PlayersData[playerid][Spawn_ZZ], 0, 0, 0, 0, 0, 0);
					    SpawnPlayer(playerid);
						PlayersDataOnline[playerid][ChalecoOn] = PlayersData[playerid][Chaleco];
						PlayersDataOnline[playerid][VidaOn] = PlayersData[playerid][Vida];
						SetPlayerVirtualWorld(playerid, PlayersData[playerid][World]);
					  	SetPlayerInteriorEx(playerid, PlayersData[playerid][Interior]);
					  	SetPlayerFightingStyle(playerid, HabilidadesID[PlayersData[playerid][Habilidad]]);
					  	PlayersDataOnline[playerid][LoginTime] = gettime();
					  	GivePlayerMoney(playerid, PlayersData[playerid][Dinero]);
						Streamer_UpdateEx(playerid, PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z]);

						PlayersDataOnline[playerid][StateMoneyPass] 	= gettime() + 5;
					    PlayersDataOnline[playerid][StateWeaponPass] 	= gettime() + 5;
						GivePlayerWeaponReturn(playerid);

						CheckAsignados(playerid);
			    	    LoadAgenda(playerid);
			    	    LoadPlayerSMS(playerid);
						LoadAccountBanking(playerid);
						AddPlayerDescription(playerid, false);

						if ( strlen(PlayersData[playerid][DescriptionString]) < 3 )
						{
							format(PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION, "Ninguno");
						}

						PlayerPlaySound(playerid, 1186, -1999.2559, 743.3678, 58.7168);
						new HiMsg[45];
						format(HiMsg, sizeof(HiMsg), "~W~Buenas!~N~~B~%s", PlayersDataOnline[playerid][NameOnlineFix]);
						GameTextForPlayer(playerid, HiMsg, 1000, 1);

						// Remove
						if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL && PlayersData[playerid][Faccion] != CIVIL )
						{
						    PlayersData[playerid][Job] = NINGUNO;
						}

						if ( PlayersData[playerid][InTutorial] )
						{
							PlayersData[playerid][InTutorial] = true;
						    TogglePlayerControllableEx(playerid, false);
							PlayersDataOnline[playerid][IsNotSilenciado] = false;
							SetPlayerTutorial(playerid, 7);
						}
						printf("%s[%i] Logueado!", PlayersDataOnline[playerid][NameOnline], playerid);
					}
					else
					{
      					ShowPlayerLogin(playerid, false);
						SendInfoMessage(playerid, 0, "209", "Contraseña incorrecta, vuelva a intentarlo");
					}
			    }
			    else
			    {
					SendInfoMessage(playerid, 0, "210", "Esta cuenta se encuentra baneada. Consultalo en "WEBPAGE"/Soporte gracias.");
				    KickEx(playerid, 3);
				}
			}
			else
			{
			    if ( PlayersDataOnline[playerid][SaveAfterAgenda][0] && PlayersData[playerid][EmailTime] < gettime() )
			    {
			        if ( strlen(PlayersData[playerid][Email]) != 2 )
			        {
			            SendInfoMessage(playerid, 0, "0", "Servicio de recuperacion de contraseñas no disponible.");
					    ShowPlayerLogin(playerid, true);
						//ShowPlayerVerifiquedEmail(playerid, true);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1377", "Esta cuenta no tiene un E-mail configurado para recuperación de contraseñas.");
						ShowPlayerLogin(playerid, true);
					}
			    }
			    else
			    {
			        if ( !PlayersDataOnline[playerid][SaveAfterAgenda][0] )
			        {
						SendInfoMessage(playerid, 2, "0", "Gracias por entrar en el servidor, recuerde visitar "WEBPAGE"!");
						KickEx(playerid, 4);
					}
					else
					{
						new MsgPersonalizado[MAX_TEXT_CHAT];
						format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a solicitar otro E-mail con recuperación de contraseña", (PlayersData[playerid][EmailTime] - gettime()) / 60, ((PlayersData[playerid][EmailTime] - gettime()) % 60));
						SendInfoMessage(playerid, 0, "1378", MsgPersonalizado);
						ShowPlayerLogin(playerid, true);
					}
				}
			}
		}
		// REGISTRO
		case 2:
		{
	        if ( response == 1 )
	        {
				if ( strlen(inputtext) >= 4 && strlen(inputtext) <= 25)
				{
				    if ( IsValidStringServerOther(playerid, inputtext) )
				    {
						format(PlayersData[playerid][Password], 25, "%s", inputtext);
						ShowPlayerDialogEx(playerid, 3, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", "{F0F0F0}¿Cuál es el sexo de su personaje?", Sexos[1], Sexos[0]);
						PlayerPlaySound(playerid, 1186, -1999.2559, 743.3678, 58.7168);
					}
					else
					{
						ShowPlayerRegister(playerid, false);
					}
				}
				else
				{
					ShowPlayerRegister(playerid, false);
					SendInfoMessage(playerid, 0, "211", "Contraseña muy corta, debe contener más de 4 caracteres y menos de 25");
				}
			}
			else
			{
				SendInfoMessage(playerid, 2, "0", "Recuerde que para ingresar el servidor debe regístrarse. Vuelva pronto! Visite "WEBPAGE"");
				KickEx(playerid, 5);
			}
		}
		// SEXO
		case 3:
		{
   		    PlayersData[playerid][Sexo] = response;

   		    if ( response == 1 )
		    {
				PlayersData[playerid][Skin] = 56;
			}
			ShowPlayerDialogEx(playerid, 15, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}¿Qué edad tiene?", "Seguir", "Volver");
        }
		// Edad
		case 15:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) >= 15 && strval(inputtext) <= 60 )
				{
				    PlayersData[playerid][Edad] = strval(inputtext);
					ShowPlayerDialogEx(playerid, 4, DIALOG_STYLE_MSGBOX, "{00A5FF}Ciudad", "{F0F0F0}¿En qué ciudad desea vivir?", Ciudades[1], Ciudades[0]);
				}
				else
				{
					SendInfoMessage(playerid, 0, "847", "La edad tiene que estar comprendida entre 15 y 60 años");
					ShowPlayerDialogEx(playerid, 15, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}¿Qué edad tiene?", "Seguir", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid, 3, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", "{F0F0F0}¿Cuál es el sexo de su personaje?", Sexos[1], Sexos[0]);
			}
		}
		// CIUDAD - ÚLTIMO
		case 4:
		{
			KillTimer(PlayersDataOnline[playerid][TimerLoginId]);
			GetPlayerIp(playerid, PlayersData[playerid][MyIP],16);
		    PlayersData[playerid][Ciudad] = response;
		    UpdateSpawnPlayer(playerid);
			SetPlayerFightingStyle(playerid, HabilidadesID[PlayersData[playerid][Habilidad]]);
		  	PlayersDataOnline[playerid][LoginTime] = gettime();
			PlayersDataOnline[playerid][State] = 3;
			GivePlayerMoneyEx(playerid, 800);
		    SetPlayerVirtualWorldEx(playerid, PlayersData[playerid][World]);

		    DataUserSave(playerid);
			LoadAccountBanking(playerid);


			new HoraPaga, MinutosPaga, SegundosPaga;
			gettime(HoraPaga, MinutosPaga, SegundosPaga);

			SetPlayerColor(playerid, PLAYERS_COLOR);

			if ( MinutosPaga >= 8 && MinutosPaga <= 50 )
			{
				PlayersDataOnline[playerid][Paga] = true;
			}
			else
			{
				PlayersDataOnline[playerid][Paga] = false;
			}
			ShowPlayerDialogEx(playerid, 153, DIALOG_STYLE_MSGBOX, "{00A5FF}Tutorial", "{F0F0F0}Desea ver el tutorial?", "Ver", "Saltar");
		}
		//  SKIN
		case 5:
		{
			SetPlayerRowSkin(playerid, response);
		}
		//  VENTA DEL COCHE
		case 6:
		{
   		    if ( response == 1 )
		    {
					if ( IsPlayerInAnyVehicle(playerid) )
					{
						if ( IsVehicleMyVehicle(playerid, GetPlayerVehicleID(playerid))  )
						{
				            PlayersData[playerid][Car] = -1;
				            format(DataCars[GetPlayerVehicleID(playerid)][Dueno], MAX_PLAYER_NAME, "0");
				            SaveDataVehicle(GetPlayerVehicleID(playerid), DIR_VEHICLES);
							SendInfoMessage(playerid, 3, "0", "Ha vendido su vehículo a cambio de nada!");
							DataCars[GetPlayerVehicleID(playerid)][StateEncendido] = false;
							DataCars[GetPlayerVehicleID(playerid)][Puente] = true;
						}
						else
						{
							SendInfoMessage(playerid, 0, "333", "Ha cambiado de vehículo, suba al suyo por favor");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "334", "Suba nuevamente al vehículo y mantenga en el hasta responder el cuadro de diálogo");
					}
			}
		}
		//      DAR LLAVES
		case 7:
		{
   		    if ( response == 1 )
		    {
				if ( IsPlayerNearEx(playerid, PlayersDataOnline[playerid][DarLlaves],
					 "335",
					 "336",
					 "337",
					 "El jugador que le iva a dar las llaves de su vehículo se ha desconectado",
					 "El jugador que le iva a dar las llaves de su vehículo no se ha logueado",
					 "El jugador que le iva a dar las llaves de su vehículo ya no se encuentra cerca de tí") )
			    {
					if ( PlayersData[playerid][Car] != -1 )
					{
			            PlayersData[PlayersDataOnline[playerid][DarLlaves]][Car] = PlayersData[playerid][Car];
			            format(DataCars[PlayersData[playerid][Car]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[PlayersDataOnline[playerid][DarLlaves]][NameOnline]);
	   		            SaveDataVehicle(PlayersData[playerid][Car], DIR_VEHICLES);
	  		            PlayersData[playerid][Car] = -1;

						new MsgDarLlavesMe[MAX_TEXT_CHAT];
						new MsgDarLlaves[MAX_TEXT_CHAT];
						format( MsgDarLlavesMe , sizeof(MsgDarLlavesMe), "le da algunas llaves a %s", PlayersDataOnline[PlayersDataOnline[playerid][DarLlaves]][NameOnlineFix]);
						format( MsgDarLlaves , sizeof(MsgDarLlaves), "Le ha dado las llaves de su vehículo a %s", PlayersDataOnline[PlayersDataOnline[playerid][DarLlaves]][NameOnlineFix]);
						SendInfoMessage(playerid, 3, "0", MsgDarLlaves);
						Acciones(playerid, 8, MsgDarLlavesMe);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1458", "Usted ya no tiene coche");
					}
				}
			}
		}
		//      MENU ARMAS - CALCULAR
		case 8:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) >= 10 && strval(inputtext) <= 1000)
				{
				    PlayersDataOnline[playerid][MyAmmoSelect] = strval(inputtext);
				    new MsgComprarArmaDialogPresupuesto[MAX_TEXT_CHAT];
				    format(MsgComprarArmaDialogPresupuesto, sizeof(MsgComprarArmaDialogPresupuesto), "{F0F0F0}¿Desea comprar %s con %i de munición\n{F0F0F0}por el precio de $%i?", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4], PlayersDataOnline[playerid][MyAmmoSelect], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * strval(inputtext));
					ShowPlayerDialogEx(playerid, 9, DIALOG_STYLE_MSGBOX, "{00A5FF}Finalize su compra!", MsgComprarArmaDialogPresupuesto, "Comprar!", "Modificar");
				}
				else
				{
				    new MsgComprarArmaDialog[MAX_TEXT_CHAT];
				    format(MsgComprarArmaDialog, sizeof(MsgComprarArmaDialog), "{F0F0F0}Ingrese el número de munición \n{F0F0F0}que desea para %s", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4]);
					ShowPlayerDialogEx(playerid, 8, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione Cantidad de munición", MsgComprarArmaDialog, "Calcular", "Volver");
					SendInfoMessage(playerid, 0, "357", "El mínimo de munición para comprar un arma es 10 y máximo 1000");
				}
			}
			else
			{
				ShowMenuForPlayer(Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			}
		}
		//      MENU ARMAS - COMPRAR
		case 9:
		{
   		    if ( response == 1 )
		    {
				if ( CheckWeapondCheat(playerid) && PlayersData[playerid][Dinero] >= Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect] )
				{
			        new MsgCompra[MAX_TEXT_CHAT];
                    format(MsgCompra, sizeof(MsgCompra), "Has comprado %s por $%i", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]);
                    GivePlayerWeaponEx(playerid, Armas_ID[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]], PlayersDataOnline[playerid][MyAmmoSelect]);

	                SendInfoMessage(playerid, 2, "0", MsgCompra);
					GivePlayerMoneyEx(playerid, -(Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]) );
					SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), (Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]) / 2);

					ShowMenuForPlayer(Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
				}
				else
				{
					SendInfoMessage(playerid, 0, "358", "No tienes suficiente dinero para comprar esta arma con esa munición");
				    new MsgComprarArmaDialogPresupuesto[MAX_TEXT_CHAT];
				    format(MsgComprarArmaDialogPresupuesto, sizeof(MsgComprarArmaDialogPresupuesto), "{F0F0F0}¿Desea comprar %s con %i de munición\n{F0F0F0}por el precio de $%i?", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4], PlayersDataOnline[playerid][MyAmmoSelect], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]);
					ShowPlayerDialogEx(playerid, 9, DIALOG_STYLE_MSGBOX, "{00A5FF}Finalize su compra!", MsgComprarArmaDialogPresupuesto, "Comprar!", "Modificar");
				}
		    }
		    else
		    {
			    new MsgComprarArmaDialog[MAX_TEXT_CHAT];
			    format(MsgComprarArmaDialog, sizeof(MsgComprarArmaDialog), "{F0F0F0}Ingrese el número de munición \n{F0F0F0}que desea para %s", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4]);
				ShowPlayerDialogEx(playerid, 8, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione Cantidad de munición", MsgComprarArmaDialog, "Calcular", "Volver");
			}
		}
		//      CREAR ARMA
		case 10:
		{
   		    if ( response == 1 )
		    {
		        if ( CheckWeapondCheat(playerid) && PlayersData[playerid][Materiales] >= MaterialesArmasTraficantes[listitem] )
		        {
					PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - MaterialesArmasTraficantes[listitem];

					new MsgCrearArma[MAX_TEXT_CHAT];
					if ( listitem != 14 )
					{
						Acciones(playerid, 8, "crea un arma con materiales");
						GivePlayerWeaponEx(playerid, IdArmasTraficantes[listitem], MunicionArmasTraficantes[listitem]);
						format(MsgCrearArma, sizeof(MsgCrearArma), "Has creado un %s con munición %i por %i de materiales", SlotNameWeapon[IdArmasTraficantes[listitem]], MunicionArmasTraficantes[listitem], MaterialesArmasTraficantes[listitem]);
					}
					else
					{
						Acciones(playerid, 8, "crea un bomba con materiales");
						format(MsgCrearArma, sizeof(MsgCrearArma), "Has creado una bomba por 1000 de materiales");
						PlayersData[playerid][Bombas]++;

					}
					SendInfoMessage(playerid, 2, "0", MsgCrearArma);
				}
				else
				{
					SendInfoMessage(playerid, 0, "419", "No tienes suficientes materiales para crear esta arma");
				}
		    }
	    }
		//      REPORTE VIA TAB
		case 11:
		{
   		    if ( response == 1 )
		    {
				if (IsPlayerConnected(PlayersDataOnline[playerid][MyLastIdReport]))
				{
				    if ( strlen(inputtext) >= 1)
				    {
						new StringFormat[MAX_TEXT_CHAT];
						new StringFormat2[MAX_TEXT_CHAT];
					    format(StringFormat2, sizeof(StringFormat2), "Reporte: Has reportado a %s[%i]. Razón: %s", PlayersDataOnline[PlayersDataOnline[playerid][MyLastIdReport]][NameOnline], PlayersDataOnline[playerid][MyLastIdReport], inputtext);
						format(StringFormat, sizeof(StringFormat), "%s %s[%i] reporta a %s[%i]. Razón: %s",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[PlayersDataOnline[playerid][MyLastIdReport]][NameOnline], PlayersDataOnline[playerid][MyLastIdReport], inputtext);

					    MsgCheatsReportsToAdmins(StringFormat);
					    SendClientMessage(playerid, COLOR_CHEATS_REPORTES, StringFormat2);
					}
					else
					{
						SendInfoMessage(playerid, 0, "962", "Debe introducir una razón a reportar.");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "422", "El jugador que desea reportar no se encuentra connectado");
				}
		    }
	    }
		//      Color del Coche
		case 12:
		{
		    // Color 1
   		    if ( response == 1 )
		    {
				ShowPlayerDialogEx(playerid, 13, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 1 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 255", "Pintar", "Menu");
		    }
		    // Color 2
		    else
		    {
				ShowPlayerDialogEx(playerid, 14, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 2 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 255", "Pintar", "Menu");
			}
	    }
		//      Pintar Color 1
		case 13:
		{
		    // Pintar
   		    if ( response == 1 )
		    {
				if ( IsTunnigContinue(playerid) )
				{
			        if ( strval(inputtext) >= 0 && strval(inputtext) <= 252 )
			        {
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color1] = strval(inputtext);
						ChangeVehicleColor(PlayersDataOnline[playerid][MyIDVehicleTunning],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color1],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color2]);
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
					else
					{
						ShowPlayerDialogEx(playerid, 13, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 1 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 252", "Pintar", "Menu");
						SendInfoMessage(playerid, 0, "678", "La ID del color del vehículo debe estar entre 0 y 252");
					}
				}
		    }
		    // Menu
		    else
		    {
				ShowMenuForPlayer(TallerPrincipal, playerid);
			}
	    }
		//      Pintar Color 2
		case 14:
		{
		    // Pintar
   		    if ( response == 1 )
		    {
				if ( IsTunnigContinue(playerid) )
				{
			        if ( strval(inputtext) >= 0 && strval(inputtext) <= 252 )
			        {
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color2] = strval(inputtext);
						ChangeVehicleColor(PlayersDataOnline[playerid][MyIDVehicleTunning],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color1],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color2]);
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
					else
					{
						ShowPlayerDialogEx(playerid, 14, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 2 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 252", "Pintar", "Menu");
						SendInfoMessage(playerid, 0, "679", "La ID del color del vehículo debe estar entre 0 y 252");
					}
				}
		    }
		    // Menu
		    else
		    {
				ShowMenuForPlayer(TallerPrincipal, playerid);
			}
	    }
		//      CONFIRMAR CONTRSEÑA
		case 16:
		{
   		    if ( response == 1 )
		    {
		        if ( strcmp(PlayersData[playerid][Password], inputtext, false) == 0 && strlen(inputtext) ==  strlen(PlayersData[playerid][Password]))
		        {
					switch ( PlayersDataOnline[playerid][SaveAfterAgenda][0] )
					{
						case 0:
						{
						    ShowPlayerEmailChange(playerid, true);
						}
						case 1:
						{
							ShowPlayerDialogEx(playerid, 17, DIALOG_STYLE_PASSWORD, "{00A5FF}Nueva Contraseña", "{F0F0F0}Ingrese su nueva contraseña\n{F0F0F0}y ya habrá cambiado su contraseña", "Cambiar", "Volver");
						}
					}
		        }
		        else
		        {
					SendInfoMessage(playerid, 0, "871", "La contraseña actual no coincide con la que ingresó, intentelo de nuevo");
					ShowPlayerDialogEx(playerid, 16, DIALOG_STYLE_PASSWORD, "{00A5FF}Confirmación", "{F0F0F0}Ingrese su contraseña actual", "Confirmar", "Volver");
				}
		    }
		    else
		    {
		    	ShowDialogAccount(playerid);
			}
	    }
		//      PANEL DE CONTROL DE USUARIO
		case 17:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 4 && strlen(inputtext) < 25)
				{
				    if ( IsValidStringServerOther(playerid, inputtext) )
				    {
						format(PlayersData[playerid][Password], 25, "%s", inputtext);
					    new MsgNewPassword[MAX_TEXT_CHAT];
					    format(MsgNewPassword, sizeof(MsgNewPassword), "Ha cambiado su contraseña satisfactoriamente. Su nueva contraseña es: %s", inputtext);
						SendInfoMessage(playerid, 3, "0", MsgNewPassword);
				    	ShowDialogAccount(playerid);
			    	}
			    	else
			    	{
						ShowPlayerDialogEx(playerid, 17, DIALOG_STYLE_PASSWORD, "{00A5FF}Nueva Contraseña", "{F0F0F0}Ingrese su nueva contraseña\n{F0F0F0}y ya habrá cambiado su contraseña", "Cambiar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid, 17, DIALOG_STYLE_PASSWORD, "{00A5FF}Nueva Contraseña", "{F0F0F0}Ingrese su nueva contraseña\n{F0F0F0}y ya habrá cambiado su contraseña", "Cambiar", "Volver");
					SendInfoMessage(playerid, 0, "872", "Contraseña muy corta, debe contener más de 4 caracteres y menos de 25");
				}
		    }
		    else
		    {
		    	ShowDialogAccount(playerid);
			}
	    }
		//      PANEL DE CONTROL DE USUARIO
		case 18:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    // Cambiar Contraseña
				    case 0:
				    {
						PlayersDataOnline[playerid][SaveAfterAgenda][0] = 1;
						ShowPlayerDialogEx(playerid, 16, DIALOG_STYLE_PASSWORD, "{00A5FF}Confirmación", "{F0F0F0}Ingrese su contraseña actual\n", "Confirmar", "Volver");
					}
					// Sexo
					case 1:
					{
						ShowPlayerDialogEx(playerid, 47, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", "{F0F0F0}¿Qué sexo desea para su personaje ahora?", Sexos[1], Sexos[0]);
					}
					// Edad
					case 2:
					{
						ShowPlayerDialogEx(playerid, 48, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}Seleccione una nueva edad para su personaje", "Cambiar", "Volver");
					}
					// Email
					case 3:
					{
						PlayersDataOnline[playerid][SaveAfterAgenda][0] = 0;
						ShowPlayerDialogEx(playerid, 16, DIALOG_STYLE_PASSWORD, "{00A5FF}Confirmación", "{F0F0F0}Ingrese su contraseña actual\n", "Confirmar", "Volver");
					}
					// Opciones
					case 4:
					{
						ShowDialogAccountOptions(playerid);
					}
				}
		    }
	    }
		//      AGENDA DIALOG
		case 19:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    // Contactos
				    case 0:
				    {
						ShowContactosAgenda(playerid);
					}
				    case 1:
				    {
						ShowAgregarAgenda(playerid, 0);
					}
				    case 2:
				    {
						ShowEliminarAgenda(playerid);
					}
					case 3:
					{
						ShowContactosBloqueados(playerid);
					}
					case 4:
					{
						ShowAgregarBloqueado(playerid); // DIALOG ID 51
					}
					case 5:
					{
						ShowEliminarBloqueado(playerid); // DIALOG ID 52
					}
					// SMS
					case 6:
					{
						ShowSMSToPlayer(playerid);
					}
					// SMS Borrar Todos
					case 7:
					{
                        ConfirmDeletedAllSMS(playerid);
					}
					// Buscar
					case 8:
					{
                        ShowBuscarAgenda(playerid);
					}
				}
		    }
		    else
		    {
		        Acciones(playerid, 8, "guarda su agenda");
			}
	    }
		//      AGENDA CONTACTOS
		case 20:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];

		        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA Error Info
		case 21:
		{
   		    if ( response == 0 )
		    {
                ShowHomeAgenda(playerid);
		    }
		    else
		    {
		        Acciones(playerid, 8, "guarda su agenda");
			}
	    }
		//      AGENDA AGREGAR  - NOMBRE
		case 22:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 2 && strlen(inputtext) <= MAX_AGENDA_NAME )
				{
					format(PlayersDataOnline[playerid][SaveNameContact], MAX_AGENDA_NAME, "%s", inputtext);
					ShowAgregarAgenda(playerid, 1);
				}
				else
				{
					ShowPlayerDialogEx(playerid,24,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}El nombre del contacto no puede exeder los 20 caracteres\n{F0F0F0}ni tener menos de 2.", "Reintentar", "Inicio");
				}
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA AGREGAR 1 - NÚMERO
		case 23:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) > 100 && strval(inputtext) <= 99999 )
				{
					if (AddNumberToAgenda(playerid, PlayersDataOnline[playerid][SaveNameContact], strval(inputtext)))
					{
				        Acciones(playerid, 8, "agrega un número a su agenda");
		                ShowHomeAgenda(playerid);
	                }
				}
				else
				{
					ShowPlayerDialogEx(playerid,25,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}El número debe contener de 3 a 5 dígitos positivos", "Reintentar", "Inicio");
				}
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA Error Info 2
		case 24:
		{
   		    if ( response == 1 )
		    {
				ShowAgregarAgenda(playerid, 0);
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA Error Info 3
		case 25:
		{
   		    if ( response == 1 )
		    {
				ShowAgregarAgenda(playerid, 1);
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA ELIMINAR
		case 26:
		{
   		    if ( response == 1 )
		    {
				RemoveNumberToAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        Acciones(playerid, 8, "elimina un número de su agenda");
                ShowHomeAgenda(playerid);
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
	    }
		//      FORMAS DE CAMINAR
		case 27:
		{
   		    if ( response == 1 )
		    {
                PlayersData[playerid][MyStyleWalk] = listitem;
		    }
	    }
		//      TIPO DE SKIN A ESCOGER
		case 28:
		{
			PlayersDataOnline[playerid][TypeSkinList] = response;
			SetPlayerSelectedSkin(playerid);
	    }
		//      BAR
		case 29:
		{
   		    if ( response == 1 )
		    {
                ShowDialogBar(playerid, listitem);
		    }
	    }
		//      COMPRAR SALDO
		case 30:
		{
   		    if ( response == 1 )
			{
				new MoneySaldo = strval(inputtext);
				if ( PlayersData[playerid][Dinero] >= MoneySaldo  )
				{
				    if( MoneySaldo <= 3000 && MoneySaldo >= 1)
				    {
				        if ( PlayersData[playerid][Saldo] + MoneySaldo <= 3000 )
				        {
						    PlayersData[playerid][Saldo] = PlayersData[playerid][Saldo] + MoneySaldo;
							GivePlayerMoneyEx(playerid, -MoneySaldo);
							SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), MoneySaldo);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1024", "Sólo puede tener $3000 de saldo como máximo");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1023", "Lo mínimo que puede comprar de saldo es $1 y $3000 como máximo");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1022", "No tiene suficiente dinero para comprar esa cantidad de saldo.");
				}
				new MsgSaldoNew[MAX_TEXT_CHAT];
				format(MsgSaldoNew, sizeof(MsgSaldoNew), "{00F50A}Su nuevo saldo en el móvil es: $%i\n\n{F0F0F0}¿Desea comprar más saldo para su móvil?", PlayersData[playerid][Saldo]);
				ShowPlayerDialogEx(playerid, 30, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione el monte de saldo a comprar", MsgSaldoNew, "Comprar", "Volver");
		    }
		    else
		    {
          		ShowDialog247(playerid);
			}
	    }
		//      BANCO - HOME
		case 31:
		{
   		    if ( response == 1 )
			{
			    switch ( listitem )
			    {
			        case 0:
			        {
				        ShowConsultarBanco(playerid);
					}
					case 1:
					{
				        ShowRetirarBanco(playerid);
					}
					case 2:
					{
				        ShowDepositarBanco(playerid);
					}
					// Cobrar Cheque
					case 3:
					{
						ShowPayCheque(playerid);
					}
					// Ver Cheques
					case 4:
					{
						ShowVerCheques(playerid);
					}
					// Hacer una transferencia
					case 5:
					{
					    if ( PlayersData[playerid][HoursPlaying] >= 24 )
					    {
							ShowBankTransferencia(playerid);
					    }
					    else
					    {
							ShowHomeBanco(playerid);
							SendInfoMessage(playerid, 0, "1347", "Debes ser mayor de nivel 3 para crear hacer transferencias");
						}
					}
					// Controlar mis cuentas
					case 6:
					{
						ShowManejarCuentas(playerid);
					}
					// Configuración
					case 7:
					{
						ShowBankConfiguration(playerid);
					}
				}
			}
		}
		//      BANCO - CONSULTAR
		case 32:
		{
   		    if ( response == 0 )
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - RETIRAR
		case 33:
		{
   		    if ( response == 1 )
			{
				ShowRetirarBancoFunction(playerid, false, strval(inputtext));
			}
			else
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - DEPOSITAR
		case 34:
		{
   		    if ( response == 1 )
			{
				ShowDepositarBancoFunction(playerid, false, strval(inputtext));
			}
			else
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - RETIRO REALIZADO
		case 35:
		{
   		    if ( response == 0 )
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - DEPÓSITO REALIZADO
		case 36:
		{
   		    if ( response == 0 )
			{
				ShowHomeBanco(playerid);
			}
		}
		//Supmercado ShowDialogSuperMercado
		case 37:
		{
		    if(response)
			{
				if(PlayersData[playerid][HaveBolsa])
				{
				    if(PlayersData[playerid][Dinero] >= SupermercadoArticulosPrecios[listitem])
					{
					    new MsgCompra[144],
						    ArticuloID,
						    CantidadA;

						switch(listitem)
						{
						    //Pack 6 Cervezas
						    case 0:
						    {
							    format(MsgCompra, sizeof(MsgCompra), "Has comprado un Pack de 6 cervezas por $%i.", SupermercadoArticulosPrecios[listitem]);
				                ArticuloID = A_CERVEZA;
				                CantidadA = 6;
							}
							//5 Vodkas
							case 1:
							{
							   format(MsgCompra, sizeof(MsgCompra), "Has comprado 5 vodkas por $%i.", SupermercadoArticulosPrecios[listitem]);
							   ArticuloID = A_VODKA;
							   CantidadA = 5;
							}
							//5 Refrescos
							case 2:
							{
							   format(MsgCompra, sizeof(MsgCompra), "Has comprado 5 refrescos por $%i.", SupermercadoArticulosPrecios[listitem]);
							   ArticuloID = A_REFRESCO;
							   CantidadA = 5;
							}
							//Pollo Crudo
							case 3:
							{
							   format(MsgCompra, sizeof(MsgCompra), "Has comprado un pollo por $%i.", SupermercadoArticulosPrecios[listitem]);
							   ArticuloID = A_POLLO;
							   CantidadA = 1;
							}
							//Papas
							case 4:
						    {
							   format(MsgCompra, sizeof(MsgCompra), "Has comprado papas por $%i.", SupermercadoArticulosPrecios[listitem]);
							   ArticuloID = A_PAPAS;
							   CantidadA = 1;
							}
							//Arroz
							case 5:
							{
							   format(MsgCompra, sizeof(MsgCompra), "Has comprado arroz por $%i.", SupermercadoArticulosPrecios[listitem]);
							   ArticuloID = A_ARROZ;
							   CantidadA = 1;
							}
						}
						switch(AddArticuloBolsa(playerid, ArticuloID, CantidadA))
						{
						    case 1:
						    {
						        SendInfoMessage(playerid, 3, "0", MsgCompra);
						    	GivePlayerMoneyEx(playerid, -SupermercadoArticulosPrecios[listitem]);
						    }
						    case 2: SendInfoMessage(playerid, 0, "1244", "No te caben más de esos artículos en la bolsa!");
						    case 0: SendInfoMessage(playerid, 0, "1230", "La bolsa se encuentra llena!");
						}
					}
					else SendInfoMessage(playerid, 0, "", "No tienes suficiente dinero para comprar este articulo.");
				}
				else SendInfoMessage(playerid, 0, "", "Usted no tiene bolsa!");
				
				ShowDialogSuperMercado(playerid);
			}
		}
		//      SEXO - CUENTA
		case 47:
		{
   		    PlayersData[playerid][Sexo] = response;
   		    new MsgDialogSexo[MAX_TEXT_CHAT];
   		    format(MsgDialogSexo, sizeof(MsgDialogSexo), "{00F50A}¡Cambio de sexo realizado con éxito!\n\n{F0F0F0}El nuevo sexo de su personaje es: {00F50A}%s ", Sexos[PlayersData[playerid][Sexo]]);
			ShowPlayerDialogEx(playerid, 50, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", MsgDialogSexo, "Aceptar", "Volver");
		}
		//      EDAD - CUENTA
		case 48:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) >= 15 && strval(inputtext) <= 60 )
				{
				    PlayersData[playerid][Edad] = strval(inputtext);

		   		    new MsgDialogEdad[MAX_TEXT_CHAT];
		   		    format(MsgDialogEdad, sizeof(MsgDialogEdad), "{00F50A}¡Cambio de edad realizado con éxito!\n\n{F0F0F0}La nueva edad de su personaje es: {00F50A}%i ", PlayersData[playerid][Edad]);
					ShowPlayerDialogEx(playerid, 50, DIALOG_STYLE_MSGBOX, "{00A5FF}Edad", MsgDialogEdad, "Aceptar", "Volver");
				}
				else
				{
					SendInfoMessage(playerid, 0, "1098", "La edad tiene que estar comprendida entre 15 y 60 años");
					ShowPlayerDialogEx(playerid, 48, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}Reintente ingresar una edad válida para su personaje", "Cambiar", "Volver");
				}
			}
			else
			{
				ShowDialogAccount(playerid);
			}
		}
		//      OPCIONES - CUENTA
		case 49:
		{
   		    if ( response == 1 )
		    {
			    switch ( listitem )
			    {
			        case 0: // Intermitentes (Manual-Automático)
			        {
						ReverseEx(PlayersData[playerid][IntermitentState]);
			        }
			        case 1: // Usar Plugin de Audio
					{
					}
		        }
				ShowDialogAccountOptions(playerid);
			}
			else
			{
				ShowDialogAccount(playerid);
			}
		}
		case 50:
		{
   		    if ( response == 0 )
		    {
				ShowDialogAccount(playerid);
		    }
		}
		case 51:
		{
   		    if ( response == 1 )
		    {
				AddContactToBlock(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        Acciones(playerid, 8, "agrega un contacto a su lista de bloqueados");
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
		}
		case 52:
		{
   		    if ( response == 1 )
		    {
				RemoveContactToBlock(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        Acciones(playerid, 8, "quita un contacto de su lista de bloqueados");
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
		}
		// Inicio Police
		case 53:
		{
   		    if ( response == 1 )
		    {
				ShowNamePolice(playerid);
		    }
		    else
		    {
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		// Name Police
		case 54:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 2 &&  strlen(inputtext) < MAX_PLAYER_NAME )
				{
					ShowReasonPolice(playerid);
					format(PlayersDataOnline[playerid][NameProject], MAX_PLAYER_NAME, "%s", inputtext);
				}
				else
				{
					ShowNamePolice(playerid);
					SendInfoMessage(playerid, 0, "1106", "El nombre debe ser mayor de 2 y menor de 24 caracteres");
				}
		    }
		    else
		    {
				ShowReasonPolice(playerid);
				format(PlayersDataOnline[playerid][NameProject], MAX_PLAYER_NAME, "No");
			}
		}
		// Reason Police
		case 55:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 6 &&  strlen(inputtext) < MAX_TEXT_CHAT )
				{
					AddCall(PlayersData[playerid][Phone], PlayersDataOnline[playerid][NameProject], inputtext, PlayersDataOnline[playerid][NumberCallPublic]);
					if ( !PlayersDataOnline[playerid][NumberCallPublic] )
					{
						new MsgLlamar[MAX_TEXT_CHAT];
						format(MsgLlamar, sizeof(MsgLlamar), "La central de LSPD ha recibido un nuevo reporte policial. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
					    SendAlertCallRequest(LSPD, MsgLlamar);
						ShowPlayerDialogEx(playerid,56,DIALOG_STYLE_MSGBOX,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Gracias por reportar este incidente a la {F5FF00}LSPD", "Colgar", "");
					}
					else
					{
						new MsgLlamar[MAX_TEXT_CHAT];
						format(MsgLlamar, sizeof(MsgLlamar), "La central de SFPD ha recibido un nuevo reporte policial. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
					    SendAlertCallRequest(SFPD, MsgLlamar);
						ShowPlayerDialogEx(playerid,56,DIALOG_STYLE_MSGBOX,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Gracias por reportar este incidente a la {F5FF00}SFPD", "Colgar", "");
					}
				}
				else
				{
					ShowReasonPolice(playerid);
					SendInfoMessage(playerid, 0, "1107", "La razón del reporte debe ser mayor de 6 y menor de 150 caracteres");
				}
		    }
		    else
		    {
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		// FIN POLICE
		case 56:
		{
			Acciones(playerid, 8, "guarda su móvil");
			SetPlayerColgar(playerid);
		}
		// Inicio Reportes
		case 57:
		{
   		    if ( response == 1 )
		    {
				if( CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
				{
                	ShowDetailsCall(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
					PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				}
				else
				{
					ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}Este reporte ya fue atendido por otro agente!", "Aceptar", "");
				}
		    }
	    }
	    case 58:
	    {
   		    if ( response == 1 )
		    {
				if( CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
				{
			        new PlayerIdRequest = GetNumberID(CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
				    if ( PlayerIdRequest != -1 )
				    {
					    new Float:PosCall[3];
						GetPlayerPos(PlayerIdRequest, PosCall[0], PosCall[1], PosCall[2]);
						SetPlayerCheckpoint(playerid, PosCall[0], PosCall[1], PosCall[2], 2.0);
						new MsgLlamar[MAX_TEXT_CHAT];
						format(MsgLlamar, sizeof(MsgLlamar), "Ha respondido un reporte policial, se le ha marcado en el mapa el lugar de los hechos! Número: %i.", CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
						SendInfoMessage(playerid, 3, "0", MsgLlamar);
					}
					else
					{
						ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}No se pudo rastrear ese reporte policial\nPuede que el móvil este apagado.", "Aceptar", "");
					}
					RemoveCall(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][NumberCallPublic]);
				}
				else
				{
					ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}Este reporte ya fue atendido por otro agente!", "Aceptar", "");
				}
			}
			else
			{
				ShowCallPolice(playerid);
			}
		}
	    case 59:
	    {
   		    if ( response == 1 )
		    {
				if( CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
				{
			        new PlayerIdRequest = GetNumberID(CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
				    if ( PlayerIdRequest != -1 )
				    {
					    new Float:PosCall[3];
						GetPlayerPos(PlayerIdRequest, PosCall[0], PosCall[1], PosCall[2]);
						SetPlayerCheckpoint(playerid, PosCall[0], PosCall[1], PosCall[2], 2.0);

						new MsgLlamar[MAX_TEXT_CHAT];
						new MsgLlamarToClient[MAX_TEXT_CHAT];
					    switch ( PlayersDataOnline[playerid][NumberCallPublic] )
					    {
							case 0:
							{
								format(MsgLlamar, sizeof(MsgLlamar), "Atendiste una llamada de un cliente, esta señalado en el mapa donde debe recogerlo! Número: %i.", CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
								format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Su petición de un taxí fue atendida! No se mueva de está posición, un taxí ya viene a recogerlo.");
							}
							case 1:
							{
								format(MsgLlamar, sizeof(MsgLlamar), "Contestasté la petición de cliente, está marcado en el mapa su posición! Número: %i.", CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
								format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un mecánico del taller en San Fierro atendió su llamada! No se mueva de está posición.");
							}
							case 2:
							{
								format(MsgLlamar, sizeof(MsgLlamar), "Contestasté la petición de cliente, está marcado en el mapa su posición! Número: %i.", CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
								format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un mecánico del taller en Los Santos atendió su llamada! No se mueva de está posición.");
							}
						}
						SendInfoMessage(playerid, 3, "0", MsgLlamar);
						SendInfoMessage(PlayerIdRequest, 3, "0", MsgLlamarToClient);
					}
					else
					{
						ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - Información", "{F0F0F0}No se pudo rastrear está llamada\nPuede que el móvil este apagado.", "Aceptar", "");
					}
					RemoveCallPublics(PlayersDataOnline[playerid][SaveAfterAgenda][listitem], PlayersDataOnline[playerid][NumberCallPublic]);
				}
				else
				{
					ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - Información", "{F0F0F0}Esa llamada ya fue atendidá por otro compañero de trabajo!", "Aceptar", "");
				}
			}
	    }
	    // Caminar
		case 60:
		{
   		    if ( response == 1 )
		    {
                PlayersData[playerid][MyStyleTalk] = listitem;
		    }
		}
	    // SMS - OPCIONES
	    case 61:
	    {
	        if ( response == 1 )
	        {
			    switch ( listitem )
			    {
			        // Leer
					case 0:
					{
						ShowReadSMS(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Responder
					case 1:
					{
						ShowReplySMS(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Llamar
					case 2:
					{
					    SetPlayerCall(playerid, SMS[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][Number]);
					}
					// Borrar
					case 3:
					{
						ShowRemoveSMS(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
	        }
	        else
	        {
				ShowSMSToPlayer(playerid);
			}
		}
		// SMS - OPCIÓN SELECCIONADA
		case 62:
		{
   		    if ( response == 1 )
		    {
				ShowSMSOptionsToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
				PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
		}
		// SMS - OPCIÓN LEER
		case 63:
		{
   		    if ( response == 0 )
		    {
				ShowSMSOptionsToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
			else
			{
		        Acciones(playerid, 8, "guarda su agenda");
			}
		}
		// SMS - OPCIÓN RESPONDER
		case 64:
		{
   		    if ( response == 1 )
		    {
				SendSMS(playerid, SMS[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][Number], inputtext);
			}
			else
			{
				ShowSMSOptionsToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// RESET SERVER
		case 65:
		{
   		    if ( response == 1 )
		    {
		        if ( strlen(inputtext) > 0 )
				{
					format(ReasonReset, sizeof(ReasonReset), "{00A5FF}Razón del reinicio: {00F50A}%s", inputtext);
				}
				else
				{
					format(ReasonReset, sizeof(ReasonReset), "{00A5FF}Razón del reinicio: {00F50A}[No especificada]");
				}
				ResetServer();
			}
		}
		// SMS BORRAR TODOS
		case 66:
		{
   		    if ( response == 1 )
		    {
                CleanSMS(playerid);
			}
			ShowHomeAgenda(playerid);
		}
		// DEAHT MATCH MODE WEAPON SELECT
		case 67:
		{
   		    if ( response == 1 )
		    {
		        if ( listitem < 19 )
		        {
					Reverse(WeaponEnableDM[listitem]);
					IsWeaponDmExist(listitem);
				}
				else
				{
					Reverse(WeaponEnableDM[listitem + 3]);
					IsWeaponDmExist(listitem + 3);
				}
				ShowMenuDMWeapon(playerid);
			}
		}
		// ShowGarages
		case 68:
		{
   		    if ( response == 1 )
		    {
				ShowDetailsGarage(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][10], PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
				PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
			}
		}
		// ShowDetailsGarage
		case 69:
		{
   		    if ( response == 1 )
		    {
                Reverse(Garages[PlayersDataOnline[playerid][SaveAfterAgenda][10]][PlayersDataOnline[playerid][SaveAfterAgenda][0]][DeletedG]);
			}
		}
		// ShowHouseFriends
		case 70:
		{
   		    if ( response == 1 )
		    {
			    if ( strlen(HouseFriends[PlayersDataOnline[playerid][SaveAfterAgenda][0]][listitem][Name]) > 2 )
			    {
				    new MsgHouseFriend[MAX_TEXT_CHAT];
				    format(MsgHouseFriend, sizeof(MsgHouseFriend), "Le quitaste las llaves de la casa a %s", HouseFriends[PlayersDataOnline[playerid][SaveAfterAgenda][0]][listitem][Name]);
			        if ( RemovePlayerHouseFriend(PlayersDataOnline[playerid][SaveAfterAgenda][0], listitem) )
					{
						SendInfoMessage(playerid, 3, "0", MsgHouseFriend);
					}
				}
				ShowHouseFriends(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		case 71:
		{
   		    if ( response == 1 )
		    {
                if ( DestroyFire(PlayersDataOnline[playerid][SaveAfterAgenda][listitem]) )
                {
					ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Incendios - Información", "{00F50A}Incendio eliminado correctamente.", "Aceptar", "");
				}
				else
				{
					ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Incendios - Información", "{F50000}Este incendio ya fue eliminado!", "Aceptar", "");
				}
			}
		}
		// Inicio SAMD
		case 72:
		{
   		    if ( response == 1 )
		    {
				ShowConnectedRequest(playerid);
		    }
		    else
		    {
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		// Solicito SAMD
		case 73:
		{
			PlayersDataOnline[playerid][NumberCallPublic] = response;
			if ( IsFoundCallSAMD(PlayersData[playerid][Phone], PlayersDataOnline[playerid][NumberCallPublic], PlayersDataOnline[playerid][SaveAfterAgenda][50]) == -1 )
			{
    			new MsgLlamar[MAX_TEXT_CHAT];
	   		    if ( response == 1 )
			    {
					if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de LSMD ha recibido una llamada solicitando médicos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, LSMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Médicos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}LSMD {F0F0F0}, enviaremos un médico los más pronto posible.", "Colgar", "");
					}
					else
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de SFMD ha recibido una llamada solicitando médicos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, SFMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Médicos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}SFMD {F0F0F0}, enviaremos un médico los más pronto posible.", "Colgar", "");
					}
			    }
			    else
			    {
					if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de LSMD ha recibido una llamada solicitando bomberos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, LSMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Bomberos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}LSMD {F0F0F0}, nuestro equipo de bomberos actuará rápidamente a su llamado.", "Colgar", "");
					}
					else
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de SFMD ha recibido una llamada solicitando bomberos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, SFMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Bomberos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}SFMD {F0F0F0}, nuestro equipo de bomberos actuará rápidamente a su llamado.", "Colgar", "");
					}
				}
				AddCallSAMD(PlayersDataOnline[playerid][SaveAfterAgenda][50], GetMyNearCity(playerid), PlayersData[playerid][Phone], response);
			}
			else
			{
			    if ( response )
			    {
					SendInfoMessage(playerid, 0, "1109", "Ya usted tiene regístrada una llamada en la central del hospital solicitando un médico, espere que le contesten");
				}
				else
				{
					SendInfoMessage(playerid, 0, "1517", "Ya usted tiene regístrada una llamada en la central del hospital solicitando un bombero, espere que le contesten");
				}
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		case 74:
		{
			Acciones(playerid, 8, "guarda su móvil");
			SetPlayerColgar(playerid);
		}
		case 75:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    case 0:
					{
						if( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number] )
						{
					        new PlayerIdRequest = GetNumberID(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
						    if ( PlayerIdRequest != -1 )
						    {
							    new Float:PosCall[3];
								GetPlayerPos(PlayerIdRequest, PosCall[0], PosCall[1], PosCall[2]);
								SetPlayerCheckpoint(playerid, PosCall[0], PosCall[1], PosCall[2], 2.0);

								new MsgLlamar[MAX_TEXT_CHAT];
								new MsgLlamarToClient[MAX_TEXT_CHAT];
							    if ( PlayersDataOnline[playerid][NumberCallPublic] )
							    {
									format(MsgLlamar, sizeof(MsgLlamar), "Atendíste una llamada de un paciente, esta señalado en el mapa donde debe atenderlo! Número: %i.", CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
							        if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							        {
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un médico atendió su llamada a LSMD! Resista, en un momento llegará!");
									}
									else
									{
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un médico atendió su llamada a SFMD! Resista, en un momento llegará!");
									}
								}
								else
								{
									format(MsgLlamar, sizeof(MsgLlamar), "Contestaste una llamada de emergencia a los bomberos, esta señalado en el mapa donde es el incidente! Número: %i.", CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
							        if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							        {
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Su petición de bomberos a LSMD fue atendida! No se mueva de está posición, ya vienen!");
									}
									else
									{
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Su petición de bomberos a SFMD fue atendida! No se mueva de está posición, ya vienen!");
									}
								}
								SendInfoMessage(playerid, 3, "0", MsgLlamar);
								SendInfoMessage(PlayerIdRequest, 3, "0", MsgLlamarToClient);
							}
							else
							{
								if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
								{
									ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}No se pudo rastrear está llamada\nPuede que el móvil este apagado.", "Aceptar", "");
								}
								else
								{
									ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}No se pudo rastrear está llamada\nPuede que el móvil este apagado.", "Aceptar", "");
								}
							}
							RemoveCallSAMD(PlayersDataOnline[playerid][SaveAfterAgenda][51], PlayersDataOnline[playerid][SaveAfterAgenda][50]);
						}
						else
						{
							if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "");
							}
							else
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "");
							}
						}
					}
					case 1:
					{
						if( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number] )
						{
							new MsgToTransfer[MAX_TEXT_CHAT];
						    if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							{
								AddCallSAMD( 0,
								             CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][City],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type]
											 );
								format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}Has transferido esta llamada a el departamenteo de {00F50A}SFMD");
								ShowPlayerDialogEx(playerid,140,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", MsgToTransfer, "Aceptar", "");
								format(MsgToTransfer, sizeof(MsgToTransfer), "%s ha transferido una llamada a SFMD. Número de la llamada %i.", PlayersDataOnline[playerid][NameOnlineFix], CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, LSMD);

								if ( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type] )
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de LSMD nos ha trasferido una llamada de médicos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								else
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de LSMD nos ha trasferido una llamada de bomberos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, SFMD);
							}
							else
							{
								AddCallSAMD( 1,
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][City],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type]);
								format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}Has transferido esta llamada a el departamenteo de {00F50A}LSMD");
								ShowPlayerDialogEx(playerid,140,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", MsgToTransfer, "Aceptar", "");
								format(MsgToTransfer, sizeof(MsgToTransfer), "%s ha transferido una llamada a . Número de la llamada %i.", PlayersDataOnline[playerid][NameOnlineFix], CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, SFMD);

								if ( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type] )
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de SFMD nos ha trasferido una llamada de médicos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								else
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de SFMD nos ha trasferido una llamada de bomberos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, LSMD);
							}
							RemoveCallSAMD(PlayersDataOnline[playerid][SaveAfterAgenda][51], PlayersDataOnline[playerid][SaveAfterAgenda][50]);
						}
						else
						{
							if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "Inicio");
							}
							else
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "Inicio");
							}
						}
					}
				}
			}
			else
			{
				ShowCallSAMD(playerid);
			}
		}
		case 76:
		{
   		    if ( response == 1 )
		    {
                ShowDialogBarra(playerid, listitem);
		    }
	    }
		case 77:
		{
   		    if ( response == 1 )
		    {
		        new IsBombNear = IsPlayerNearBomba(playerid, 250.0, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        if ( IsBombNear != -1 )
		        {
	                if ( ActivarBomba(IsBombNear, 20) )
	                {
						ShowPlayerDialogEx(playerid,78,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control Detonación", "{00F50A}Bomba detonada exitosamente!", "Aceptar", "Volver");
					}
					else
					{
						ShowPlayerDialogEx(playerid,78,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control Error", "{F50000}Error al detonar la bomba!\n Al parecer ya fue detonada por otro miembro!", "Aceptar", "Volver");
					}
            	}
				else
				{
					ShowPlayerDialogEx(playerid,78,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control Error", "{00F50A}Error de conexión con la bomba\n intente acercarse más a la misma para detonarla!", "Aceptar", "Volver");
				}
		    }
	    }
		case 78:
		{
   		    if ( response == 0 )
		    {
				ShowBombas(playerid);
		    }
	    }
		case 79:
		{
		    if ( IsTunnigContinue(playerid) )
		    {
	   		    if ( response == 1 )
			    {
			        new PlateV = strval(inputtext);
			        if ( PlateV >= 10000 && PlateV <= 999999 )
			        {
			            if ( !ExistPlate(PlateV) )
			            {
							new MsgMatriculaChanged[MAX_TEXT_CHAT];
							new LastPlate = DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula];

							PlayersData[playerid][TimeEquipo] = gettime() + 300;
							ChangeVehiclePlate(PlayersDataOnline[playerid][MyIDVehicleTunning], PlateV);

							format(MsgMatriculaChanged, sizeof(MsgMatriculaChanged), "Cambiaste la matrícula de éste vehículo de forma personalizada! Su nueva matrícula es: %i (La antigua: %i)", DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula], LastPlate);
						  	SendInfoMessage(playerid, 3, "0", MsgMatriculaChanged);

							PlayPlayerStreamSound(playerid, SOUND_TUNNING);
							ShowMenuForPlayer(TallerPrincipal, playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1314", "Ya existe un vehículo con esa matrícula, use otra.");
							ShowChangePlate(playerid);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1313", "El número de la matrícula debe estar comprendido entre 10000 y 999999 (Un número de 6 cifras)");
						ShowChangePlate(playerid);
					}
			    }
			    else
			    {
					new MsgMatriculaChanged[MAX_TEXT_CHAT];
					new LastPlate = DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula];

					PlayersData[playerid][TimeEquipo] = gettime() + 300;
					ChangeVehiclePlate(PlayersDataOnline[playerid][MyIDVehicleTunning], 0);

					format(MsgMatriculaChanged, sizeof(MsgMatriculaChanged), "Cambiaste la matrícula de éste vehículo de forma aleatoria! Su nueva matrícula es: %i (La antigua: %i)", DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula], LastPlate);
				  	SendInfoMessage(playerid, 3, "0", MsgMatriculaChanged);

					PlayPlayerStreamSound(playerid, SOUND_TUNNING);
					ShowMenuForPlayer(TallerPrincipal, playerid);
				}
			}
	    }
	    // ShowManejarCuentas(playerid)
		case 80:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    // Ver estadíasticas
				    case 0:
				    {
						new StatsBank[MAX_TEXT_CHAT];
						format(StatsBank, sizeof(StatsBank), "{00F50A}  ||  Cuenta de Ahorros  ||\n{E6E6E6}Balance: {00F50A}$%i\n\n{00F50A} ||  Cuenta de Cheques  ||\n{E6E6E6}Balance: {00F50A}$%i",
						PlayersData[playerid][Banco],
						Banking[playerid][Balance]
					    );
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Estadísticas",StatsBank, "Volver", "");
					}
				    // Transferir CORRIENTE -> CHEQUE
				    case 1:
				    {
						ShowPlayerDialogEx(playerid,82,DIALOG_STYLE_INPUT, "{00A5FF}Banco - Transferir a CUENTA DE CHEQUES", "{E6E6E6}Ingrese la cantidad que desea mover a su cuenta de {00F50A}CHEQUES", "Realizar", "Cancelar");
					}
				    // Transferir CHEQUE -> CORRIENTE
				    case 2:
				    {
						ShowPlayerDialogEx(playerid,83,DIALOG_STYLE_INPUT, "{00A5FF}Banco - Transferir a CUENTA AHORROS", "{E6E6E6}Ingrese la cantidad que desea mover a su cuenta de {00F50A}AHORROS", "Realizar", "Cancelar");
					}
				}
		    }
			else
			{
				ShowHomeBanco(playerid);
			}
		}
		case 81:
		{
			ShowManejarCuentas(playerid);
		}
	    // Transferir CORRIENTE -> CHEQUE
		case 82:
		{
   		    if ( response == 1 )
		    {
				new AmountT = strval(inputtext);
				if ( AmountT > 0 && AmountT <= 500000)
				{
				    if ( PlayersData[playerid][Banco] > AmountT )
				    {
				        PlayersData[playerid][Banco] -= AmountT;
				        Banking[playerid][Balance]	 += AmountT;

						new StatsBank[250];
						format(StatsBank, sizeof(StatsBank), "{E6E6E6}Se han transferido satisfactoriamente {00F50A}$%i {E6E6E6}a la cuenta de Cheques\n\n{E6E6E6}El nuevo balance en la cuenta de cheques es: {00F50A}$%i\n{E6E6E6}El nuevo balance en la cuenta de ahorros es: {00F50A}$%i",
						AmountT,
						Banking[playerid][Balance],
						PlayersData[playerid][Banco]
					    );
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia realizada",StatsBank, "Aceptar", "");
					}
					else
					{
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{F50000}No tienes fondos suficientes en la cuenta de ahorros para realizar está operación!", "Aceptar", "");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{F50000}La cantidad a transferir tiene que ser mayor de $0 y menor de $500000!", "Aceptar", "");
				}
		    }
		    else
		    {
				ShowManejarCuentas(playerid);
			}
		}
	    // Transferir CHEQUE -> CORRIENTE
		case 83:
		{
   		    if ( response == 1 )
		    {
				new AmountT = strval(inputtext);
				if ( AmountT > 0 && AmountT <= 500000)
				{
				    if ( Banking[playerid][Balance] > AmountT )
				    {
				        PlayersData[playerid][Banco] += AmountT;
				        Banking[playerid][Balance]	 -= AmountT;

						new StatsBank[250];
						format(StatsBank, sizeof(StatsBank), "{E6E6E6}Se han transferido satisfactoriamente {00F50A}$%i {E6E6E6}a la cuenta de Cheques\n\n{E6E6E6}El nuevo balance en la cuenta de ahorros es: {00F50A}$%i\n{E6E6E6}El nuevo balance en la cuenta de cheques es: {00F50A}$%i",
						AmountT,
						PlayersData[playerid][Banco],
						Banking[playerid][Balance]
					    );
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia realizada",StatsBank, "Aceptar", "");
					}
					else
					{
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{F50000}No tienes fondos suficientes en la cuenta de cheques para realizar está operación!", "Aceptar", "");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{00F50A}La cantidad a transferir tiene que ser mayor de $0 y menor de $500000!", "Aceptar", "");
				}
		    }
		    else
		    {
				ShowManejarCuentas(playerid);
			}
		}
		//  ShowVerCheques(playerid)
		case 84:
		{
   		    if ( response == 1 )
		    {
		 		if ( RemoveCheque(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]) )
		 		{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Cheque Eliminado", "{E6E6E6}Cheque cancelado con éxito!", "Aceptar", "Volver");
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Error", "{00F50A}El cheque que quiere cancelar, ya fue cobrado en estos instantes!", "Aceptar", "Volver");
				}
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowPayCheque(playerid)
		case 85:
		{
   		    if ( response == 1 )
		    {
				if ( PlayersData[playerid][Cartera][PlayersDataOnline[playerid][SaveAfterAgenda][listitem]] != CARTERA_TYPE_NADA && PlayersData[playerid][Cartera][PlayersDataOnline[playerid][SaveAfterAgenda][listitem]] == CARTERA_TYPE_CHEQUE)
				{
					PayCheckToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Error", "{00F50A}El cheque selecionado no existe!", "Aceptar", "Volver");
				}
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowBankConfiguration
		case 86:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    case 0:
				    {
				        ReverseEx(PlayersData[playerid][AlertSMSBank]);
				    }
				    case 1:
				    {
				        ReverseEx(Banking[playerid][LockIn]);
				    }
				    case 2:
				    {
				        ReverseEx(Banking[playerid][LockOut]);
				    }
				}
				ShowBankConfiguration(playerid);
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowBankTransferencia
		case 87:
		{
   		    if ( response == 1 )
		    {
				PlayersDataOnline[playerid][SaveAfterAgenda][0] = strval(inputtext);
				if ( PlayersDataOnline[playerid][SaveAfterAgenda][0] != PlayersData[playerid][AccountBankingOpen] )
				{
				    if ( PlayersDataOnline[playerid][SaveAfterAgenda][0] > 9000 )
				    {
						ShowBankTransferenciaCantidad(playerid);
					}
					else
					{
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El número de cuenta insertada es inválida!", "Aceptar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}No puede transferir dinero a su misma cuenta!", "Aceptar", "Volver");
				}
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowBankTransferenciaCantidad
		case 88:
		{
   		    if ( response == 1 )
		    {
				PlayersDataOnline[playerid][SaveAfterAgenda][1] = strval(inputtext);
				if ( PlayersDataOnline[playerid][SaveAfterAgenda][1] > 0 && PlayersDataOnline[playerid][SaveAfterAgenda][1] < 500000 )
				{
					ShowBankTransferenciaResumen(playerid);
				}
				else
				{
					ShowPlayerDialogEx(playerid,88,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Elegir Cantidad", "{F0F0F0}Ingrese la cantidad de dinero que desea transferir\n\n{F50000}La cantidad debe ser mayor de $0 y menor de $500000", "Siguiente", "Atrás");
				}
		    }
		    else
		    {
			    ShowBankTransferencia(playerid);
			}
	    }
		// ShowBankTransferenciaResumen
		case 89:
		{
   		    if ( response == 1 )
		    {
				TransferirMoney(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
			    ShowBankTransferenciaCantidad(playerid);
			}
	    }
		// Recuperación de contraseña
		case 90:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) <= 60)
				{
				    IsValidEmail(playerid, inputtext);
					//ShowPlayerDialogEx(playerid, 93, DIALOG_STYLE_MSGBOX, "{00A5FF}Validando E-mail...", "{F0F0F0}Porfavor espere mientras se valida su E-mail...", "Espere...", "");
				}
				else
				{
					ShowPlayerEmailChange(playerid, false);
					SendInfoMessage(playerid, 0, "1376", "El E-mail debe contener menos de 60 carácteres");
				}
		    }
		    else
		    {
		    	ShowDialogAccount(playerid);
			}
	    }
		// Comprobación de E-mail
		case 91:
		{
   		    if ( response == 1 )
		    {
		        if ( strcmp(PlayersData[playerid][Email], inputtext, true) == 0 && strlen(inputtext) ==  strlen(PlayersData[playerid][Email]))
		        {
					ShowPlayerDialogEx(playerid, 92, DIALOG_STYLE_MSGBOX, "{00A5FF}Enviando E-mail", "{F0F0F0}Porfavor espere mientras se procesa su solicitud...", "Espere...", "");
					SendRequestPasswordRecovery(playerid);
		        }
		        else
		        {
					SendInfoMessage(playerid, 0, "1375", "El E-mail introducido no coincide con el que se encuentra en su configuración.");
					ShowPlayerVerifiquedEmail(playerid, false);
				}
		    }
		    else
		    {
				ShowPlayerLogin(playerid, true);
			}
		}
		// Comprobación de E-mail
		case 92:
		{
			ShowPlayerDialogEx(playerid, 92, DIALOG_STYLE_MSGBOX, "{00A5FF}Enviando E-mail...", "{F0F0F0}Porfavor espere mientras se procesa su solicitud...", "Espere...", "");
		}
		// Validación del E-mail
		case 93:
		{
			//ShowPlayerDialogEx(playerid, 93, DIALOG_STYLE_MSGBOX, "{00A5FF}Validando E-mail...", "{F0F0F0}Porfavor espere mientras se valida su E-mail...", "Espere...", "");
		}
		// Error para Pistas, Informaciones y Otros
		case 94:
		{
   		    if ( response == 0 )
		    {
				ShowEditorPistas(playerid);
		    }
		}
		// ShowEditorPistas
		case 95:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Nueva Pista
		            case 0:
		            {
                        ShowNewPista(playerid);
					}
					// Lista de Pistas
		            case 1:
		            {
						ShowListPistas(playerid);
					}
				}
		    }
		}
		// ShowNewPista
		case 96:
		{
   		    if ( response == 1 )
		    {
			    if ( strlen(inputtext) > 2 )
			    {
					ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Pista Creada", "{00F50A}La pista a sido creada correctamente!", "Aceptar", "Inicio");
				    Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Valid]	= true;
				    Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Lock]	= true;
			    	format(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista], 35, "%s", inputtext);
				}
				else
				{
                    ShowNewPista(playerid);
					SendInfoMessage(playerid, 0, "1427", "El nombre de la pista debe ser mayor de 2 caracteres!");
				}
		    }
		    else
		    {
				ShowEditorPistas(playerid);
			}
		}
		// ShowListPistas
		case 97:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		    }
		    else
		    {
				ShowEditorPistas(playerid);
			}
		}
		// ShowListPistasOptions
		case 98:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Modificar Nombre
		            case 0:
		            {
						ShowPistaChangeName(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
		            // Ver CheckPoints
		            case 1:
		            {
						ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CarPoints
		            case 2:
		            {
						ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CarPointsExit
		            case 3:
		            {
						ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CamPoints
		            case 4:
		            {
						ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CheckPoints
		            case 5:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagPos]);
						ShowOrHideTagPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CarPoints
		            case 6:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagPlayers]);
						ShowOrHideTagPistaPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CarPointsExit
		            case 7:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagCarPointsExit]);
						ShowOrHideTagPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CamPoints
		            case 8:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagCamPoints]);
						ShowOrHideTagPistaCam(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Validar
		            case 9:
		            {
						ShowPistaValidar(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Interior
		            case 10:
		            {
                    	Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior] = GetPlayerInteriorEx(playerid);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mundo
		            case 11:
		            {
                    	Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World] = GetPlayerVirtualWorld(playerid);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Bloquear/Desbloquear
		            case 12:
		            {
	                    ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Lock]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Cámaras
		            case 13:
		            {
	                    ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][IsCameras]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Eliminar
		            case 14:
					{
						ShowPistaRemove(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
			}
			else
			{
				ShowListPistas(playerid);
			}
		}
		// ShowPistaChangeName
		case 99:
		{
   		    if ( response == 1 )
		    {
			    if ( strlen(inputtext) > 2 )
			    {
			    	format(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista], 35, "%s", inputtext);
					ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
				}
				else
				{
                    ShowPistaChangeName(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					SendInfoMessage(playerid, 0, "1429", "El nombre de la pista debe ser mayor de 2 caracteres!");
				}
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowCheckPoints
		case 100:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowPosPlayers
		case 101:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowCheckPointsOptions
		case 102:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Ir
					case 1:
					{
					    if ( PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
					    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								SetPlayerPos(playerid, PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
							else
							{
							    new VehicleID = GetPlayerVehicleID(playerid);
								SetVehiclePos(VehicleID, PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
						    ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1430", "El CheckPoint selecionado no existe");
		                    ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Editar
					case 2:
					{
					    CreatePistaPos(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]); /// Aquí :D
						ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Borrar
					case 3:
					{
                        CleanPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mover
					case 4:
					{
						ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		        }
		    }
		    else
		    {
				ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowPosPlayersOptions
		case 103:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Ir
					case 1:
					{
					    if ( PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
					    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								SetPlayerPos(playerid, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetPlayerFacingAngle(playerid, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
							else
							{
							    new VehicleID = GetPlayerVehicleID(playerid);
								SetVehiclePos(VehicleID, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetVehicleZAngle(VehicleID, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
						    ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1431", "El CarPointExit seleccionado no existe");
		                    ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Editar
					case 2:
					{
					    CreatePistaPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Borrar
					case 3:
					{
                        CleanPistaPosPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mover
					case 4:
					{
						ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		        }
		    }
		    else
		    {
				ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaRemove
		case 104:
		{
   		    if ( response == 1 )
		    {
				ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Pista Elimnada", "{E6E6E6}Pista eliminada correctamente", "Aceptar", "Inicio");
		    	CleanPista(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaValidar
		case 105:
		{
			ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		}
		// ShowPistaShowCarPointsExit
		case 106:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaCarPointsExitOptions
		case 107:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Ir
					case 1:
					{
					    if ( PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
					    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								SetPlayerPos(playerid, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetPlayerFacingAngle(playerid, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
							else
							{
							    new VehicleID = GetPlayerVehicleID(playerid);
								SetVehiclePos(VehicleID, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetVehicleZAngle(VehicleID, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
						    ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1316", "El CarPointExit seleccionado no existe");
		                    ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Editar
					case 2:
					{
					    CreatePistaCarPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Borrar
					case 3:
					{
                        CleanPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mover
					case 4:
					{
						ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		        }
		    }
		    else
		    {
				ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// Errores y Informaciones de ShowPistas
		case 108:
		{
			if ( response == 0 )
		    {
				ShowPistas(playerid);
			}
		}
		// ShowPistas
		case 109:
		{
			if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistasOptions
		case 110:
		{
			if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Vueltas
					case 1:
					{
						ShowPistasSelectVueltas(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Competidores
					case 2:
					{
                         ShowPistasSelectCompetidores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Guardar Record
					case 3:
					{
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][SaveRecord]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Conteo
					case 4:
					{
						ShowPistasSelectConteo(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Tiempo antes de empezar
					case 5:
					{
						ShowPistasSelectTiempoAntes(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Radio Checkpoints
					case 6:
					{
						ShowPistasSelectRadio(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Tipo
					case 7:
					{
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Tipo]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Estado
					case 8:
					{
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][EstadoR]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Coches Permitidos
					case 9:
					{
						ShowPistasCochesPermitidos(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Al Revés
					case 10:
					{

						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][AlReves]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Indestructible
					case 11:
					{

						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Repair]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CheckPointFinal
					case 12:
					{
						ShowPistaSelectCheckPoint(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Unir un Jugador
					case 13:
					{
						ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Ver Jugadores
					case 14:
					{
						ShowPistasVerJugadores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Detener Carrera!
					case 15:
					{
					    new PistasDialogName[MAX_TEXT_CHAT];
					    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Error)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
						if ( CancelRace(PlayersDataOnline[playerid][SaveAfterAgenda][0]) )
						{
							ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{00F50A}Carrera detenida con éxito!", "Aceptar", "Volver");

						    new PistasDialogText[MAX_TEXT_CHAT];
						    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}La carrera ha sido detenida por un organizador.");
							SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
						}
						else
						{
							ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{F50000}Esta carrera no ha iniciado, no necesita detenerla", "Aceptar", "Volver");
						}
					}
					// Comenzar Carrera!
					case 16:
					{
						ShowPistasComenzar(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
			}
			else
			{
			    ShowPistas(playerid);
			}
		}
		// ShowPistasSelectVueltas
		case 111:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Vueltas] = listitem + 1;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasSelectCompetidores
		case 112:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Competidores] = listitem;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasSelectConteo
		case 113:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ConteoR] = listitem + 1;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasSelectTiempoAntes
		case 114:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][TiempoAntes] = (listitem + 1)* 5;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasCochesPermitidos
		case 115:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][CochesP] = listitem;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasVerJugadores
		case 116:
		{
			if ( response == 1 )
		    {
         		PlayersDataOnline[playerid][SaveAfterAgenda][1] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][59];
         		ShowPistasVerJugadoresOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][59];
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// ShowPistaPlayerPublics
		case 117:
		{
			if ( response == 1 )
		    {
	          	PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
			    new PistaNear = GetNextCheckPoint(PlayersDataOnline[playerid][SaveAfterAgenda][0], Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][MaxPP], false);
				if( IsPlayerInRangeOfPoint(playerid, 150.0,
						 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Xpos],
						 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Ypos],
						 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Zpos]) )
				{
			        switch ( AddPlayerToRace(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], false) )
			        {
			            // Ya inicio o canceló
			            case 0:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera a la que deseabas unirte, ya comenzó!\n\n{E6E6E6}Demasiado tarde...", "Ok", "");
						}
			            // Es privada la carrera
			            case 1:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera que deseabas unirte, la cambiarón a privada!", "Ok", "");
						}
						// No está en un coche
			            case 2:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}Suba a su coche para poder unirte a la carrera!", "Ok", "");
						}
						// No tiene el modelo adecuado para la carrera
			            case 3:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}El modelo de su vehículo no está permitido en la carrera", "Ok", "");
						}
						// La carrera alcanzó el número máximo de jugadores
			            case 4:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera se ha llenado de concursantes!\n\n{E6E6E6}Demasiado tarde...", "Ok", "");
						}
						// Máximo de jugadores alcanzados
						case 6:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera se ha llenado de concursantes!\n\n{E6E6E6}Demasiado tarde...", "Ok", "");
						}
						// Ya se encuentra en una carrera
						case 7:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}Ya te encuentras en una cerrara, debes finalizar esta para ingresar en otra", "Ok", "");
						}
						// El jugador no se encuentra en el puesto de conductor
						case 8:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No te encuentras en el puesto de conductor", "Ok", "");
						}
						// Vehículo usado
						case 9:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}Éste vehículo se encuentra usado por una carrera", "Ok", "");
						}
						// Ok, agregado correctamente
			            case 5:
			            {
						    new PistasDialogName[MAX_TEXT_CHAT];
						    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Carreras - %s (Unido)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
						    new PistasDialogText[MAX_TEXT_CHAT];
						    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}Te has unido con éxito a la carrera!");
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Ok", "");
						    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}%s{00F50A} se ha unido a la carrera.", PlayersDataOnline[playerid][NameOnlineFix]);
							SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
						}
					}
                }
                else
                {
					ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No te encuentras cerca de la carrera!", "Ok", "");
				}
		    }
	    }
		// ShowPistasUnirJugador
		case 118:
		{
			if ( response == 1 )
		    {
			    if ( Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Used] == RACE_STATE_ESPERANDO )
			    {
    				new PlayerIDAdd = strval(inputtext);
    				if ( IsPlayerConnected(PlayerIDAdd) )
    				{
    				    new PistaNear = GetNextCheckPoint(PlayersDataOnline[playerid][SaveAfterAgenda][0], Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][MaxPP], false);
						if( IsPlayerInRangeOfPoint(PlayerIDAdd, 150.0,
								 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Xpos],
								 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Ypos],
 								 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Zpos]) )
						{
						    if ( PlayersDataOnline[PlayerIDAdd][State] == 3 )
						    {
						        switch ( AddPlayerToRace(PlayerIDAdd, PlayersDataOnline[playerid][SaveAfterAgenda][0], true) )
						        {
						            // Ya inicio o canceló
						            case 0:
						            {


									}
						            // Es privada la carrera
						            case 1:
						            {

									}
									// No está en un coche
						            case 2:
						            {
										SendInfoMessage(playerid, 0, "1435", "El Jugador que desea agregar a la carrera no se encuentra en un vehículo.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// No tiene el modelo adecuado para la carrera
						            case 3:
						            {
										SendInfoMessage(playerid, 0, "1436", "El Jugador que desea agregar a la carrera no tiene un modelo de coche aceptado por esta carrera.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// La carrera alcanzó el número máximo de jugadores
						            case 4:
						            {
										SendInfoMessage(playerid, 0, "1437", "Esta pista ya alcanzó el máximo de jugadores.");
										ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Carrera llena de jugadores
									case 6:
									{
										SendInfoMessage(playerid, 0, "1442", "Esta pista ya alcanzó el máximo de jugadores.");
										ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Ya se encuentra en una carrera
									case 7:
									{
										SendInfoMessage(playerid, 0, "1443", "El jugador que deseas agregar a la carrera ya se encuentra en una.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// El jugador no se encuentra en el puesto de conductor
									case 8:
									{
										SendInfoMessage(playerid, 0, "1448", "El jugador no se encuentra en el puesto de conductor.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Vehículo usado
									case 9:
									{
										SendInfoMessage(playerid, 0, "1447", "El coche en el que está el jugador se encuentra en uso para una carrera");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Ok, agregado correctamente
						            case 5:
						            {
									    new PistasDialogName[MAX_TEXT_CHAT];
									    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Agregado)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
									    new PistasDialogText[MAX_TEXT_CHAT];
									    if ( PlayerIDAdd != playerid )
									    {
										    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}Has agregado a {F5FF00}%s[%i]{00F50A} con éxito a la carrera.", PlayersDataOnline[PlayerIDAdd][NameOnlineFix], PlayerIDAdd);
											ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
										    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}{F5FF00}%s{00F50A} te ha agregado a una carrera.", PlayersDataOnline[playerid][NameOnlineFix]);
											ShowPlayerDialogEx(PlayerIDAdd,999,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Ok", "");
										}
										else
										{

											ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{00F50A}Te has agregado a la carrera con éxito", "Aceptar", "Volver");
										}
									    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}%s{00F50A} ha sido agregado a la carrera por {F5FF00}%s.", PlayersDataOnline[PlayerIDAdd][NameOnlineFix], PlayersDataOnline[playerid][NameOnlineFix]);
										SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
									}
								}
	                    	}
	                    	else
	                    	{
								SendInfoMessage(playerid, 0, "1438", "El Jugador que desea agregar a la carrera no se encuentra logueado.");
								ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
							}
	                    }
	                    else
	                    {
							SendInfoMessage(playerid, 0, "1439", "El Jugador que desea agregar a la carrera no se encuentra cerca de la misma.");
							ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1440", "El Jugador que desea agregar a la carrera no se encuentra conectado.");
						ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,108,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{F50000}La pista actual ya no acepta más jugadores", "Aceptar", "Volver");
				}
		    }
		    else
		    {
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// ShowPistasVerJugadoresOptions
		case 119:
		{
			if ( response == 1 )
		    {
		        switch ( listitem )
		        {
					// Enviar un mensaje
		            case 0:
		            {
			            ShowPistasVerJugadoresOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Expulsar
		            case 1:
		            {
		                if ( IsPlayerConnected(PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]) )
		                {
						    new PistasDialogName[MAX_TEXT_CHAT];
						    new PistasDialogText[MAX_TEXT_CHAT];
						    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Expulsado)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
							if ( PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR] != -1)
							{
								if ( PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR] != playerid )
								{
								    format(PistasDialogText, sizeof(PistasDialogText), "{F50000}Usted fue expulsado de la carrera por {F5FF00}%s[%i] {F50000}.", PlayersDataOnline[playerid][NameOnlineFix], playerid);
									ShowPlayerDialogEx(PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR],999,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
								    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}El jugador {F5FF00}%s[%i] {00F50A}fue expulsado con éxito de la carrera.", PlayersDataOnline[PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]][NameOnlineFix], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]);
								}
								else
								{
								    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}Te has salido de la carrera con éxito!");
								}
								ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
								format(PistasDialogText, sizeof(PistasDialogText), "{F50000}El jugador {00F50A}%s {F50000}fue expulsado de la carrera por {F5FF00}%s.",
								PlayersDataOnline[PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]][NameOnlineFix], PlayersDataOnline[playerid][NameOnlineFix]);
								SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
								RemovePlayerToRace(PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR], true, true, STATE_RACE_EXIT_EXPULSADO);
							}
							else
							{
							    format(PistasDialogText, sizeof(PistasDialogText), "{F50000}El jugador {F5FF00}%s[%i] {F50000} ya no se encuentra en la carrera.", PlayersDataOnline[PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]][NameOnlineFix], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]);
								ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1441", "El Jugador que desea expulsar de la carrera se ha desconectado.");
						    ShowPistasVerJugadores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
				}
		    }
		    else
		    {
			    ShowPistasVerJugadores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// Errores y Informaciones de ShowPistas II
  		case 120:
		{
			if ( response == 0 )
		    {
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaSelectCheckPoint
		case 121:
		{
			if ( response == 1 )
		    {
     			Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][59]][CheckPointFinal] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
	    	}
	    	PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][59];
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		}
		// ShowPistasSelectRadio
		case 122:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Radio] = (listitem + 1)* 2;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistaShowCam
		case 123:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaCamOptions
		case 124:
		{
   		    if ( response == 1 )
		    {
		        if ( !Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Used] )
		        {
			        switch ( listitem )
			        {
			            // INFO NADA
						case 0:
						{
							ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
						// Ir
						case 1:
						{
						    if ( PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
						    {
							    if ( !IsPlayerInAnyVehicle(playerid) )
							    {
									SetPlayerPos(playerid, PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
									SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
									SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
								}
								else
								{
								    new VehicleID = GetPlayerVehicleID(playerid);
									SetVehiclePos(VehicleID, PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
									LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
									SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

									SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
									SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
								}
							    ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
							}
							else
							{
								SendInfoMessage(playerid, 0, "520", "El CameraPoint seleccionado no existe");
			                    ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
							}
						}
						// Editar
						case 2:
						{
						    CreatePistaCameras(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
						// Velocidad
						case 3:
						{
                        	ShowPistasSelectVelocidad(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
						// Borrar
						case 4:
						{
	                        CleanPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						// Mover
						case 5:
						{
							ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
			        }
		        }
				else
				{
					ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
				}
		    }
		    else
		    {
				ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistasSelectVelocidad
		case 125:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // 0.1
					case 0:
					{
						PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = 0.1;
						UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		            // 0.01
					case 1:
					{
						PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = 0.01;
						UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		            // 0.001
					case 2:
					{
						PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = 0.001;
						UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		            // A gusto
					case 3:
					{
					    new PistasDialogName[MAX_TEXT_CHAT];
					    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (Velocidad)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
						ShowPlayerDialogEx(playerid,126,DIALOG_STYLE_INPUT, PistasDialogName, "{F0F0F0}Ingrese la nueva velocidad que desea para este CameraPoint", "Modificar", "Volver");
					}
				}
			}
			else
			{
				ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
			}
		}
		// Escoger Velocidad CamerasPoints
		case 126:
		{
   		    if ( response == 1 )
		    {
		        if ( floatstr(inputtext) > 0.0 && floatstr(inputtext) < 10.0 )
		        {
			        PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = floatstr(inputtext);
					UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					ShowPistasSelectVelocidad(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1450", "La velocidad debe ser mayor de 0.0 y menor de 10.0");
				    new PistasDialogName[MAX_TEXT_CHAT];
				    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (Velocidad)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
					ShowPlayerDialogEx(playerid,126,DIALOG_STYLE_LIST, PistasDialogName, "{F0F0F0}Ingrese la nueva velocidad que desea para este CameraPoint", "Modificar", "Volver");
				}
		    }
		    else
		    {
		        ShowPistasSelectVelocidad(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
			}
		}
		// ShowHomeAgendaOptions
		case 127:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Llamar
					case 0:
					{
		                if ( !SetPlayerCall(playerid, AgendaData[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][NumberC]) )
		                {
							ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Enviar SMS
					case 1:
					{
						ShowSendSMSAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Bloquear Desbloquear
					case 2:
					{
                        ReverseEx(AgendaData[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][IsBlackList]);
                        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);

					}
					// Elimniar
					case 3:
					{
						RemoveNumberToAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowContactosAgenda(playerid);
					}
				}
			}
			else
			{
				ShowContactosAgenda(playerid);
			}
		}
		// Enviar SMS (Dialog)
		case 128:
		{
   		    if ( response == 1 )
		    {
			    if ( SendSMS(playerid, AgendaData[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][NumberC], inputtext) )
			    {
			        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
				}
				else
				{
				    ShowSendSMSAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
				}
			}
			else
			{
		        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// ShowBuscarAgenda
		case 129:
		{
   		    if ( response == 1 )
		    {
		        if ( strlen(inputtext) )
		        {
	        		ShowBuscarResultAgenda(playerid, inputtext);
        		}
        		else
        		{
					SendInfoMessage(playerid, 0, "1452", "El contenido de la busqueda debe ser mínimo 1 caracter!");
			        ShowBuscarAgenda(playerid);
				}
        	}
        	else
        	{
	        	ShowHomeAgenda(playerid);
			}
	    }
		// ShowBuscarResultAgenda
		case 130:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
	        	ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
        	}
        	else
        	{
	        	ShowHomeAgenda(playerid);
			}
	    }
		// ShowMenuDescription
		case 131:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Estado Estática
					case 0:
					{
                        ShowMenuDescription(playerid);
					}
		            // Estado Personalizada
					case 1:
					{
                        ShowMenuDescription(playerid);
					}
		            // Usando
		            case 2:
		            {
		                if ( GetPlayerScore(playerid) >= 10 )
		                {
							ReverseEx(PlayersData[playerid][DescriptionSelect]);
							AddPlayerDescription(playerid, true);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1454", "No puedes cambiar a modo personalizado siendo menor de nivel 10.");
						}
                        ShowMenuDescription(playerid);
					}
		            // Cambiar Estática
					case 3:
					{
						ShowMenuDescriptionChange(playerid);
					}
		            // Cambiar Personalizada
					case 4:
					{
					    if ( GetPlayerScore(playerid) >= 10 )
					    {
							ShowMenuDescriptionChangePer(playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1453", "Tienes que ser mayor o igual que nivel 10 para utilizar descripciones personalizadas.");
						}
					}
		            // Habilitada/Deshabilitada
					case 5:
					{
						ReverseEx(PlayersData[playerid][EnableDescription]);
						if ( PlayersData[playerid][EnableDescription] )
						{
						    AddPlayerDescription(playerid, false);
						}
						else
						{
							RemovePlayerDescription(playerid, true, true);
						}
						ShowMenuDescription(playerid);
					}
				}
        	}
	    }
		// ShowMenuDescriptionChange
		case 132:
		{
   		    if ( response == 1 )
		    {
	        	PlayersData[playerid][Description] = listitem;
				AddPlayerDescription(playerid, true);
		    }
			ShowMenuDescription(playerid);
		}
		// ShowMenuDescriptionChangePer
		case 133:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Color
					case 0:
					{
                        ShowMenuDescriptionChangeColors(playerid);
					}
		            // Texto
					case 1:
					{
                        ShowMenuDescriptionChangeText(playerid);
					}
				}
			}
			else
			{
				ShowMenuDescription(playerid);
			}
		}
		// ShowMenuDescriptionChangeColors
		case 134:
		{
   		    if ( response == 1 )
		    {
		        PlayersData[playerid][DescriptionColor] = listitem;
				AddPlayerDescription(playerid, true);
		    }
		    ShowMenuDescriptionChangePer(playerid);

		}
		// ShowMenuDescriptionChangeText
		case 135:
		{
   		    if ( response == 1 )
		    {
		        if ( strlen(inputtext) > 2 )
		        {
		            if ( IsValidStringServerOther(playerid, inputtext) )
		            {
						format(PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION, inputtext);
						AddPlayerDescription(playerid, true);
				    	ShowMenuDescriptionChangePer(playerid);
					}
					else
					{
				    	ShowMenuDescriptionChangeText(playerid);
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1455", "El estado debe ser mayor de dos caracteres!");
			    	ShowMenuDescriptionChangeText(playerid);
		    	}
		    }
		    else
		    {
		    	ShowMenuDescriptionChangePer(playerid);
	    	}
		}
		// ShowDudasDialog
		case 136:
		{
   		    if ( response == 1 )
		    {
			    if ( CanalDudas )
			    {
			        if ( strlen(inputtext) > 2 )
			        {
						new MsgDudaForAdmins[MAX_TEXT_CHAT];
						new MsgForUser[MAX_TEXT_CHAT];
						format(MsgForUser, sizeof(MsgForUser), "Enviaste una duda a la administración: %s", inputtext);
						format(MsgDudaForAdmins, sizeof(MsgDudaForAdmins), "[Dudas] %s[%i]: %s",PlayersDataOnline[playerid][NameOnlineFix], playerid,inputtext);
						SendInfoMessage(playerid, 2, "0", MsgForUser);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && (PlayersData[i][Admin] || PlayersData[i][Ayudante]) )
							{
							    SendClientMessage(i, COLOR_DUDAS, MsgDudaForAdmins);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1486", "Porfavor no deje el campo duda vacío!");
				    	ShowDudasDialog(playerid);
			    	}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1487", "El canal /Duda se encuentra cerrado.");
				}
		  	}
		}
		// ShowAlarmas
		case 137:
		{
   		    if ( response == 1 )
		    {
		   	    if ( RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR] )
			    {
					SendInfoMessage(playerid, 2, "0", "Se ha marcado en el mapa el local donde suena la alarma.");
					SetPlayerCheckpoint(playerid, NegociosData[RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR]][PosOutX],
												  NegociosData[RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR]][PosOutY],
												  NegociosData[RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR]][PosOutZ], 1.0);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1500", "Ya esa alarma no se encuentra desactivada!");
				}
		  	}
		}
		// Cerrar servidor
		case 138:
		{
   		    if ( response == 1 )
		    {
		        new ReasonClose[256];
		        if ( strlen(inputtext) > 0 )
				{
					format(ReasonClose, sizeof(ReasonClose), "{00A5FF}Razón por la que se cerró: {00F50A}%s", inputtext);
				}
				else
				{
					format(ReasonClose, sizeof(ReasonClose), "{00A5FF}Razón por la que se cerró: {00F50A}[No especificada]");
				}
				SendClientMessageToAll(COLOR_MESSAGES[2], "{F50000}ATENCIÓN: {00F50A}Hemos cerrado el servidor, {F50000}Recuerde visitar nuestro web site en: {00F50A}"WEBPAGE"!");
				SendClientMessageToAll(COLOR_MESSAGES[2], ReasonClose);
			   	SendClientMessageToAll(0x000000FF, " ");
				SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Saludos Cordiales,");
				SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Equipo de Old Player.");
				GameTextForAll( "~R~Servidor Cerrado...", 6000, 0);
				SendRconCommand("exit");
			}
		}
		// ShowCallSAMD
		case 139:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][51] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
				{
					ShowPlayerDialogEx(playerid,75,DIALOG_STYLE_LIST,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}Atender llamada\r\n{F0F0F0}Transferir a {F5FF00}-->> {00F50A}SFMD", "Seleccionar", "Volver");
				}
				else
				{
					ShowPlayerDialogEx(playerid,75,DIALOG_STYLE_LIST,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}Atender llamada\r\n{F0F0F0}Transferir a {F5FF00}-->> {00F50A}LSMD", "Seleccionar", "Volver");
				}
			}
		}
		// ShowCallSAMD
		case 140:
		{
   		    if ( response == 0 )
		    {
				ShowCallSAMD(playerid);
			}
		}
		// ShowStations - Casa
		case 141:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersData[playerid][IsPlayerInHouse] )
		        {
		            // Stop Music
					if (!listitem)
					{
					    HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID] = -1;
					    StopMusicOnHouse(PlayersData[playerid][IsPlayerInHouse]);
					}
					else
					{
					    HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID] = listitem - 1;
					   	ChangeMusicOnHouse(PlayersData[playerid][IsPlayerInHouse]);
					}
					ShowStations(playerid, HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID], 1);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1531", "Ya no te encuentras dentro de la casa!");
				}
			}
		}
		// ShowStations - Coche
		case 143:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersDataOnline[playerid][InCarId] )
		        {
		            // Stop Music
					if (!listitem)
					{
					    DataCars[PlayersDataOnline[playerid][InCarId]][StationID] = -1;
					    StopMusicOnVehicle(PlayersDataOnline[playerid][InCarId]);
					}
					else
					{
					    DataCars[PlayersDataOnline[playerid][InCarId]][StationID] = listitem - 1;
					   	ChangeMusicOnVehicle(PlayersDataOnline[playerid][InCarId]);
					}
					ShowStations(playerid, DataCars[PlayersDataOnline[playerid][InCarId]][StationID], 0);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1533", "Suba al vehículo al asiento de conductor y luego use /Estéreo");
				}
			}
		}
		// SetPlayerSelectedTypeHair || NextHairSelect
		case 147:
		{
		    if ( response == 1 )
		    {
                NextHairSelect(playerid);
			}
			else
			{
			    UpdateSpawnPlayer(playerid);
				PlayersDataOnline[playerid][StateDeath] = true;
			    SpawnPlayerEx(playerid);
				PlayersDataOnline[playerid][Spawn]      = true;
				TogglePlayerControllableEx(playerid, 1);
				SetSpawnInfoEx(playerid);
			}
		}
		// ShowObjectos
		case 148:
		{
		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][10] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				ShowObjetosOpciones(playerid);
			}
		}
		// ShowObjetosOpciones
		case 149:
		{
			if ( response == 1 )
			{
				switch ( listitem )
				{
				    // Dar
				    case 0:
				    {
				        ShowDarObjeto(playerid);
				    }
			        // Dejar
				    case 1:
				    {
				        ShowDejarObjeto(playerid);
				    }
				    // Tirar
				    case 2:
				    {
                        new MsgTirarObjetos[MAX_TEXT_CHAT];
						format(MsgTirarObjetos, sizeof(MsgTirarObjetos), "tira %s al suelo", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
				        Acciones(playerid, 8, MsgTirarObjetos);
						RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
						ShowObjectos(playerid);
				    }
				    // Sacar y Mostrar
				    case 3:
				    {
				        if ( !ObjectsVisibleOrInvisible[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])] )
				        {
				            if ( AllowForItSkin(PlayersData[playerid][Skin], GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])) )
				            {
								ReverseEx(PlayersData[playerid][ObjetosVision][PlayersDataOnline[playerid][SaveAfterAgenda][10]]);
								if ( !PlayersData[playerid][ObjetosVision][PlayersDataOnline[playerid][SaveAfterAgenda][10]] )
								{
									SetObjectHoldToPlayer(playerid, PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]], PlayersDataOnline[playerid][SaveAfterAgenda][10]);
								}
								else
								{
									RemovePlayerAttachedObject(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1563", "No puedes mostrar éste objeto con éste skin!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1549", "No puedes guardar ni sacar éste objeto!");
						}
						ShowObjetosOpciones(playerid);
				    }
				}
			}
			else
			{
			    ShowObjectos(playerid);
			}
		}
		// ShowDarObjeto
		case 150:
		{
			if ( response == 1 )
			{
			    new SaveIDGive = strval(inputtext);
			    if ( IsPlayerNearEx(playerid, SaveIDGive,
					 "1552",
					 "1553",
					 "1554",
					 "El jugador que le deseas dar éste objeto no se encuentra conectado",
					 "El jugador que le deseas dar éste objeto no se ha logueado",
					 "El jugador que le deseas dar éste objeto no se encuentra cerca de tí") )
			    {
				    new saveType = GetObjectByType(SaveIDGive, GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]]));
				    if ( saveType == -1 )
				    {
						if ( AddObjectHoldToPlayer(SaveIDGive, PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]]) )
						{
							new MsgDarObjetoMe[MAX_TEXT_CHAT];
							new MsgDarObjetoYou[MAX_TEXT_CHAT];

					        format(MsgDarObjetoMe, sizeof(MsgDarObjetoMe), "Le has dado %s a %s",
					        ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])],
							PlayersDataOnline[SaveIDGive][NameOnlineFix]);

					        format(MsgDarObjetoYou, sizeof(MsgDarObjetoYou), "%s te ha dado %s",
							PlayersDataOnline[playerid][NameOnlineFix],
					        ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);

					        SendInfoMessage(playerid, 2, "0", MsgDarObjetoMe);
					        SendInfoMessage(SaveIDGive, 2, "0", MsgDarObjetoYou);

							RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
							ShowObjectos(playerid);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "1550", "El jugador que deseas dar éste objeto ya no puede llevar más encima!");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1551", "Al jugador al que deseas dar el objeto no puede llevar más de éste tipo!");
				    }
			    }
				ShowObjetosOpciones(playerid);
			}
			else
			{
				ShowObjetosOpciones(playerid);
			}
		}
		// ShowDejarObjeto
		case 151:
		{
			if ( response == 1 )
			{
                PlayersDataOnline[playerid][SaveAfterAgenda][11] = listitem;
			    ShowDejarObjetoInput(playerid);
			}
			else
			{
			    ShowObjetosOpciones(playerid);
			}
		}
		// ShowDejarObjetoInput
		case 152:
		{
			if ( response == 1 )
			{
			    new SlotIDGet = strval(inputtext);
				if ( SlotIDGet >= 1 && SlotIDGet <= MAX_GUANTERA_GAVETA_SLOTS || SlotIDGet == 0)
				{
					switch (PlayersDataOnline[playerid][SaveAfterAgenda][11])
					{
					    // Guantera
					    case 0:
					    {
						    if ( IsPlayerInsideVehicle(playerid) )
						    {
						        SlotIDGet--;
							    new MyGuanteraOpen = IsGuanteraOpen(playerid);
							    if ( MyGuanteraOpen )
							    {
							        if ( SlotIDGet == -1)
							        {
								        for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
								        {
										    if ( !DataCars[MyGuanteraOpen][GuanteraObjects][i] )
										    {
										        SlotIDGet = i;
								                break;
										    }
								        }
								        if ( SlotIDGet == -1 )
								        {
											SendInfoMessage(playerid, 0, "1601", "La guantera se encuentra llena!");
											ShowDejarObjeto(playerid);
								            return 1;
								        }
							        }
							        else
							        {
							            if (DataCars[MyGuanteraOpen][GuanteraObjects][SlotIDGet] )
							            {
								            new TempError[MAX_TEXT_CHAT];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta ocupado! Intente con otro ID de slot o deje en blanco para buscar uno disponible!", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1587", TempError);
								            ShowDejarObjetoInput(playerid);
							                return 1;
							            }
							        }
							        DataCars[MyGuanteraOpen][GuanteraObjects][SlotIDGet] = PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]];

			                        new MsgTirarObjetos[MAX_TEXT_CHAT];
									format(MsgTirarObjetos, sizeof(MsgTirarObjetos), "guarda %s en la guantera", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
							        Acciones(playerid, 8, MsgTirarObjetos);
									RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
									ShowObjectos(playerid);
							    }
							    else
							    {
									ShowDejarObjeto(playerid);
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1592", "No se encuentra dentro del vehículo!");
							}
						}
						// Gaveta
						case 1:
						{
							if ( PlayersData[playerid][IsPlayerInHouse] )
							{
							    new Houseid = PlayersData[playerid][IsPlayerInHouse];
							    if ( IsOpenGaveta(playerid, Houseid) )
							    {
							        SlotIDGet--;
							        if ( SlotIDGet == -1)
							        {
								        for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
								        {
										    if ( !HouseData[Houseid][GavetaObjects][i] )
										    {
										        SlotIDGet = i;
								                break;
										    }
								        }
								        if ( SlotIDGet == -1 )
								        {
											SendInfoMessage(playerid, 0, "1603", "La gaveta se encuentra llena!");
											ShowDejarObjeto(playerid);
								            return 1;
								        }
							        }
							        else
							        {
							            if (HouseData[Houseid][GavetaObjects][SlotIDGet] )
							            {
								            new TempError[MAX_TEXT_CHAT];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta ocupado! Intente con otro ID de slot o deje en blanco para buscar uno disponible!", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1604", TempError);
								            ShowDejarObjetoInput(playerid);
							                return 1;
							            }
							        }
							        HouseData[Houseid][GavetaObjects][SlotIDGet] = PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]];

			                        new MsgTirarObjetos[MAX_TEXT_CHAT];
									format(MsgTirarObjetos, sizeof(MsgTirarObjetos), "guarda %s en la gaveta", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
							        Acciones(playerid, 8, MsgTirarObjetos);
									RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
									ShowObjectos(playerid);
							    }
							    else
							    {
									ShowDejarObjeto(playerid);
							    }
							}
							else if (PlayersData[playerid][InLocal] != -1)
					        {
					            new localid = PlayersData[playerid][InLocal];
					            if (LocalData[localid][LGavetaSeguro] == 0)
					            {
						            SlotIDGet--;
							        if ( SlotIDGet == -1)
							        {
								        for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
								        {
										    if ( !LocalData[localid][LGavetaObjects][i] )
										    {
										        SlotIDGet = i;
								                break;
										    }
								        }
								        if ( SlotIDGet == -1 )
								        {
											SendInfoMessage(playerid, 0, "1603", "La gaveta se encuentra llena!");
											ShowDejarObjeto(playerid);
								            return 1;
								        }
							        }
							        else
							        {
							            if (LocalData[localid][LGavetaObjects][SlotIDGet] )
							            {
								            new TempError[MAX_TEXT_CHAT];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta ocupado! Intente con otro ID de slot o deje en blanco para buscar uno disponible!", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1604", TempError);
								            ShowDejarObjetoInput(playerid);
							                return 1;
							            }
							        }
							        LocalData[localid][LGavetaObjects][SlotIDGet] = PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]];

			                        new MsgTirarObjetos[MAX_TEXT_CHAT];
									format(MsgTirarObjetos, sizeof(MsgTirarObjetos), "guarda %s en la gaveta", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
							        Acciones(playerid, 8, MsgTirarObjetos);
									RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
									ShowObjectos(playerid);
							    }
							    else
							    {
									ShowDejarObjeto(playerid);
									SendInfoMessage(playerid, 0, "", "La gaveta se encuentra cerrada!");
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1605", "No se encuentra dentro de una casa o local");
							}
						}
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1602", "El número del SLOT para la gaveta debe estar comprendido entre 1 y 8 ó use deje en blanco para buscar un slot disponible");
				    ShowDejarObjetoInput(playerid);
				}
			}
			else
			{
			    ShowDejarObjeto(playerid);
			}
		}
		// Saltar Tutorial
		case 153:
		{
		    if (response)
		    {
		        PlayersData[playerid][InTutorial] = true;
			    TogglePlayerControllableEx(playerid, false);
				PlayersDataOnline[playerid][IsNotSilenciado] = false;
				SetPlayerTutorial(playerid, 0);
		    }
		    else
		    {
				PlayersDataOnline[playerid][StateDeath] = true;
		        SetPlayerVirtualWorldEx(playerid, 0);
				UpdateSpawnPlayer(playerid);
				SpawnPlayerEx(playerid);
				SendInfoMessage(playerid, 2, "0", "Has sido spawneado correctamente. Cualquier duda frente al gamemode, no dudes en usar /duda.");
		    }
		}
		// Local Keys
		case 154:
		{
		    if (response)
		    {
		        if (RemoveLocalKey(PlayersDataOnline[playerid][InPickupLocal], listitem))
		        {
		            new string[150];
		            format(string, sizeof(string), "Le quitaste las llaves de tu local a %s", LocalKeys[PlayersDataOnline[playerid][InPickupLocal]][listitem]);
		            SendInfoMessage(playerid, 3, "", string);
		        }
		        ShowLocalKeys(playerid, PlayersDataOnline[playerid][InPickupLocal]);
		    }
		}
		// ShowStations - Local
		case 155:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersData[playerid][InLocal] != -1 )
		        {
		            new localid = PlayersData[playerid][InLocal];
		            
		            // Stop Music
					if (!listitem)
					{
					    LocalData[localid][StationID] = -1;
					    StopMusicOnLocal(localid);
					}
					else
					{
					    LocalData[localid][StationID] = listitem - 1;
					    ChangeMusicOnLocal(localid);
					}
					ShowStations(playerid, LocalData[localid][StationID], 2);
				}
				else
				{
					SendInfoMessage(playerid, 0, "", "Ya no te encuentras dentro del local!");
				}
			}
		}
		//ObjectsMenu
		case 156:
		{
		    if (response)
		    {
				new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
				new objectid = PlayersDataOnline[playerid][EditingObjectID];

		        if (Mapeo[mapeoid][Tipo] == MAPEO_TYPE_OBJETO)
		        {
		            if (listitem == 0)//Editar
			        {
			            EditDynamicObject(playerid, objectid);
			        }
			        else if (listitem == 1)//Indexes
			        {
			            ShowObjectIndexes(playerid);
			        }
			        else if (listitem == 2)//Duplicar
			        {
			            DuplicarMapeo(playerid, mapeoid);
			        }
			        else if (listitem == 3)//Propiedades
			        {
			            ShowMapeoPropiedades(playerid, mapeoid);
			        }
					else if (listitem == 5)//Tipo
			        {
			            ShowMapeoTypeDialog(playerid);
			        }
					else if (listitem == 7)//Borrar
			        {
			            BorrarMapeo(playerid, mapeoid);
			        }
			        else
			        {
			            ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
			        }
		        }
		        else if (Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PUERTA)
		        {
		            if (listitem == 0)//Editar
			        {
			            EditDynamicObject(playerid, objectid);
			        }
			        else if (listitem == 1)//Indexes
			        {
			            ShowObjectIndexes(playerid);
			        }
			        else if (listitem == 2)//Duplicar
			        {
			            DuplicarMapeo(playerid, mapeoid);
			        }
					else if (listitem == 4)//Tipo
			        {
			            ShowMapeoTypeDialog(playerid);
			        }
			        else if (listitem == 6)//LlaveTipo
			        {
			            Puerta[Mapeo[mapeoid][Tipoid]][LlaveTipo] = (Puerta[Mapeo[mapeoid][Tipoid]][LlaveTipo] == 2) ? (0) : (Puerta[Mapeo[mapeoid][Tipoid]][LlaveTipo] + 1);
						ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
			        }
			        else if (listitem == 7)//LlaveOwnerID
			        {
			            ShowPuertaOwnerMenu(playerid, mapeoid);
			        }
			        else if (listitem == 9)//Recorrido
			        {
			            PlayersDataOnline[playerid][EditingMovement] = 1;
			            EditDynamicObject(playerid, objectid);
			        }
			        else if (listitem == 10)//Velocidad
			        {
			            ShowVelocidadObjetoMenu(playerid, mapeoid);
			        }
					else if (listitem == 12)//Borrar
			        {
			            BorrarMapeo(playerid, mapeoid);
			        }
			        else
			        {
			            ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
			        }
		        }
		        else if(Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PEAJE)
		        {
		            if (listitem == 0)//Editar
			        {
			            EditDynamicObject(playerid, objectid);
			        }
			        else if (listitem == 1)//Indexes
			        {
			            ShowObjectIndexes(playerid);
			        }
			        else if (listitem == 2)//Duplicar
			        {
			            DuplicarMapeo(playerid, mapeoid);
			        }
					else if (listitem == 4)//Tipo
			        {
			            ShowMapeoTypeDialog(playerid);
			        }
			        else if (listitem == 6)//Recorrido
			        {
			            PlayersDataOnline[playerid][EditingMovement] = 1;
			            EditDynamicObject(playerid, objectid);
			        }
			        else if (listitem == 7)//Velocidad
			        {
			            ShowVelocidadObjetoMenu(playerid, mapeoid);
			        }
			        else if (listitem == 8)//Posicion del comando
			        {
			            new Float:Pos[3]; GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
						new peajeid = Mapeo[mapeoid][Tipoid];
			            Peajes[peajeid][PosCommandX] = Pos[0];
			            Peajes[peajeid][PosCommandY] = Pos[1];
			            Peajes[peajeid][PosCommandZ] = Pos[2];
			        }
					else if (listitem == 10)//Borrar
			        {
			            BorrarMapeo(playerid, mapeoid);
			        }
			        else
			        {
			            ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
			        }
		        }
		        else if(Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PARQUEO)
		        {
                    if (listitem == 0)//Editar
			        {
			            EditDynamicObject(playerid, objectid);
			        }
			        else if (listitem == 1)//Indexes
			        {
			            ShowObjectIndexes(playerid);
			        }
			        else if (listitem == 2)//Duplicar
			        {
			            DuplicarMapeo(playerid, mapeoid);
			        }
					else if (listitem == 4)//Tipo
			        {
			            ShowMapeoTypeDialog(playerid);
			        }
			        else if (listitem == 6)//Recorrido
			        {
			            PlayersDataOnline[playerid][EditingMovement] = 1;
			            EditDynamicObject(playerid, objectid);
			        }
			        else if (listitem == 7)//Velocidad
			        {
			            ShowVelocidadObjetoMenu(playerid, mapeoid);
			        }
					else if (listitem == 9)//Borrar
			        {
			            BorrarMapeo(playerid, mapeoid);
			        }
			        else
			        {
			            ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
			        }
		        }
		    }
		    else
		    {
		        PlayersDataOnline[playerid][EditingType] = false;
				PlayersDataOnline[playerid][EditingObjectID] = 0;
		    }
		}
		//ObjetIndexes
		case 157:
		{
		    if (response)
		    {
		        PlayersDataOnline[playerid][EditingIndex] = listitem;
		        ShowObjectIndex(playerid, listitem);
		    }
		    else
		    {
		        if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO)
		        ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
		    }
		}
		//ObjectIndex
		case 158:
		{
		    new objectid = PlayersDataOnline[playerid][EditingObjectID];
		    new indexid = PlayersDataOnline[playerid][EditingIndex];

		    if (response)
		    {
		        new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
		        //Material
		        if (listitem >= 1 && listitem <= 4)
		        {
		            //Modelo-TXD-Textura-Color
		            PlayersDataOnline[playerid][EditingOption] = listitem;
		           	ShowEditObjectMaerial(playerid, indexid, listitem);
		        }
				//MaterialText
		        else if (listitem >= 7 && listitem <= 14)
		        {
		            if (listitem == 8 || listitem == 11 || listitem == 14)
		            {
		                new text[128] = "Texto", lienzosize = OBJECT_MATERIAL_SIZE_256x128, fontface[40] = "Arial", textsize = 24, usebold = 1, color = 0xFFFFFFFF, backcolor = 0xFF000000, alineacion = 0;
		                //////////////////
		                if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO)
			            {
			                if (strlen(MapeoText[mapeoid][indexid])) format(text, sizeof(text), MapeoText[mapeoid][indexid]);
			                if (Mapeo[mapeoid][materialsize][indexid]) lienzosize = Mapeo[mapeoid][materialsize][indexid];
			                if (strlen(MapeoFont[mapeoid][indexid])) format(fontface, 40, MapeoFont[mapeoid][indexid]);
			                if (Mapeo[mapeoid][fontsize][indexid]) textsize = Mapeo[mapeoid][fontsize][indexid];
			                usebold = Mapeo[mapeoid][bold][indexid];
			                if (Mapeo[mapeoid][fontcolor][indexid]) color = Mapeo[mapeoid][fontcolor][indexid];
			                if (Mapeo[mapeoid][backgroundcolor][indexid]) backcolor = Mapeo[mapeoid][backgroundcolor][indexid];
			                alineacion = Mapeo[mapeoid][textalignment][indexid];
			        		SaveMapeo(mapeoid);
			            }
		                //////////////////
		                if (listitem == 8)//Tamaño Lienzo
		                {
		                    lienzosize = (lienzosize == 140) ? (10) : (lienzosize + 10);
		                }
		                else if (listitem == 11)//Usar Negrita
		                {
		                    usebold = !usebold;
		                }
		                else if (listitem == 14)//Alineacion
		                {
		                    alineacion = (alineacion == 2) ? (0) : (alineacion + 1);
		                }
		                //////////////////
						if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO)
			            {
			                format(MapeoText[mapeoid][indexid], sizeof(text), text);
			                Mapeo[mapeoid][materialsize][indexid] = lienzosize;
			                format(MapeoFont[mapeoid][indexid], 40, fontface);
			                Mapeo[mapeoid][fontsize][indexid] = textsize;
			                Mapeo[mapeoid][bold][indexid] = usebold;
			                Mapeo[mapeoid][fontcolor][indexid] = color;
			                Mapeo[mapeoid][backgroundcolor][indexid] = backcolor;
			                Mapeo[mapeoid][textalignment][indexid] = alineacion;
			                Mapeo[mapeoid][materialtype][indexid] = 2;
			                SaveMapeo(mapeoid);
			            }
			            
		                SetDynamicObjectMaterialText(objectid, indexid, ConvertToRGBColor(text), lienzosize, fontface, textsize, usebold, color, backcolor, alineacion);

		                ShowObjectIndex(playerid, indexid);
		            }
		            else
		            {
		                PlayersDataOnline[playerid][EditingOption] = listitem;
		            	ShowEditObjectMaerial(playerid, indexid, listitem);
		            }
		        }
		        else if (listitem == 16)//Borrar Index
		        {
		            BorrarObjetoIndex(playerid, EDITING_TYPE_MAPEO, indexid);
		            ShowObjectIndexes(playerid);
		        }
		        else
		        {
		            ShowObjectIndex(playerid, indexid);
		        }
		    }
		    else
		    {
		        ShowObjectIndexes(playerid);
		    }
		}
		//EditIndex - ObjectMaterialEdition
		case 159:
		{
		    new objectid = PlayersDataOnline[playerid][EditingObjectID];
			new indexid = PlayersDataOnline[playerid][EditingIndex];

		    if (response)
		    {
		        new option = PlayersDataOnline[playerid][EditingOption];

		        //Material
		        if (option >= 1 && option <= 4)
		        {
		            new modelid, txdname[30], texturename[30], color = 0;
					//////////////////
		            if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO)
		            {
		                new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
		                
		                modelid = Mapeo[mapeoid][texturemodel][indexid];
		                format(txdname, 30, MapeoTxdName[mapeoid][indexid]);
		                format(texturename, 30, MapeoTextureName[mapeoid][indexid]);
		                color = Mapeo[mapeoid][materialcolor][indexid];
		                SaveMapeo(mapeoid);
		            }
					//////////////////
			        if (option == 1)//Modelo
			        {
			            if (IsValidStringServer(playerid, inputtext))
			            modelid = strval(inputtext);
			        }
			        else if (option == 2)//TXD
			        {
			            if (IsValidStringServer(playerid, inputtext))
			            format(txdname, 30, inputtext);
			        }
			        else if (option == 3)//Textura
			        {
			            if (IsValidStringServer(playerid, inputtext))
			            format(texturename, 30, inputtext);
			        }
			        else if (option == 4)//Color
			        {
			            if (IsValidStringServer(playerid, inputtext))
			            sscanf(inputtext, "x", color);
			        }
					//////////////////
			        if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO)
		            {
		                new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
		                
		                Mapeo[mapeoid][texturemodel][indexid] = modelid;
		                format(MapeoTxdName[mapeoid][indexid], 30, txdname);
		                format(MapeoTextureName[mapeoid][indexid], 30, texturename);
		                Mapeo[mapeoid][materialcolor][indexid] = color;
		                Mapeo[mapeoid][materialtype][indexid] = 1;
		                SaveMapeo(mapeoid);
		            }
		            SetDynamicObjectMaterial(objectid, indexid, modelid, txdname, texturename, color);
		        }
		        //MaterialText
		        else if (option >= 7 && option <= 14)
		        {
		            new text[128] = "Texto", lienzosize = OBJECT_MATERIAL_SIZE_256x128, fontface[40] = "Arial", textsize = 24, usebold = 1, color = 0xFFFFFFFF, backcolor = 0xFF000000, alineacion = 0;
					//////////////////
					if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO)
		            {
		                new mapeoid = PlayersDataOnline[playerid][EditingMapeo];

		                if (strlen(MapeoText[mapeoid][indexid])) format(text, sizeof(text), MapeoText[mapeoid][indexid]);
		                if (Mapeo[mapeoid][materialsize][indexid]) lienzosize = Mapeo[mapeoid][materialsize][indexid];
		                if (strlen(MapeoFont[mapeoid][indexid])) format(fontface, 40, MapeoFont[mapeoid][indexid]);
		                if (Mapeo[mapeoid][fontsize][indexid]) textsize = Mapeo[mapeoid][fontsize][indexid];
		                usebold = Mapeo[mapeoid][bold][indexid];
		                if (Mapeo[mapeoid][fontcolor][indexid]) color = Mapeo[mapeoid][fontcolor][indexid];
		                if (Mapeo[mapeoid][backgroundcolor][indexid]) backcolor = Mapeo[mapeoid][backgroundcolor][indexid];
		                alineacion = Mapeo[mapeoid][textalignment][indexid];
		                SaveMapeo(mapeoid);
		            }
					//////////////////
				    if (option == 7)//Asignar Texto
				    {
			            if (IsValidStringServer(playerid, inputtext))
				        format(text, sizeof(text), "%s", inputtext);
				    }
				    else if (option == 9)//Fuente
				    {
			            if (IsValidStringServer(playerid, inputtext))
				        format(fontface, 40, inputtext);
				    }
				    else if (option == 10)//Tamaño de Texto
				    {
			            if (IsValidStringServer(playerid, inputtext))
				        textsize = strval(inputtext);
				    }
				    else if (option == 12)//Color Texto
				    {
			            if (IsValidStringServer(playerid, inputtext))
				        sscanf(inputtext, "x", color);
				    }
				    else if (option == 13)//Color Fondo
				    {
			            if (IsValidStringServer(playerid, inputtext))
				        sscanf(inputtext, "x", backcolor);
				    }
					//////////////////
					if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO)
		            {
		                new mapeoid = PlayersDataOnline[playerid][EditingMapeo];

		                format(MapeoText[mapeoid][indexid], sizeof(text), text);
		                Mapeo[mapeoid][materialsize][indexid] = lienzosize;
		                format(MapeoFont[mapeoid][indexid], 40, fontface);
		                Mapeo[mapeoid][fontsize][indexid] = textsize;
		                Mapeo[mapeoid][bold][indexid] = usebold;
		                Mapeo[mapeoid][fontcolor][indexid] = color;
		                Mapeo[mapeoid][backgroundcolor][indexid] = backcolor;
		                Mapeo[mapeoid][textalignment][indexid] = alineacion;
		                Mapeo[mapeoid][materialtype][indexid] = 2;
		                SaveMapeo(mapeoid);
		            }
				    SetDynamicObjectMaterialText(objectid, indexid, ConvertToRGBColor(text), lienzosize, fontface, textsize, usebold, color, backcolor, alineacion);
		        }
	            ShowObjectIndex(playerid, indexid);
		    }
		    else
		    {
		        ShowObjectIndex(playerid, indexid);
		    }
		}
		//ShowVelocidadObjetoMenu
		case 160:
		{
		    new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
		    new tipoid = Mapeo[mapeoid][Tipoid];
		    if (response)
		    {
		        if (Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PUERTA)
		        {
		            Puerta[tipoid][Velocidad] = floatstr(inputtext);
		        }
		        else if (Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PEAJE)
		        {
		            Peajes[tipoid][Velocidad] = floatstr(inputtext);
		        }
		    }
		    ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
		}
		//ShowPuertaOwnerMenu
		case 161:
		{
		    new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
		    Puerta[Mapeo[mapeoid][Tipoid]][LlaveOwnerID] = strval(inputtext);
		    ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
		}
		//ShowDialog247
		case 162:
		{
		    if (!response) return 1;
		    if (!PlayersData[playerid][IsPlayerInBizz]) return SendInfoMessage(playerid, 0, "", "Ya no te encuentras en el negocio");
		    new bizzid = PlayersData[playerid][IsPlayerInBizz];
		    if (PlayersData[playerid][Dinero] < M24_7_Precios[listitem] ) return SendInfoMessage(playerid, 0, "360", "No tienes suficiente dinero para comprar éste artículo del 27/7");
		    if ( CheckWeapondCheat(playerid) && NegociosData[bizzid][Materiales] >= 2 )
		    {
		        new MsgCompra[144];
		        if (listitem == 0)//Camara de Fotos
		        {
					GivePlayerWeaponEx(playerid, 43, 200);
					format(MsgCompra, sizeof(MsgCompra), "Has comprado una Cámara por $%i.", M24_7_Precios[listitem]);
		        }
		        else if (listitem == 1)//Patines
		        {
					if ( IsObjectInBolsillo(playerid, listitem) ) return SendInfoMessage(playerid, 0, "", "Ya usted tiene unos patines, deshágase de el si quiere comprar unos nuevos");
		            if ( IsNotFullBolsillo(playerid, playerid, "Usted tiene los bolsillos llenos!") )
		            {
						AddObjectBolsillo(playerid, listitem);
						format(MsgCompra, sizeof(MsgCompra), "Has comprado unos Patines por $%i.", M24_7_Precios[listitem]);
					}
					else return 1;
		        }
		        else if (listitem == 2)//Dados
		        {
		            if ( IsObjectInBolsillo(playerid, listitem) ) return SendInfoMessage(playerid, 0, "", "Ya usted tiene unos dados, deshágase de el si quiere comprar unos nuevos");
		            if ( IsNotFullBolsillo(playerid, playerid, "Usted tiene los bolsillos llenos!") )
		            {
						AddObjectBolsillo(playerid, listitem);
						format(MsgCompra, sizeof(MsgCompra), "Has comprado unos Dados por $%i.", M24_7_Precios[listitem]);
					}
					else return 1;
		        }
		        else if (listitem == 3)//Movil
		        {
		            if ( PlayersData[playerid][Phone] != 0) return SendInfoMessage(playerid, 0, "364", "Ya usted tiene un móvil, deshágase de el si quiere comprar uno nuevo");
					AddObjectBolsillo(playerid, listitem);
					BuyPhone24_7(playerid);
					format(MsgCompra, sizeof(MsgCompra), "Has comprado un nuevo móvil con número %i por $%i.", PlayersData[playerid][Phone], M24_7_Precios[listitem]);
		        }
		        else if (listitem == 4)//Agenda
		        {
		            if ( IsObjectInBolsillo(playerid, listitem) ) return SendInfoMessage(playerid, 0, "892", "Ya usted tiene una agenda");
		            if ( IsNotFullBolsillo(playerid, playerid, "Usted tiene los bolsillos llenos!") )
		            {
						AddObjectBolsillo(playerid, listitem);
						format(MsgCompra, sizeof(MsgCompra), "Has comprado una Agenda por $%i.", M24_7_Precios[listitem]);
  					    CleanSMS(playerid);
			            CleanAgenda(playerid);
					}
					else return 1;
		        }
		        else if (listitem == 5)//Flores
		        {
		            GivePlayerWeaponEx(playerid, 14, 1);
					format(MsgCompra, sizeof(MsgCompra), "Has comprado unas flores por $%i.", M24_7_Precios[listitem]);
		        }
		        else if (listitem == 6)//Comprar Saldo
		        {
		            ShowPlayerDialogEx(playerid, 30, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione el monto de saldo a comprar", "{F0F0F0}¿Cuanto desea comprar de saldo para su móvil?", "Comprar", "Volver");
		            return 1;
		        }
		        else if (listitem == 7)//Bolsa
		        {
		            if ( PlayersData[playerid][HaveBolsa] ) return SendInfoMessage(playerid, 0, "1228", "Ya usted tiene una bolsa");
					PlayersData[playerid][HaveBolsa] = true;
					CleanArticulosBolsa(playerid);
					format(MsgCompra, sizeof(MsgCompra), "Has comprado una Bolsa por $%i.", M24_7_Precios[listitem]);
		        }
		        else if (listitem == 8)//Condones
		        {
		            if ( IsNotFullCartera(playerid, playerid, "Usted tiene la cartera llena!") )
		            {
						AddObjectToCartera(playerid, CARTERA_TYPE_CONDONES, 3, 0, 0);
						format(MsgCompra, sizeof(MsgCompra), "Has comprado unos Condones por $%i.", M24_7_Precios[listitem]);
					}
					else return 1;
		        }
		        else if (listitem == 9)//Maleta
		        {
		            if ( GetObjectByType(playerid, TYPE_MALETIN) == -1 )
		            {
						format(MsgCompra, sizeof(MsgCompra), "Has comprado un maletín por $%i.", M24_7_Precios[listitem]);
						AddObjectHoldToPlayer(playerid, 1210);
					}
					else return SendInfoMessage(playerid, 0, "1548", "Tienes las manos ocupadas, no puedes llevar más nada en ellas!");
		        }
		        else if (listitem == 10)//Modelo de Moviles
		        {
            		ShowDialogTypePhones(playerid);
            		return 1;
		        }
				SendInfoMessage(playerid, 3, "0", MsgCompra);
				printf("%s[%i]: %s", PlayersDataOnline[playerid][NameOnline], playerid, MsgCompra);
				
				SetMoneyExtorsion(bizzid, M24_7_Precios[listitem]);
				GivePlayerMoneyEx(playerid, -M24_7_Precios[listitem]);
				
				ShowDialog247(playerid);
		    }
		    else
		    {
			    SendInfoMessage(playerid, 0, "359", "Éste 24/7 no tiene materiales!");
		    }
		}
		//ShowDialogTypePhones
		case 163:
		{
		    if (response)
		    {
		        if (!PlayersData[playerid][IsPlayerInBizz]) return SendInfoMessage(playerid, 0, "", "Ya no te encuentras en el negocio");
		        PlayersData[playerid][TypePhone] = listitem;
		        new MsgCompra[144];
				format(MsgCompra, sizeof(MsgCompra), "Has comprado un modeo de movil por $%i.", M24_7_Precios[10]);
				SendInfoMessage(playerid, 3, "0", MsgCompra);
				printf("%s[%i]: %s", PlayersDataOnline[playerid][NameOnline], playerid, MsgCompra);
				
				SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], M24_7_Precios[10]);
				GivePlayerMoneyEx(playerid, -M24_7_Precios[10]);
				ShowDialog247(playerid);
		    }
		    else ShowDialog247(playerid);
		}
		//ShowMapeoTypeDialog
		case 164:
		{
		    if (response)
		    {
		        CambiarMapeoTipo(playerid, PlayersDataOnline[playerid][EditingMapeo], listitem);
		        ShowMapeoTypeDialog(playerid);
		    }
		    else ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
		}
		//ShowMapeoPropiedades
		case 165:
		{
		    if (response)
			{
			    PlayersDataOnline[playerid][EditingOption] = listitem;
			    ShowMapeoPropiedadChange(playerid, PlayersDataOnline[playerid][EditingMapeo], listitem);
			}
			else ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
		}
		//ShowMapeoPropiedadChange
		case 166:
		{
		    new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
		    
		    if (!response) ShowMapeoPropiedades(playerid, mapeoid);
		    
		    new option = PlayersDataOnline[playerid][EditingOption];
		    new string[144];
		    
		    if (option >= 0 && option <= 2)//Modelo-Mundo-Int
		    {
		        if (option == 0)//Modelo
		        {
		            new modelid = strval(inputtext);

			        if (modelid >= 321 && modelid <=373 || modelid >=615 && modelid <= 19999)
			        {
			            format(string, sizeof(string), "Cambiaste el modelid del objeto %i[%i] de %i a %i.", Mapeo[mapeoid][ID_Objeto], mapeoid, Mapeo[mapeoid][Modelo], modelid);
			            Mapeo[mapeoid][Modelo] = modelid;
			        }
			        else
					{
					    ShowMapeoPropiedades(playerid, mapeoid);
					    return SendInfoMessage(playerid, 0, "", "ID de objeto invalido");
					}
		        }
		        else if (option == 1)//Mundo
		        {
		            new newmundo = strval(inputtext);
			        if (newmundo >= 0)
			        {
			            format(string, sizeof(string), "Cambiaste el mundo del objeto %i[%i] de %i a %i.", Mapeo[mapeoid][ID_Objeto], mapeoid, Mapeo[mapeoid][Mundo], newmundo);
			            Mapeo[mapeoid][Mundo] = newmundo;
			        }
			        else
					{
					    ShowMapeoPropiedades(playerid, mapeoid);
					    return SendInfoMessage(playerid, 0, "", "Solo mundos positivos");
					}
		        }
		        else if (option == 2)//Interior
		        {
		            new newint = strval(inputtext);
			        if (newint >= 0)
			        {
			            format(string, sizeof(string), "Cambiaste el mundo del objeto %i[%i] de %i a %i.", Mapeo[mapeoid][ID_Objeto], mapeoid, Mapeo[mapeoid][Mundo], newint);
			            Mapeo[mapeoid][Interior] = newint;
			        }
			        else
					{
					    ShowMapeoPropiedades(playerid, mapeoid);
					    return SendInfoMessage(playerid, 0, "", "Solo interiores positivos");
					}
		        }
		        
		        DestroyDynamicObject(Mapeo[mapeoid][ID_Objeto]);
				Mapeo[mapeoid][ID_Objeto] = CreateDynamicObject(Mapeo[mapeoid][Modelo], Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ],
					Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ],
					Mapeo[mapeoid][Mundo], Mapeo[mapeoid][Interior]);
				SendAdviseMessage(playerid, string);
		    }
		    else if (option >= 3 && option <= 5)//Posicion
		    {
		        if (option == 3) Mapeo[mapeoid][PosX] = floatstr(inputtext);
		        else if (option == 4) Mapeo[mapeoid][PosY] = floatstr(inputtext);
		        else if (option == 5) Mapeo[mapeoid][PosZ] = floatstr(inputtext);
		        SetDynamicObjectPos(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
		    }
		    else if (option >= 6 && option <= 8)//Rotacion
		    {
		        if (option == 6) Mapeo[mapeoid][PosRX] = floatstr(inputtext);
		        else if (option == 7) Mapeo[mapeoid][PosRY] = floatstr(inputtext);
		        else if (option == 8) Mapeo[mapeoid][PosRZ] = floatstr(inputtext);
		        SetDynamicObjectRot(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ]);
		    }
		    ShowMapeoPropiedades(playerid, mapeoid);
		}
	}
	//// END DIALOGS
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if ( PlayersDataOnline[playerid][State] == 3 )
	{
	    if ( !PlayersData[playerid][InTutorial] )
	    {
			if (playerid != clickedplayerid)
			{
				new MsgReportarInputText[MAX_TEXT_CHAT];
				PlayersDataOnline[playerid][MyLastIdReport] = clickedplayerid;
				format(MsgReportarInputText, sizeof(MsgReportarInputText), "{00A5FF}Reportar a %s", PlayersDataOnline[clickedplayerid][NameOnline]);
			    ShowPlayerDialogEx(playerid, 11, DIALOG_STYLE_INPUT, MsgReportarInputText, "{F0F0F0}Descríba brevemente la razón de su reporte", "Reportar", "Cancelar");
			}
			else
			{
				SendInfoMessage(playerid, 0, "423", "El jugador que ha seleccionado para reportar es usted mismo.");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1138", "Debe terminar el tutorial antes de reportar a un usuario.");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "825", "Debe loguearse antes de reportar a un usuario");
	}
	return 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////// MESSAGES INFO
public SendInfoMessage(playerid, type, const optional[], const message[])
{
	new MsgInfo[MAX_TEXT_CHAT];
	switch ( type )
	{
	    // Error
	    case 0:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "Error: %s", message);
		}
		// Ayuda
	    case 1:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "%s %s", message, optional);
		}
		// Información
	    case 2:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "Info: %s", message);
		}
		// Afirmativo
	    case 3:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "Importante: %s", message);
		}
	}
	return SendClientMessage(playerid, COLOR_MESSAGES[type], MsgInfo);
}

public IsPlayerLogued(playerid)
{
	if (IsPlayerConnected(playerid))
	{
	    if (PlayersDataOnline[playerid][State] == 3)
	    {
	        return 1;
	    }
	}
	return 0;
}

public IsPlayerLoguedEx(playerid, playeridCheck)
{
	if (IsPlayerConnected(playeridCheck))
	{
	    if (PlayersDataOnline[playeridCheck][State] == 3)
	    {
	        return 1;
	    }
	    else
		{
		    SendClientMessage(playerid, COLOR_MESSAGES[0], "El jugador no se encuentra logueado.");
		    return 0;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_MESSAGES[0], "El jugador no se encuentra conectado.");
		return 0;
	}
}

public IsPlayerNear(myplayerid, playerid)
{
	if (IsPlayerLoguedEx(myplayerid, playerid))
	{
	    new Float:MyPos[3];
	    GetPlayerPos(myplayerid, MyPos[0], MyPos[1], MyPos[2]);
	    if ( IsPlayerInRangeOfPoint(playerid, 4.0, MyPos[0], MyPos[1], MyPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(myplayerid)  )
	    {
	        return true;
		}
		else
		{
		    SendClientMessage(myplayerid, COLOR_MESSAGES[0], "El jugador no se encuentra cerca de ti");
		    return false;
		}
	}
	else return false;
}


public SendSyntaxError(playerid, const command[], const example[])
{
	new SintaxisErro[MAX_TEXT_CHAT];
	format(SintaxisErro, sizeof(SintaxisErro), "Ha introducído mal el sintaxis del comando /%s. Ejemplo correcto: /%s", command, example );
	return SendClientMessage(playerid, COLOR_MESSAGES[0], SintaxisErro);
}

public SendAccessError(playerid, const command[])
{
	new AcessError[MAX_TEXT_CHAT];
	format(AcessError, sizeof(AcessError), "Tú no tienes acceso a el comando /%s", command);
	return SendClientMessage(playerid, COLOR_MESSAGES[0], AcessError);
}

public SendAdviseMessage(playerid, const advise[])
{
	new adviseText[150];
    format(adviseText, sizeof(adviseText), "%s %s", LOGO_STAFF, advise);
	return SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, adviseText);
}

//////////////////// CLEAN
public DataUserClean(playerid)
{
	if ( !PlayersDataOnline[playerid][MarcaZZ] )
	{
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s Debug Data Error - Jugador: %s[%i] - ID %i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, gettime());
	    MsgCheatsReportsToAdmins(MsgAviso);
	}
	else
	{
		PlayersDataOnline[playerid][MarcaZZ] = false;
	}
	// DATA USERS
    PlayersData[playerid][EmailTime]  	 = 0;
    format(PlayersData[playerid][Email], 25, "No");
    format(PlayersData[playerid][Password], 25, "0");
    PlayersData[playerid][AccountState] = 0;
    PlayersData[playerid][Spawn_X] 		= 0;
    PlayersData[playerid][Spawn_Y] 		= 0;
    PlayersData[playerid][Spawn_Z] 		= 0;
    PlayersData[playerid][Spawn_ZZ]		= 0;
    PlayersData[playerid][HoursPlaying] = 0;
    PlayersData[playerid][DeahtCount] 	= 0;
    PlayersData[playerid][KilledCount]  = 0;
    PlayersData[playerid][Phone] 		= 0;
    PlayersData[playerid][House] 		= -1;
    PlayersData[playerid][Car] 			= -1;
    PlayersData[playerid][Faccion] 		= 0;
    PlayersData[playerid][Rango] 		= 7;
    format(PlayersData[playerid][GirlFreind], MAX_PLAYER_NAME, "No");
    PlayersData[playerid][Bolsillos][0]	= 0;
    PlayersData[playerid][Bolsillos][1]	= 0;
    PlayersData[playerid][Bolsillos][2]	= 0;
    PlayersData[playerid][Bolsillos][3]	= 0;
	PlayersData[playerid][Bolsillos][4]	= 0;

    PlayersData[playerid][Habilidad] 	= 0;
    PlayersData[playerid][Warn]	= 0;
    PlayersData[playerid][Ciudad] 		= 1;
    PlayersData[playerid][Vida] 		= 80;
    PlayersData[playerid][Chaleco] 		= 0;
    PlayersData[playerid][Cansansio]	= 40;
    PlayersData[playerid][Dinero] 		= 0;
    PlayersData[playerid][Banco] 		= 1200;
    PlayersData[playerid][Jail] 		= 0;
    PlayersData[playerid][Admin]		= 0;
    PlayersData[playerid][World]		= 0;
    PlayersData[playerid][Interior]		= 0;
    PlayersData[playerid][Skin]			= 26;
    PlayersData[playerid][Drogas]		= 0;
    PlayersData[playerid][Materiales]	= 0;
    PlayersData[playerid][Lata]			= false;
    PlayersData[playerid][Ganzuas]		= 0;
    PlayersData[playerid][Alquiler]		= -1;
    PlayersData[playerid][Bombas]		= 0;
    PlayersData[playerid][Sexo]			= 0;

    PlayersData[playerid][Idiomas][0]	= false;
    PlayersData[playerid][Idiomas][1]	= false;
    PlayersData[playerid][Idiomas][2]	= false;
    PlayersData[playerid][Idiomas][3]	= false;
    PlayersData[playerid][Idiomas][4]	= false;
    PlayersData[playerid][Idiomas][5]	= false;

    PlayersData[playerid][Licencias][0]	= false;
    PlayersData[playerid][Licencias][1]	= false;
    PlayersData[playerid][Licencias][2]	= false;
    PlayersData[playerid][Licencias][3]	= false;
    PlayersData[playerid][Licencias][4]	= false;
    PlayersData[playerid][Licencias][5]	= false;
    PlayersData[playerid][Licencias][6]	= false;

    PlayersData[playerid][IsInJail]			= -1;
    PlayersData[playerid][Nacer]			= false;
    PlayersData[playerid][TimeRequestBank]	= 0;
    PlayersData[playerid][MyBonus]			= 0;
	PlayersData[playerid][InTutorial]		= false;
    PlayersData[playerid][Edad]				= 0;
    PlayersData[playerid][IsPlayerInHouse]	= false;
    PlayersData[playerid][TimeEquipo]		= 0;
    PlayersData[playerid][SpawnAmigo]		= 0;
    PlayersData[playerid][IsPaga]			= 0;
	format(PlayersData[playerid][MyIP], 16, "0");
    PlayersData[playerid][Job]				= 0;
	PlayersData[playerid][MyStyleWalk]		= 0;
	PlayersData[playerid][Saldo]			= 50;
	PlayersData[playerid][LicenciaPesca]	= 0;
	PlayersData[playerid][IntermitentState]= false;
	PlayersData[playerid][MyStyleTalk]		= 0;
	PlayersData[playerid][IsPlayerInBizz]	= false;
	PlayersData[playerid][IsPlayerInGarage]	= -1;

    PlayersData[playerid][WeaponS][0] 	= 0;
    PlayersData[playerid][WeaponS][1] 	= 0;
    PlayersData[playerid][WeaponS][2]   = 0;
    PlayersData[playerid][WeaponS][3]   = 0;
    PlayersData[playerid][WeaponS][4]	= 0;
    PlayersData[playerid][WeaponS][5]	= 0;
    PlayersData[playerid][WeaponS][6]	= 0;
    PlayersData[playerid][WeaponS][7]	= 0;
    PlayersData[playerid][WeaponS][8]   = 0;
    PlayersData[playerid][WeaponS][9]  	= 0;
    PlayersData[playerid][WeaponS][10]   = 0;
    PlayersData[playerid][WeaponS][11] 	= 0;
    PlayersData[playerid][WeaponS][12] 	= 0;
    PlayersData[playerid][AmmoS][0]  = 0;
    PlayersData[playerid][AmmoS][1]  = 0;
    PlayersData[playerid][AmmoS][2]  = 0;
    PlayersData[playerid][AmmoS][3]	 = 0;
    PlayersData[playerid][AmmoS][4]	 = 0;
    PlayersData[playerid][AmmoS][5]	 = 0;
    PlayersData[playerid][AmmoS][6]	 = 0;
    PlayersData[playerid][AmmoS][7]	 = 0;
	PlayersData[playerid][AmmoS][8]	 = 0;
    PlayersData[playerid][AmmoS][9]  = 0;
    PlayersData[playerid][AmmoS][10] = 0;
    PlayersData[playerid][AmmoS][11] = 0;
    PlayersData[playerid][AmmoS][12] = 0;
    PlayersData[playerid][Asignados][0] 	= 0;
    PlayersData[playerid][Asignados][1]		= 0;
    PlayersData[playerid][Asignados][2] 	= 0;
    PlayersData[playerid][Bolsa][0]	= 0;
    PlayersData[playerid][Bolsa][1]	= 0;
    PlayersData[playerid][Bolsa][2]	= 0;
    PlayersData[playerid][Bolsa][3] = 0;
    PlayersData[playerid][BolsaC][0]= 0;
    PlayersData[playerid][BolsaC][1]= 0;
    PlayersData[playerid][BolsaC][2]= 0;
    PlayersData[playerid][BolsaC][3]= 0;
    PlayersData[playerid][HaveBolsa]= false;
    PlayersData[playerid][IsPlayerInVehInt]	= false;
    PlayersData[playerid][Cartera][0]	= 0;
    PlayersData[playerid][Cartera][1]   = 0;
    PlayersData[playerid][Cartera][2]   = 0;
    PlayersData[playerid][Cartera][3]   = 0;
    PlayersData[playerid][Cartera][4]   = 0;
    PlayersData[playerid][Cartera][5]   = 0;
    PlayersData[playerid][CarteraC][0]	= 0;
    PlayersData[playerid][CarteraC][1]  = 0;
    PlayersData[playerid][CarteraC][2]  = 0;
    PlayersData[playerid][CarteraC][3]  = 0;
    PlayersData[playerid][CarteraC][4]  = 0;
    PlayersData[playerid][CarteraC][5]  = 0;
    PlayersData[playerid][CarteraT][0]	= 0;
    PlayersData[playerid][CarteraT][1]  = 0;
    PlayersData[playerid][CarteraT][2]  = 0;
    PlayersData[playerid][CarteraT][3]  = 0;
    PlayersData[playerid][CarteraT][4]  = 0;
    PlayersData[playerid][CarteraT][5]  = 0;
    PlayersData[playerid][AccountBankingOpen] = 0;
    PlayersData[playerid][CarteraI][0]  = 0;
    PlayersData[playerid][CarteraI][1]  = 0;
    PlayersData[playerid][CarteraI][2]  = 0;
    PlayersData[playerid][CarteraI][3]  = 0;
    PlayersData[playerid][CarteraI][4]  = 0;
    PlayersData[playerid][CarteraI][5]  = 0;
	PlayersData[playerid][IsPlayerInBank]= false;
    PlayersData[playerid][AlertSMSBank]	= false;
    PlayersData[playerid][HorasWork]	= 0;
	PlayersData[playerid][CameraLogin]	= 0;
	PlayersData[playerid][Enfermedad]	= 0;
    PlayersData[playerid][Description]  = 0;
	PlayersData[playerid][EnableDescription]= false;
	format(PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION, "Ninguna");
	PlayersData[playerid][DescriptionColor]		= 0;
	PlayersData[playerid][DescriptionSelect]	= 0;
	PlayersData[playerid][SpawnFac]		= 0;

	// Nuevos 77
	PlayersData[playerid][Objetos][0]	= 0;
	PlayersData[playerid][Objetos][1]	= 0;
	PlayersData[playerid][Objetos][2]	= 0;
	PlayersData[playerid][Objetos][3]	= 0;
	PlayersData[playerid][Objetos][4]	= 0;
	PlayersData[playerid][Objetos][5]		= 0;
	PlayersData[playerid][Objetos][6]		= 0;
	PlayersData[playerid][Objetos][7]		= 0;
	PlayersData[playerid][Objetos][8]		= 0;
	PlayersData[playerid][ObjetosVision][0]		= 0;
	PlayersData[playerid][ObjetosVision][1]		= 0;
	PlayersData[playerid][ObjetosVision][2]		= 0;
	PlayersData[playerid][ObjetosVision][3]		= 0;
	PlayersData[playerid][ObjetosVision][4]		= 0;
	PlayersData[playerid][ObjetosVision][5]		= 0;
	PlayersData[playerid][ObjetosVision][6]		= 0;
	PlayersData[playerid][ObjetosVision][7]		= 0;
	PlayersData[playerid][ObjetosVision][8]		= 0;
	PlayersData[playerid][TypePhone]			= 0;
	PlayersData[playerid][Ayudante] = 0;
	PlayersData[playerid][Local] = -1;
	PlayersData[playerid][InLocal] = -1;
	PlayersData[playerid][Mapper] = 0;


    // DATA USERS ONLINE
	PlayersDataOnline[playerid][CurrentDialog]		= 999;
	PlayersDataOnline[playerid][State]  			= 0;
	PlayersDataOnline[playerid][LoginTime]  		= 0;
	PlayersDataOnline[playerid][Spawn]  			= true;
	PlayersDataOnline[playerid][Espectando]			= -1;
    //format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "0");
	PlayersDataOnline[playerid][Intentar]  			= 0;
	PlayersDataOnline[playerid][StateMoneyPass]  	= true;
	PlayersDataOnline[playerid][StateChannelOOC]  	= true;
	PlayersDataOnline[playerid][StateChannelFamily] = true;
	PlayersDataOnline[playerid][StateChannelRadio]  = true;
	PlayersDataOnline[playerid][StateChannelCNN]  	= true;
	PlayersDataOnline[playerid][CallTime]		  	= true;
	PlayersDataOnline[playerid][StateJob] 			= false;
	PlayersDataOnline[playerid][Paga] 				= false;
	PlayersDataOnline[playerid][InPickup] 			= 0;
	PlayersDataOnline[playerid][InPickupFaccion]    = 0;
	PlayersDataOnline[playerid][InPickupTele]		= -1;
	PlayersDataOnline[playerid][InPickupNegocio]	= 0;
	PlayersDataOnline[playerid][InPickupCasa]		= 0;
	PlayersDataOnline[playerid][InPickupLocal]		= -1;
	PlayersDataOnline[playerid][MyPickupX] 			= 0;
	PlayersDataOnline[playerid][MyPickupY] 			= 0;
	PlayersDataOnline[playerid][MyPickupZ] 			= 0;
	PlayersDataOnline[playerid][MyPickupZZ]			= 0;
	PlayersDataOnline[playerid][MyPickupWorld]		= 0;
	PlayersDataOnline[playerid][MyPickupLock]	   	= true;
	PlayersDataOnline[playerid][MyPickupX_Now] 		= 0;
	PlayersDataOnline[playerid][MyPickupY_Now] 		= 0;
	PlayersDataOnline[playerid][MyPickupZ_Now] 		= 0;
	PlayersDataOnline[playerid][MyPickupInterior]	= 0;
	PlayersDataOnline[playerid][InCall]				= -1;
	PlayersDataOnline[playerid][SendCommands]		= false;
	PlayersDataOnline[playerid][IsDescolgado]		= false;
	PlayersDataOnline[playerid][IsPagaO]			= gettime();
	PlayersDataOnline[playerid][PhoneOnline]		= true;
	PlayersDataOnline[playerid][InSleep]			= false;
	PlayersDataOnline[playerid][CansansioConteo]	= 0;
	PlayersDataOnline[playerid][InCarId]			= 0;
	PlayersDataOnline[playerid][InVehicle]			= false;
	PlayersDataOnline[playerid][MyLastIdReport]		= 0;
	PlayersDataOnline[playerid][IsEntrevistado]		= false;
	PlayersDataOnline[playerid][SubAfterMenuRow] 	= 0;
	PlayersDataOnline[playerid][AfterMenuRow] 	 	= 0;

	PlayersDataOnline[playerid][InvitePlayer]  		= 0;
	PlayersDataOnline[playerid][InviteFaccion] 		= 0;
	PlayersDataOnline[playerid][Frecuencia]    		= 0;
	PlayersDataOnline[playerid][AdminOn]       		= false;
	PlayersDataOnline[playerid][Freeze]        		= false;
	PlayersDataOnline[playerid][Wispers]       		= true;
	PlayersDataOnline[playerid][RowSkin]       		= 0;
	PlayersDataOnline[playerid][RowHair]       		= 0;
	PlayersDataOnline[playerid][TypeBuy]       		= 0;
	PlayersDataOnline[playerid][IsPlayerInHotel]    = false;
	PlayersDataOnline[playerid][IsTaxi]    			= -1;
	PlayersDataOnline[playerid][SeatTaxi]           = false;
	PlayersDataOnline[playerid][IsAtado]     		= false;
	PlayersDataOnline[playerid][IsEsposas]     		= false;
	PlayersDataOnline[playerid][IsTeazer]     		= false;
	PlayersDataOnline[playerid][LastInterior]     	= false;
	PlayersDataOnline[playerid][StateDeath]     	= false;
	PlayersDataOnline[playerid][IsNotSilenciado]    = true;
	PlayersDataOnline[playerid][ModeDM]    			= false;
	PlayersDataOnline[playerid][ModeRace]  			= false;
	PlayersDataOnline[playerid][IsAFK]    			= false;
	PlayersDataOnline[playerid][JobBonus]  			= false;
 	PlayersDataOnline[playerid][IsCheckCheat]    	= false;
	PlayersDataOnline[playerid][InWalk]             = false;
	PlayersDataOnline[playerid][InCarId]            = false;
	PlayersDataOnline[playerid][TimeCallPublics]    = 0;
	PlayersDataOnline[playerid][ICall]			    = false;
	PlayersDataOnline[playerid][Altavoz]            = false;
	PlayersDataOnline[playerid][ChangeVC]           = false;
	PlayersDataOnline[playerid][InCamera]           = false;
	PlayersDataOnline[playerid][VidaOn]	          	= 100.0;
	PlayersDataOnline[playerid][ChalecoOn]          = 0;
	PlayersDataOnline[playerid][TimeLata]          	= 0;
	PlayersDataOnline[playerid][LastDamageInt]     	= 0;
	PlayersDataOnline[playerid][LastGas]     		= 0;
	PlayersDataOnline[playerid][LastOil]     		= 0;
	PlayersDataOnline[playerid][PistaIDp]           = -1;
	PlayersDataOnline[playerid][PosIDp]           	= -1;
	PlayersDataOnline[playerid][LicenciaTest]     	= false;
	PlayersDataOnline[playerid][PointDm]     		= false;
	PlayersDataOnline[playerid][DesignGarageId] 	= false;
	PlayersDataOnline[playerid][EspectVehOrPlayer]	= false;
	PlayersDataOnline[playerid][IsEspectando]  		= false;
	PlayersDataOnline[playerid][ExitedVehicle] 		= false;
	PlayersDataOnline[playerid][PlayerSexo]    		= -1;
	PlayersDataOnline[playerid][VCoche][0]     		= -1; 	PlayersDataOnline[playerid][VCoche][1]    	= -1;
	PlayersDataOnline[playerid][VFactura][0]   		= -1; 	PlayersDataOnline[playerid][VFactura][1]   	= -1;
	PlayersDataOnline[playerid][VServicio][0]  		= -1; 	PlayersDataOnline[playerid][VServicio][1]  	= -1;
	PlayersDataOnline[playerid][VMulta][0]   		= -1; 	PlayersDataOnline[playerid][VMulta][1]   	= -1;
	PlayersDataOnline[playerid][VRepair][0]    		= -1; 	PlayersDataOnline[playerid][VRepair][1]     = -1;
	PlayersDataOnline[playerid][VAceite][0]    		= -1; 	PlayersDataOnline[playerid][VAceite][1]     = -1;
	PlayersDataOnline[playerid][Contrato][0]    	= -1; 	PlayersDataOnline[playerid][Contrato][1]    = -1;
	PlayersDataOnline[playerid][VArma][0]     		= -1; 	PlayersDataOnline[playerid][VArma][1]     	= -1;
	PlayersDataOnline[playerid][VDrogas][0]     	= -1; 	PlayersDataOnline[playerid][VDrogas][1]     = -1; 	PlayersDataOnline[playerid][VDrogas][2]     = -1;
	PlayersDataOnline[playerid][VPhone][0]     		= -1; 	PlayersDataOnline[playerid][VPhone][1]      = -1; 	PlayersDataOnline[playerid][VPhone][2]     = -1;
	PlayersDataOnline[playerid][VGanzuas][0]    	= -1; 	PlayersDataOnline[playerid][VGanzuas][1]    = -1;
	PlayersDataOnline[playerid][VProteger][0]   	= -1; 	PlayersDataOnline[playerid][VProteger][1]   = -1;
	PlayersDataOnline[playerid][EditingType] = 0;
	PlayersDataOnline[playerid][EditingMapeo] = 0;
	PlayersDataOnline[playerid][EditingObjectID] = 0;
	PlayersDataOnline[playerid][EditingIndex] = 0;
	PlayersDataOnline[playerid][EditingOption] = 0;
	PlayersDataOnline[playerid][EditingMovement] = 0;

	PlayersDataOnline[playerid][CountCheat]			= 0;

	Banking[playerid][Balance] 						= 0;
}
//////////////////// LOAD
public DataUserLoad(playerid)
{
	new query[500], Cache:cacheid, cuentaExiste;

	mysql_format(dataBase, query, 500, "SELECT * FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(cuentaExiste);

	if ( cuentaExiste )
	{
		new WeaponsData[50], AmmoData[50];

		cache_get_value_name(0, "Email", PlayersData[playerid][Email], 60);
		cache_get_value_name(0, "Password", PlayersData[playerid][Password], 25);
		cache_get_value_name_int(0, "AccountState", PlayersData[playerid][AccountState]);
		cache_get_value_name_float(0, "Spawn_X", PlayersData[playerid][Spawn_X]);
		cache_get_value_name_float(0, "Spawn_Y", PlayersData[playerid][Spawn_Y]);
		cache_get_value_name_float(0, "Spawn_Z", PlayersData[playerid][Spawn_Z]);
		cache_get_value_name_float(0, "Spawn_ZZ", PlayersData[playerid][Spawn_ZZ]);
		cache_get_value_name_int(0, "HoursPlaying", PlayersData[playerid][HoursPlaying]);
		cache_get_value_name_int(0, "DeahtCount", PlayersData[playerid][DeahtCount]);

		cache_get_value_name_int(0, "KilledCount", PlayersData[playerid][KilledCount]);
		cache_get_value_name_int(0, "Phone", PlayersData[playerid][Phone]);
		cache_get_value_name_int(0, "House", PlayersData[playerid][House]);
		cache_get_value_name_int(0, "Car", PlayersData[playerid][Car]);
		cache_get_value_name_int(0, "Faccion", PlayersData[playerid][Faccion]);
		cache_get_value_name_int(0, "Rango", PlayersData[playerid][Rango]);
		cache_get_value_name(0, "GirlFreind", PlayersData[playerid][GirlFreind], MAX_PLAYER_NAME);
		cache_get_value_name_int(0, "Bolsillos0", PlayersData[playerid][Bolsillos][0]);
		cache_get_value_name_int(0, "Bolsillos1", PlayersData[playerid][Bolsillos][1]);
		cache_get_value_name_int(0, "Bolsillos2", PlayersData[playerid][Bolsillos][2]);

		cache_get_value_name_int(0, "Bolsillos3", PlayersData[playerid][Bolsillos][3]);
		cache_get_value_name_int(0, "Bolsillos4", PlayersData[playerid][Bolsillos][4]);
		cache_get_value_name_int(0, "Habilidad", PlayersData[playerid][Habilidad]);
		cache_get_value_name_int(0, "Warn", PlayersData[playerid][Warn]);
		cache_get_value_name_int(0, "Ciudad", PlayersData[playerid][Ciudad]);
		cache_get_value_name_float(0, "Vida", PlayersData[playerid][Vida]);
		cache_get_value_name_float(0, "Chaleco", PlayersData[playerid][Chaleco]);
		cache_get_value_name_int(0, "Cansansio", PlayersData[playerid][Cansansio]);
		cache_get_value_name_int(0, "Dinero", PlayersData[playerid][Dinero]);
		cache_get_value_name_int(0, "Banco", PlayersData[playerid][Banco]);

		cache_get_value_name_int(0, "Jail", PlayersData[playerid][Jail]);
		cache_get_value_name_int(0, "Admin", PlayersData[playerid][Admin]);
		cache_get_value_name_int(0, "World", PlayersData[playerid][World]);
		cache_get_value_name_int(0, "Interior", PlayersData[playerid][Interior]);
		cache_get_value_name_int(0, "Skin", PlayersData[playerid][Skin]);
		cache_get_value_name_int(0, "Drogas", PlayersData[playerid][Drogas]);
		cache_get_value_name_int(0, "Materiales", PlayersData[playerid][Materiales]);
		cache_get_value_name_int(0, "Lata", PlayersData[playerid][Lata]);
		cache_get_value_name_int(0, "Ganzuas", PlayersData[playerid][Ganzuas]);
		cache_get_value_name_int(0, "Alquiler", PlayersData[playerid][Alquiler]);

		cache_get_value_name_int(0, "Bombas", PlayersData[playerid][Bombas]);
		cache_get_value_name_int(0, "Sexo", PlayersData[playerid][Sexo]);
		cache_get_value_name_int(0, "Idiomas0", PlayersData[playerid][Idiomas][0]);
		cache_get_value_name_int(0, "Idiomas1", PlayersData[playerid][Idiomas][1]);
		cache_get_value_name_int(0, "Idiomas2", PlayersData[playerid][Idiomas][2]);
		cache_get_value_name_int(0, "Idiomas3", PlayersData[playerid][Idiomas][3]);
		cache_get_value_name_int(0, "Idiomas4", PlayersData[playerid][Idiomas][4]);
		cache_get_value_name_int(0, "Idiomas5", PlayersData[playerid][Idiomas][5]);
		cache_get_value_name_int(0, "Licencias0", PlayersData[playerid][Licencias][0]);
		cache_get_value_name_int(0, "Licencias1", PlayersData[playerid][Licencias][1]);

		cache_get_value_name_int(0, "Licencias2", PlayersData[playerid][Licencias][2]);
		cache_get_value_name_int(0, "Licencias3", PlayersData[playerid][Licencias][3]);
		cache_get_value_name_int(0, "Licencias4", PlayersData[playerid][Licencias][4]);
		cache_get_value_name_int(0, "Licencias5", PlayersData[playerid][Licencias][5]);
		cache_get_value_name_int(0, "Licencias6", PlayersData[playerid][Licencias][6]);
		cache_get_value_name_int(0, "IsInJail", PlayersData[playerid][IsInJail]);
		cache_get_value_name_int(0, "Nacer", PlayersData[playerid][Nacer]);
		cache_get_value_name_int(0, "TimeRequestBank", PlayersData[playerid][TimeRequestBank]);
		cache_get_value_name_int(0, "MyBonus", PlayersData[playerid][MyBonus]);
		cache_get_value_name_int(0, "InTutorial", PlayersData[playerid][InTutorial]);

		cache_get_value_name_int(0, "Edad", PlayersData[playerid][Edad]);
		cache_get_value_name_int(0, "IsPlayerInHouse", PlayersData[playerid][IsPlayerInHouse]);
		cache_get_value_name_int(0, "TimeEquipo", PlayersData[playerid][TimeEquipo]);
		cache_get_value_name_int(0, "SpawnAmigo", PlayersData[playerid][SpawnAmigo]);
		cache_get_value_name_int(0, "IsPaga", PlayersData[playerid][IsPaga]);
		cache_get_value_name(0, "MyIP", PlayersData[playerid][MyIP], 16);
		cache_get_value_name_int(0, "Job", PlayersData[playerid][Job]);
		cache_get_value_name_int(0, "MyStyleWalk", PlayersData[playerid][MyStyleWalk]);
		cache_get_value_name_int(0, "Saldo", PlayersData[playerid][Saldo]);
		cache_get_value_name_int(0, "LicenciaPesca", PlayersData[playerid][LicenciaPesca]);

		cache_get_value_name_int(0, "IntermitentState", PlayersData[playerid][IntermitentState]);
		cache_get_value_name_int(0, "MyStyleTalk", PlayersData[playerid][MyStyleTalk]);
		cache_get_value_name_int(0, "IsPlayerInBizz", PlayersData[playerid][IsPlayerInBizz]);
		cache_get_value_name_int(0, "IsPlayerInGarage", PlayersData[playerid][IsPlayerInGarage]);
		cache_get_value_name(0, "WeaponS", WeaponsData, 50);
		cache_get_value_name(0, "AmmoS", AmmoData, 50);
		cache_get_value_name_int(0, "Asignados0", PlayersData[playerid][Asignados][0]);
		cache_get_value_name_int(0, "Asignados1", PlayersData[playerid][Asignados][1]);
		cache_get_value_name_int(0, "Asignados2", PlayersData[playerid][Asignados][2]);
		cache_get_value_name_int(0, "Bolsa0", PlayersData[playerid][Bolsa][0]);

		cache_get_value_name_int(0, "Bolsa1", PlayersData[playerid][Bolsa][1]);
		cache_get_value_name_int(0, "Bolsa2", PlayersData[playerid][Bolsa][2]);
		cache_get_value_name_int(0, "Bolsa3", PlayersData[playerid][Bolsa][3]);
		cache_get_value_name_int(0, "BolsaC0", PlayersData[playerid][BolsaC][0]);
		cache_get_value_name_int(0, "BolsaC1", PlayersData[playerid][BolsaC][1]);
		cache_get_value_name_int(0, "BolsaC2", PlayersData[playerid][BolsaC][2]);
		cache_get_value_name_int(0, "BolsaC3", PlayersData[playerid][BolsaC][3]);
		cache_get_value_name_int(0, "HaveBolsa", PlayersData[playerid][HaveBolsa]);
		cache_get_value_name_int(0, "IsPlayerInVehInt", PlayersData[playerid][IsPlayerInVehInt]);
		cache_get_value_name_int(0, "Cartera0", PlayersData[playerid][Cartera][0]);

		cache_get_value_name_int(0, "Cartera1", PlayersData[playerid][Cartera][1]);
		cache_get_value_name_int(0, "Cartera2", PlayersData[playerid][Cartera][2]);
		cache_get_value_name_int(0, "Cartera3", PlayersData[playerid][Cartera][3]);
		cache_get_value_name_int(0, "Cartera4", PlayersData[playerid][Cartera][4]);
		cache_get_value_name_int(0, "Cartera5", PlayersData[playerid][Cartera][5]);
		cache_get_value_name_int(0, "CarteraC0", PlayersData[playerid][CarteraC][0]);
		cache_get_value_name_int(0, "CarteraC1", PlayersData[playerid][CarteraC][1]);
		cache_get_value_name_int(0, "CarteraC2", PlayersData[playerid][CarteraC][2]);
		cache_get_value_name_int(0, "CarteraC3", PlayersData[playerid][CarteraC][3]);
		cache_get_value_name_int(0, "CarteraC4", PlayersData[playerid][CarteraC][4]);

		cache_get_value_name_int(0, "CarteraC5", PlayersData[playerid][CarteraC][5]);
		cache_get_value_name_int(0, "CarteraT0", PlayersData[playerid][CarteraT][0]);
		cache_get_value_name_int(0, "CarteraT1", PlayersData[playerid][CarteraT][1]);
		cache_get_value_name_int(0, "CarteraT2", PlayersData[playerid][CarteraT][2]);
		cache_get_value_name_int(0, "CarteraT3", PlayersData[playerid][CarteraT][3]);
		cache_get_value_name_int(0, "CarteraT4", PlayersData[playerid][CarteraT][4]);
		cache_get_value_name_int(0, "CarteraT5", PlayersData[playerid][CarteraT][5]);
		cache_get_value_name_int(0, "AccountBankingOpen", PlayersData[playerid][AccountBankingOpen]);
		cache_get_value_name_int(0, "CarteraI0", PlayersData[playerid][CarteraI][0]);
		cache_get_value_name_int(0, "CarteraI1", PlayersData[playerid][CarteraI][1]);

		cache_get_value_name_int(0, "CarteraI2", PlayersData[playerid][CarteraI][2]);
		cache_get_value_name_int(0, "CarteraI3", PlayersData[playerid][CarteraI][3]);
		cache_get_value_name_int(0, "CarteraI4", PlayersData[playerid][CarteraI][4]);
		cache_get_value_name_int(0, "CarteraI5", PlayersData[playerid][CarteraI][5]);
		cache_get_value_name_int(0, "IsPlayerInBank", PlayersData[playerid][IsPlayerInBank]);
		cache_get_value_name_int(0, "AlertSMSBank", PlayersData[playerid][AlertSMSBank]);
		cache_get_value_name_int(0, "HorasWork", PlayersData[playerid][HorasWork]);
		cache_get_value_name_int(0, "CameraLogin", PlayersData[playerid][CameraLogin]);
		cache_get_value_name_int(0, "Enfermedad", PlayersData[playerid][Enfermedad]);
		cache_get_value_name_int(0, "Description", PlayersData[playerid][Description]);

		cache_get_value_name_int(0, "EnableDescription", PlayersData[playerid][EnableDescription]);
		cache_get_value_name(0, "DescriptionString", PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION);
		cache_get_value_name_int(0, "DescriptionColor", PlayersData[playerid][DescriptionColor]);
		cache_get_value_name_int(0, "DescriptionSelect", PlayersData[playerid][DescriptionSelect]);
		cache_get_value_name_int(0, "SpawnFac", PlayersData[playerid][SpawnFac]);
		cache_get_value_name_int(0, "Objetos0", PlayersData[playerid][Objetos][0]);
		cache_get_value_name_int(0, "Objetos1", PlayersData[playerid][Objetos][1]);
		cache_get_value_name_int(0, "Objetos2", PlayersData[playerid][Objetos][2]);
		cache_get_value_name_int(0, "Objetos3", PlayersData[playerid][Objetos][3]);

		cache_get_value_name_int(0, "Objetos4", PlayersData[playerid][Objetos][4]);
		cache_get_value_name_int(0, "Objetos5", PlayersData[playerid][Objetos][5]);
		cache_get_value_name_int(0, "Objetos6", PlayersData[playerid][Objetos][6]);
		cache_get_value_name_int(0, "Objetos7", PlayersData[playerid][Objetos][7]);
		cache_get_value_name_int(0, "Objetos8", PlayersData[playerid][Objetos][8]);
		cache_get_value_name_int(0, "ObjetosVision0", PlayersData[playerid][ObjetosVision][0]);
		cache_get_value_name_int(0, "ObjetosVision1", PlayersData[playerid][ObjetosVision][1]);
		cache_get_value_name_int(0, "ObjetosVision2", PlayersData[playerid][ObjetosVision][2]);
		cache_get_value_name_int(0, "ObjetosVision3", PlayersData[playerid][ObjetosVision][3]);
		cache_get_value_name_int(0, "ObjetosVision4", PlayersData[playerid][ObjetosVision][4]);

		cache_get_value_name_int(0, "ObjetosVision5", PlayersData[playerid][ObjetosVision][5]);
		cache_get_value_name_int(0, "ObjetosVision6", PlayersData[playerid][ObjetosVision][6]);
		cache_get_value_name_int(0, "ObjetosVision7", PlayersData[playerid][ObjetosVision][7]);
		cache_get_value_name_int(0, "ObjetosVision8", PlayersData[playerid][ObjetosVision][8]);
		cache_get_value_name_int(0, "TypePhone", PlayersData[playerid][TypePhone]);
		cache_get_value_name_int(0, "Ayudante", PlayersData[playerid][Ayudante]);
		cache_get_value_name_int(0, "Local", PlayersData[playerid][Local]);
		cache_get_value_name_int(0, "InLocal", PlayersData[playerid][InLocal]);
		cache_get_value_name_int(0, "Mapper", PlayersData[playerid][Mapper]);

		new SplitPos[2] = {0,0};
		new GetAWeaponsData[13][10];
		new GetAmmoData[13][10];
        for(new i=0; i != 13; i++)
		{
            SplitPos[0] = strfind(WeaponsData, "|", false);
            strmid(GetAWeaponsData[i], WeaponsData, 0, SplitPos[0]);
            strdel(WeaponsData, 0, SplitPos[0]+1);

            SplitPos[1] = strfind(AmmoData, "|", false);
            strmid(GetAmmoData[i], AmmoData, 0, SplitPos[1]);
            strdel(AmmoData, 0, SplitPos[1]+1);

			PlayersData[playerid][WeaponS][i] = strval(GetAWeaponsData[i]);
			PlayersData[playerid][AmmoS][i] = strval(GetAmmoData[i]);
        }
	}
	cache_delete(cacheid);
	return cuentaExiste;
}
//////////////////// SAVE
public DataUserSave(playerid)
{
	if ( PlayersDataOnline[playerid][Spawn] )
	{
        GetSpawnInfo(playerid);
    }

	new
	string[10],
	WeaponsData[50],
	AmmoData[50];

	for(new i=0; i<13; i++)
	{
		format(string,10,"%i|", PlayersData[playerid][WeaponS][i]);
		strcat(WeaponsData, string);
		format(string,10,"%i|", PlayersData[playerid][AmmoS][i]);
		strcat(AmmoData, string);
	}

	new query[2000], Cache:cacheid, cuentaExiste, playerDBID;

	mysql_format(dataBase, query, 200, "SELECT `ID` FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(cuentaExiste);

	if (cuentaExiste)
	{
		cache_get_value_name_int(0, "ID", playerDBID);
	}
	cache_delete(cacheid);

	if (!cuentaExiste)
	{
	    mysql_format(dataBase, query, 200, "INSERT INTO `%s` (`Nombre`) VALUES ('%e');", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
	    cacheid = mysql_query(dataBase, query);
	    playerDBID = cache_insert_id();
	    cache_delete(cacheid);
	}

	format(query, 100, "UPDATE `%s` SET ", DIR_USERS);
	strcat(query, "`Nombre`='%e',`Email`='%e',`Password`='%e',`AccountState`='%i',`Spawn_X`='%f',`Spawn_Y`='%f',`Spawn_Z`='%f',`Spawn_ZZ`='%f',`HoursPlaying`='%i',`DeahtCount`='%i',");
	strcat(query, "`KilledCount`='%i',`Phone`='%i',`House`='%i',`Car`='%i',`Faccion`='%i',`Rango`='%i',`GirlFreind`='%e',`Bolsillos0`='%i',`Bolsillos1`='%i',`Bolsillos2`='%i',");
	strcat(query, "`Bolsillos3`='%i',`Bolsillos4`='%i',`Habilidad`='%i',`Warn`='%i',`Ciudad`='%i',`Vida`='%f',`Chaleco`='%f',`Cansansio`='%i',`Dinero`='%i',`Banco`='%i',");
	strcat(query, "`Jail`='%i',`Admin`='%i',`World`='%i',`Interior`='%i',`Skin`='%i',`Drogas`='%i',`Materiales`='%i',`Lata`='%i',`Ganzuas`='%i',`Alquiler`='%i',");
	strcat(query, "`Bombas`='%i',`Sexo`='%i',`Idiomas0`='%i',`Idiomas1`='%i',`Idiomas2`='%i',`Idiomas3`='%i',`Idiomas4`='%i',`Idiomas5`='%i',`Licencias0`='%i',`Licencias1`='%i',");
	strcat(query, "`Licencias2`='%i',`Licencias3`='%i',`Licencias4`='%i',`Licencias5`='%i',`Licencias6`='%i',`IsInJail`='%i',`Nacer`='%i',`TimeRequestBank`='%i',`MyBonus`='%i',`InTutorial`='%i',");
	strcat(query, "`Edad`='%i',`IsPlayerInHouse`='%i',`TimeEquipo`='%i',`SpawnAmigo`='%i',`IsPaga`='%i',`MyIP`='%s',`Job`='%i',`MyStyleWalk`='%i',`Saldo`='%i',`LicenciaPesca`='%i'");
	strcat(query, " WHERE `ID`='%i';");

	mysql_format(dataBase, query, 2000, query,
		PlayersDataOnline[playerid][NameOnline],
		PlayersData[playerid][Email],
		PlayersData[playerid][Password],
		PlayersData[playerid][AccountState],
		PlayersData[playerid][Spawn_X],
		PlayersData[playerid][Spawn_Y],
		PlayersData[playerid][Spawn_Z],
		PlayersData[playerid][Spawn_ZZ],
		PlayersData[playerid][HoursPlaying],
		PlayersData[playerid][DeahtCount],

		PlayersData[playerid][KilledCount],
		PlayersData[playerid][Phone],
		PlayersData[playerid][House],
		PlayersData[playerid][Car],
		PlayersData[playerid][Faccion],
		PlayersData[playerid][Rango],
		PlayersData[playerid][GirlFreind],
		PlayersData[playerid][Bolsillos][0],
		PlayersData[playerid][Bolsillos][1],
		PlayersData[playerid][Bolsillos][2],

		PlayersData[playerid][Bolsillos][3],
		PlayersData[playerid][Bolsillos][4],
		PlayersData[playerid][Habilidad],
		PlayersData[playerid][Warn],
		PlayersData[playerid][Ciudad],
		PlayersData[playerid][Vida],
		PlayersData[playerid][Chaleco],
		PlayersData[playerid][Cansansio],
		PlayersData[playerid][Dinero],
		PlayersData[playerid][Banco],

		PlayersData[playerid][Jail],
		PlayersData[playerid][Admin],
		PlayersData[playerid][World],
		PlayersData[playerid][Interior],
		PlayersData[playerid][Skin],
		PlayersData[playerid][Drogas],
		PlayersData[playerid][Materiales],
		PlayersData[playerid][Lata],
		PlayersData[playerid][Ganzuas],
		PlayersData[playerid][Alquiler],

		PlayersData[playerid][Bombas],
		PlayersData[playerid][Sexo],
		PlayersData[playerid][Idiomas][0],
		PlayersData[playerid][Idiomas][1],
		PlayersData[playerid][Idiomas][2],
		PlayersData[playerid][Idiomas][3],
		PlayersData[playerid][Idiomas][4],
		PlayersData[playerid][Idiomas][5],
		PlayersData[playerid][Licencias][0],
		PlayersData[playerid][Licencias][1],

		PlayersData[playerid][Licencias][2],
		PlayersData[playerid][Licencias][3],
		PlayersData[playerid][Licencias][4],
		PlayersData[playerid][Licencias][5],
		PlayersData[playerid][Licencias][6],
		PlayersData[playerid][IsInJail],
		PlayersData[playerid][Nacer],
		PlayersData[playerid][TimeRequestBank],
		PlayersData[playerid][MyBonus],
		PlayersData[playerid][InTutorial],

		PlayersData[playerid][Edad],
		PlayersData[playerid][IsPlayerInHouse],
		PlayersData[playerid][TimeEquipo],
		PlayersData[playerid][SpawnAmigo],
		PlayersData[playerid][IsPaga],
		PlayersData[playerid][MyIP],
		PlayersData[playerid][Job],
		PlayersData[playerid][MyStyleWalk],
		PlayersData[playerid][Saldo],
		PlayersData[playerid][LicenciaPesca],

		playerDBID
	);
	mysql_query(dataBase, query, false);

	format(query, 100, "UPDATE `%s` SET ", DIR_USERS);
	strcat(query, "`IntermitentState`='%i',`MyStyleTalk`='%i',`IsPlayerInBizz`='%i',`IsPlayerInGarage`='%i',`WeaponS`='%s',`AmmoS`='%s',`Asignados0`='%i',`Asignados1`='%i',`Asignados2`='%i',`Bolsa0`='%i',");
	strcat(query, "`Bolsa1`='%i',`Bolsa2`='%i',`Bolsa3`='%i',`BolsaC0`='%i',`BolsaC1`='%i',`BolsaC2`='%i',`BolsaC3`='%i',`HaveBolsa`='%i',`IsPlayerInVehInt`='%i',`Cartera0`='%i',");
	strcat(query, "`Cartera1`='%i',`Cartera2`='%i',`Cartera3`='%i',`Cartera4`='%i',`Cartera5`='%i',`CarteraC0`='%i',`CarteraC1`='%i',`CarteraC2`='%i',`CarteraC3`='%i',`CarteraC4`='%i',");
	strcat(query, "`CarteraC5`='%i',`CarteraT0`='%i',`CarteraT1`='%i',`CarteraT2`='%i',`CarteraT3`='%i',`CarteraT4`='%i',`CarteraT5`='%i',`AccountBankingOpen`='%i',`CarteraI0`='%i',`CarteraI1`='%i',");
	strcat(query, "`CarteraI2`='%i',`CarteraI3`='%i',`CarteraI4`='%i',`CarteraI5`='%i',`IsPlayerInBank`='%i',`AlertSMSBank`='%i',`HorasWork`='%i',`CameraLogin`='%i',`Enfermedad`='%i',`Description`='%i',");
	strcat(query, "`EnableDescription`='%i',`DescriptionString`='%e',`DescriptionColor`='%i',`DescriptionSelect`='%i',`SpawnFac`='%i',`Objetos0`='%i',`Objetos1`='%i',`Objetos2`='%i',`Objetos3`='%i',");
	strcat(query, "`Objetos4`='%i',`Objetos5`='%i',`Objetos6`='%i',`Objetos7`='%i',`Objetos8`='%i',`ObjetosVision0`='%i',`ObjetosVision1`='%i',`ObjetosVision2`='%i',`ObjetosVision3`='%i',`ObjetosVision4`='%i',");
	strcat(query, "`ObjetosVision5`='%i',`ObjetosVision6`='%i',`ObjetosVision7`='%i',`ObjetosVision8`='%i',`TypePhone`='%i',`Ayudante`='%i',`Local`='%i',`InLocal`='%i',`Mapper`='%i'");
	strcat(query, " WHERE `ID`='%i';");

	mysql_format(dataBase, query, 2000, query,
		PlayersData[playerid][IntermitentState],
		PlayersData[playerid][MyStyleTalk],
		PlayersData[playerid][IsPlayerInBizz],
		PlayersData[playerid][IsPlayerInGarage],
		WeaponsData,
		AmmoData,
		PlayersData[playerid][Asignados][0],
		PlayersData[playerid][Asignados][1],
		PlayersData[playerid][Asignados][2],
		PlayersData[playerid][Bolsa][0],

		PlayersData[playerid][Bolsa][1],
		PlayersData[playerid][Bolsa][2],
		PlayersData[playerid][Bolsa][3],
		PlayersData[playerid][BolsaC][0],
		PlayersData[playerid][BolsaC][1],
		PlayersData[playerid][BolsaC][2],
		PlayersData[playerid][BolsaC][3],
		PlayersData[playerid][HaveBolsa],
		PlayersData[playerid][IsPlayerInVehInt],
		PlayersData[playerid][Cartera][0],

		PlayersData[playerid][Cartera][1],
		PlayersData[playerid][Cartera][2],
		PlayersData[playerid][Cartera][3],
		PlayersData[playerid][Cartera][4],
		PlayersData[playerid][Cartera][5],
		PlayersData[playerid][CarteraC][0],
		PlayersData[playerid][CarteraC][1],
		PlayersData[playerid][CarteraC][2],
		PlayersData[playerid][CarteraC][3],
		PlayersData[playerid][CarteraC][4],

		PlayersData[playerid][CarteraC][5],
		PlayersData[playerid][CarteraT][0],
		PlayersData[playerid][CarteraT][1],
		PlayersData[playerid][CarteraT][2],
		PlayersData[playerid][CarteraT][3],
		PlayersData[playerid][CarteraT][4],
		PlayersData[playerid][CarteraT][5],
		PlayersData[playerid][AccountBankingOpen],
		PlayersData[playerid][CarteraI][0],
		PlayersData[playerid][CarteraI][1],

		PlayersData[playerid][CarteraI][2],
		PlayersData[playerid][CarteraI][3],
		PlayersData[playerid][CarteraI][4],
		PlayersData[playerid][CarteraI][5],
		PlayersData[playerid][IsPlayerInBank],
		PlayersData[playerid][AlertSMSBank],
		PlayersData[playerid][HorasWork],
		PlayersData[playerid][CameraLogin],
		PlayersData[playerid][Enfermedad],
		PlayersData[playerid][Description],

		PlayersData[playerid][EnableDescription],
		PlayersData[playerid][DescriptionString],
		PlayersData[playerid][DescriptionColor],
		PlayersData[playerid][DescriptionSelect],
		PlayersData[playerid][SpawnFac],
		PlayersData[playerid][Objetos][0],
		PlayersData[playerid][Objetos][1],
		PlayersData[playerid][Objetos][2],
		PlayersData[playerid][Objetos][3],

		PlayersData[playerid][Objetos][4],
		PlayersData[playerid][Objetos][5],
		PlayersData[playerid][Objetos][6],
		PlayersData[playerid][Objetos][7],
		PlayersData[playerid][Objetos][8],
		PlayersData[playerid][ObjetosVision][0],
		PlayersData[playerid][ObjetosVision][1],
		PlayersData[playerid][ObjetosVision][2],
		PlayersData[playerid][ObjetosVision][3],
		PlayersData[playerid][ObjetosVision][4],

		PlayersData[playerid][ObjetosVision][5],
		PlayersData[playerid][ObjetosVision][6],
		PlayersData[playerid][ObjetosVision][7],
		PlayersData[playerid][ObjetosVision][8],
		PlayersData[playerid][TypePhone],
		PlayersData[playerid][Ayudante],
		PlayersData[playerid][Local],
		PlayersData[playerid][InLocal],
		PlayersData[playerid][Mapper],

  		playerDBID
	);
	mysql_query(dataBase, query, false);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public GetSpawnInfo(playerid)
{
	if ( !PlayersDataOnline[playerid][ModeDM] )
	{
		CheckWeapondCheat(playerid);
	}
	else
	{
		ResetPlayerWeaponsEx(playerid);
	}


	PlayersData[playerid][Chaleco] = PlayersDataOnline[playerid][ChalecoOn];
	PlayersData[playerid][Vida] = PlayersDataOnline[playerid][VidaOn];

 	GetPlayerPos(playerid, PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z]);
    GetPlayerFacingAngle(playerid, PlayersData[playerid][Spawn_ZZ]);

  	PlayersData[playerid][Interior] = GetPlayerInteriorEx(playerid);
	PlayersData[playerid][World] = GetPlayerVirtualWorld(playerid);
}
public SetSpawnInfoEx(playerid)
{
	if ( CheckWeapondCheat(playerid) )
	{
		PlayersDataOnline[playerid][StateWeaponPass] 	= gettime() + 5;
		GivePlayerWeaponReturn(playerid);
	}
	PlayersDataOnline[playerid][ChalecoOn] = PlayersData[playerid][Chaleco];
	PlayersDataOnline[playerid][VidaOn] = PlayersData[playerid][Vida];
 	SetPlayerPos(playerid, PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z]);
    SetPlayerFacingAngle(playerid, PlayersData[playerid][Spawn_ZZ]);
	SetPlayerInteriorEx(playerid, PlayersData[playerid][Interior]);
	SetPlayerVirtualWorldEx(playerid, PlayersData[playerid][World]);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public LoadDataFaccion(faccionid)
{
	new TempDirFaccion[25];
    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, faccionid);
    new FaccionDataALL[MAX_PLAYER_DATA];
    new FaccionDataSlots[MAX_FACCION_SLOT][MAX_PLAYER_NAME];
	new File:LoadFaccion = fopen(TempDirFaccion, io_read);
	fread(LoadFaccion, FaccionDataALL);
	fclose(LoadFaccion);

	new PosSplitAfter = 0;
	for ( new i = 0; i < MAX_FACCION_SLOT; i++ )
	{
		PosSplitAfter = strfind(FaccionDataALL, "|", false);
		strmid(FaccionDataSlots[i], FaccionDataALL, 0, PosSplitAfter, sizeof(FaccionDataALL));
		strdel(FaccionDataALL, 0, PosSplitAfter + 1);
	}

	format(FaccionData[faccionid][Lider], MAX_PLAYER_NAME, "%s", FaccionDataSlots[0]);
	FaccionData[faccionid][Deposito] 		= strval(FaccionDataSlots[1]);
	FaccionData[faccionid][Almacen][0] 		= strval(FaccionDataSlots[2]);
	FaccionData[faccionid][Almacen][1] 		= strval(FaccionDataSlots[3]);
	FaccionData[faccionid][LockA][0]		= strval(FaccionDataSlots[4]);
	FaccionData[faccionid][LockA][1] 		= strval(FaccionDataSlots[5]);
	FaccionData[faccionid][Lock]            = strval(FaccionDataSlots[6]);

	WeaponsFaccion[faccionid][0][0]    = strval(FaccionDataSlots[7]);
	WeaponsFaccion[faccionid][0][1]    = strval(FaccionDataSlots[8]);
	WeaponsFaccion[faccionid][0][2]    = strval(FaccionDataSlots[9]);
	WeaponsFaccion[faccionid][0][3]    = strval(FaccionDataSlots[10]);
	WeaponsFaccion[faccionid][0][4]    = strval(FaccionDataSlots[11]);
	WeaponsFaccion[faccionid][0][5]    = strval(FaccionDataSlots[12]);
	WeaponsFaccion[faccionid][0][6]    = strval(FaccionDataSlots[13]);
	WeaponsFaccion[faccionid][0][7]    = strval(FaccionDataSlots[14]);
	WeaponsFaccion[faccionid][0][8]    = strval(FaccionDataSlots[15]);
	WeaponsFaccion[faccionid][0][9]    = strval(FaccionDataSlots[16]);

	WeaponsFaccion[faccionid][1][0]    = strval(FaccionDataSlots[17]);
	WeaponsFaccion[faccionid][1][1]    = strval(FaccionDataSlots[18]);
	WeaponsFaccion[faccionid][1][2]    = strval(FaccionDataSlots[19]);
	WeaponsFaccion[faccionid][1][3]    = strval(FaccionDataSlots[20]);
	WeaponsFaccion[faccionid][1][4]    = strval(FaccionDataSlots[21]);
	WeaponsFaccion[faccionid][1][5]    = strval(FaccionDataSlots[22]);
	WeaponsFaccion[faccionid][1][6]    = strval(FaccionDataSlots[23]);
	WeaponsFaccion[faccionid][1][7]    = strval(FaccionDataSlots[24]);
	WeaponsFaccion[faccionid][1][8]    = strval(FaccionDataSlots[25]);
	WeaponsFaccion[faccionid][1][9]    = strval(FaccionDataSlots[26]);

	AmmoFaccion[faccionid][0][0]    = strval(FaccionDataSlots[27]);
	AmmoFaccion[faccionid][0][1]    = strval(FaccionDataSlots[28]);
	AmmoFaccion[faccionid][0][2]    = strval(FaccionDataSlots[29]);
	AmmoFaccion[faccionid][0][3]    = strval(FaccionDataSlots[30]);
	AmmoFaccion[faccionid][0][4]    = strval(FaccionDataSlots[31]);
	AmmoFaccion[faccionid][0][5]    = strval(FaccionDataSlots[32]);
	AmmoFaccion[faccionid][0][6]    = strval(FaccionDataSlots[33]);
	AmmoFaccion[faccionid][0][7]    = strval(FaccionDataSlots[34]);
	AmmoFaccion[faccionid][0][8]    = strval(FaccionDataSlots[35]);
	AmmoFaccion[faccionid][0][9]    = strval(FaccionDataSlots[36]);

	AmmoFaccion[faccionid][1][0]    = strval(FaccionDataSlots[37]);
	AmmoFaccion[faccionid][1][1]    = strval(FaccionDataSlots[38]);
	AmmoFaccion[faccionid][1][2]    = strval(FaccionDataSlots[39]);
	AmmoFaccion[faccionid][1][3]    = strval(FaccionDataSlots[40]);
	AmmoFaccion[faccionid][1][4]    = strval(FaccionDataSlots[41]);
	AmmoFaccion[faccionid][1][5]    = strval(FaccionDataSlots[42]);
	AmmoFaccion[faccionid][1][6]    = strval(FaccionDataSlots[43]);
	AmmoFaccion[faccionid][1][7]    = strval(FaccionDataSlots[44]);
	AmmoFaccion[faccionid][1][8]    = strval(FaccionDataSlots[45]);
	AmmoFaccion[faccionid][1][9]    = strval(FaccionDataSlots[46]);

	FaccionesChaleco[faccionid][0][0]    = floatstr(FaccionDataSlots[47]);
	FaccionesChaleco[faccionid][0][1]    = floatstr(FaccionDataSlots[48]);
	FaccionesChaleco[faccionid][0][2]    = floatstr(FaccionDataSlots[49]);
	FaccionesChaleco[faccionid][0][3]    = floatstr(FaccionDataSlots[50]);

	FaccionesChaleco[faccionid][1][0]    = floatstr(FaccionDataSlots[51]);
	FaccionesChaleco[faccionid][1][1]    = floatstr(FaccionDataSlots[52]);
	FaccionesChaleco[faccionid][1][2]    = floatstr(FaccionDataSlots[53]);
	FaccionesChaleco[faccionid][1][3]    = floatstr(FaccionDataSlots[54]);

	FaccionData[faccionid][Drogas][0]    = strval(FaccionDataSlots[55]);
	FaccionData[faccionid][Drogas][1]    = strval(FaccionDataSlots[56]);

	FaccionData[faccionid][Ganzuas][0]   = strval(FaccionDataSlots[57]);
	FaccionData[faccionid][Ganzuas][1]   = strval(FaccionDataSlots[58]);

	FaccionData[faccionid][Bombas][0]    = strval(FaccionDataSlots[59]);
	FaccionData[faccionid][Bombas][1]    = strval(FaccionDataSlots[60]);

	UpdateFaccionTextLabel(faccionid, false);

	LoadPickupsAlmacenes(faccionid);
}

public SaveDataFaccion(faccionid)
{
	new TempDirFaccion[25];
    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, faccionid);

    new FaccionDataALL[MAX_PLAYER_DATA];
 	format(FaccionDataALL, MAX_PLAYER_DATA, "%s|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%f|%f|%f|%f|%f|%f|%f|%f|%i|%i|%i|%i|%i|%i|",
 	FaccionData[faccionid][Lider],
	FaccionData[faccionid][Deposito],
	FaccionData[faccionid][Almacen][0],
	FaccionData[faccionid][Almacen][1],
	FaccionData[faccionid][LockA][0],
	FaccionData[faccionid][LockA][1],
	FaccionData[faccionid][Lock],
	WeaponsFaccion[faccionid][0][0],
	WeaponsFaccion[faccionid][0][1],
	WeaponsFaccion[faccionid][0][2],
	WeaponsFaccion[faccionid][0][3],
	WeaponsFaccion[faccionid][0][4],
	WeaponsFaccion[faccionid][0][5],
	WeaponsFaccion[faccionid][0][6],
	WeaponsFaccion[faccionid][0][7],
	WeaponsFaccion[faccionid][0][8],
	WeaponsFaccion[faccionid][0][9],
	WeaponsFaccion[faccionid][1][0],
	WeaponsFaccion[faccionid][1][1],
	WeaponsFaccion[faccionid][1][2],
	WeaponsFaccion[faccionid][1][3],
	WeaponsFaccion[faccionid][1][4],
	WeaponsFaccion[faccionid][1][5],
	WeaponsFaccion[faccionid][1][6],
	WeaponsFaccion[faccionid][1][7],
	WeaponsFaccion[faccionid][1][8],
	WeaponsFaccion[faccionid][1][9],
	AmmoFaccion[faccionid][0][0],
	AmmoFaccion[faccionid][0][1],
	AmmoFaccion[faccionid][0][2],
	AmmoFaccion[faccionid][0][3],
	AmmoFaccion[faccionid][0][4],
	AmmoFaccion[faccionid][0][5],
	AmmoFaccion[faccionid][0][6],
	AmmoFaccion[faccionid][0][7],
	AmmoFaccion[faccionid][0][8],
	AmmoFaccion[faccionid][0][9],
	AmmoFaccion[faccionid][1][0],
	AmmoFaccion[faccionid][1][1],
	AmmoFaccion[faccionid][1][2],
	AmmoFaccion[faccionid][1][3],
	AmmoFaccion[faccionid][1][4],
	AmmoFaccion[faccionid][1][5],
	AmmoFaccion[faccionid][1][6],
	AmmoFaccion[faccionid][1][7],
	AmmoFaccion[faccionid][1][8],
	AmmoFaccion[faccionid][1][9],
	FaccionesChaleco[faccionid][0][0],
	FaccionesChaleco[faccionid][0][1],
	FaccionesChaleco[faccionid][0][2],
	FaccionesChaleco[faccionid][0][3],
	FaccionesChaleco[faccionid][1][0],
	FaccionesChaleco[faccionid][1][1],
	FaccionesChaleco[faccionid][1][2],
	FaccionesChaleco[faccionid][1][3],
	FaccionData[faccionid][Drogas][0],
	FaccionData[faccionid][Drogas][1],
	FaccionData[faccionid][Ganzuas][0],
	FaccionData[faccionid][Ganzuas][1],
	FaccionData[faccionid][Bombas][0],
	FaccionData[faccionid][Bombas][1]);

	new File:SaveFaccion = fopen(TempDirFaccion, io_write);
	fwrite(SaveFaccion, FaccionDataALL);
	fclose(SaveFaccion);
}
public SendChatStream(playerid, const text[])
{
	new Float:X, Float:Y, Float:Z;
	new MsgSendChat[MAX_TEXT_CHAT];
	GetPlayerPos(playerid,X,Y,Z);
	if ( CallCNN == playerid || PlayersDataOnline[playerid][IsDescolgado] && PlayersDataOnline[playerid][InCall] != -1 && PlayersDataOnline[playerid][InCall] != 888 &&
		 PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado])
	{
	    new MsgSendChatAdmin[MAX_TEXT_CHAT];
	    if ( CallCNN != playerid )
	    {
	        if (PlayersDataOnline[PlayersDataOnline[playerid][InCall]][Altavoz])
	        {
	            new MsgSendChatNormal[MAX_TEXT_CHAT];
				format(MsgSendChatAdmin, sizeof(MsgSendChatAdmin), " [Altavoz]: %s [%s] (([%i]))", text,  PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnlineFix], playerid);
				format(MsgSendChatNormal, sizeof(MsgSendChatNormal), " [Altavoz]: %s [%s]", text, PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnlineFix]);
			    new Float:PosALTAVOZ[3]; GetPlayerPos(PlayersDataOnline[playerid][InCall], PosALTAVOZ[0], PosALTAVOZ[1], PosALTAVOZ[2]);
				for (new i = 0; i < MAX_PLAYERS; i++)
				{
				    if ( IsPlayerConnected(i) && PlayersData[i][Admin] >= 1 && PlayersDataOnline[i][State] == 3)
				    {
			            SendChatStreamAnonymousPlayerid(i, MsgSendChatAdmin, GetPlayerVirtualWorld(PlayersDataOnline[playerid][InCall]), PosALTAVOZ[0], PosALTAVOZ[1], PosALTAVOZ[2]);
				    }
				    else
				    {
			            SendChatStreamAnonymousPlayerid(i, MsgSendChatNormal, GetPlayerVirtualWorld(PlayersDataOnline[playerid][InCall]), PosALTAVOZ[0], PosALTAVOZ[1], PosALTAVOZ[2]);
					}
				}
			}
			else
			{
				format(MsgSendChat, sizeof(MsgSendChat), "[Móvil]: %s", text);
				SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_DE_WISPEO, MsgSendChat);
			}
		}
		else
		{
			format(MsgSendChat, sizeof(MsgSendChat), "[Línea Telefónica]: %s", text);
			format(MsgSendChatAdmin, sizeof(MsgSendChatAdmin), "[Línea Telefónica]: %s (([%i]))", text, playerid);
			for (new i = 0; i < MAX_PLAYERS; i++)
			{
				if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN])
				{
				    if ( PlayersData[i][Admin] >= 1 )
				    {
				        SendClientMessage(i, COLOR_DE_TRANSMISION, MsgSendChatAdmin);
				    }
				    else
				    {
				        SendClientMessage(i, COLOR_DE_TRANSMISION, MsgSendChat);
					}
				}
			}
		}
		format(MsgSendChat, sizeof(MsgSendChat), "%s [Móvil]: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
	}
	else
	{
		format(MsgSendChat, sizeof(MsgSendChat), "%s Dice: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
	}
    new MyWorrld = GetPlayerVirtualWorld(playerid);
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == MyWorrld)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],MsgSendChat);
			}
		}
	}
}
public SendChatStreamNormal(playerid, const text[], const type[])
{
	new Float:X, Float:Y, Float:Z;
	new MsgSendChat[MAX_TEXT_CHAT];
	GetPlayerPos(playerid,X,Y,Z);
	format(MsgSendChat, sizeof(MsgSendChat), "%s %s %s", PlayersDataOnline[playerid][NameOnlineFix], type, text);
    new MyWorrld = GetPlayerVirtualWorld(playerid);
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == MyWorrld)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],MsgSendChat);
			}
		}
	}
}
public SendChatStreamAnonymousPlayerid(playerid, const text[], WorldStream, Float:X, Float:Y, Float:Z)
{
    if(IsPlayerConnected(playerid) && IsPlayerInRangeOfPoint(playerid,30.0,X,Y,Z) && GetPlayerVirtualWorld(playerid) == WorldStream && PlayersDataOnline[playerid][State] == 3)
    {
	    if(IsPlayerInRangeOfPoint(playerid,5.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[0],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,10.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[1],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,15.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[2],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,20.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[3],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,25.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[4],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,30.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[5],text);
		}
	}
}
public SendChatStreamGritar(playerid, const text[])
{
    new TextAccion[150];
	format(TextAccion, sizeof(TextAccion), "* %s Grita: %s!!", PlayersDataOnline[playerid][NameOnlineFix], text);
    new WorldStream = GetPlayerVirtualWorld(playerid);
    new Float:X, Float:Y, Float:Z;  GetPlayerPos(playerid, X, Y, Z);

	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,50.0,X,Y,Z) && GetPlayerVirtualWorld(i) == WorldStream && PlayersDataOnline[i][State] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,40.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,50.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],TextAccion);
			}
		}
	}
}
public SendChatStreamAnonymous(const text[], WorldStream, Float:X, Float:Y, Float:Z)
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == WorldStream && PlayersDataOnline[i][State] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],text);
			}
		}
	}
}
public Acciones(playerid, type, const text[])
{
	new MsgAcciones[150];
	switch (type)
	{
	    case 0: // 0 - ME - LILA
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s %s", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 1: // 1 - AME - AMARILLO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "%s [ID:%i]", text, playerid);
		}
	    case 2: // 2 - INTENTAR OK - VERDE
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s intentó %s, y consiguió hacerlo!", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 3: // 3 - INTENTAR FAIL - ROJO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s intentó %s, y no consiguió hacerlo.", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 4: // 4 - GRITAR - BLANCO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s Grita: %s!!", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 5: // 5 - SUSURRAR - BLANCO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s Susurra: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 6: // 6 - CANAL OOC - MEDIO GRIS
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "[OOC] %s: (( %s ))", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 7: // 7 - AME FIX - AMARILLO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "%s [ID:%i]*", text, playerid);
		}
	    case 8: // 8 - ME FIX - LILA
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "** %s %s", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 9: // 9 - MEGAFONO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s [Megáfono]: %s!!!", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	}

    new Float:PosMensajeX, Float:PosMensajeY, Float:PosMensajeZ;
    GetPlayerPos(playerid, Float:PosMensajeX, Float:PosMensajeY, Float:PosMensajeZ);
    new MyWorrld = GetPlayerVirtualWorld(playerid);
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && IsPlayerInRangeOfPoint(
			i,
			AccionesRadios[type],
			Float:PosMensajeX,
			Float:PosMensajeY,
			Float:PosMensajeZ) && GetPlayerVirtualWorld(i) == MyWorrld &&
			PlayersDataOnline[i][State] == 3)
		{
			SendClientMessage(i, AccionesColors[type], MsgAcciones);
		}
	}
	print(MsgAcciones);
}
public IsPlayerNearEx(myplayerid, playerid, const iderror1[], const iderror2[], const iderror3[], const stringerror1[], const stringerror2[], const stringerror3[])
{
	if ( myplayerid != playerid )
	{
		if ( IsPlayerConnected(playerid) )
		{
			if (PlayersDataOnline[playerid][State] == 3)
			{
			    new Float:MyPos[3];
			    GetPlayerPos(myplayerid, MyPos[0], MyPos[1], MyPos[2]);
			    if ( IsPlayerInRangeOfPoint(playerid, 4.0, MyPos[0], MyPos[1], MyPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(myplayerid)  )
			    {
			        return true;
	   			}
	   			else
	   			{
					SendInfoMessage(myplayerid, 0, iderror3, stringerror3);
				}
			}
			else
			{
				SendInfoMessage(myplayerid, 0, iderror2, stringerror2);
			}
		}
		else
		{
			SendInfoMessage(myplayerid, 0, iderror1, stringerror1);
		}
	}
	else
	{
		SendInfoMessage(myplayerid, 0, "213", "Has introducído tu misma ID");
	}
	return false;
}
public GetMaxFaccionRango(faccionid)
{
	new i;
	for (;i < MAX_FACCION_RANGOS; i++)
	{
		if ( FaccionData[faccionid][Paga][i] == 0 )
		{
			break;
		}
	}
	return i - 1;
}
public GetMaxFaccionRangoSkin(faccionid, rangoid)
{
	new i;
	for (;i < MAX_FACCION_SKIN; i++)
	{
		if ( RangosSkins[faccionid][rangoid][i] == 0 )
		{
			break;
		}
	}
	return i - 1;

}
public GetPlayerStats(playerid, playeridshow)
{
	new info[1500];

    strcat(info, "{"COLOR_AZUL"}ID\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Nombre\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Interior\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Mundo\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Warns\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Nivel\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Falta\t[%i/%i]\n");
    
    strcat(info, "{"COLOR_AZUL"}Horas Jugadas\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Edad\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Cansansio\t%i/54\n");
    strcat(info, "{"COLOR_AZUL"}Movil\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Ciudad\t%s\n");
    
    strcat(info, "{"COLOR_AZUL"}Sexo\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Skin\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Ganzuas\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Drogas\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Materiales\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Lata\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Bombas\t%i\n");
    
	format(info, sizeof(info), info,
		playerid,
		PlayersDataOnline[playerid][NameOnline],
		GetPlayerInteriorEx(playerid),
		GetPlayerVirtualWorld(playerid),
		PlayersData[playerid][Warn],
		GetPlayerScoreEx(playerid),
        GetPlayerScoreMin(playerid),
        GetPlayerScoreMax(playerid),

		PlayersData[playerid][HoursPlaying],
		PlayersData[playerid][Edad],
		PlayersData[playerid][Cansansio],
		PlayersData[playerid][Phone],
		Ciudades[PlayersData[playerid][Ciudad]],
		
		Sexos[PlayersData[playerid][Sexo]],
		PlayersData[playerid][Skin],
		PlayersData[playerid][Ganzuas],
		PlayersData[playerid][Drogas],
		PlayersData[playerid][Materiales],
		LataName[PlayersData[playerid][Lata]],
		PlayersData[playerid][Bombas]);
		
	strcat(info, "{"COLOR_AZUL"}Faccion\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Rango\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Dinero\t$%i\n");
    strcat(info, "{"COLOR_AZUL"}Cuenta de Ahorros\t$%i\n");
    strcat(info, "{"COLOR_AZUL"}Cuenta de Cheques\t$%i\n");

    strcat(info, "{"COLOR_AZUL"}Habilidad\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Casado\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Hablar\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Caminar\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Saldo\t$%i\n");
    strcat(info, "{"COLOR_AZUL"}Bolsa\t%s\n");
    
    strcat(info, "{"COLOR_AZUL"}Muerto\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Muertos\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Vehiculo 1\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Vehiculo 2\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Vehiculo 3\t%s\n");
    
    format(info, sizeof(info), info,
    	FaccionData[PlayersData[playerid][Faccion]][NameFaccion],
		FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]],
		PlayersData[playerid][Dinero],
		PlayersData[playerid][Banco],
		Banking[playerid][Balance],
		
		HabilidadesName[PlayersData[playerid][Habilidad]],
		PlayersData[playerid][GirlFreind],
		ModeTalkName[PlayersData[playerid][MyStyleTalk]],
		ModeWalkName[PlayersData[playerid][MyStyleWalk]],
		PlayersData[playerid][Saldo],
		SiOrNo[PlayersData[playerid][HaveBolsa]],
		
		PlayersData[playerid][DeahtCount],
		PlayersData[playerid][KilledCount],
		DataCars[PlayersData[playerid][Asignados][0]][MatriculaString],
		DataCars[PlayersData[playerid][Asignados][1]][MatriculaString],
		DataCars[PlayersData[playerid][Asignados][2]][MatriculaString]);

    strcat(info, "{"COLOR_AZUL"}Enfermedad\t%s%s\n");
    strcat(info, "{"COLOR_AZUL"}Horas de trabajo\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Email\t%s\n");
    strcat(info, "{"COLOR_AZUL"}Trabajo\t%s\n");
    
    strcat(info, "{"COLOR_AZUL"}Spawn Faccion\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Cuenta Bancaria\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Casa\t%i\n");
    strcat(info, "{"COLOR_AZUL"}Local\t%i\n");
    //strcat(info, "{"COLOR_AZUL"}\t%i\n");
    
    format(info, sizeof(info), info,
        EnfermedadColores[PlayersData[playerid][Enfermedad]], EnfermedadName[PlayersData[playerid][Enfermedad]],
		PlayersData[playerid][HorasWork],
		PlayersData[playerid][Email],
		Jobs[PlayersData[playerid][Job]][NameJob],
		
		PlayersData[playerid][SpawnFac] + 1,
		PlayersData[playerid][AccountBankingOpen],	
		PlayersData[playerid][House],
		PlayersData[playerid][Local] +1);
		
	ShowPlayerDialogEx(playeridshow, 999, DIALOG_STYLE_TABLIST, "{"COLOR_AZUL"}Estadisticas", info, "Cerrar", "");
}
public IsCheatMoney(playerid, lastmoney)
{
	if ( lastmoney > PlayersData[playerid][Dinero] )
	{
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s AntiCheat-Money - %s[%i] posible cheat de money. Datos: Dinero encima: $%i Dinero AntiCheat: $%i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, lastmoney, PlayersData[playerid][Dinero]);
	    MsgCheatsReportsToAdmins(MsgAviso);
    }
}
public SendMessageRadioGeneral(playerid, const text[])
{
	new MsgRadio[MAX_TEXT_CHAT];
	format(MsgRadio, sizeof(MsgRadio), "***[%s] %s %s Radio General: %s, corto.", FaccionData[PlayersData[playerid][Faccion]][NameFaccion], FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && (PlayersData[i][Faccion] == LSPD || PlayersData[i][Faccion] == SFPD) )
		{
			SendClientMessage(i, COLOR_RADIO, MsgRadio);
		}
	}
	SendChatStreamNormal(playerid, text, "[Radio General]:");
	print(MsgRadio);
}
public SendMessageRadioGeneralSAMD(playerid, const text[])
{
	new MsgRadio[MAX_TEXT_CHAT];
	format(MsgRadio, sizeof(MsgRadio), "***[%s] %s %s Radio General: %s, corto.", FaccionData[PlayersData[playerid][Faccion]][NameFaccion], FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && (PlayersData[i][Faccion] == SFMD || PlayersData[i][Faccion] == LSMD) )
		{
			SendClientMessage(i, COLOR_RADIO, MsgRadio);
		}
	}
	SendChatStreamNormal(playerid, text, "[Radio General]:");
	print(MsgRadio);
}
public SendMessageRadio(playerid, frecuencia, const text[])
{
	new MsgRadio[MAX_TEXT_CHAT];
	format(MsgRadio, sizeof(MsgRadio), "*** %s %s radio Frecuencia[%i]: %s, corto.", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], frecuencia,text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( i != playerid && IsPlayerConnected(i) && PlayersData[i][Faccion] == PlayersData[playerid][Faccion] && PlayersDataOnline[i][State] == 3  && PlayersDataOnline[i][StateChannelRadio] && PlayersDataOnline[i][Frecuencia] == frecuencia)
		{
			SendClientMessage(i, COLOR_RADIO, MsgRadio);
		}
	}
	SendChatStreamNormal(playerid, text, "[Radio]:");
	print(MsgRadio);
}
public SendMessageDM(playerid, const text[])
{
	new MsgDM[MAX_TEXT_CHAT];
	format(MsgDM, sizeof(MsgDM), "* DM General %s: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] )
		{
			SendClientMessage(i, COLOR_DM, MsgDM);
		}
	}
	print(MsgDM);
}
public SendMessageFamily(playerid, const text[])
{
	new MsgFamily[MAX_TEXT_CHAT];
	format(MsgFamily, sizeof(MsgFamily), "*** %s %s: %s", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][Faccion] == PlayersData[playerid][Faccion] && PlayersDataOnline[i][State] == 3  && PlayersDataOnline[i][StateChannelFamily])
		{
			SendClientMessage(i, COLOR_FAMILY, MsgFamily);
		}
	}
	print(MsgFamily);
}
public Comandos_Admin(Comando, playerid, playeridAC, LV, Cantidad_o_Tipo, const String[])
{
	///////// COMANDOS DE LA ADMINISTRACIÓN
	switch (Comando)
	{
	    //		/ADMINON                		- Activarse como Admin
	    case 1:
	    {
	        SetPlayerColor(playerid, 0x0FFF00FF); // VERDE FOFORESENTE
			return 1;
		//		/A [TEXTO]              		- Canal de la administración
        }
        case 2:
        {

			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s %s: %s",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], String);

			for (new i = 0; i < MAX_PLAYERS; i++)
			{
			    if ( IsPlayerConnected(i) && PlayersData[i][Admin] >= 1 && PlayersDataOnline[i][State] == 3 )
			    {
			        SendClientMessage(i, COLOR_OWNED_CHAT, StringFormat);
			    }
		    }
		    print(StringFormat);
			return 1;
        }
        //      /VIDA [ID]						- Llevar la vida a un jugador
        case 3:
        {
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has llenado la vida a %s[%i].", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			SetPlayerHealthEx(playeridAC, 100);
			if (playerid != playeridAC)
			{
                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
   	        }
   	        else
   	        {
   	            new msglife[120];
   	            format(msglife, sizeof(msglife), "%s Te has llenado la vida tú mismo.", LOGO_STAFF);
   	        	SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, msglife);
   	        }

	       	return 1;
        }
        // 		/CHALECO [ID]					- Llenar el chaleco a un jugador
        case 4:
  		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has llenado el chaleco a %s[%i].", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);

			SetPlayerArmourEx(playeridAC, 85);
			if (playerid != playeridAC)
			{
                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
   	        }
   	        else
   	        {
   	            new msgammon[120];
   	            format(msgammon, sizeof(msgammon), "%s Te has llenado el chaleco tú mismo.", LOGO_STAFF);
   	        	SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, msgammon);
   	        }

			return 1;
        }
        // 		/ESPECTAR [ID]					- Espectar a un jugador
        case 5:
        {       // 01 - Espectando
                // 02 - Desactivar espectar
            if (Cantidad_o_Tipo == 1)
            {
				SetPlayerSpectateToPlayer(playerid, playeridAC);
			}
			else if (Cantidad_o_Tipo == 2)
			{
			    if ( !RemoveSpectatePlayer(playerid) )
			    {
	    			SendInfoMessage(playerid, 0, "214", "No estas espectando a nadie, el comando [/Espectar] sin ID, indica volver a tu posición.");
			    }
			}
			return 1;
        }
        // 		/JAIL [ID] [RAZÓN]				- Jaliar a un jugador
        case 6:
        {
			new StringFormat[350];
			new StringFormatEX[350];
			if ( PlayersData[playeridAC][Jail] == 0 )
			{
				format(StringFormat, sizeof(StringFormat), "%s Han jaliado %i minutos a %s por %s. Razón: %s",LOGO_STAFF, Cantidad_o_Tipo, PlayersDataOnline[playeridAC][NameOnline], PlayersDataOnline[playerid][NameOnline], String);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has jaliado a %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			}
			else if ( Cantidad_o_Tipo != 0)
			{
				format(StringFormat, sizeof(StringFormat), "%s Han modificado el jail de %s a %i minutos por %s. Razón: %s",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], Cantidad_o_Tipo, PlayersDataOnline[playerid][NameOnline], String);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has modificado el jail de %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			}
			else if ( Cantidad_o_Tipo == 0)
			{
				format(StringFormat, sizeof(StringFormat), "%s Han quitado el jail a %s por %s. Razón: %s",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], PlayersDataOnline[playerid][NameOnline], String);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has quitado el jail a %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			}
            MsgKBJWReportsToAdmins(playeridAC, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
			ChangeHouseOrOther(playerid, 0);
			ChangeLocal(playerid, -1);
			PlayersData[playeridAC][Jail] = gettime() + (Cantidad_o_Tipo * 60);
			PlayersData[playeridAC][IsInJail] = 2;
			SetPlayerJail(playeridAC);
        }
		//		/BAN [ID] [Razón]				- Banear a un jugador
        case 8:
        {
			new StringFormat[250];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s Han baneado a %s por %s. Razón: %s",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], PlayersDataOnline[playerid][NameOnline], String);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has baneado a %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
            MsgKBJWReportsToAdmins(playeridAC, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, "Ayuda: Recuerda sacar una Screen/Foto en este momento presionando la tecla \"F8\" será de mucha ayuda en su desban.");

			PlayersData[playeridAC][AccountState] = 3;
			BanEx(playeridAC, StringFormat);

            return 1;
        }
		// /REVISAR [ID]					- Revisar a un jugador
        case 9:
        {
   			new StringFormat9[350];
            new Float:Chaleco1;
   		    new Float:Vida1;
   		    new IPName[30];
			new Armas[13][2];
			for (new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(playeridAC, i, Armas[i][0], Armas[i][1]);
				format(StringFormat9, sizeof(StringFormat9), "SLOT [%i] Arma: %s || Munición: %i", i, SlotNameWeapon[Armas[i][0]], Armas[i][1]);
				SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat9);
			}
			GetPlayerHealth(playeridAC, Vida1);
			GetPlayerArmour(playeridAC, Chaleco1);
			GetPlayerIp(playeridAC, IPName, sizeof(IPName));

			format(StringFormat9, sizeof(StringFormat9), "ID: [%i] || Nombre: %s || IP: %s ||Vida: %.2f || Chaleco: %.2f",
			playeridAC,
			PlayersDataOnline[playeridAC][NameOnline],
			IPName,
			Vida1,
			Chaleco1);
			SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat9);
			format(StringFormat9, sizeof(StringFormat9), "Dinero: %i || Banco: %i || Facción: %s || Rango: %s",
			GetPlayerMoney(playeridAC),
			PlayersData[playeridAC][Banco],
			FaccionData[PlayersData[playeridAC][Faccion]][NameFaccion],
			FaccionesRangos[PlayersData[playeridAC][Faccion]][PlayersData[playeridAC][Rango]]);
			SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat9);
			return 1;
        }
		// 		/TRAER [ID]						- Traer un jugador a tu posición
        case 10:
        {
			new StringFormat[120];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s %s te ha teletrasportado a su posición.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has traido hacia a tí a %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);

			new Float:acX, Float:acY, Float:acZ;
			GetPlayerPos(playerid, acX, acY, acZ);
			if ( IsPlayerInAnyVehicle(playeridAC) && GetPlayerVehicleSeat(playeridAC) == 0)
			{
				new CocheTraer = GetPlayerVehicleID(playeridAC);
				SetVehiclePos(CocheTraer, acX, acY + 2, acZ + 1);
				LinkVehicleToInterior(CocheTraer, GetPlayerInteriorEx(playerid));
				SetVehicleVirtualWorldEx(CocheTraer, GetPlayerVirtualWorld(playerid));
				
				for (new j=0, k=GetPlayerPoolSize(); j <= k; j++)
				{
				    if ( IsPlayerConnected(j) && IsPlayerInVehicle(j, CocheTraer))
				    {
			        	SetPlayerVirtualWorldEx(j, GetPlayerVirtualWorld(playerid));
			        	SetPlayerInteriorEx(j, GetPlayerInteriorEx(playerid));
				    }
				}
			}
			else
			{
			    if (IsPlayerInAnyVehicle(playeridAC))
			    {
				    PlayersDataOnline[playeridAC][StateMoneyPass] 	= gettime() + 5;
				}
				SetPlayerPos(playeridAC, acX, acY + 2, acZ + 1);
			}

			PlayersData[playeridAC][IsPlayerInBizz] = PlayersData[playerid][IsPlayerInBizz];
			ChangeHouseOrOther(playeridAC, PlayersData[playerid][IsPlayerInHouse]);
			PlayersData[playeridAC][IsPlayerInBank] = PlayersData[playerid][IsPlayerInBank];
			PlayersData[playeridAC][IsPlayerInGarage] = PlayersData[playerid][IsPlayerInGarage];
			PlayersData[playeridAC][IsPlayerInVehInt] = PlayersData[playerid][IsPlayerInVehInt];
			PlayersData[playeridAC][InLocal] = PlayersData[playerid][InLocal];
			ChangeLocal(playeridAC, PlayersData[playerid][InLocal]);

			SetPlayerInteriorEx(playeridAC, GetPlayerInteriorEx(playerid));
			SetPlayerVirtualWorldEx(playeridAC, GetPlayerVirtualWorld(playerid));

            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
			return 1;
        }
		//		/IR [ID]						- Ir a la poición de un jugador
        case 11:
        {
			new StringFormat[120];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s %s se ha teletrasportado a tu posición.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has ido hacia %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);


            new Float:meX, Float:meY, Float:meZ;
			GetPlayerPos(playeridAC, meX, meY, meZ);

			if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
			{
				new CocheTraer = GetPlayerVehicleID(playerid);
				SetVehiclePos(CocheTraer, meX, meY + 2, meZ + 1);
				LinkVehicleToInterior(CocheTraer, GetPlayerInteriorEx(playeridAC));
				SetVehicleVirtualWorldEx(CocheTraer, GetPlayerVirtualWorld(playeridAC));

				for (new j=0, k=GetPlayerPoolSize(); j <= k; j++)
				{
				    if ( IsPlayerConnected(j) && IsPlayerInVehicle(j, CocheTraer))
				    {
			        	SetPlayerVirtualWorldEx(j, GetPlayerVirtualWorld(playeridAC));
			        	SetPlayerInteriorEx(j, GetPlayerInteriorEx(playeridAC));
				    }
				}
			}
			else
			{
			    if (IsPlayerInAnyVehicle(playerid))
			    {
				    PlayersDataOnline[playerid][StateMoneyPass] 	= gettime() + 5;
				}
				SetPlayerPos(playerid, meX, meY + 2, meZ + 1);
			}

			PlayersData[playerid][IsPlayerInBizz] = PlayersData[playeridAC][IsPlayerInBizz];
			ChangeHouseOrOther(playerid, PlayersData[playeridAC][IsPlayerInHouse]);
			PlayersData[playerid][IsPlayerInBank] = PlayersData[playeridAC][IsPlayerInBank];
			PlayersData[playerid][IsPlayerInGarage] = PlayersData[playeridAC][IsPlayerInGarage];
			PlayersData[playerid][IsPlayerInVehInt] = PlayersData[playeridAC][IsPlayerInVehInt];
			PlayersData[playerid][InLocal] = PlayersData[playeridAC][InLocal];
			ChangeLocal(playerid, PlayersData[playeridAC][InLocal]);


            SetPlayerInteriorEx(playerid, GetPlayerInteriorEx(playeridAC));
			SetPlayerVirtualWorldEx(playerid, GetPlayerVirtualWorld(playeridAC));

            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
			return 1;
        }
		//		/LIMPIAR[ID]                   - Quitar todas las armas a un jugador
		case 12:
		{
			new StringFormat[120];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s %s te ha limpiado todas las armas.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has limpiado a %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

            ResetPlayerWeaponsEx(playeridAC);
			new HaveTaser = GetObjectByType(playeridAC, TYPE_TASER);
			if ( HaveTaser != -1 )
			{
				RemoveObjectHoldToPlayer(playeridAC, -1, HaveTaser);
			}

            return 1;
		}
		//		/Matar [ID]                - Matar a un jugador
		case 14:
		{
			new StringFormat[120];
			new StringFormatEX[100];

			if ( playeridAC != playerid)
			{
				format(StringFormat, sizeof(StringFormat), "%s te ha matado %s con el comando /Matar [ID].",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
				format(StringFormatEX, sizeof(StringFormatEX), "%s has matado a %s [%i] con el comando /Matar [ID].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
	            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
			}
			else
			{
				format(StringFormatEX, sizeof(StringFormatEX), "%s Te has matado tú mismo con el comando /Matar [ID].",LOGO_STAFF);
			}

            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

			// Asignamos 0 de vida para matar a el jugador
			SetPlayerHealthEx(playeridAC, -100);
			return 1;
		}
		//		/Estado Todos [ID]                 		- Cerrar y Abrir el canal /o (Todos)
		case 15:
		{
			new MensajeCanalTodosCerradoAbierto[50];
			new MensajeATodos[70];

			if ( !CanalOOC )
			{
			    CanalOOC = true;
		        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has abierto el canal /O (OOC).", LOGO_STAFF);
				format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /O (OOC) ha sido abierto.", LOGO_STAFF);
 			}
 			else if  ( CanalOOC  )
 			{
				CanalOOC = false;
		        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has cerrado el canal /O (OOC).", LOGO_STAFF);
				format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /O (OOC) ha sido cerrado.", LOGO_STAFF);
 			}

	        SendClientMessageToAll(COLOR_MENSAJES_DE_AVISOS, MensajeATodos);
	        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeCanalTodosCerradoAbierto);

			return 1;
		}
		//      /Estado Wisper                  - Cierra y Abre los wisper
		case 16:
		{
			new MensajeWisperCerradoAbierto[50];
			if ( PlayersDataOnline[playerid][Wispers] )
			{
			    PlayersDataOnline[playerid][Wispers] = false;
		        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Has cerrado los whispers.", LOGO_STAFF);
 			}
 			else if  ( !PlayersDataOnline[playerid][Wispers] )
 			{
				PlayersDataOnline[playerid][Wispers] = true;
		        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Has abierto los whispers.", LOGO_STAFF);
 			}
	        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeWisperCerradoAbierto);
	        return 1;
  		}
		// 		/VER							- Ver los miembros del Staff que esten Online
		case 17:
		{
		    new StringFormat[120];

			for (new i = 0; i < MAX_PLAYERS; i++)
			{
			    if ( IsPlayerConnected(i) && ( PlayersData[i][Admin] >= 1 && PlayersData[i][Admin] <= 8 && PlayersData[playerid][Admin] <= 8 || PlayersData[i][Admin] >= 1 && PlayersData[playerid][Admin] == 9 ) )
			    {
					format(StringFormat, sizeof(StringFormat), "%s %s Nivel(%i) [%i] Owned conectado!",LOGO_STAFF, PlayersDataOnline[i][NameOnline], PlayersData[i][Admin], i);
		            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS,  StringFormat);
				}
		    }
		    return 1;
		}
		// 		/RESPAWN [ID]					- Respawear un coche
		case 18:
		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has echo spawn a un vehículo con ID[%i].",LOGO_STAFF, Cantidad_o_Tipo);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

          	SetVehicleToRespawnExTwo(Cantidad_o_Tipo);
          	return 1;
		}
		//		/RESPAWN TODOS					- Respawear todos los coches
		case 19:
		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has echo un respawn general.",LOGO_STAFF);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

			new IsRespawn[MAX_VEHICLE_COUNT];
			for (new i = 0; i < MAX_PLAYERS; i++)
			{
				if( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) == 1 && GetPlayerVehicleSeat(i) == 0 )
				{
				    IsRespawn[GetPlayerVehicleID(i)] = 1;
				}
			}

			for (new i = 1; i <= MAX_CAR; i++)
			{
			    if ( IsRespawn[i] != 1 )
			    {
					SetVehicleToRespawnExTwo(i);
				}
		    }

		    return 1;
		}
		//		/Clima [Tipo]					- Cambiar el clima
		case 20:
		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has cambiado el clima a ID[%i].", LOGO_STAFF, Cantidad_o_Tipo);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

            SetWeather(Cantidad_o_Tipo);
            WeatherCurrent = Cantidad_o_Tipo;

            return 1;
		}
		//		/MsgEX [Estilo] [Texto]         - Mensaje EX
		case 21:
		{
			GameTextForAll( String, 5000, Cantidad_o_Tipo);
			return 1;
		}
		//		/Staff [ID] [Nivel]				- Dar un nivel a un miembro de el Staff
		case 22:
		{
			new StringFormat[120];
			new StringFormatEX[100];

   		    if (PlayersData[playeridAC][Admin] == 0)
   		    {
				format(StringFormat, sizeof(StringFormat), "%s %s ahora estas Owned! Welcome to the Team!.", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline]);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has metido a ser parte del Staff a %s [%i] con nivel %i ",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC, Cantidad_o_Tipo);
			}
			else if (Cantidad_o_Tipo == 0)
			{
				format(StringFormatEX, sizeof(StringFormatEX), "%s has expulsado del Staff a %s [%i] ", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], Cantidad_o_Tipo);
  				format(StringFormat, sizeof(StringFormat), "%s %s Te ha expulsado del Staff!", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			}
			else
			{
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has asignado el nivel %i a %s [%i] ", LOGO_STAFF, Cantidad_o_Tipo, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
  				format(StringFormat, sizeof(StringFormat), "%s %s te han asignado el nivel %i de Staff", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], Cantidad_o_Tipo);
			}

			PlayersData[playeridAC][Admin] = Cantidad_o_Tipo;
            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

            return 1;
		}
	}
	// LOGO_STAFF

	//COLOR_OWNED_CHAT
	//COLOR_MENSAJES_DE_AVISOS
	//COLOR_KICK_JAIL_BAN
    return 1;
}
public LoadPriceAndNameVehicles()
{
 // Todo + 400
	new NEXT = 0; coches_Todos_Precios    [0]     = 1000;      coches_Todos_Nombres    [0] 	= "Landstalker"; 	coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:400
	NEXT++; coches_Todos_Precios    [1]     = 1000;      coches_Todos_Nombres    [1] 	= "Bravura"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 98; 		// Nombre: NINGUNO       ID:401
	NEXT++; coches_Todos_Precios    [2]     = 3000;      coches_Todos_Nombres    [2] 	= "Buffalo";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 124; 	// Nombre: NINGUNO       ID:402
	NEXT++; coches_Todos_Precios    [3]     = 1000;      coches_Todos_Nombres    [3] 	= "Linerunner"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 75; 	// Nombre: NINGUNO       ID:403
	NEXT++; coches_Todos_Precios    [4]     = 1000;      coches_Todos_Nombres    [4] 	= "Perenniel"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:404
	NEXT++; coches_Todos_Precios    [5]     = 1500;      coches_Todos_Nombres    [5] 	= "Sentinel";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 109;	// Nombre: NINGUNO       ID:405
	NEXT++; coches_Todos_Precios    [6]     = 1000;      coches_Todos_Nombres    [6] 	= "Dumper"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:406
	NEXT++; coches_Todos_Precios    [7]     = 1000;      coches_Todos_Nombres    [7] 	= "Firetruck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:407
	NEXT++; coches_Todos_Precios    [8]     = 1000;      coches_Todos_Nombres    [8] 	= "Trashmaster"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0;	 	// Nombre: NINGUNO       ID:408
	NEXT++; coches_Todos_Precios    [9]     = 1000;      coches_Todos_Nombres    [9]	= "Stretch"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:409
	NEXT++; coches_Todos_Precios    [10]     = 1000;     coches_Todos_Nombres    [10] 	= "Manana";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 86; 	// Nombre: NINGUNO       ID:410
	NEXT++; coches_Todos_Precios    [11]     = 3000;     coches_Todos_Nombres    [11] 	= "Infernus";   		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 148; 	// Nombre: NINGUNO       ID:411
	NEXT++; coches_Todos_Precios    [12]     = 1000;     coches_Todos_Nombres    [12] 	= "Voodoo"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 112; 	// Nombre: NINGUNO       ID:412
	NEXT++; coches_Todos_Precios    [13]     = 1000;     coches_Todos_Nombres    [13] 	= "Pony"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 73; 	// Nombre: NINGUNO       ID:413
	NEXT++; coches_Todos_Precios    [14]     = 1000;     coches_Todos_Nombres    [14] 	= "Mule";				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 70; 	// Nombre: NINGUNO       ID:414
	NEXT++; coches_Todos_Precios    [15]     = 3000;     coches_Todos_Nombres    [15] 	= "Cheetah";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 128; 	// Nombre: NINGUNO       ID:415
	NEXT++; coches_Todos_Precios    [16]     = 1000;     coches_Todos_Nombres    [16] 	= "Ambulance"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 103; 	// Nombre: NINGUNO       ID:416
	NEXT++; coches_Todos_Precios    [17]     = 1000;     coches_Todos_Nombres    [17]	= "Leviathan";			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0;		// Nombre: NINGUNO       ID:417
	NEXT++; coches_Todos_Precios    [18]     = 1000;     coches_Todos_Nombres    [18] 	= "Moonbeam"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 77; 	// Nombre: NINGUNO       ID:418
	NEXT++; coches_Todos_Precios    [19]     = 1000;     coches_Todos_Nombres    [19] 	= "Esperanto"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:419
	NEXT++; coches_Todos_Precios    [20]     = 1000;     coches_Todos_Nombres    [20] 	= "Taxi"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 97; 	// Nombre: NINGUNO       ID:420
	NEXT++; coches_Todos_Precios    [21]     = 1500;     coches_Todos_Nombres    [21] 	= "Washington"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:421
	NEXT++; coches_Todos_Precios    [22]     = 1500;     coches_Todos_Nombres    [22] 	= "Bobcat";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 97; 	// Nombre: NINGUNO       ID:422
	NEXT++; coches_Todos_Precios    [23]     = 1000;     coches_Todos_Nombres    [23] 	= "Mr Whoopee"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:423
	NEXT++; coches_Todos_Precios    [24]     = 1500;     coches_Todos_Nombres    [24] 	= "Bfinject";  			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 90; 	// Nombre: NINGUNO       ID:424
	NEXT++; coches_Todos_Precios    [25]     = 1000;     coches_Todos_Nombres    [25]	= "Hunter"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:425
	NEXT++; coches_Todos_Precios    [26]     = 1500;     coches_Todos_Nombres    [26] 	= "Premier"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 116; 	// Nombre: NINGUNO       ID:426
	NEXT++; coches_Todos_Precios    [27]     = 1000;     coches_Todos_Nombres    [27] 	= "Enforcer"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:427
	NEXT++; coches_Todos_Precios    [28]     = 1000;     coches_Todos_Nombres    [28] 	= "Securicar"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:428
	NEXT++; coches_Todos_Precios    [29]     = 3000;     coches_Todos_Nombres    [29] 	= "Banshee";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 134; 	// Nombre: NINGUNO       ID:429
	NEXT++; coches_Todos_Precios    [30]     = 1000;     coches_Todos_Nombres    [30] 	= "Predator"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:430
	NEXT++; coches_Todos_Precios    [31]     = 1000;     coches_Todos_Nombres    [31] 	= "Bus"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 87; 	// Nombre: NINGUNO       ID:431
	NEXT++; coches_Todos_Precios    [32]     = 1000;     coches_Todos_Nombres    [32] 	= "Rhino"; 				coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:432
	NEXT++; coches_Todos_Precios    [33]     = 1000;     coches_Todos_Nombres    [33] 	= "Barracks"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:433
	NEXT++; coches_Todos_Precios    [34]     = 2000;     coches_Todos_Nombres    [34] 	= "Hotknife"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 111; 	// Nombre: NINGUNO       ID:434
	NEXT++; coches_Todos_Precios    [35]     = 1000;     coches_Todos_Nombres    [35] 	= "Article Trailer"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:435
	NEXT++; coches_Todos_Precios    [36]     = 1500;     coches_Todos_Nombres    [36] 	= "Previon";   			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 96; 	// Nombre: NINGUNO       ID:436
	NEXT++; coches_Todos_Precios    [37]     = 1000;     coches_Todos_Nombres    [37]	= "Coach"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:437
	NEXT++; coches_Todos_Precios    [38]     = 1000;     coches_Todos_Nombres    [38] 	= "Cabbie"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:438
	NEXT++; coches_Todos_Precios    [39]     = 1500;     coches_Todos_Nombres    [39]	= "Stallion"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 112; 	// Nombre: NINGUNO       ID:439
	NEXT++; coches_Todos_Precios    [40]     = 1000;     coches_Todos_Nombres    [40] 	= "Rumpo"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 91; 	// Nombre: NINGUNO       ID:440
	NEXT++; coches_Todos_Precios    [41]     = 1000;     coches_Todos_Nombres    [41] 	= "RC bandit";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:441
	NEXT++; coches_Todos_Precios    [42]     = 1000;     coches_Todos_Nombres    [42] 	= "Romero"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:442
	NEXT++; coches_Todos_Precios    [43]     = 1000;     coches_Todos_Nombres    [43] 	= "Packer"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 84; 	// Nombre: NINGUNO       ID:443
	NEXT++; coches_Todos_Precios    [44]     = 1000;     coches_Todos_Nombres    [44] 	= "Monster"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 74; 	// Nombre: NINGUNO       ID:444
	NEXT++; coches_Todos_Precios    [45]     = 1500;     coches_Todos_Nombres    [45] 	= "Admiral";	 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 109; 	// Nombre: NINGUNO       ID:445
	NEXT++; coches_Todos_Precios    [46]     = 1000;     coches_Todos_Nombres    [46] 	= "Squallo";			coches_Todos_Type	[NEXT] = BOTE; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:446
	NEXT++; coches_Todos_Precios    [47]     = 1000;     coches_Todos_Nombres    [47] 	= "Seasparrow"; 		coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:447
	NEXT++; coches_Todos_Precios    [48]     = 1000;     coches_Todos_Nombres    [48] 	= "Pizzaboy";   		coches_Todos_Type	[NEXT] = MOTO; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:448
	NEXT++; coches_Todos_Precios    [49]     = 1000;     coches_Todos_Nombres    [49] 	= "Tram";				coches_Todos_Type	[NEXT] = TREN; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:449
	NEXT++; coches_Todos_Precios    [50]     = 1000;     coches_Todos_Nombres    [50] 	= "Article Trailer 2";	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:450
	NEXT++; coches_Todos_Precios    [51]     = 3000;     coches_Todos_Nombres    [51] 	= "Turismo";  			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 129; 	// Nombre: NINGUNO       ID:451
	NEXT++; coches_Todos_Precios    [52]     = 1000;     coches_Todos_Nombres    [52] 	= "Speeder";			coches_Todos_Type	[NEXT] = BOTE; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:452
	NEXT++; coches_Todos_Precios    [53]     = 1000;     coches_Todos_Nombres    [53] 	= "Reefer"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:453
	NEXT++; coches_Todos_Precios    [54]     = 1000;     coches_Todos_Nombres    [54] 	= "Tropic"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:454
	NEXT++; coches_Todos_Precios    [55]     = 1000;     coches_Todos_Nombres    [55] 	= "Flatbed"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:455
	NEXT++; coches_Todos_Precios    [56]     = 1000;     coches_Todos_Nombres    [56] 	= "Yankee"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:456
	NEXT++; coches_Todos_Precios    [57]     = 1000;     coches_Todos_Nombres    [57] 	= "Caddy"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:457
	NEXT++; coches_Todos_Precios    [58]     = 2000;     coches_Todos_Nombres    [58] 	= "Solair";				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:458
	NEXT++; coches_Todos_Precios    [59]     = 1000;     coches_Todos_Nombres    [59] 	= "Berkley's RC Van";	coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0;	 	// Nombre: NINGUNO       ID:459
	NEXT++; coches_Todos_Precios    [60]     = 1000;     coches_Todos_Nombres    [60] 	= "Skimmer"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:460
	NEXT++; coches_Todos_Precios    [61]     = 2000;     coches_Todos_Nombres    [61] 	= "PCJ-600";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 109; 	// Nombre: NINGUNO       ID:461
	NEXT++; coches_Todos_Precios    [62]     = 1000;     coches_Todos_Nombres    [62] 	= "Faggio";       		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 50; 	// Nombre: NINGUNO       ID:462
	NEXT++; coches_Todos_Precios    [63]     = 2000;     coches_Todos_Nombres    [63] 	= "Freeway";    		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:463
	NEXT++; coches_Todos_Precios    [64]     = 1000;     coches_Todos_Nombres    [64] 	= "RC Baron"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:464
	NEXT++; coches_Todos_Precios    [65]     = 1000;     coches_Todos_Nombres    [65] 	= "RC Raider"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:465
	NEXT++; coches_Todos_Precios    [66]     = 1000;     coches_Todos_Nombres    [66] 	= "Glendale";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 98; 	// Nombre: NINGUNO       ID:466
	NEXT++; coches_Todos_Precios    [67]     = 1000;     coches_Todos_Nombres    [67] 	= "Oceanic";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 94; 	// Nombre: NINGUNO       ID:467
	NEXT++; coches_Todos_Precios    [68]     = 2000;     coches_Todos_Nombres    [68] 	= "Sanchez";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:468
	NEXT++; coches_Todos_Precios    [69]     = 1000;     coches_Todos_Nombres    [69] 	= "Sparrow"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:469
	NEXT++; coches_Todos_Precios    [70]     = 1000;     coches_Todos_Nombres    [70] 	= "Patriot"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:470
	NEXT++; coches_Todos_Precios    [71]     = 1000;     coches_Todos_Nombres    [71] 	= "Quad";       		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 74; 	// Nombre: NINGUNO       ID:471
	NEXT++; coches_Todos_Precios    [72]     = 1000;     coches_Todos_Nombres    [72] 	= "Coastguard"; 		coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:472
	NEXT++; coches_Todos_Precios    [73]     = 1000;     coches_Todos_Nombres    [73] 	= "Dinghy"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:473
	NEXT++; coches_Todos_Precios    [74]     = 1500;     coches_Todos_Nombres    [74] 	= "Hermes"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:474
	NEXT++; coches_Todos_Precios    [75]     = 1500;     coches_Todos_Nombres    [75] 	= "Sabre"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:475
	NEXT++; coches_Todos_Precios    [76]     = 1000;     coches_Todos_Nombres    [76] 	= "Rustler"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:476
	NEXT++; coches_Todos_Precios    [77]     = 2500;     coches_Todos_Nombres    [77] 	= "ZR-350"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 124; 	// Nombre: NINGUNO       ID:477
	NEXT++; coches_Todos_Precios    [78]     = 1000;     coches_Todos_Nombres    [78] 	= "Walton"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 78; 	// Nombre: NINGUNO       ID:478
	NEXT++; coches_Todos_Precios    [79]     = 1000;     coches_Todos_Nombres    [79] 	= "Regina"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:479
	NEXT++; coches_Todos_Precios    [80]     = 2500;     coches_Todos_Nombres    [80] 	= "Comet";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 123; 	// Nombre: NINGUNO       ID:480
	NEXT++; coches_Todos_Precios    [81]     = 1000;     coches_Todos_Nombres    [81]	= "BMX"; 				coches_Todos_Type	[NEXT] = BICI;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:481
	NEXT++; coches_Todos_Precios    [82]     = 1000;     coches_Todos_Nombres    [82] 	= "Burrito"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 104; 	// Nombre: NINGUNO       ID:482
	NEXT++; coches_Todos_Precios    [83]     = 1000;     coches_Todos_Nombres    [83] 	= "Camper"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:483
	NEXT++; coches_Todos_Precios    [84]     = 1000;     coches_Todos_Nombres    [84] 	= "Marquis"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:484
	NEXT++; coches_Todos_Precios    [85]     = 1000;     coches_Todos_Nombres    [85] 	= "Baggage"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:485
	NEXT++; coches_Todos_Precios    [86]     = 1000;     coches_Todos_Nombres    [86] 	= "Dozer"; 				coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:486
	NEXT++; coches_Todos_Precios    [87]     = 1000;     coches_Todos_Nombres    [87] 	= "Maverick"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:487
	NEXT++; coches_Todos_Precios    [88]     = 1000;     coches_Todos_Nombres    [88] 	= "SAN News Maverick"; 	coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:488
	NEXT++; coches_Todos_Precios    [89]     = 1500;     coches_Todos_Nombres    [89] 	= "Rancher"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:489
	NEXT++; coches_Todos_Precios    [90]     = 1000;     coches_Todos_Nombres    [90] 	= "FBI Rancher"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:490
	NEXT++; coches_Todos_Precios    [91]     = 1500;     coches_Todos_Nombres    [91] 	= "Virgo"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:491
	NEXT++; coches_Todos_Precios    [92]     = 1500;     coches_Todos_Nombres    [92] 	= "Greenwoo";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 94; 	// Nombre: NINGUNO       ID:492
	NEXT++; coches_Todos_Precios    [93]     = 1000;     coches_Todos_Nombres    [93] 	= "Jetmax"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:493
	NEXT++; coches_Todos_Precios    [94]     = 1000;     coches_Todos_Nombres    [94] 	= "Hotring Racer"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:494
	NEXT++; coches_Todos_Precios    [95]     = 1000;     coches_Todos_Nombres    [95] 	= "Sandking"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:495
	NEXT++; coches_Todos_Precios    [96]     = 1500;     coches_Todos_Nombres    [96] 	= "Blistac";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 108; 	// Nombre: NINGUNO       ID:496
	NEXT++; coches_Todos_Precios    [97]     = 1000;     coches_Todos_Nombres    [97] 	= "Police Maverick"; 	coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:497
	NEXT++; coches_Todos_Precios    [98]     = 1000;     coches_Todos_Nombres    [98] 	= "Boxville"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:498
	NEXT++; coches_Todos_Precios    [99]     = 1000;     coches_Todos_Nombres    [99] 	= "Benson"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:499
	NEXT++; coches_Todos_Precios    [100]    = 1500;     coches_Todos_Nombres    [100] 	= "Mesa"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 94; 	// Nombre: NINGUNO       ID:500
	NEXT++; coches_Todos_Precios    [101]    = 1000;     coches_Todos_Nombres    [101] 	= "RC Goblin"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:501
	NEXT++; coches_Todos_Precios    [102]    = 1000;     coches_Todos_Nombres    [102] 	= "Hotring Racer"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:502
	NEXT++; coches_Todos_Precios    [103]    = 1000;     coches_Todos_Nombres    [103] 	= "Hotring Racer"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:503
	NEXT++; coches_Todos_Precios    [104]    = 1500;     coches_Todos_Nombres    [104] 	= "Bloodra";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:504
	NEXT++; coches_Todos_Precios    [105]    = 1500;     coches_Todos_Nombres    [105] 	= "Rancher"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:505
	NEXT++; coches_Todos_Precios    [106]    = 2500;     coches_Todos_Nombres    [106] 	= "Super GT";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 119; 	// Nombre: NINGUNO       ID:506
	NEXT++; coches_Todos_Precios    [107]    = 1000;     coches_Todos_Nombres    [107] 	= "Elegant";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 120; 	// Nombre: NINGUNO       ID:507
	NEXT++; coches_Todos_Precios    [108]    = 1000;     coches_Todos_Nombres    [108] 	= "Journey"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 72; 	// Nombre: NINGUNO       ID:508
	NEXT++; coches_Todos_Precios    [109]    = 1000;     coches_Todos_Nombres    [109] 	= "Bike"; 				coches_Todos_Type	[NEXT] = BICI;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:509
	NEXT++; coches_Todos_Precios    [110]    = 1000;     coches_Todos_Nombres    [110]	= "Mountain Bike"; 		coches_Todos_Type	[NEXT] = BICI;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:510
	NEXT++; coches_Todos_Precios    [111]    = 1000;     coches_Todos_Nombres    [111]  = "Beagle"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:511
	NEXT++; coches_Todos_Precios    [112]    = 1000;     coches_Todos_Nombres    [112] 	= "Cropduster"; 		coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:512
	NEXT++; coches_Todos_Precios    [113]    = 1000;     coches_Todos_Nombres    [113] 	= "Stuntplane"; 		coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:513
	NEXT++; coches_Todos_Precios    [114]    = 1000;     coches_Todos_Nombres    [114] 	= "Tanker";				coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 80; 	// Nombre: NINGUNO       ID:514
	NEXT++; coches_Todos_Precios    [115]    = 1000;     coches_Todos_Nombres    [115] 	= "Roadtrain"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:515
	NEXT++; coches_Todos_Precios    [116]    = 1500;     coches_Todos_Nombres    [116] 	= "Nebula";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:516
	NEXT++; coches_Todos_Precios    [117]    = 1000;     coches_Todos_Nombres    [117] 	= "Majestic";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:517
	NEXT++; coches_Todos_Precios    [118]    = 1500;     coches_Todos_Nombres    [118] 	= "Buccanee";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:518
	NEXT++; coches_Todos_Precios    [119]    = 1000;     coches_Todos_Nombres    [119] 	= "Shamal"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:519
	NEXT++; coches_Todos_Precios    [120]    = 1000;     coches_Todos_Nombres    [120] 	= "Hydra"; 				coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:520
	NEXT++; coches_Todos_Precios    [121]    = 2000;     coches_Todos_Nombres    [121] 	= "FCR-900";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:521
	NEXT++; coches_Todos_Precios    [122]    = 2000;     coches_Todos_Nombres    [122] 	= "NRG-500";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 120; 	// Nombre: NINGUNO       ID:522
	NEXT++; coches_Todos_Precios    [123]    = 1000;     coches_Todos_Nombres    [123] 	= "CopBike";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:523
	NEXT++; coches_Todos_Precios    [124]    = 1000;     coches_Todos_Nombres    [124] 	= "Cement Truck"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:524
	NEXT++; coches_Todos_Precios    [125]    = 1000;     coches_Todos_Nombres    [125] 	= "Towtruck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 107; 	// Nombre: NINGUNO       ID:525
	NEXT++; coches_Todos_Precios    [126]    = 1000;     coches_Todos_Nombres    [126] 	= "Fortune";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:526
	NEXT++; coches_Todos_Precios    [127]    = 1000;     coches_Todos_Nombres    [127] 	= "Cadrona";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:527
	NEXT++; coches_Todos_Precios    [128]    = 1000;     coches_Todos_Nombres    [128] 	= "FBI Truck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:528
	NEXT++; coches_Todos_Precios    [129]    = 1000;     coches_Todos_Nombres    [129] 	= "Williard";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:529
	NEXT++; coches_Todos_Precios    [130]    = 1000;     coches_Todos_Nombres    [130] 	= "Forklift"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:530
	NEXT++; coches_Todos_Precios    [131]    = 1000;     coches_Todos_Nombres    [131] 	= "Tractor";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:531
	NEXT++; coches_Todos_Precios    [132]    = 1000;     coches_Todos_Nombres    [132] 	= "Combine Harvester"; 	coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:532
	NEXT++; coches_Todos_Precios    [133]    = 1500;     coches_Todos_Nombres    [133] 	= "Felzer";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 111; 	// Nombre: NINGUNO       ID:533
	NEXT++; coches_Todos_Precios    [134]    = 1000;     coches_Todos_Nombres    [134] 	= "Remington"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 112; 	// Nombre: NINGUNO       ID:534
	NEXT++; coches_Todos_Precios    [135]    = 2000;     coches_Todos_Nombres    [135] 	= "Slamvan"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:535
	NEXT++; coches_Todos_Precios    [136]    = 1500;     coches_Todos_Nombres    [136] 	= "Blade";         		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:536
	NEXT++; coches_Todos_Precios    [137]    = 1000;     coches_Todos_Nombres    [137] 	= "Freight"; 			coches_Todos_Type	[NEXT] = TREN;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:537
	NEXT++; coches_Todos_Precios    [138]    = 1000;     coches_Todos_Nombres    [138] 	= "Brownstreak"; 		coches_Todos_Type	[NEXT] = TREN;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:538
	NEXT++; coches_Todos_Precios    [139]    = 1000;     coches_Todos_Nombres    [139] 	= "Vortex";				coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:539
	NEXT++; coches_Todos_Precios    [140]    = 1000;     coches_Todos_Nombres    [140] 	= "Vincent"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:540
	NEXT++; coches_Todos_Precios    [141]    = 3000;     coches_Todos_Nombres    [141] 	= "Bullet";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 135; 	// Nombre: NINGUNO       ID:541
	NEXT++; coches_Todos_Precios    [142]    = 1500;     coches_Todos_Nombres    [142] 	= "Clover";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 109; 	// Nombre: NINGUNO       ID:542
	NEXT++; coches_Todos_Precios    [143]    = 1000;     coches_Todos_Nombres    [143] 	= "Sadler"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:543
	NEXT++; coches_Todos_Precios    [144]    = 1000;     coches_Todos_Nombres    [144] 	= "Firetruck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:544
	NEXT++; coches_Todos_Precios    [145]    = 1000;     coches_Todos_Nombres    [145] 	= "Hustler"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 100; 	// Nombre: NINGUNO       ID:545
	NEXT++; coches_Todos_Precios    [146]    = 1000;     coches_Todos_Nombres    [146] 	= "Intruder";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:546
	NEXT++; coches_Todos_Precios    [147]    = 1000;     coches_Todos_Nombres    [147] 	= "Primo"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:547
	NEXT++; coches_Todos_Precios    [148]    = 1000;     coches_Todos_Nombres    [148] 	= "Cargobob";			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:548
	NEXT++; coches_Todos_Precios    [149]    = 1500;     coches_Todos_Nombres    [149] 	= "Tampa";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:549
	NEXT++; coches_Todos_Precios    [150]    = 1500;     coches_Todos_Nombres    [150] 	= "Sunrise"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 97; 	// Nombre: NINGUNO       ID:550
	NEXT++; coches_Todos_Precios    [151]    = 1500;     coches_Todos_Nombres    [151] 	= "Merit"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:551
	NEXT++; coches_Todos_Precios    [152]    = 1000;     coches_Todos_Nombres    [152] 	= "Utility"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:552
	NEXT++; coches_Todos_Precios    [153]    = 1000;     coches_Todos_Nombres    [153] 	= "Nevada"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:553
	NEXT++; coches_Todos_Precios    [154]    = 1500;     coches_Todos_Nombres    [154] 	= "Yosemite";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 96; 	// Nombre: NINGUNO       ID:554
	NEXT++; coches_Todos_Precios    [155]    = 1500;     coches_Todos_Nombres    [155] 	= "Windsor";   			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:555
	NEXT++; coches_Todos_Precios    [156]    = 1000;     coches_Todos_Nombres    [156] 	= "Monster A"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:556
	NEXT++; coches_Todos_Precios    [157]    = 1000;     coches_Todos_Nombres    [157] 	= "Monster B"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:557
	NEXT++; coches_Todos_Precios    [158]    = 2000;     coches_Todos_Nombres    [158] 	= "Uranus";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 104; 	// Nombre: NINGUNO       ID:558
	NEXT++; coches_Todos_Precios    [159]    = 2500;     coches_Todos_Nombres    [159] 	= "Jester"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:559
	NEXT++; coches_Todos_Precios    [160]    = 2500;     coches_Todos_Nombres    [160] 	= "Sultan";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 103; 	// Nombre: NINGUNO       ID:560
	NEXT++; coches_Todos_Precios    [161]    = 2000;     coches_Todos_Nombres    [161] 	= "Stratum";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 103; 	// Nombre: NINGUNO       ID:561
	NEXT++; coches_Todos_Precios    [162]    = 2500;     coches_Todos_Nombres    [162] 	= "Elegy";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:562
	NEXT++; coches_Todos_Precios    [163]    = 1000;     coches_Todos_Nombres    [163] 	= "Raindance"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:563
	NEXT++; coches_Todos_Precios    [164]    = 1000;     coches_Todos_Nombres    [164]	= "RC Tiger"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:564
	NEXT++; coches_Todos_Precios    [165]    = 2000;     coches_Todos_Nombres    [165] 	= "Flash";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:565
	NEXT++; coches_Todos_Precios    [166]    = 1000;     coches_Todos_Nombres    [166] 	= "Tahoma"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 107; 	// Nombre: NINGUNO       ID:566
	NEXT++; coches_Todos_Precios    [167]    = 1000;     coches_Todos_Nombres    [167] 	= "Savanna"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:567
	NEXT++; coches_Todos_Precios    [168]    = 1000;     coches_Todos_Nombres    [168] 	= "Bandito"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:568
	NEXT++; coches_Todos_Precios    [169]    = 1000;     coches_Todos_Nombres    [169] 	= "Freight Flat Trailer";coches_Todos_Type	[NEXT] = TREN;  		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:569
	NEXT++; coches_Todos_Precios    [170]    = 1000;     coches_Todos_Nombres    [170] 	= "Streak Trailer"; 	coches_Todos_Type	[NEXT] = TREN;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:570
	NEXT++; coches_Todos_Precios    [171]    = 1000;     coches_Todos_Nombres    [171] 	= "Kart"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:571
	NEXT++; coches_Todos_Precios    [172]    = 1000;     coches_Todos_Nombres    [172] 	= "Mower"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:572
	NEXT++; coches_Todos_Precios    [173]    = 1000;     coches_Todos_Nombres    [173] 	= "Dune";				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:573
	NEXT++; coches_Todos_Precios    [174]    = 1000;     coches_Todos_Nombres    [174] 	= "Sweeper"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:574
	NEXT++; coches_Todos_Precios    [175]    = 1000;     coches_Todos_Nombres    [175] 	= "Broadway";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:575
	NEXT++; coches_Todos_Precios    [176]    = 1000;     coches_Todos_Nombres    [176] 	= "Tornado";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:576
	NEXT++; coches_Todos_Precios    [177]    = 1000;     coches_Todos_Nombres    [177] 	= "AT400"; 				coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:577
	NEXT++; coches_Todos_Precios    [178]    = 1000;     coches_Todos_Nombres    [178] 	= "DFT-30"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 87; 	// Nombre: NINGUNO       ID:578
	NEXT++; coches_Todos_Precios    [179]    = 1000;     coches_Todos_Nombres    [179] 	= "Huntley";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:579
	NEXT++; coches_Todos_Precios    [180]    = 1500;     coches_Todos_Nombres    [180] 	= "Stafford"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:580
	NEXT++; coches_Todos_Precios    [181]    = 2000;     coches_Todos_Nombres    [181] 	= "BF-400";      		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 100; 	// Nombre: NINGUNO       ID:581
	NEXT++; coches_Todos_Precios    [182]    = 1000;     coches_Todos_Nombres    [182] 	= "Newsvan";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 81; 	// Nombre: NINGUNO       ID:582
	NEXT++; coches_Todos_Precios    [183]    = 1000;     coches_Todos_Nombres    [183] 	= "Tug"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:583
	NEXT++; coches_Todos_Precios    [184]    = 1000;     coches_Todos_Nombres    [184] 	= "Petrol Trailer"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:584
	NEXT++; coches_Todos_Precios    [185]    = 1000;     coches_Todos_Nombres    [185] 	= "Emperor"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:585
	NEXT++; coches_Todos_Precios    [186]    = 2000;     coches_Todos_Nombres    [186] 	= "Wayfarer";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:586
	NEXT++; coches_Todos_Precios    [187]    = 2500;     coches_Todos_Nombres    [187] 	= "Euros";        		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:587
	NEXT++; coches_Todos_Precios    [188]    = 1000;     coches_Todos_Nombres    [188] 	= "Hotdog"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:588
	NEXT++; coches_Todos_Precios    [189]    = 1500;     coches_Todos_Nombres    [189] 	= "Club";        		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 108; 	// Nombre: NINGUNO       ID:589
	NEXT++; coches_Todos_Precios    [190]    = 1000;     coches_Todos_Nombres    [190] 	= "Freight Box Trailer";coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:590
	NEXT++; coches_Todos_Precios    [191]    = 1000;     coches_Todos_Nombres    [191] 	= "Article Trailer 3"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:591
	NEXT++; coches_Todos_Precios    [192]    = 1000;     coches_Todos_Nombres    [192] 	= "Andromada"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:592
	NEXT++; coches_Todos_Precios    [193]    = 1000;     coches_Todos_Nombres    [193] 	= "Dodo"; 				coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:593
	NEXT++; coches_Todos_Precios    [194]    = 1000;     coches_Todos_Nombres    [194] 	= "RC Cam"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:594
	NEXT++; coches_Todos_Precios    [195]    = 1000;     coches_Todos_Nombres    [195] 	= "Launch"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:595
	NEXT++; coches_Todos_Precios    [196]    = 1000;     coches_Todos_Nombres    [196] 	= "Police Car"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:596
	NEXT++; coches_Todos_Precios    [197]    = 1000;     coches_Todos_Nombres    [197] 	= "Police Car"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:597
	NEXT++; coches_Todos_Precios    [198]    = 1000;     coches_Todos_Nombres    [198] 	= "Police Car"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:598
	NEXT++; coches_Todos_Precios    [199]    = 1000;     coches_Todos_Nombres    [199] 	= "Police Ranger"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:599
	NEXT++; coches_Todos_Precios    [200]    = 1500;     coches_Todos_Nombres    [200] 	= "Picador";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 101; 	// Nombre: NINGUNO       ID:600
	NEXT++; coches_Todos_Precios    [201]    = 1000;     coches_Todos_Nombres    [201] 	= "S.W.A.T."; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 74; 	// Nombre: NINGUNO       ID:601
	NEXT++; coches_Todos_Precios    [202]    = 2000;     coches_Todos_Nombres    [202] 	= "Alpha";        		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 113; 	// Nombre: NINGUNO       ID:602
	NEXT++; coches_Todos_Precios    [203]    = 2000;     coches_Todos_Nombres    [203] 	= "Phoenix";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 114; 	// Nombre: NINGUNO       ID:603
	NEXT++; coches_Todos_Precios    [204]    = 1000;     coches_Todos_Nombres    [204] 	= "Glendale Shit"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:604
	NEXT++; coches_Todos_Precios    [205]    = 1000;     coches_Todos_Nombres    [205] 	= "Sadler Shit"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:605
	NEXT++; coches_Todos_Precios    [206]    = 1000;     coches_Todos_Nombres    [206] 	= "Baggage Trailer A"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:606
	NEXT++; coches_Todos_Precios    [207]    = 1000;     coches_Todos_Nombres    [207] 	= "Baggage Trailer B"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:607
	NEXT++; coches_Todos_Precios    [208]    = 1000;     coches_Todos_Nombres    [208] 	= "Tug Stairs Trailer"; coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:608
	NEXT++; coches_Todos_Precios    [209]    = 1000;     coches_Todos_Nombres    [209] 	= "Boxville"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:609
	NEXT++; coches_Todos_Precios    [210]    = 1000;     coches_Todos_Nombres    [210] 	= "Farm Trailer"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:610
	NEXT++; coches_Todos_Precios    [211]    = 1000;     coches_Todos_Nombres    [211] 	= "Utility Trailer"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:611
}
public MostrarHora(Accion ,playerid)
{
	new Hora, Minutos, Segundos;
	new Ano, Mes, Dia;

	gettime( Hora, Minutos, Segundos );
	getdate(Ano, Mes, Dia);
	Mes--;

	new FechaHoraFormateada[150];

	if ( Accion == 0 )
	{
	    if ( PlayersData[playerid][Jail] == 0 )
	    {
			format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos);
		}
		else
		{
			format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i~N~~R~Jail: ~W~%i sec", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos, PlayersData[playerid][Jail] - gettime());
		}
		Acciones(playerid, 8, "mira la hora");
		GameTextForPlayer(playerid, FechaHoraFormateada, 5000, 1 );
	}
	else if ( Accion == 1 )
	{
		if (Bonus)
		format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~Hora de la Paga!~N~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i~N~~p~¡~r~B~g~O~b~N~r~U~b~S~p~!", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos);
     	else
	    format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~Hora de la Paga!~N~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos);
		new MensajeBanco[5][70];
		new Intereses;
		new TimeNow = gettime();
        new houseid;
		new Float:Xpaga, Float:Ypaga, Float:Zpaga;
	    for (new i = 0; i < MAX_PLAYERS; i++)
	    {
			if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && ((TimeNow - PlayersDataOnline[i][IsPagaO]) + PlayersData[i][IsPaga]) > 1200)
			{
			    GameTextForPlayer(i, FechaHoraFormateada, 6000, 1);

			    Intereses = PlayersData[i][Banco] / 2000;

		   		PlayersData[i][Banco] = PlayersData[i][Banco] + FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] + Intereses + Bonus;

                if (Bonus)
		        format(MensajeBanco[0], 70, "Nuevo Balance: $%i Paga: $%i (+%i BONUS)", PlayersData[i][Banco], ( FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] + Bonus ), Bonus);
   				else
   				format(MensajeBanco[0], 70, "Nuevo Balance: $%i Paga: $%i", PlayersData[i][Banco], FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]]);
		   		format(MensajeBanco[1], 70, "Intereses: $%i", Intereses);
		   		format(MensajeBanco[2], 70, "Antiguo Balance: $%i", PlayersData[i][Banco] - FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] - Intereses);

    			SendInfoMessage(i, 1, " ", "|___________________  Banco ___________________|");
    			SendInfoMessage(i, 1, MensajeBanco[0], "Banco: ");
    			SendInfoMessage(i, 1, MensajeBanco[1], "Banco: ");
    			SendInfoMessage(i, 1, MensajeBanco[2], "Banco: ");
				if ( PlayersData[i][Alquiler] != -1 )
				{
	    			SendInfoMessage(i, 1, " ", "|_____________________ Alquiler ____________________|");
				    if ( HouseData[PlayersData[i][Alquiler]][PriceRent] <= PlayersData[i][Banco] )
				    {
				   		format(MensajeBanco[3], 70, "{F50000}-{00F50A}$%i", HouseData[PlayersData[i][Alquiler]][PriceRent]);
		    			SendInfoMessage(i, 1, MensajeBanco[3], "Alquiler: ");
						HouseData[PlayersData[i][Alquiler]][Deposito] = HouseData[PlayersData[i][Alquiler]][Deposito] + HouseData[PlayersData[i][Alquiler]][PriceRent];
						PlayersData[i][Banco] = PlayersData[i][Banco] - HouseData[PlayersData[i][Alquiler]][PriceRent];
					}
					else
					{
						PlayersData[i][Alquiler] = -1;
						PlayersData[i][House] 	= -1;
						SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler, por falta de dinero en el banco!");
					}
				}
		        if ( PlayersData[i][House] != -1 || PlayersData[i][Alquiler] != -1 )
		        {
		            if ( PlayersData[i][Alquiler] != -1 )
					{
						houseid = PlayersData[i][Alquiler];
					}
					else
					{
						houseid = PlayersData[i][House];
					}
					if ( (HouseData[houseid][Price] / 1000) <= PlayersData[i][Banco] )
					{
				   		format(MensajeBanco[3], 70, "{F50000}-{00F50A}$%i", (HouseData[houseid][Price] / 1000));
		    			SendInfoMessage(i, 1, MensajeBanco[3], "Electricidad: ");
						PlayersData[i][Banco] = PlayersData[i][Banco] - (HouseData[houseid][Price] / 1000);
						FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + (HouseData[houseid][Price] / 1000);
					}
					else
					{
    				    if ( PlayersData[i][Alquiler] != -1 )
					    {
							PlayersData[i][Alquiler] = -1;
							PlayersData[i][House] 	= -1;
							SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler, por no pagar la electricidad!");
						}
						else
						{
							RemoveDuenoOfHouse(houseid);
							SendInfoMessage(i, 3, "0", "A perdido su casa por no pagar la electricidad!");
						}
					}
				}
				if ( PlayersData[i][Car] != -1 )
				{
				    if ( (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car] - 400)] / 50) <= PlayersData[i][Banco] )
				    {
				   		format(MensajeBanco[3], 70, "{F50000}-{00F50A}$%i", (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car]) - 400] / 50));
		    			SendInfoMessage(i, 1, MensajeBanco[3], "Impuesto y Seguro del Vehículo: ");
						PlayersData[i][Banco] = PlayersData[i][Banco] - (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car]) - 400] / 50);
						FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car]) - 400] / 50);
					}
					else
					{
						RemoveDuenoOfVehicle(PlayersData[i][Car], 2);
						SendInfoMessage(i, 3, "0", "Has perdido tu vehículo por no pagar los impuestos!");
					}
				}
    			SendInfoMessage(i, 1, " ", "|_____________________ Fin ____________________|");
				if ( PlayersData[i][Faccion] != CIVIL )
		        {
    				PlayersData[i][HorasWork]++;
   				}
				PlayersData[i][HoursPlaying]++;
				PlayersData[i][IsPaga] = 0;
				PlayersDataOnline[i][IsPagaO]			= TimeNow;
				SetPlayerScore(i, GetPlayerScoreEx(i));
				GetPlayerPos(i, Xpaga, Ypaga, Zpaga);
			    PlayerPlaySound(i, 1133, Xpaga, Ypaga, Zpaga);
			    SetPlayerOrginalTime(i);
			}
			else
			{
			    if ( PlayersDataOnline[i][State] == 3 )
			    {
    				SendInfoMessage(i, 0, "215", "No has jugado lo suficiente como para recibir la paga.");
   				}
			}
		}
		VerificarCochesVencidos();
		RandomFire();
	}
	return 1;
}
public SetPlayerJail(playerid)
{
	ResetPlayerWeaponsEx(playerid);
	SetPlayerPos(playerid,
	JailsType[PlayersData[playerid][IsInJail]][PosX_Preso],
	JailsType[PlayersData[playerid][IsInJail]][PosY_Preso],
	JailsType[PlayersData[playerid][IsInJail]][PosZ_Preso]);
	SetPlayerFacingAngle(playerid, 	JailsType[PlayersData[playerid][IsInJail]][PosZZ_Preso]);
	SetPlayerInteriorEx(playerid, JailsType[PlayersData[playerid][IsInJail]][Interior_Preso]);
	SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],
	JailsType[PlayersData[playerid][IsInJail]][PosX_Liberado],
	JailsType[PlayersData[playerid][IsInJail]][PosY_Liberado],
	JailsType[PlayersData[playerid][IsInJail]][PosZ_Liberado],
	JailsType[PlayersData[playerid][IsInJail]][PosZZ_Liberado], 0, 0, 0, 0, 0, 0);
    SetCameraBehindPlayer(playerid);
    SetPlayerVirtualWorldEx(playerid, WORLD_DEFAULT_INTERIOR);
}
public SetTimerGlobal()
{
	// Hora Global
	new HoraGLOBAL, MinutosGLOBAL, SegundosGLOBAL;
	gettime(HoraGLOBAL, MinutosGLOBAL, SegundosGLOBAL);

	if ( HoraGLOBAL == 0 )
	{
		HoraGLOBAL = 23;
	}
	else
	{
	    HoraGLOBAL--;		      /*- Restamos 1, porque la hora de GETTIME la da en formato 24 horas, pero en
			                        -  SetWordTime es de rango 0 - 23.  */
	}

	SetWorldTime(HoraGLOBAL);	 // Establecemos la hora global

	new NuevaHora = ( (60 - ((MinutosGLOBAL) + 1)) * 60000 ) + ( (60 - (SegundosGLOBAL + 1) ) * 1000);
	SetTimer("SetTimerGlobal", NuevaHora, false); // Echamos andar el timer
	printf("Nueva Hora: %i Minutos: %i Milisegundos: %i", HoraGLOBAL, (NuevaHora / 1000) / 60, NuevaHora );
	MostrarHora(1, 0);
	return 1;
}
public LoadDataVehicle(vehicleid, const dir[], type)
{
	new query [500], Cache:cacheid, vehicleExist;
	format(query, 500, "SELECT * FROM `%s` WHERE `ID` = '%i';", dir, vehicleid);
    cacheid =
    mysql_query(dataBase, query);
    cache_get_row_count(vehicleExist);
    if (vehicleExist)
    {
        new ModelTemp;    cache_get_value_name_int(0, "Modelo", ModelTemp);
        if ( type )
		{
			cache_get_value_name_float(0, "PosX", DataCars[vehicleid][PosX]);
			cache_get_value_name_float(0, "PosY", DataCars[vehicleid][PosY]);
			cache_get_value_name_float(0, "PosZ", DataCars[vehicleid][PosZ]);
			cache_get_value_name_float(0, "PosZZ", DataCars[vehicleid][PosZZ]);

			cache_get_value_name_int(0, "Modelo", DataCars[vehicleid][Modelo]);

			cache_get_value_name_int(0, "Color1", DataCars[vehicleid][Color1]);
			cache_get_value_name_int(0, "Color2", DataCars[vehicleid][Color2]);
            cache_get_value_name(0, "Dueno", DataCars[vehicleid][Dueno], MAX_PLAYER_NAME);
		}
        cache_get_value_name_int(0, "Seguro", DataCars[vehicleid][Lock]);
		if ( type )
		{
			cache_get_value_name_int(0, "Time", DataCars[vehicleid][Time]);
			cache_get_value_name_int(0, "Matricula", DataCars[vehicleid][Matricula]);
			format(DataCars[vehicleid][MatriculaString], 32, "%i", DataCars[vehicleid][Matricula]);
		}
		cache_get_value_name_int(0, "LockPolice", DataCars[vehicleid][LockPolice]);
		cache_get_value_name(0, "ReasonLock", DataCars[vehicleid][ReasonLock], 50);
		cache_get_value_name_int(0, "Maletero_0_0", coches_Todos_Maleteros[vehicleid][0][0]);
		cache_get_value_name_int(0, "Maletero_0_1", coches_Todos_Maleteros[vehicleid][0][1]);
		cache_get_value_name_int(0, "Maletero_1_0", coches_Todos_Maleteros[vehicleid][1][0]);
		cache_get_value_name_int(0, "Maletero_1_1", coches_Todos_Maleteros[vehicleid][1][1]);
		cache_get_value_name_int(0, "Maletero_2_0", coches_Todos_Maleteros[vehicleid][2][0]);
		cache_get_value_name_int(0, "Maletero_2_1", coches_Todos_Maleteros[vehicleid][2][1]);
		cache_get_value_name_int(0, "Maletero_3_0", coches_Todos_Maleteros[vehicleid][3][0]);
		cache_get_value_name_int(0, "Maletero_3_1", coches_Todos_Maleteros[vehicleid][3][1]);
		cache_get_value_name_int(0, "Maletero_4_0", coches_Todos_Maleteros[vehicleid][4][0]);
		cache_get_value_name_int(0, "Maletero_4_1", coches_Todos_Maleteros[vehicleid][4][1]);
		cache_get_value_name_int(0, "Maletero_5_0", coches_Todos_Maleteros[vehicleid][5][0]);
		cache_get_value_name_int(0, "Maletero_5_1", coches_Todos_Maleteros[vehicleid][5][1]);
		cache_get_value_name_int(0, "Maletero_6_0", coches_Todos_Maleteros[vehicleid][6][0]);
		cache_get_value_name_int(0, "Maletero_6_1", coches_Todos_Maleteros[vehicleid][6][1]);
		cache_get_value_name_int(0, "Maletero_7", coches_Todos_Maleteros[vehicleid][7][0]);
		cache_get_value_name_int(0, "Maletero_8", coches_Todos_Maleteros[vehicleid][8][0]);
		cache_get_value_name_int(0, "Maletero_9", coches_Todos_Maleteros[vehicleid][9][0]);
		cache_get_value_name_int(0, "Maletero_10", coches_Todos_Maleteros[vehicleid][10][0]);
		cache_get_value_name_int(0, "Maletero_11", coches_Todos_Maleteros[vehicleid][11][0]);
  		cache_get_value_name_int(0, "MaleteroState", DataCars[vehicleid][MaleteroState]);
		cache_get_value_name_int(0, "Oil", DataCars[vehicleid][Oil]);
		cache_get_value_name_int(0, "Gas", DataCars[vehicleid][Gas]);
		cache_get_value_name_float(0, "LastX", DataCars[vehicleid][LastX]);
		cache_get_value_name_float(0, "LastY", DataCars[vehicleid][LastY]);
		cache_get_value_name_float(0, "LastZ", DataCars[vehicleid][LastZ]);
		cache_get_value_name_float(0, "LastZZ", DataCars[vehicleid][LastZZ]);
		cache_get_value_name_int(0, "IsLastSpawn", DataCars[vehicleid][IsLastSpawn]);
		cache_get_value_name_float(0, "LastDamage", DataCars[vehicleid][LastDamage]);
		cache_get_value_name_int(0, "PanelS", DataCars[vehicleid][PanelS]);
		cache_get_value_name_int(0, "DoorS", DataCars[vehicleid][DoorS]);
		cache_get_value_name_int(0, "LightS", DataCars[vehicleid][LightS]);
		cache_get_value_name_int(0, "TiresS", DataCars[vehicleid][TiresS]);
		cache_get_value_name_int(0, "SlotsTunning_0", DataCars[vehicleid][SlotsTunning][0]);
		cache_get_value_name_int(0, "SlotsTunning_1", DataCars[vehicleid][SlotsTunning][1]);
		cache_get_value_name_int(0, "SlotsTunning_2", DataCars[vehicleid][SlotsTunning][2]);
		cache_get_value_name_int(0, "SlotsTunning_3", DataCars[vehicleid][SlotsTunning][3]);
		cache_get_value_name_int(0, "SlotsTunning_4", DataCars[vehicleid][SlotsTunning][4]);
		cache_get_value_name_int(0, "SlotsTunning_5", DataCars[vehicleid][SlotsTunning][5]);
		cache_get_value_name_int(0, "SlotsTunning_6", DataCars[vehicleid][SlotsTunning][6]);
		cache_get_value_name_int(0, "SlotsTunning_7", DataCars[vehicleid][SlotsTunning][7]);
		cache_get_value_name_int(0, "SlotsTunning_8", DataCars[vehicleid][SlotsTunning][8]);
		cache_get_value_name_int(0, "SlotsTunning_9", DataCars[vehicleid][SlotsTunning][9]);
		cache_get_value_name_int(0, "SlotsTunning_10", DataCars[vehicleid][SlotsTunning][10]);
		cache_get_value_name_int(0, "SlotsTunning_11", DataCars[vehicleid][SlotsTunning][11]);
		cache_get_value_name_int(0, "SlotsTunning_12", DataCars[vehicleid][SlotsTunning][12]);
		cache_get_value_name_int(0, "SlotsTunning_13", DataCars[vehicleid][SlotsTunning][13]);
		cache_get_value_name_int(0, "Vinillo", DataCars[vehicleid][Vinillo]);
		if ( type )
		{
			cache_get_value_name_int(0, "Interior", DataCars[vehicleid][Interior]);
		}
		cache_get_value_name_int(0, "InteriorLast", DataCars[vehicleid][InteriorLast]);
		if ( type )
		{
			cache_get_value_name_int(0, "World", DataCars[vehicleid][World]);
		}
		cache_get_value_name_int(0, "WorldLast", DataCars[vehicleid][WorldLast]);

		cache_get_value_name_int(0, "StationID", DataCars[vehicleid][StationID]);

		cache_get_value_name_int(0, "GuanteraLock", DataCars[vehicleid][GuanteraLock]);
		cache_get_value_name_int(0, "GuanteraObjects_0", DataCars[vehicleid][GuanteraObjects][0]);
		cache_get_value_name_int(0, "GuanteraObjects_1", DataCars[vehicleid][GuanteraObjects][1]);
		cache_get_value_name_int(0, "GuanteraObjects_2", DataCars[vehicleid][GuanteraObjects][2]);
		cache_get_value_name_int(0, "GuanteraObjects_3", DataCars[vehicleid][GuanteraObjects][3]);
		cache_get_value_name_int(0, "GuanteraObjects_4", DataCars[vehicleid][GuanteraObjects][4]);
		cache_get_value_name_int(0, "GuanteraObjects_5", DataCars[vehicleid][GuanteraObjects][5]);
		cache_get_value_name_int(0, "GuanteraObjects_6", DataCars[vehicleid][GuanteraObjects][6]);
		cache_get_value_name_int(0, "GuanteraObjects_7", DataCars[vehicleid][GuanteraObjects][7]);
		cache_get_value_name_int(0, "Freno", DataCars[vehicleid][Freno]);

		DataCars[vehicleid][VehicleDeath]		= false;
		DataCars[vehicleid][Puente]				= true;
		DataCars[vehicleid][StateEncendido] 	= false;

		if ( !type )
		{
		    if ( ModelTemp != DataCars[vehicleid][Modelo] )
		    {
		        DataCars[vehicleid][IsLastSpawn]  = false;
		        DataCars[vehicleid][WorldLast]    = DataCars[vehicleid][World];
		        DataCars[vehicleid][InteriorLast] = DataCars[vehicleid][Interior];
				CleanTunningSlots(vehicleid);
		    }
		}
    }
    cache_delete(cacheid);
    return vehicleExist;
}
public SaveDataVehicle(vehicleid, const dir[])
{
	new query[2000];
    /*//Utilizado para guardar los vehiculos de Scriptfiles
	format(query, 2000, "INSERT INTO `%s` (`ID`,`Modelo`) VALUES ('%i','%i');", dir, vehicleid, DataCars[vehicleid][Modelo]);
	mysql_query(dataBase, query, false);
	*/

    format(query, 2000, "UPDATE `%s` SET ", dir);
	strcat(query, "`PosX`='%f',`PosY`='%f',`PosZ`='%f',`PosZZ`='%f',`Modelo`='%i',`Color1`='%i',`Color2`='%i',`Dueno`='%e',");
	strcat(query, "`Seguro`='%i',`Time`='%i',`Matricula`='%i',`LockPolice`='%i',`ReasonLock`='%e'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 2000, query,
		DataCars[vehicleid][PosX],
		DataCars[vehicleid][PosY],
		DataCars[vehicleid][PosZ],
		DataCars[vehicleid][PosZZ],
		DataCars[vehicleid][Modelo],
		DataCars[vehicleid][Color1],
		DataCars[vehicleid][Color2],
		DataCars[vehicleid][Dueno],
		DataCars[vehicleid][Lock],
		DataCars[vehicleid][Time],
		DataCars[vehicleid][Matricula],
		DataCars[vehicleid][LockPolice],
		DataCars[vehicleid][ReasonLock],
		vehicleid);
	mysql_query(dataBase, query, false);

	format(query, 2000, "UPDATE `%s` SET ", dir);
	strcat(query, "`Maletero_0_0`='%i',`Maletero_0_1`='%i',`Maletero_1_0`='%i',`Maletero_1_1`='%i',`Maletero_2_0`='%i',`Maletero_2_1`='%i',`Maletero_3_0`='%i',`Maletero_3_1`='%i',");
	strcat(query, "`Maletero_4_0`='%i',`Maletero_4_1`='%i',`Maletero_5_0`='%i',`Maletero_5_1`='%i',`Maletero_6_0`='%i',`Maletero_6_1`='%i',");
	strcat(query, "`Maletero_7`='%i',`Maletero_8`='%i',`Maletero_9`='%i',`Maletero_10`='%i',`Maletero_11`='%i',`MaleteroState`='%i',`Oil`='%i',`Gas`='%i',");
	strcat(query, "`LastX`='%f',`LastY`='%f',`LastZ`='%f',`LastZZ`='%f',`IsLastSpawn`='%i',`LastDamage`='%f',`PanelS`='%i',`DoorS`='%i',`LightS`='%i',`TiresS`='%i',");
	strcat(query, "`SlotsTunning_0`='%i',`SlotsTunning_1`='%i',`SlotsTunning_2`='%i',`SlotsTunning_3`='%i',`SlotsTunning_4`='%i',`SlotsTunning_5`='%i',`SlotsTunning_6`='%i',");
	strcat(query, "`SlotsTunning_7`='%i',`SlotsTunning_8`='%i',`SlotsTunning_9`='%i',`SlotsTunning_10`='%i',`SlotsTunning_11`='%i',`SlotsTunning_12`='%i',`SlotsTunning_13`='%i',");
	strcat(query, "`Vinillo`='%i',`Interior`='%i',`InteriorLast`='%i',`World`='%i',`WorldLast`='%i',`StationID`='%i',");
	strcat(query, "`GuanteraLock`='%i',`GuanteraObjects_0`='%i',`GuanteraObjects_1`='%i',");
	strcat(query, "`GuanteraObjects_2`='%i',`GuanteraObjects_3`='%i',`GuanteraObjects_4`='%i',`GuanteraObjects_5`='%i',`GuanteraObjects_6`='%i',`GuanteraObjects_7`='%i',");
	strcat(query, "`Freno`='%i'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 2000, query,
		coches_Todos_Maleteros[vehicleid][0][0],
		coches_Todos_Maleteros[vehicleid][0][1],
		coches_Todos_Maleteros[vehicleid][1][0],
		coches_Todos_Maleteros[vehicleid][1][1],
		coches_Todos_Maleteros[vehicleid][2][0],
		coches_Todos_Maleteros[vehicleid][2][1],
		coches_Todos_Maleteros[vehicleid][3][0],
		coches_Todos_Maleteros[vehicleid][3][1],
		coches_Todos_Maleteros[vehicleid][4][0],
		coches_Todos_Maleteros[vehicleid][4][1],
		coches_Todos_Maleteros[vehicleid][5][0],
		coches_Todos_Maleteros[vehicleid][5][1],
		coches_Todos_Maleteros[vehicleid][6][0],
		coches_Todos_Maleteros[vehicleid][6][1],
		coches_Todos_Maleteros[vehicleid][7][0],
		coches_Todos_Maleteros[vehicleid][8][0],
		coches_Todos_Maleteros[vehicleid][9][0],
		coches_Todos_Maleteros[vehicleid][10][0],
		coches_Todos_Maleteros[vehicleid][11][0],
		DataCars[vehicleid][MaleteroState],
		DataCars[vehicleid][Oil],
		DataCars[vehicleid][Gas],
		DataCars[vehicleid][LastX],
		DataCars[vehicleid][LastY],
		DataCars[vehicleid][LastZ],
		DataCars[vehicleid][LastZZ],
		DataCars[vehicleid][IsLastSpawn],
		DataCars[vehicleid][LastDamage],
		DataCars[vehicleid][PanelS],
		DataCars[vehicleid][DoorS],
		DataCars[vehicleid][LightS],
		DataCars[vehicleid][TiresS],
		DataCars[vehicleid][SlotsTunning][0],
		DataCars[vehicleid][SlotsTunning][1],
		DataCars[vehicleid][SlotsTunning][2],
		DataCars[vehicleid][SlotsTunning][3],
		DataCars[vehicleid][SlotsTunning][4],
		DataCars[vehicleid][SlotsTunning][5],
		DataCars[vehicleid][SlotsTunning][6],
		DataCars[vehicleid][SlotsTunning][7],
		DataCars[vehicleid][SlotsTunning][8],
		DataCars[vehicleid][SlotsTunning][9],
		DataCars[vehicleid][SlotsTunning][10],
		DataCars[vehicleid][SlotsTunning][11],
		DataCars[vehicleid][SlotsTunning][12],
		DataCars[vehicleid][SlotsTunning][13],
		DataCars[vehicleid][Vinillo],
		DataCars[vehicleid][Interior],
		DataCars[vehicleid][InteriorLast],
		DataCars[vehicleid][World],
		DataCars[vehicleid][WorldLast],
		DataCars[vehicleid][StationID],
		DataCars[vehicleid][GuanteraLock],
		DataCars[vehicleid][GuanteraObjects][0],
		DataCars[vehicleid][GuanteraObjects][1],
		DataCars[vehicleid][GuanteraObjects][2],
		DataCars[vehicleid][GuanteraObjects][3],
		DataCars[vehicleid][GuanteraObjects][4],
		DataCars[vehicleid][GuanteraObjects][5],
		DataCars[vehicleid][GuanteraObjects][6],
		DataCars[vehicleid][GuanteraObjects][7],
		DataCars[vehicleid][Freno],
		vehicleid);
	mysql_query(dataBase, query, false);
}
public IsPlayerInNearVehicle(playerid)
{
	if ( !IsPlayerInAnyVehicle(playerid) )
	{
	    new TheVehicle;
	    new i;
	    new Float:RangoC;
	    new Float:X, Float:Y, Float:Z;
		new MyWorld = GetPlayerVirtualWorld(playerid);
	    do
	    {
		    RangoC++;
			i = 1;
			for (; i <= MAX_CAR; i++)
			{
			    GetVehiclePos(i, X, Y, Z);
				if (IsPlayerInRangeOfPoint(playerid, RangoC,
					X,
					Y,
					Z) && MyWorld == DataCars[i][WorldLast])
				{
				    TheVehicle = i;
				    RangoC = 5.0;
				    break;
				}
			}
		}
		while( RangoC != 5.0 );

		if ( TheVehicle && coches_Todos_Type[GetVehicleModel(TheVehicle) - 400] != BICI )
		{
		    return TheVehicle;
		}
		else
		{
			SendInfoMessage(playerid, 0, "222", "No hay ningún vehículo a su alrededor");
		}
		return false;
	}
	else
	{
		return GetPlayerVehicleID(playerid);
	}
}
public IsPlayerInNearVehicleEx(playerid)
{
	if ( !IsPlayerInAnyVehicle(playerid) )
	{
	    new TheVehicle;
	    new i;
	    new Float:RangoC;
	    new Float:X, Float:Y, Float:Z;
	    do
	    {
		    RangoC++;
			i = 1;
			for (; i <= MAX_CAR; i++)
			{
			    GetVehiclePos(i, X, Y, Z);
				if (IsPlayerInRangeOfPoint(playerid, RangoC,
					X,
					Y,
					Z) )
				{
				    TheVehicle = i;
				    RangoC = 5.0;
					break;
				}
			}
		}
		while( RangoC != 5.0 );

		if ( !TheVehicle )
		{
			SendInfoMessage(playerid, 0, "216", "No hay ningún vehículo a su alrededor");
		}
		return TheVehicle;
	}
	else
	{
		return GetPlayerVehicleID(playerid);
	}
}
public AparcarVehicle(playerid, vehicleid)
{
	for (new i = 1; i <= MAX_CAR; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 4.0,
			DataCars[i][PosX],
			DataCars[i][PosY],
			DataCars[i][PosZ]) &&
			DataCars[i][World] == DataCars[vehicleid][World]
			&&
			DataCars[i][Interior] == DataCars[vehicleid][Interior])
		{
		    SendInfoMessage(playerid, 0, "223", "Parqueo ocupado, por favor busque otro lugar!");
		    return false;
		}
	}
	GameTextForPlayer(playerid, "~W~Coche ~B~Aparcado!", 1000, 6);
    new Float:X, Float:Y, Float:Z, Float:ZZ;
    GetVehiclePos(vehicleid, X, Y, Z);
	GetVehicleZAngle(vehicleid, ZZ);


	DataCars[vehicleid][PosX] = X;
	DataCars[vehicleid][PosY] = Y;
	DataCars[vehicleid][PosZ] = Z;
	DataCars[vehicleid][PosZZ]= ZZ;

	DataCars[vehicleid][Interior] = GetPlayerInteriorEx(playerid);
	DataCars[vehicleid][World]    = GetPlayerVirtualWorld(playerid);

	SaveDataVehicle(vehicleid, DIR_VEHICLES);
    return true;
}
public LockVehicle(playerid)
{
    new MyNearCar;
    if (!PlayersData[playerid][IsPlayerInVehInt])
    {
		MyNearCar = IsPlayerInNearVehicle(playerid);
	}
	else if (PickupInfo[PickupidAmbulance][PickupId] == PlayersDataOnline[playerid][InPickup] ||
			 PickupInfo[PickupidFurgoCNN][PickupId] == PlayersDataOnline[playerid][InPickup] ||
			 PickupInfo[PickupidPoliceFurgo][PickupId] == PlayersDataOnline[playerid][InPickup])
	{
		MyNearCar = PlayersData[playerid][IsPlayerInVehInt];
	}
	if ( MyNearCar )
	{
		if (IsVehicleMyVehicle(playerid, MyNearCar) ||
			IsVehicleMyFaccion(playerid, MyNearCar) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyNearCar) && IsMyCarAsignados(playerid, MyNearCar))
		{
		    new MsgLock[MAX_TEXT_CHAT];
		    if ( DataCars[MyNearCar][Lock] )
		    {
		    	DataCars[MyNearCar][Lock] = false;
				ShowLockTextDraws(MyNearCar, true);
				GameTextForPlayer(playerid, "~w~Coche ~g~Abierto", 1000, 3);
	    	}
	    	else
	    	{
		    	DataCars[MyNearCar][Lock] = true;
				ShowLockTextDraws(MyNearCar, false);
				GameTextForPlayer(playerid, "~w~Coche ~r~Cerrado", 1000, 3);
			}
            LockTrain(MyNearCar, DataCars[MyNearCar][Lock]);

			if ( MyNearCar <= MAX_CAR_DUENO )
			{
				format(MsgLock, 50, "%s su vehículo.", NamesLook[DataCars[MyNearCar][Lock]]);
				for (new i = 0; i < MAX_PLAYERS; i++)
		    	{
			  	    if(IsPlayerConnected(i))
					{
						SetVehicleParamsForPlayer(MyNearCar, i, 0, DataCars[MyNearCar][Lock]);
					}
				}
			}
			else
			{
				format(MsgLock, 50, "%s un vehículo de facción.", NamesLook[DataCars[MyNearCar][Lock]]);
				for (new i = 0; i < MAX_PLAYERS; i++)
		    	{
			  	    if(IsPlayerConnected(i)&&PlayersData[playerid][Faccion]==PlayersData[i][Faccion])
			  	    {
						SetVehicleParamsForPlayer(MyNearCar, i, 0, DataCars[MyNearCar][Lock]);
					}
				}
			}
		    SendInfoMessage(playerid, 2, "0", MsgLock);
			PlayPlayerStreamSound(playerid, SOUND_ALARM_CAR);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "217", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
	    return false;
	}
}
public IsVehicleMyVehicle(playerid, vehicleid)
{
	if ( PlayersData[playerid][Car] == vehicleid )
	{
		return true;
	}
	else
	{
		return false;
	}
}
public IsVehicleMyFaccion(playerid, vehicleid)
{
	if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Faccion] == DataCars[vehicleid][Time] && vehicleid > MAX_CAR_DUENO && vehicleid <= MAX_CAR_FACCION)
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public SetPlayerLockAllVehicles(playerid)
{
	for (new i = 1; i <= MAX_CAR; i++)
	{
		if ( i <= MAX_CAR_DUENO )
		{
		    if (strlen(DataCars[i][Dueno]) != 1)
			SetVehicleParamsForPlayer(i, playerid, 0, DataCars[i][Lock]);
			else
			SetVehicleParamsForPlayer(i, playerid, 0, 0);

		}
		else if ( i <= MAX_CAR_FACCION )
		{
		    if ( PlayersData[playerid][Faccion] == DataCars[i][Time] )
			SetVehicleParamsForPlayer(i, playerid, 0, DataCars[i][Lock]);
			else
			SetVehicleParamsForPlayer(i, playerid, 0, 1);
		}
		else
		{
			SetVehicleParamsForPlayer(i, playerid, 0, 0);
		}
	}
}
public IsFixBikeEnter(playerid, vehicleid)
{
    if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == MOTO || coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == TREN || coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == BOTE)
	{
	    new Float:PosFixVeh[3]; GetPlayerPos(playerid, PosFixVeh[0], PosFixVeh[1], PosFixVeh[2]);
	    SetPlayerPos(playerid, PosFixVeh[0], PosFixVeh[1], PosFixVeh[2] + 2);
	    return true;
	}
	else
	{
	    return false;
	}
}
public LoadCarsFaccion()
{
/////////////////////////////////////		/// Gobierno
	MAX_CAR++; // Heli 1
	DataCars[MAX_CAR][PosX]   = 1423.8506;
	DataCars[MAX_CAR][PosY]   = -1788.1591;
	DataCars[MAX_CAR][PosZ]   = 33.6485;
	DataCars[MAX_CAR][PosZZ]  = 90.2874;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]   = GOBIERNO;

	MAX_CAR++; // Limousine 1
	DataCars[MAX_CAR][PosX]   = 1403.7095;
	DataCars[MAX_CAR][PosY]     = -1775.6791;
	DataCars[MAX_CAR][PosZ]     = 13.2020;
	DataCars[MAX_CAR][PosZZ]  = 89.6743;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = GOBIERNO;

	MAX_CAR++; // Limousine 2
	DataCars[MAX_CAR][PosX]   = 1403.6346;
	DataCars[MAX_CAR][PosY]     = -1788.9039;
	DataCars[MAX_CAR][PosZ]     = 13.2026;
	DataCars[MAX_CAR][PosZZ]  = 89.6743;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = GOBIERNO;

	MAX_CAR++; // sultan
	DataCars[MAX_CAR][PosX]   = 1403.6726;
	DataCars[MAX_CAR][PosY]     = -1782.1398;
	DataCars[MAX_CAR][PosZ]     = 13.2269;
	DataCars[MAX_CAR][PosZZ]  = 89.6743;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = GOBIERNO;

/////////////////////////////////////		/// Licencieros
	MAX_CAR++; // Sentinel 1
	DataCars[MAX_CAR][PosX]   = -2081.1504;
	DataCars[MAX_CAR][PosY]     = -84.1511;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 2
	DataCars[MAX_CAR][PosX]   = -2085.3494;
	DataCars[MAX_CAR][PosY]     = -84.3902;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 3
	DataCars[MAX_CAR][PosX]   = -2089.7041;
	DataCars[MAX_CAR][PosY]     = -84.2775;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 4
	DataCars[MAX_CAR][PosX]   = -2093.9377;
	DataCars[MAX_CAR][PosY]     = -84.1245;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -2028.4371;
	DataCars[MAX_CAR][PosY]     = -111.8142;
	DataCars[MAX_CAR][PosZ]     = 38.5758;
	DataCars[MAX_CAR][PosZZ]  = 0.2373;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Bote
	DataCars[MAX_CAR][PosX]   = -1761.9163;
	DataCars[MAX_CAR][PosY]     = -194.3317;
	DataCars[MAX_CAR][PosZ]     = 0.3617;
	DataCars[MAX_CAR][PosZZ]  = 270.0933;
	DataCars[MAX_CAR][Modelo] = 493;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // CAMIÓN DE LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2063.4512;
	DataCars[MAX_CAR][PosY]     = -143.2802;
	DataCars[MAX_CAR][PosZ]     = 35.0500;
	DataCars[MAX_CAR][PosZZ]  = 356.2116;
	DataCars[MAX_CAR][Modelo] = 403;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel  1  LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2062.5288;
	DataCars[MAX_CAR][PosY]     = -109.9416;
	DataCars[MAX_CAR][PosZ]     = 35.2093;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 2  LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2072.0889;
	DataCars[MAX_CAR][PosY]     = -109.9933;
	DataCars[MAX_CAR][PosZ]     = 35.2260;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 3  LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2082.1277;
	DataCars[MAX_CAR][PosY]     = -110.0483;
	DataCars[MAX_CAR][PosZ]     = 35.2182;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 4 LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2091.4277;
	DataCars[MAX_CAR][PosY]     = -110.0991;
	DataCars[MAX_CAR][PosZ]     = 35.2109;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

/////////////////////////////////////		// Traficantes
	MAX_CAR++; // Camper 1
	DataCars[MAX_CAR][PosX]   = 1049.5192;
	DataCars[MAX_CAR][PosY]     = -306.6437;
	DataCars[MAX_CAR][PosZ]     = 73.9857;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

	MAX_CAR++; // Camper 2
	DataCars[MAX_CAR][PosX]   = 1041.9279;
	DataCars[MAX_CAR][PosY]     = -306.4722;
	DataCars[MAX_CAR][PosZ]     = 73.9872;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

	MAX_CAR++; // Camper 3
	DataCars[MAX_CAR][PosX]   = 1049.3835;
	DataCars[MAX_CAR][PosY]     = -291.9089;
	DataCars[MAX_CAR][PosZ]     = 73.9734;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

	MAX_CAR++; // Camper 4
	DataCars[MAX_CAR][PosX]   = 1041.8984;
	DataCars[MAX_CAR][PosY]     = -292.9134;
	DataCars[MAX_CAR][PosZ]     = 73.9849;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

/////////////////////////////////////	/// La Cosa Nostra
	MAX_CAR++; // Stafford 1
	DataCars[MAX_CAR][PosX]   = 1246.5371;
	DataCars[MAX_CAR][PosY]     = -2030.5886;
	DataCars[MAX_CAR][PosZ]     = 59.6070;
	DataCars[MAX_CAR][PosZZ]  = 269.9200;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Stafford 2
	DataCars[MAX_CAR][PosX]   = 1246.3102;
	DataCars[MAX_CAR][PosY]     = -2024.3002;
	DataCars[MAX_CAR][PosZ]     = 59.6129;
	DataCars[MAX_CAR][PosZZ]  = 269.9200;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Stafford 3
	DataCars[MAX_CAR][PosX]   = 1275.5823;
	DataCars[MAX_CAR][PosY]     = -2036.8193;
	DataCars[MAX_CAR][PosZ]     = 58.8556;
	DataCars[MAX_CAR][PosZZ]  = 89.1287;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Stafford 4
	DataCars[MAX_CAR][PosX]   = 1275.6466;
	DataCars[MAX_CAR][PosY]     = -2027.7294;
	DataCars[MAX_CAR][PosZ]     = 58.8190;
	DataCars[MAX_CAR][PosZZ]  = 90.6892;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Hustler 1
	DataCars[MAX_CAR][PosX]   = 1277.1549;
	DataCars[MAX_CAR][PosY]     = -2018.6228;
	DataCars[MAX_CAR][PosZ]     = 58.7358;
	DataCars[MAX_CAR][PosZZ]  = 89.0893;
	DataCars[MAX_CAR][Modelo] = 545;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Limo 1
	DataCars[MAX_CAR][PosX]   = 1274.4896;
	DataCars[MAX_CAR][PosY]     = -2032.3936;
	DataCars[MAX_CAR][PosZ]     = 58.8427;
	DataCars[MAX_CAR][PosZZ]  = 89.4884;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = 1116.3240;
	DataCars[MAX_CAR][PosY]     = -2053.2993;
	DataCars[MAX_CAR][PosZ]     = 74.2678;
	DataCars[MAX_CAR][PosZZ]  = 179.4773;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

/////////////////////////////////////	//// DETECTIVES
	MAX_CAR++; // Limousine 1
	DataCars[MAX_CAR][PosX]   = -2064.2510;
	DataCars[MAX_CAR][PosY]     = 1421.9753;
	DataCars[MAX_CAR][PosZ]     = 6.8259;
	DataCars[MAX_CAR][PosZZ]  = 179.6253;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Limousine 2
	DataCars[MAX_CAR][PosX]   = -2092.2761;
	DataCars[MAX_CAR][PosY]     = 1422.1587;
	DataCars[MAX_CAR][PosZ]     = 6.8259;
	DataCars[MAX_CAR][PosZZ]  = 179.6253;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 1
	DataCars[MAX_CAR][PosX]   = -2091.9221;
	DataCars[MAX_CAR][PosY]     = 1411.7478;
	DataCars[MAX_CAR][PosZ]     = 6.8386;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 2
	DataCars[MAX_CAR][PosX]   = -2091.9207;
	DataCars[MAX_CAR][PosY]     = 1404.6810;
	DataCars[MAX_CAR][PosZ]     = 6.8386;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 3
	DataCars[MAX_CAR][PosX]   = -2091.9187;
	DataCars[MAX_CAR][PosY]     = 1397.6490;
	DataCars[MAX_CAR][PosZ]     = 6.8386;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 4
	DataCars[MAX_CAR][PosX]   = -2091.9167;
	DataCars[MAX_CAR][PosY]     = 1390.6129;
	DataCars[MAX_CAR][PosZ]     = 6.8387;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 5
	DataCars[MAX_CAR][PosX]   = -2091.9146;
	DataCars[MAX_CAR][PosY]     = 1383.5077;
	DataCars[MAX_CAR][PosZ]     = 6.8424;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -2071.7710;
	DataCars[MAX_CAR][PosY]   = 1426.2206;
	DataCars[MAX_CAR][PosZ]   = 13.7946;
	DataCars[MAX_CAR][PosZZ]  = 181.4709;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]   = ADP;

/////////////////////////////////////	/// Yakuza
	MAX_CAR++; // NRG 1
	DataCars[MAX_CAR][PosX]   = -2272.4731;
	DataCars[MAX_CAR][PosY]     = 2303.1187;
	DataCars[MAX_CAR][PosZ]     = 4.4006;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // NRG 2
	DataCars[MAX_CAR][PosX]   = -2272.3984;
	DataCars[MAX_CAR][PosY]     = 2306.2275;
	DataCars[MAX_CAR][PosZ]     = 4.4008;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // NRG 3
	DataCars[MAX_CAR][PosX]   = -2272.3269;
	DataCars[MAX_CAR][PosY]     = 2309.2114;
	DataCars[MAX_CAR][PosZ]     = 4.4011;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // NRG 4
	DataCars[MAX_CAR][PosX]   = -2272.2563;
	DataCars[MAX_CAR][PosY]     = 2312.1572;
	DataCars[MAX_CAR][PosZ]     = 4.4013;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 1
	DataCars[MAX_CAR][PosX]   = -2251.5767;
	DataCars[MAX_CAR][PosY]     = 2317.9282;
	DataCars[MAX_CAR][PosZ]     = 4.5278;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 2
	DataCars[MAX_CAR][PosX]   = -2251.5996;
	DataCars[MAX_CAR][PosY]     = 2312.1257;
	DataCars[MAX_CAR][PosZ]     = 4.5278;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 3
	DataCars[MAX_CAR][PosX]   = -2251.6233;
	DataCars[MAX_CAR][PosY]     = 2305.9558;
	DataCars[MAX_CAR][PosZ]     = 4.5277;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 4
	DataCars[MAX_CAR][PosX]   = -2251.6470;
	DataCars[MAX_CAR][PosY]     = 2299.9570;
	DataCars[MAX_CAR][PosZ]     = 4.5276;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -2227.2917;
	DataCars[MAX_CAR][PosY]     = 2326.7493;
	DataCars[MAX_CAR][PosZ]     = 7.2656;
	DataCars[MAX_CAR][PosZZ]  = 88.9387;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Bote 1
	DataCars[MAX_CAR][PosX]   = -2225.4934;
	DataCars[MAX_CAR][PosY]     = 2401.3386;
	DataCars[MAX_CAR][PosZ]     = -0.4979;
	DataCars[MAX_CAR][PosZZ]  = 44.7916;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Bote 2
	DataCars[MAX_CAR][PosX]   = -2204.9954;
	DataCars[MAX_CAR][PosY]     = 2421.3252;
	DataCars[MAX_CAR][PosZ]     = -0.5210;
	DataCars[MAX_CAR][PosZZ]  = 44.2520;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

/////////////////////////////////////	//// Taxistas
	MAX_CAR++; // Taxi 1
	DataCars[MAX_CAR][PosX]   = 1803.0527;
	DataCars[MAX_CAR][PosY]     = -1928.2758;
	DataCars[MAX_CAR][PosZ]     = 13.1682;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 2
	DataCars[MAX_CAR][PosX]   = 1803.0560;
	DataCars[MAX_CAR][PosY]     = -1923.5580;
	DataCars[MAX_CAR][PosZ]     = 13.1708;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 3
	DataCars[MAX_CAR][PosX]   = 1803.0596;
	DataCars[MAX_CAR][PosY]     = -1918.6929;
	DataCars[MAX_CAR][PosZ]     = 13.1736;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 4
	DataCars[MAX_CAR][PosX]   = 1803.0625;
	DataCars[MAX_CAR][PosY]     = -1913.9565;
	DataCars[MAX_CAR][PosZ]     = 13.1763;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 5
	DataCars[MAX_CAR][PosX]   = 1803.0660;
	DataCars[MAX_CAR][PosY]     = -1909.1177;
	DataCars[MAX_CAR][PosZ]     = 13.1791;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 6
	DataCars[MAX_CAR][PosX]   = 1778.1522;
	DataCars[MAX_CAR][PosY]     = -1909.0978;
	DataCars[MAX_CAR][PosZ]     = 13.0649;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 7
	DataCars[MAX_CAR][PosX]   = 1778.1006;
	DataCars[MAX_CAR][PosY]     = -1913.8856;
	DataCars[MAX_CAR][PosZ]     = 13.0677;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 8
	DataCars[MAX_CAR][PosX]   = 1778.0482;
	DataCars[MAX_CAR][PosY]     = -1918.7432;
	DataCars[MAX_CAR][PosZ]     = 13.0704;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 9
	DataCars[MAX_CAR][PosX]   = 1777.9969;
	DataCars[MAX_CAR][PosY]     = -1923.5170;
	DataCars[MAX_CAR][PosZ]     = 13.0731;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 10
	DataCars[MAX_CAR][PosX]   = 1777.9457;
	DataCars[MAX_CAR][PosY]     = -1928.2849;
	DataCars[MAX_CAR][PosZ]     = 13.0759;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Bus 1
	DataCars[MAX_CAR][PosX]   = 1762.8081;
	DataCars[MAX_CAR][PosY]     = -1888.1882;
	DataCars[MAX_CAR][PosZ]     = 13.6937;
	DataCars[MAX_CAR][PosZZ]  = 269.8838;
	DataCars[MAX_CAR][Modelo] = 437;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Bus 2
	DataCars[MAX_CAR][PosX]   = 1801.4537;
	DataCars[MAX_CAR][PosY]     = -1939.2023;
	DataCars[MAX_CAR][PosZ]     = 13.6816;
	DataCars[MAX_CAR][PosZZ]  = 89.7052;
	DataCars[MAX_CAR][Modelo] = 437;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1
	DataCars[MAX_CAR][PosX]   = 1752.1603;
	DataCars[MAX_CAR][PosY]     = -1953.9154;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 89.8376;
	DataCars[MAX_CAR][Modelo] = 538;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = 1733.6321;
	DataCars[MAX_CAR][PosY]     = -1953.7561;
	DataCars[MAX_CAR][PosZ]     = 14.9954;
	DataCars[MAX_CAR][PosZZ]  = 269.9219;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = 1712.7133;
	DataCars[MAX_CAR][PosY]     = -1953.6953;
	DataCars[MAX_CAR][PosZ]     = 14.9954;
	DataCars[MAX_CAR][PosZZ]  = 269.7455;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = 1691.7847;
	DataCars[MAX_CAR][PosY]     = -1953.6418;
	DataCars[MAX_CAR][PosZ]     = 14.9954;
	DataCars[MAX_CAR][PosZZ]  = 269.9615;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 538;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tran Vía San Fierro
	DataCars[MAX_CAR][PosX]   = -2006.4021;
	DataCars[MAX_CAR][PosY]     = 142.8303;
	DataCars[MAX_CAR][PosZ]     = 27.5391;
	DataCars[MAX_CAR][PosZZ]  = 179.2768;
	DataCars[MAX_CAR][Modelo] = 449;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	TramSFID = MAX_CAR;

/////////////////////////////////////	//// SFPD
	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -1680.3624;
	DataCars[MAX_CAR][PosY]     = 705.8151;
	DataCars[MAX_CAR][PosZ]     = 30.6016;
	DataCars[MAX_CAR][PosZZ]  = 179.5311;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1608.3695068359;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1604.4149169922;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1600.1611328125;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1596.2014160156;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1592.1605224609;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1587.9897460938;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 742.61755371094;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 738.7099609375;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 734.53442382813;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 730.591796875;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 726.412109375;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 722.40380859375;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 718.24395751953;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 712.20965576172;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1604.2319335938;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1608.3657226563;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1628.7404785156;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1632.7247314453;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 1
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 698.4241;
	DataCars[MAX_CAR][PosZ]     = 0.8379;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 2
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 709.9980;
	DataCars[MAX_CAR][PosZ]     = 1.0950;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 3
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 721.1343;
	DataCars[MAX_CAR][PosZ]     = 1.1943;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 472;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 4
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 734.0255;
	DataCars[MAX_CAR][PosZ]     = 1.3738;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 472;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

/////////////////////////////////////	////// NFS
	MAX_CAR++; // Grua Grotti 1
	DataCars[MAX_CAR][PosX]   = 528.98968506;
	DataCars[MAX_CAR][PosY]     = -1322.86389160;
	DataCars[MAX_CAR][PosZ]     = 17.23218727;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Grotti 2
	DataCars[MAX_CAR][PosX]   = 523.92413330;
	DataCars[MAX_CAR][PosY]     = -1322.83740234;
	DataCars[MAX_CAR][PosZ]     = 17.23218727;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

/////////////////////////////////////	/// SAMD
	MAX_CAR++; // Ambulancia 1
	DataCars[MAX_CAR][PosX]   = -2591.7585;
	DataCars[MAX_CAR][PosY]     = 634.7858;
	DataCars[MAX_CAR][PosZ]     = 27.4688;
	DataCars[MAX_CAR][PosZZ]  = 269.2393;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 2
	DataCars[MAX_CAR][PosX]   = -2591.6882;
	DataCars[MAX_CAR][PosY]     = 640.1004;
	DataCars[MAX_CAR][PosZ]     = 27.4812;
	DataCars[MAX_CAR][PosZZ]  = 269.2394;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 3
	DataCars[MAX_CAR][PosX]   = -2591.6196;
	DataCars[MAX_CAR][PosY]     = 645.2371;
	DataCars[MAX_CAR][PosZ]     = 27.5020;
	DataCars[MAX_CAR][PosZZ]  = 269.2395;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 4
	DataCars[MAX_CAR][PosX]   = -2578.7898;
	DataCars[MAX_CAR][PosY]     = 625.9899;
	DataCars[MAX_CAR][PosZ]     = 27.4688;
	DataCars[MAX_CAR][PosZZ]  = 359.2691;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 5
	DataCars[MAX_CAR][PosX]   = -2573.4375;
	DataCars[MAX_CAR][PosY]     = 625.9218;
	DataCars[MAX_CAR][PosZ]     = 27.4871;
	DataCars[MAX_CAR][PosZZ]  = 359.2693;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 6
	DataCars[MAX_CAR][PosX]   = -2568.4534;
	DataCars[MAX_CAR][PosY]     = 625.8582;
	DataCars[MAX_CAR][PosZ]     = 27.4938;
	DataCars[MAX_CAR][PosZZ]  = 359.2691;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // Heli 1
	DataCars[MAX_CAR][PosX]   = -2674.1103515625;
	DataCars[MAX_CAR][PosY]     = 514.5869140625;
	DataCars[MAX_CAR][PosZ]     = 49;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 417;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // Heli 2
	DataCars[MAX_CAR][PosX]   = -2633.2783203125;
	DataCars[MAX_CAR][PosY]     = 514.5869140625;
	DataCars[MAX_CAR][PosZ]     = 49;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 417;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

/////////////////////////////////////	/// CNN
	MAX_CAR++; // Van 1
	DataCars[MAX_CAR][PosX]   = 751.1636;
	DataCars[MAX_CAR][PosY]     = -1334.8700;
	DataCars[MAX_CAR][PosZ]     = 13.5966;
	DataCars[MAX_CAR][PosZZ]  = 179.7017;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // Van 2
	DataCars[MAX_CAR][PosX]   = 755.2587;
	DataCars[MAX_CAR][PosY]     = -1334.8914;
	DataCars[MAX_CAR][PosZ]     = 13.6152;
	DataCars[MAX_CAR][PosZZ]  = 179.7021;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // Van 3
	DataCars[MAX_CAR][PosX]   = 759.4441;
	DataCars[MAX_CAR][PosY]     = -1334.9127;
	DataCars[MAX_CAR][PosZ]     = 13.6217;
	DataCars[MAX_CAR][PosZZ]  = 179.7016;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = 743.9432;
	DataCars[MAX_CAR][PosY]     = -1371.2987;
	DataCars[MAX_CAR][PosZ]     = 25.9211;
	DataCars[MAX_CAR][PosZZ]  = 89.5514;
	DataCars[MAX_CAR][Modelo] = 488;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

/////////////////////////////////////	/// Sicarios
	MAX_CAR++;// Heli Sicarios
	DataCars[MAX_CAR][PosX]   = 1218.5954589844;
	DataCars[MAX_CAR][PosY]     = 162.64079284668;
	DataCars[MAX_CAR][PosZ]     = 26.519660949707;
	DataCars[MAX_CAR][PosZZ]  = 359.25;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Land Staker 1
	DataCars[MAX_CAR][PosX]   = 1541.8558349609;
	DataCars[MAX_CAR][PosY]     = 18.432361602783;
	DataCars[MAX_CAR][PosZ]     = 24.270402908325;
	DataCars[MAX_CAR][PosZZ]  = 279.25;
	DataCars[MAX_CAR][Modelo] = 400;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Land Staker 2
	DataCars[MAX_CAR][PosX]   = 1542.5139160156;
	DataCars[MAX_CAR][PosY]     = 14.379981040955;
	DataCars[MAX_CAR][PosZ]     = 24.270402908325;
	DataCars[MAX_CAR][PosZZ]  = 279.25;
	DataCars[MAX_CAR][Modelo] = 400;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 1
	DataCars[MAX_CAR][PosX]   = 1546.41796875;
	DataCars[MAX_CAR][PosY]     = 19.840473175049;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.095703125;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 2
	DataCars[MAX_CAR][PosX]   = 1546.7686767578;
	DataCars[MAX_CAR][PosY]     = 18.128845214844;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.095703125;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 3
	DataCars[MAX_CAR][PosX]   = 1547.1199951172;
	DataCars[MAX_CAR][PosY]     = 16.201814651489;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.095703125;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 4
	DataCars[MAX_CAR][PosX]   = 1547.3201904297;
	DataCars[MAX_CAR][PosY]     = 14.61416053772;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.09588623047;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

/////////////////////////////////////	/// Camioneros
	MAX_CAR++; // Camion 1
	DataCars[MAX_CAR][PosX]   = -534.4978;
	DataCars[MAX_CAR][PosY]     = -474.1056;
	DataCars[MAX_CAR][PosZ]     = 26.1178;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 514;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 2
	DataCars[MAX_CAR][PosX]   = -529.5223;
	DataCars[MAX_CAR][PosY]     = -474.2213;
	DataCars[MAX_CAR][PosZ]     = 26.1178;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 514;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 3
	DataCars[MAX_CAR][PosX]   = -524.5577;
	DataCars[MAX_CAR][PosY]     = -474.3367;
	DataCars[MAX_CAR][PosZ]     = 26.1177;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 515;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 4
	DataCars[MAX_CAR][PosX]   = -519.5417;
	DataCars[MAX_CAR][PosY]     = -474.4533;
	DataCars[MAX_CAR][PosZ]     = 26.1176;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 515;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 5
	DataCars[MAX_CAR][PosX]   = -514.4847;
	DataCars[MAX_CAR][PosY]     = -474.5709;
	DataCars[MAX_CAR][PosZ]     = 26.1176;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 403;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 6
	DataCars[MAX_CAR][PosX]   = -509.5095;
	DataCars[MAX_CAR][PosY]     = -474.6866;
	DataCars[MAX_CAR][PosZ]     = 26.1175;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 403;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 1
	DataCars[MAX_CAR][PosX]   = -589.5950;
	DataCars[MAX_CAR][PosY]     = -473.4910;
	DataCars[MAX_CAR][PosZ]     = 26.1167;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 591;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 2
	DataCars[MAX_CAR][PosX]   = -584.6484;
	DataCars[MAX_CAR][PosY]     = -473.6060;
	DataCars[MAX_CAR][PosZ]     = 26.1166;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 591;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 3
	DataCars[MAX_CAR][PosX]   = -579.4829;
	DataCars[MAX_CAR][PosY]     = -473.7262;
	DataCars[MAX_CAR][PosZ]     = 26.1166;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 435;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 4
	DataCars[MAX_CAR][PosX]   = -574.5507;
	DataCars[MAX_CAR][PosY]     = -473.8409;
	DataCars[MAX_CAR][PosZ]     = 26.1165;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 435;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 5
	DataCars[MAX_CAR][PosX]   = -569.4827;
	DataCars[MAX_CAR][PosY]     = -473.9586;
	DataCars[MAX_CAR][PosZ]     = 26.1165;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 584;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 6
	DataCars[MAX_CAR][PosX]   = -564.5710;
	DataCars[MAX_CAR][PosY]     = -474.0728;
	DataCars[MAX_CAR][PosZ]     = 26.1165;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 584;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 01
	DataCars[MAX_CAR][PosX]   = -563.4069;
	DataCars[MAX_CAR][PosY]     = -500.8364;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 456;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 02
	DataCars[MAX_CAR][PosX]   = -574.2763;
	DataCars[MAX_CAR][PosY]     = -500.9201;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 456;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 03
	DataCars[MAX_CAR][PosX]   = -550.1696;
	DataCars[MAX_CAR][PosY]     = -500.7345;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 578;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 04
	DataCars[MAX_CAR][PosX]   = -536.1178;
	DataCars[MAX_CAR][PosY]     = -500.6263;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 578;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Barco 01
	DataCars[MAX_CAR][PosX]   = -333.3390;
	DataCars[MAX_CAR][PosY]     = -467.9969;
	DataCars[MAX_CAR][PosZ]     = 0.5728;
	DataCars[MAX_CAR][PosZZ]  = 222.7603;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Barco 02
	DataCars[MAX_CAR][PosX]   = -325.4545;
	DataCars[MAX_CAR][PosY]     = -459.7680;
	DataCars[MAX_CAR][PosZ]     = 0.5728;
	DataCars[MAX_CAR][PosZZ]  = 229.0898;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -512.8495;
	DataCars[MAX_CAR][PosY]     = -522.8721;
	DataCars[MAX_CAR][PosZ]     = 35.9787;
	DataCars[MAX_CAR][PosZZ]  = 90.1976;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Barco 0
	DataCars[MAX_CAR][PosX]   = -3528.7776;
	DataCars[MAX_CAR][PosY]     = 1946.2223;
	DataCars[MAX_CAR][PosZ]     = -0.0544;
	DataCars[MAX_CAR][PosZZ]  = 349.2972;
	DataCars[MAX_CAR][Modelo] = 484;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

/////////////////////////////////////	/// LSPD
	MAX_CAR++;  // Enforce 1
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1672.1405029297;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Enforce 2
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1668.1258544922;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Enforce 3
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1663.1979980469;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Enforce 4
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1659.0476074219;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 1
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1683.990234375;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 2
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1688.1809082031;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 3
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1692.1328125;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 4
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1696.1959228516;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 5
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1700.2593994141;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 1
	DataCars[MAX_CAR][PosX]   = 1595.380859375;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 2
	DataCars[MAX_CAR][PosX]   = 1591.4084472656;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 3
	DataCars[MAX_CAR][PosX]   = 1587.3811035156;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 4
	DataCars[MAX_CAR][PosX]   = 1583.380859375;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 5
	DataCars[MAX_CAR][PosX]   = 1578.4676513672;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 6
	DataCars[MAX_CAR][PosX]   = 1574.3060302734;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 7
	DataCars[MAX_CAR][PosX]   = 1570.3618;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 1
	DataCars[MAX_CAR][PosX]   = 1565.6494140625;
	DataCars[MAX_CAR][PosY]     = -1645.3994140625;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 2
	DataCars[MAX_CAR][PosX]   = 1565.6494140625;
	DataCars[MAX_CAR][PosY]     = -1661;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 3
	DataCars[MAX_CAR][PosX]   = 1565.8544921875;
	DataCars[MAX_CAR][PosY]     = -1689.6572265625;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 4
	DataCars[MAX_CAR][PosX]   = 1565.8544921875;
	DataCars[MAX_CAR][PosY]     = -1706;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++; // Bote
	DataCars[MAX_CAR][PosX]   = 928.1587;
	DataCars[MAX_CAR][PosY]     = -1989.7061;
	DataCars[MAX_CAR][PosZ]     = 0.8967;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++; // Bote 2
	DataCars[MAX_CAR][PosX]   = 928.2813;
	DataCars[MAX_CAR][PosY]     = -2000.4855;
	DataCars[MAX_CAR][PosZ]     = 0.8588;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Gruas
	DataCars[MAX_CAR][PosX]   = 1585.4000244141;
	DataCars[MAX_CAR][PosY]     = -1667.4223632813;
	DataCars[MAX_CAR][PosZ]     = 5.8818655014038;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Gruas
	DataCars[MAX_CAR][PosX]   = 1585.4000244141;
	DataCars[MAX_CAR][PosY]     = -1671.53515625;
	DataCars[MAX_CAR][PosZ]     = 5.8818655014038;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

/////////////////////////////////////	/// TALLER
	MAX_CAR++; // Grua 1
	DataCars[MAX_CAR][PosX]   = -2920.1748;
	DataCars[MAX_CAR][PosY]     = 494.8304;
	DataCars[MAX_CAR][PosZ]     = 4.8084;
	DataCars[MAX_CAR][PosZZ]  = 180.1841;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

	MAX_CAR++; // Grua 2
	DataCars[MAX_CAR][PosX]   = -2908.1624;
	DataCars[MAX_CAR][PosY]     = 494.8687;
	DataCars[MAX_CAR][PosZ]     = 4.8359;
	DataCars[MAX_CAR][PosZZ]  = 180.1841;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

	MAX_CAR++; // Grua 3
	DataCars[MAX_CAR][PosX]   = -2896.0710;
	DataCars[MAX_CAR][PosY]     = 494.9073;
	DataCars[MAX_CAR][PosZ]     = 4.8636;
	DataCars[MAX_CAR][PosZZ]  = 180.1841;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

	MAX_CAR++; // Grua 4
	DataCars[MAX_CAR][PosX]   = -2920.1353;
	DataCars[MAX_CAR][PosY]     = 432.4344;
	DataCars[MAX_CAR][PosZ]     = 4.7335;
	DataCars[MAX_CAR][PosZZ]  = 359.8983;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

/////////////////////////////////////	/// CONTRABANDSITAS
	MAX_CAR++; // Furgo 1
	DataCars[MAX_CAR][PosX]   = 740.6208;
	DataCars[MAX_CAR][PosY]     = -1433.4133;
	DataCars[MAX_CAR][PosZ]     = 13.3777;
	DataCars[MAX_CAR][PosZZ]  = 91.4680;
	DataCars[MAX_CAR][Modelo] = 418;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Furgo 2
	DataCars[MAX_CAR][PosX]   = 731.9662;
	DataCars[MAX_CAR][PosY]     = -1433.4888;
	DataCars[MAX_CAR][PosZ]     = 13.3790;
	DataCars[MAX_CAR][PosZZ]  = 91.4680;
	DataCars[MAX_CAR][Modelo] = 418;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Furgo 3
	DataCars[MAX_CAR][PosX]   = 725.0215;
	DataCars[MAX_CAR][PosY]     = -1433.5420;
	DataCars[MAX_CAR][PosZ]     = 13.3869;
	DataCars[MAX_CAR][PosZZ]  = 91.4680;
	DataCars[MAX_CAR][Modelo] = 418;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Barco 1
	DataCars[MAX_CAR][PosX]   = 737.2951;
	DataCars[MAX_CAR][PosY]     = -1495.3147;
	DataCars[MAX_CAR][PosZ]     = -0.4090;
	DataCars[MAX_CAR][PosZZ]  = 182.8832;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Barco 2
	DataCars[MAX_CAR][PosX]   = 730.7525;
	DataCars[MAX_CAR][PosY]     = -1495.6427;
	DataCars[MAX_CAR][PosZ]     = -0.2777;
	DataCars[MAX_CAR][PosZZ]  = 182.8832;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Barco 3
	DataCars[MAX_CAR][PosX]   = 717.8978;
	DataCars[MAX_CAR][PosY]     = -1496.2860;
	DataCars[MAX_CAR][PosZ]     = 0.0425;
	DataCars[MAX_CAR][PosZZ]  = 182.8832;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

//  BOMBEROS SAMD
	MAX_CAR++; // Camión de Incendios 1
	DataCars[MAX_CAR][PosX]   = -2021.6116;
	DataCars[MAX_CAR][PosY]     = 75.6371;
	DataCars[MAX_CAR][PosZ]     = 28.3045;
	DataCars[MAX_CAR][PosZZ]  = 272.6790;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión de Incendios 2
	DataCars[MAX_CAR][PosX]   = -2021.8024;
	DataCars[MAX_CAR][PosY]     = 84.2643;
	DataCars[MAX_CAR][PosZ]     = 28.2756;
	DataCars[MAX_CAR][PosZZ]  = 272.6640;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión de Incendios 3
	DataCars[MAX_CAR][PosX]   = -2022.2018;
	DataCars[MAX_CAR][PosY]     = 92.8959;
	DataCars[MAX_CAR][PosZ]     = 28.3128;
	DataCars[MAX_CAR][PosZZ]  = 272.7454;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Heli de Incendios
	DataCars[MAX_CAR][PosX]   = -2037.1472;
	DataCars[MAX_CAR][PosY]     = 88.6138;
	DataCars[MAX_CAR][PosZ]     = 42.0682;
	DataCars[MAX_CAR][PosZZ]  = 271.7486;
	DataCars[MAX_CAR][Modelo] = 563;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión 4
	DataCars[MAX_CAR][PosX]   = 1336.7229003906;
	DataCars[MAX_CAR][PosY]     = 2663.2060546875;
	DataCars[MAX_CAR][PosZ]     = 11.219346046448;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 14;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión 5
	DataCars[MAX_CAR][PosX]   = 1336.7229003906;
	DataCars[MAX_CAR][PosY]     = 2655.9899902344;
	DataCars[MAX_CAR][PosZ]     = 11.219346046448;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 14;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión 6
	DataCars[MAX_CAR][PosX]   = 1336.7229003906;
	DataCars[MAX_CAR][PosY]     = 2648.7255859375;
	DataCars[MAX_CAR][PosZ]     = 11.219346046448;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 14;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;// Moto 5
	DataCars[MAX_CAR][PosX]   = 1541.1495;
	DataCars[MAX_CAR][PosY]     = 16.1527;
	DataCars[MAX_CAR][PosZ]     = 23.7118;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;  // Motos
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1704.3664550781;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Capitan
	DataCars[MAX_CAR][PosX]   = 1564.5778808594;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1680.3083496094;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1676.2602539063;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1655.0871582031;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1650.9654541016;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1526.62109375;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1530.6099853516;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1534.6911621094;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1538.8933105469;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Grúa 1
	DataCars[MAX_CAR][PosX]   = 1760.0187;
	DataCars[MAX_CAR][PosY]     = -2057.7227;
	DataCars[MAX_CAR][PosZ]     = 13.4611;
	DataCars[MAX_CAR][PosZZ]  = 180.6893;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 2
	DataCars[MAX_CAR][PosX]   = 1742.8982;
	DataCars[MAX_CAR][PosY]     = -2057.5647;
	DataCars[MAX_CAR][PosZ]     = 13.4632;
	DataCars[MAX_CAR][PosZZ]  = 179.6863;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 3
	DataCars[MAX_CAR][PosX]   = 1768.4342;
	DataCars[MAX_CAR][PosY]     = -2040.6183;
	DataCars[MAX_CAR][PosZ]     = 13.4080;
	DataCars[MAX_CAR][PosZZ]  = 270.0025;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 4
	DataCars[MAX_CAR][PosX]   = 1733.9149;
	DataCars[MAX_CAR][PosY]     = -2064.9548;
	DataCars[MAX_CAR][PosZ]     = 13.4872;
	DataCars[MAX_CAR][PosZZ]  = 269.5565;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 5
	DataCars[MAX_CAR][PosX]   = 1738.8793;
	DataCars[MAX_CAR][PosY]     = -2057.4553;
	DataCars[MAX_CAR][PosZ]     = 13.4553;
	DataCars[MAX_CAR][PosZZ]  = 179.5769;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // SAMD Ambulancia Frente 1
	DataCars[MAX_CAR][PosX]   = -2623.1892;
	DataCars[MAX_CAR][PosY]     = 611.7438;
	DataCars[MAX_CAR][PosZ]     = 14.6023;
	DataCars[MAX_CAR][PosZZ]  = 89.8236;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // SAMD Ambulancia Frente 2
	DataCars[MAX_CAR][PosX]   = -2623.1826;
	DataCars[MAX_CAR][PosY]     = 605.1359;
	DataCars[MAX_CAR][PosZ]     = 14.6020;
	DataCars[MAX_CAR][PosZZ]  = 89.2766;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // Hermes 1
	DataCars[MAX_CAR][PosX]   = 1076.2325;
	DataCars[MAX_CAR][PosY]     = 1748.9976;
	DataCars[MAX_CAR][PosZ]     = 10.8344;
	DataCars[MAX_CAR][PosZZ]  = 181.8838;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Hermes 2
	DataCars[MAX_CAR][PosX]   = 1072.1497;
	DataCars[MAX_CAR][PosY]     = 1748.9341;
	DataCars[MAX_CAR][PosZ]     = 10.8313;
	DataCars[MAX_CAR][PosZZ]  = 179.7764;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Camión
	DataCars[MAX_CAR][PosX]   = 1067.8439;
	DataCars[MAX_CAR][PosY]     = 1748.7277;
	DataCars[MAX_CAR][PosZ]     = 11.0039;
	DataCars[MAX_CAR][PosZZ]  = 182.4700;
	DataCars[MAX_CAR][Modelo] = 499;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Oceanic 1
	DataCars[MAX_CAR][PosX]   	= 1063.6736;
	DataCars[MAX_CAR][PosY]     = 1748.9016;
	DataCars[MAX_CAR][PosZ]     = 10.7906;
	DataCars[MAX_CAR][PosZZ]  = 180.7035;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Oceanic 2
	DataCars[MAX_CAR][PosX]   	= 1059.8132;
	DataCars[MAX_CAR][PosY]     = 1748.9148;
	DataCars[MAX_CAR][PosZ]     = 10.7904;
	DataCars[MAX_CAR][PosZZ]  = 181.4968;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2464.943359375;
	DataCars[MAX_CAR][PosY]   = -113.14616394043;
	DataCars[MAX_CAR][PosZ]   = 25.705739974976;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2464.943359375;
	DataCars[MAX_CAR][PosY]   = -117.00308990479;
	DataCars[MAX_CAR][PosZ]   = 25.554130554199;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2464.943359375;
	DataCars[MAX_CAR][PosY]   = -120.818359375;
	DataCars[MAX_CAR][PosZ]   = 25.51718711853;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2457.9987792969;
	DataCars[MAX_CAR][PosY]   = -159.32424926758;
	DataCars[MAX_CAR][PosZ]   = 26.157337188721;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2641.7080078125;
	DataCars[MAX_CAR][PosY]   = 788.24041748047;
	DataCars[MAX_CAR][PosZ]   = 10.942454338074;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 6;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2636.6923828125;
	DataCars[MAX_CAR][PosY]   = 788.24041748047;
	DataCars[MAX_CAR][PosZ]   = 10.942454338074;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 6;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++; // Grua Grotti 3
	DataCars[MAX_CAR][PosX]   = 518.83105469;
	DataCars[MAX_CAR][PosY]     = -1322.63403320;
	DataCars[MAX_CAR][PosZ]     = 17.23218727;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Wang 1
	DataCars[MAX_CAR][PosX]   = -1893.22888184;
	DataCars[MAX_CAR][PosY]     = 263.09890747;
	DataCars[MAX_CAR][PosZ]     = 41.03687668;
	DataCars[MAX_CAR][PosZZ]  = 77.99987793;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Wang 2
	DataCars[MAX_CAR][PosX]   = -1892.07592773;
	DataCars[MAX_CAR][PosY]     = 267.72857666;
	DataCars[MAX_CAR][PosZ]     = 41.03687668;
	DataCars[MAX_CAR][PosZZ]  = 76.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Wang 3
	DataCars[MAX_CAR][PosX]   = -1890.88366699;
	DataCars[MAX_CAR][PosY]     = 272.19702148;
	DataCars[MAX_CAR][PosZ]     = 41.03687668;
	DataCars[MAX_CAR][PosZZ]  = 76.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2333;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2328.599609375;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2324.3000488281;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2337.2529296875;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // PCJ 1
	DataCars[MAX_CAR][PosX]   = 1247.07580566;
	DataCars[MAX_CAR][PosY]     = -2043.97033691;
	DataCars[MAX_CAR][PosZ]     = 59.46927643;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 461;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // PCJ 2
	DataCars[MAX_CAR][PosX]   = 1250.75439453;
	DataCars[MAX_CAR][PosY]     = -2044.19250488;
	DataCars[MAX_CAR][PosZ]     = 59.38314056;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 461;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // PCJ 3
	DataCars[MAX_CAR][PosX]   = 1254.23449707;
	DataCars[MAX_CAR][PosY]     = -2044.32824707;
	DataCars[MAX_CAR][PosZ]     = 59.23312759;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 461;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2454.9091796875;
	DataCars[MAX_CAR][PosY]     = 2294.0625;
	DataCars[MAX_CAR][PosZ]     = 91.529998779297;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 4;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2450.525390625;
	DataCars[MAX_CAR][PosY]     = 2294.0625;
	DataCars[MAX_CAR][PosZ]     = 91.909378051758;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 4;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2459.30078125;
	DataCars[MAX_CAR][PosY]     = 2294.0625;
	DataCars[MAX_CAR][PosZ]     = 91.909378051758;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 4;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2772.306640625;
	DataCars[MAX_CAR][PosY]     = -1618.4372558594;
	DataCars[MAX_CAR][PosZ]     = 10.759050369263;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = HEORS;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2772.306640625;
	DataCars[MAX_CAR][PosY]     = -1609.5581054688;
	DataCars[MAX_CAR][PosZ]     = 10.759050369263;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = HEORS;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2772.306640625;
	DataCars[MAX_CAR][PosY]     = -1614.0994873047;
	DataCars[MAX_CAR][PosZ]     = 10.759050369263;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -38.914875030518;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.38437461853;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -33.706218719482;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.38437461853;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -28.7470703125;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -43.849609375;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -48.85844039917;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -23.694538116455;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

//////////////////// LSMD
	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = -13.94921875;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; 	// Ambulancía
	DataCars[MAX_CAR][PosX]   = -6.7373046875;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 0.3486328125;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 7.478515625;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 14.638671875;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 21.8125;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 28.9599609375;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	// Heli
	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1179.5531005859;
	DataCars[MAX_CAR][PosY]     = -1376.6584472656;
	DataCars[MAX_CAR][PosZ]     = 24.877077102661;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 417;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1624.7038574219;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1620.70703125;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1612.3961181641;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1616.685546875;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 674.19085693359;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 661.95233154297;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 670.01165771484;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 666.00103759766;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1623;
	DataCars[MAX_CAR][PosY]   = 649.58148193359;
	DataCars[MAX_CAR][PosZ]   = -5.2521877288818;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1623;
	DataCars[MAX_CAR][PosY]   = 653.6396484375;
	DataCars[MAX_CAR][PosZ]   = -5.2521877288818;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

// Bomberos LSMD
	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1212.9482421875;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1208.7163085938;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1217.388671875;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1195.6826171875;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1200.015625;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1204.4462890625;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = 1529;
	DataCars[MAX_CAR][PosY]     = -1687.9899902344;
	DataCars[MAX_CAR][PosZ]     = 5.890625;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = 1529;
	DataCars[MAX_CAR][PosY]     = -1683.775390625;
	DataCars[MAX_CAR][PosZ]     = 5.890625;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 270;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = 1545.6025390625;
	DataCars[MAX_CAR][PosY]     = -1684.3319091797;
	DataCars[MAX_CAR][PosZ]     = 5.890625;
	DataCars[MAX_CAR][PosZZ]    = 90;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = -1639.3426513672;
	DataCars[MAX_CAR][PosY]     = 649.63903808594;
	DataCars[MAX_CAR][PosZ]     = -5.4105124473572;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = -1639.3426513672;
	DataCars[MAX_CAR][PosY]     = 653.69921875;
	DataCars[MAX_CAR][PosZ]     = -5.4105124473572;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = -1639.3426513672;
	DataCars[MAX_CAR][PosY]     = 657.79998779297;
	DataCars[MAX_CAR][PosZ]     = -5.4105124473572;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	// END VEHICLES
	MAX_CAR_FACCION = MAX_CAR;
}
public LoadCarsPublic()
{
// BICIS EN EL INICIO
	MAX_CAR++; //Bici 1
	DataCars[MAX_CAR][PosX]   = 1677.0835;
	DataCars[MAX_CAR][PosY]     = -1719.2893;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  2
	DataCars[MAX_CAR][PosX]   = 1677.0857;
	DataCars[MAX_CAR][PosY]     = -1717.1659;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 8;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  3
	DataCars[MAX_CAR][PosX]   = 1677.0880;
	DataCars[MAX_CAR][PosY]     = -1715.0660;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  4
	DataCars[MAX_CAR][PosX]   = 1677.0905;
	DataCars[MAX_CAR][PosY]     = -1713.0879;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 7;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  5
	DataCars[MAX_CAR][PosX]   = 1677.0927;
	DataCars[MAX_CAR][PosY]     = -1710.9142;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 62;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  6
	DataCars[MAX_CAR][PosX]   = 1677.0945;
	DataCars[MAX_CAR][PosY]     = -1708.8873;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 30;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  7
	DataCars[MAX_CAR][PosX]   = 1677.0972;
	DataCars[MAX_CAR][PosY]     = -1706.7830;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 45;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  8
	DataCars[MAX_CAR][PosX]   = 1677.1080;
	DataCars[MAX_CAR][PosY]     = -1704.6831;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
/////////////
	MAX_CAR++; // Bote 1 LS
	DataCars[MAX_CAR][PosX]   = 928.4375;
	DataCars[MAX_CAR][PosY]     = -2014.2172;
	DataCars[MAX_CAR][PosZ]     = 0.8104;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 453;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 2 LS
	DataCars[MAX_CAR][PosX]   = 928.5720;
	DataCars[MAX_CAR][PosY]     = -2026.0569;
	DataCars[MAX_CAR][PosZ]     = 0.7688;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 453;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 1 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 746.7482;
	DataCars[MAX_CAR][PosZ]     = 2.1691;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 2 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 759.0771;
	DataCars[MAX_CAR][PosZ]     = 1.7041;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 3 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 772.3331;
	DataCars[MAX_CAR][PosZ]     = 2.1044;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 4 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 785.4797;
	DataCars[MAX_CAR][PosZ]     = 2.1817;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 452;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote De la Isla Público
	DataCars[MAX_CAR][PosX]   = 723.4192;
	DataCars[MAX_CAR][PosY]     = -2918.0864;
	DataCars[MAX_CAR][PosZ]     = 1.1700;
	DataCars[MAX_CAR][PosZZ]  = 263.7822;
	DataCars[MAX_CAR][Modelo] = 484;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

/////////////// BICIS
	MAX_CAR++; // Bicis 1
	DataCars[MAX_CAR][PosX]   = 2490.2905;
	DataCars[MAX_CAR][PosY]     = -1754.9509;
	DataCars[MAX_CAR][PosZ]     = 12.8665;
	DataCars[MAX_CAR][PosZZ]  = 359.9865;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 69;
	DataCars[MAX_CAR][Color2] = 21;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 2
	DataCars[MAX_CAR][PosX]   = 2012.8352;
	DataCars[MAX_CAR][PosY]     = -2008.8220;
	DataCars[MAX_CAR][PosZ]     = 12.8429;
	DataCars[MAX_CAR][PosZZ]  = 179.7848;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 55;
	DataCars[MAX_CAR][Color2] = 25;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 3
	DataCars[MAX_CAR][PosX]   = 1773.0316;
	DataCars[MAX_CAR][PosY]     = -2081.3962;
	DataCars[MAX_CAR][PosZ]     = 13.2073;
	DataCars[MAX_CAR][PosZZ]  = 177.9209;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 4;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 4
	DataCars[MAX_CAR][PosX]   = 992.5903;
	DataCars[MAX_CAR][PosY]     = -1521.3861;
	DataCars[MAX_CAR][PosZ]     = 13.5033;
	DataCars[MAX_CAR][PosZZ]  = 87.9006;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 5
	DataCars[MAX_CAR][PosX]   = 1626.3202;
	DataCars[MAX_CAR][PosY]     = -989.7035;
	DataCars[MAX_CAR][PosZ]     = 23.5804;
	DataCars[MAX_CAR][PosZZ]  = 113.3287;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 6
	DataCars[MAX_CAR][PosX]   = 158.3846;
	DataCars[MAX_CAR][PosY]     = -177.6241;
	DataCars[MAX_CAR][PosZ]     = 1.2297;
	DataCars[MAX_CAR][PosZZ]  = 92.4481;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 4;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 7
	DataCars[MAX_CAR][PosX]   = 1621.3726;
	DataCars[MAX_CAR][PosY]     = -1559.6271;
	DataCars[MAX_CAR][PosZ]     = 13.4484;
	DataCars[MAX_CAR][PosZZ]  = 88.7252;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 9;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 8
	DataCars[MAX_CAR][PosX]   = 1772.1222;
	DataCars[MAX_CAR][PosY]     = -1655.3744;
	DataCars[MAX_CAR][PosZ]     = 13.8814;
	DataCars[MAX_CAR][PosZZ]  = 211.0688;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 5;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 9
	DataCars[MAX_CAR][PosX]   = 290.4928;
	DataCars[MAX_CAR][PosY]     = -1601.3239;
	DataCars[MAX_CAR][PosZ]     = 32.2046;
	DataCars[MAX_CAR][PosZZ]  = 77.6592;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 4;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 10
	DataCars[MAX_CAR][PosX]   = -2299.9954;
	DataCars[MAX_CAR][PosY]     = 1158.7000;
	DataCars[MAX_CAR][PosZ]     = 52.9684;
	DataCars[MAX_CAR][PosZZ]  = 355.7299;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 5;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 11
	DataCars[MAX_CAR][PosX]   = -1785.2278;
	DataCars[MAX_CAR][PosY]     = 790.1981;
	DataCars[MAX_CAR][PosZ]     = 24.2191;
	DataCars[MAX_CAR][PosZZ]  = 179.2185;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 12
	DataCars[MAX_CAR][PosX]   = -2464.1604;
	DataCars[MAX_CAR][PosY]     = 505.9433;
	DataCars[MAX_CAR][PosZ]     = 29.7192;
	DataCars[MAX_CAR][PosZZ]  = 93.5356;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 13
	DataCars[MAX_CAR][PosX]   = -2515.1606;
	DataCars[MAX_CAR][PosY]     = -1.1859;
	DataCars[MAX_CAR][PosZ]     = 24.9042;
	DataCars[MAX_CAR][PosZZ]  = 269.1152;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 14
	DataCars[MAX_CAR][PosX]   = -1877.7968;
	DataCars[MAX_CAR][PosY]     = 467.4769;
	DataCars[MAX_CAR][PosZ]     = 34.5613;
	DataCars[MAX_CAR][PosZZ]  = 272.0557;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 5;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
//////// BICIS SF MOCHIS!
	MAX_CAR++; //Bici 1
	DataCars[MAX_CAR][PosX]   = -2034.4753;
	DataCars[MAX_CAR][PosY]     = 471.5098;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  2
	DataCars[MAX_CAR][PosX]   = -2032.4241;
	DataCars[MAX_CAR][PosY]     = 471.5315;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 8;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  3
	DataCars[MAX_CAR][PosX]   = -2030.3009;
	DataCars[MAX_CAR][PosY]     = 471.5540;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  4
	DataCars[MAX_CAR][PosX]   = -2028.3229;
	DataCars[MAX_CAR][PosY]     = 471.5749;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 7;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  5
	DataCars[MAX_CAR][PosX]   = -2026.3214;
	DataCars[MAX_CAR][PosY]     = 471.5966;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 62;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  6
	DataCars[MAX_CAR][PosX]   = -2024.2953;
	DataCars[MAX_CAR][PosY]     = 471.6180;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 30;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  7
	DataCars[MAX_CAR][PosX]   = -2022.1968;
	DataCars[MAX_CAR][PosY]     = 471.6403;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 45;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  8
	DataCars[MAX_CAR][PosX]   = -2020.0486;
	DataCars[MAX_CAR][PosY]     = 471.6630;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
//////// AVIONES
	// AVIONES LS
	MAX_CAR++; // Avion 1
	DataCars[MAX_CAR][PosX]   = 1617.6868;
	DataCars[MAX_CAR][PosY]     = -2625.3660;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 2
	DataCars[MAX_CAR][PosX]   = 1682.6178;
	DataCars[MAX_CAR][PosY]     = -2624.2598;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 3
	DataCars[MAX_CAR][PosX]   = 1753.2244;
	DataCars[MAX_CAR][PosY]     = -2624.2266;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 4
	DataCars[MAX_CAR][PosX]   = 1821.5743;
	DataCars[MAX_CAR][PosY]     = -2623.3508;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 5
	DataCars[MAX_CAR][PosX]   = 1889.9186;
	DataCars[MAX_CAR][PosY]     = -2623.7393;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	// AVIONES SF
	MAX_CAR++; // Avion 1
	DataCars[MAX_CAR][PosX]   = -1436.9209;
	DataCars[MAX_CAR][PosY]     = -527.5603;
	DataCars[MAX_CAR][PosZ]     = 14.1719;
	DataCars[MAX_CAR][PosZZ]  = 201.6985;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 2
	DataCars[MAX_CAR][PosX]   = -1363.2106;
	DataCars[MAX_CAR][PosY]     = -490.0142;
	DataCars[MAX_CAR][PosZ]     = 14.1719;
	DataCars[MAX_CAR][PosZZ]  = 206.9626;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 3
	DataCars[MAX_CAR][PosX]   = -1215.0913;
	DataCars[MAX_CAR][PosY]     = -152.6281;
	DataCars[MAX_CAR][PosZ]     = 14.1484;
	DataCars[MAX_CAR][PosZZ]  = 134.8558;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 4
	DataCars[MAX_CAR][PosX]   = -1258.2246;
	DataCars[MAX_CAR][PosY]     = -109.2923;
	DataCars[MAX_CAR][PosZ]     = 14.1484;
	DataCars[MAX_CAR][PosZZ]  = 134.4171;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 235.95248413086;
	DataCars[MAX_CAR][PosY]     = 2472.0737304688;
	DataCars[MAX_CAR][PosZ]     = 17.851051330566;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 503;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 15;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 236.80352783203;
	DataCars[MAX_CAR][PosY]     = 2493.8601074219;
	DataCars[MAX_CAR][PosZ]     = 17.681560516357;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 411;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 15;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 237.16889953613;
	DataCars[MAX_CAR][PosY]     = 2516.4240722656;
	DataCars[MAX_CAR][PosZ]     = 17.621561050415;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 575;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 15;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2766.0444;
	DataCars[MAX_CAR][PosY]     = -2033.5204;
	DataCars[MAX_CAR][PosZ]     = 13.1631;
	DataCars[MAX_CAR][PosZZ]  = 271.0413;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 5;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2685.3411;
	DataCars[MAX_CAR][PosY]     = -1974.7372;
	DataCars[MAX_CAR][PosZ]     = 13.1626;
	DataCars[MAX_CAR][PosZZ]  = 85.1544;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 4;
	DataCars[MAX_CAR][Color2] = 9;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2634.8181;
	DataCars[MAX_CAR][PosY]     = -2005.4088;
	DataCars[MAX_CAR][PosZ]     = 13.1637;
	DataCars[MAX_CAR][PosZZ]  = 281.0791;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 50;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2476.4790;
	DataCars[MAX_CAR][PosY]     = -197.5568;
	DataCars[MAX_CAR][PosZ]     = 25.1357;
	DataCars[MAX_CAR][PosZZ]  = 2.3163;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2534.4126;
	DataCars[MAX_CAR][PosY]     = -38.4596;
	DataCars[MAX_CAR][PosZ]     = 25.1279;
	DataCars[MAX_CAR][PosZZ]  = 269.7780;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 8;
	DataCars[MAX_CAR][Color2] = 51;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2714.2458;
	DataCars[MAX_CAR][PosY]     = -241.4685;
	DataCars[MAX_CAR][PosZ]     = 6.6733;
	DataCars[MAX_CAR][PosZZ]  = 178.9659;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 50;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2118.5427;
	DataCars[MAX_CAR][PosY]     = -1344.7986;
	DataCars[MAX_CAR][PosZ]     = 23.9844;
	DataCars[MAX_CAR][PosZZ]  = 88.3509;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 50;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2173.2085;
	DataCars[MAX_CAR][PosY]     = -1424.8947;
	DataCars[MAX_CAR][PosZ]     = 23.9844;
	DataCars[MAX_CAR][PosZZ]  = 0.6192;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2188.4690;
	DataCars[MAX_CAR][PosY]     = -1503.1975;
	DataCars[MAX_CAR][PosZ]     = 23.9552;
	DataCars[MAX_CAR][PosZZ]  = 355.4596;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2088.4094;
	DataCars[MAX_CAR][PosY]     = 903.1467;
	DataCars[MAX_CAR][PosZ]     = 65.5231;
	DataCars[MAX_CAR][PosZZ]  = 353.4789;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 15;
	DataCars[MAX_CAR][Color2] = 15;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	// END VEHICLES PUBLICS
}
public IsGuanteraOpen(playerid)
{
	new VehicleInside = IsPlayerInsideVehicle(playerid);
	if ( VehicleInside )
	{
		if (DataCars[VehicleInside][GuanteraLock] ||
			strlen(DataCars[VehicleInside][Dueno]) == 1 && VehicleInside <= MAX_CAR_DUENO )
		{
		    return VehicleInside;
		}
		else
		{
			SendInfoMessage(playerid, 0, "1581", "La guantera de éste vehículo se encuentra cerrada!");
		}
	}
	return false;
}
public IsMaleteroOpen(playerid)
{
    if ( !IsPlayerInAnyVehicle(playerid) )
    {
	    new MyNearCar = IsPlayerInNearVehicle(playerid);
		if ( MyNearCar )
		{
			if (DataCars[MyNearCar][MaleteroState] ||
    			strlen(DataCars[MyNearCar][Dueno]) == 1 && MyNearCar <= MAX_CAR_DUENO )
			{
			    return MyNearCar;
			}
			else
			{
				SendInfoMessage(playerid, 0, "251", "El maletero de éste vehículo se encuentra cerrado!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "250", "Desde adentro del vehículo no puedes acceder al maletero");
	}
	return false;
}
public LoadTelesPublics()
{
	/////////////////////////////////////////////////////////////////////
	Teles[MAX_TELES][PosX] = -2675.2092;
	Teles[MAX_TELES][PosY] = 552.2344;
	Teles[MAX_TELES][PosZ] = 14.6094;
	Teles[MAX_TELES][PosZZ] = 0.8626;
	Teles[MAX_TELES][Interior] 	= 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] 		= WORLD_NORMAL;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Bajos de la SFMD");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] 		= -2651.6423339844;
	Teles[MAX_TELES][PosY] 		= 543.31774902344;
	Teles[MAX_TELES][PosZ] 		= 48.010936737061;
	Teles[MAX_TELES][PosZZ] 		= 180;
	Teles[MAX_TELES][Interior] 	= 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] 		= WORLD_NORMAL;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Techo de la SFMD");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1719.2092285156;
	Teles[MAX_TELES][PosY] = 720.77124023438;
	Teles[MAX_TELES][PosZ] = 10.873438072205;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Sala de Operaciones");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2791.6501;
	Teles[MAX_TELES][PosY] = 2509.3916;
	Teles[MAX_TELES][PosZ] = 17.6737;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Sala de Operaciones");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1715.8145751953;
	Teles[MAX_TELES][PosY] = 710.45025634766;
	Teles[MAX_TELES][PosZ] = 10.878179740906;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Oficina");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2467.5247;
	Teles[MAX_TELES][PosY] = 1042.7755;
	Teles[MAX_TELES][PosZ] = 58.9644;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Oficina");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1673.9642333984;
	Teles[MAX_TELES][PosY] = 709.21551513672;
	Teles[MAX_TELES][PosZ] = 10.874180030823;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Sala de Espera");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2826.6069;
	Teles[MAX_TELES][PosY] = 2465.6450;
	Teles[MAX_TELES][PosZ] = 18.4234;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Sala de Espera");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1677.0227050781;
	Teles[MAX_TELES][PosY] = 715.69012451172;
	Teles[MAX_TELES][PosZ] = 10.873433303833;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Consultorio");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2802.4231;
	Teles[MAX_TELES][PosY] = 2522.6433;
	Teles[MAX_TELES][PosZ] = 10.8203;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Consultorio");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2026.9376220703;
	Teles[MAX_TELES][PosY] = 67.168426513672;
	Teles[MAX_TELES][PosZ] = 28.691593170166;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Bomberos");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1474.0496826172;
	Teles[MAX_TELES][PosY] = 2746.30859375;
	Teles[MAX_TELES][PosZ] = 11.247332572937;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Bomberos");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2047.6833496094;
	Teles[MAX_TELES][PosY] = 67.107147216797;
	Teles[MAX_TELES][PosZ] = 28.645565032959;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada Trasera");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1494.8901367188;
	Teles[MAX_TELES][PosY] = 2746.3122558594;
	Teles[MAX_TELES][PosZ] = 11.247332572937;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida Trasera");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1302.8802490234;
	Teles[MAX_TELES][PosY] = 2666.3251953125;
	Teles[MAX_TELES][PosZ] = 10.841632843018;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida al Garage");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1480.9244384766;
	Teles[MAX_TELES][PosY] = 2744.7133789063;
	Teles[MAX_TELES][PosZ] = 10.863215446472;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada del Garage");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1342.86328125;
	Teles[MAX_TELES][PosY] = 2645.3054199219;
	Teles[MAX_TELES][PosZ] = 10.860591888428;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de Garage");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1488.9517822266;
	Teles[MAX_TELES][PosY] = 2744.6943359375;
	Teles[MAX_TELES][PosZ] = 10.847518920898;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1480.1163330078;
	Teles[MAX_TELES][PosY] = 2856.2021484375;
	Teles[MAX_TELES][PosZ] = 10.830624580383;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Despacho");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1485.041015625;
	Teles[MAX_TELES][PosY] = 2744.7016601563;
	Teles[MAX_TELES][PosZ] = 10.855165481567;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 14;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Despacho");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2596.15625;
	Teles[MAX_TELES][PosY] = 1352.5087890625;
	Teles[MAX_TELES][PosZ] = 78.476387023926;
	Teles[MAX_TELES][PosZZ] = 180.0000;
	Teles[MAX_TELES][Interior] = 9;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Oficina del Director");
	Teles[MAX_TELES][Dueno] = ADP;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2557.8662109375;
	Teles[MAX_TELES][PosY] = 1345.7208251953;
	Teles[MAX_TELES][PosZ] = 78.476387023926;
	Teles[MAX_TELES][PosZZ] = 94.3142;
	Teles[MAX_TELES][Interior] = 9;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Oficina del Director");
	Teles[MAX_TELES][Dueno] = ADP;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2193.2927246094;
	Teles[MAX_TELES][PosY] = -1147.6652832031;
	Teles[MAX_TELES][PosZ] = 1033.796875;
	Teles[MAX_TELES][PosZZ] = 352.0667;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Salon");
	Teles[MAX_TELES][Dueno] = TAXI;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2228.5393066406;
	Teles[MAX_TELES][PosY] = -1150.5076904297;
	Teles[MAX_TELES][PosZ] = 1029.796875;
	Teles[MAX_TELES][PosZZ] = 92.7406;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Oficina");
	Teles[MAX_TELES][Dueno] = TAXI;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1951.0385742188;
	Teles[MAX_TELES][PosY] = 1887.2598876953;
	Teles[MAX_TELES][PosZ] = 27.461999893188;
	Teles[MAX_TELES][PosZZ] = 353.1283;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], 8, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = 8;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Oficina del Director");
	Teles[MAX_TELES][Dueno] = TAXI;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2193.2702636719;
	Teles[MAX_TELES][PosY] = -1148.0888671875;
	Teles[MAX_TELES][PosZ] = 1029.796875;
	Teles[MAX_TELES][PosZZ] = 357.0116;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Oficina del Director");
	Teles[MAX_TELES][Dueno] = TAXI;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -794.9324;
	Teles[MAX_TELES][PosY] = 489.4544;
	Teles[MAX_TELES][PosZ] = 1376.1953;
	Teles[MAX_TELES][PosZZ] = 0.5641;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Uscita di Ristorante Italiano");
	Teles[MAX_TELES][Dueno] = LCN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1217.3870;
	Teles[MAX_TELES][PosY] = -1692.6326;
	Teles[MAX_TELES][PosZ] = 19.7344;
	Teles[MAX_TELES][PosZZ] = 273.5764;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Ingresso di Ristorante Italiano");
	Teles[MAX_TELES][Dueno] = LCN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2281.1328125;
	Teles[MAX_TELES][PosY] = 1310.5087890625;
	Teles[MAX_TELES][PosZ] = 10.82034778595;
	Teles[MAX_TELES][PosZZ] = 89.5909;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Oficina");
	Teles[MAX_TELES][Dueno] = NFS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1494.6038;
	Teles[MAX_TELES][PosY] = 1304.2933;
	Teles[MAX_TELES][PosZ] = 1093.2891;
	Teles[MAX_TELES][PosZZ] = 352.4487;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada de la Oficina");
	Teles[MAX_TELES][Dueno] = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2278.2338867188;
	Teles[MAX_TELES][PosY] = 1307.0657958984;
	Teles[MAX_TELES][PosZ] = 10.82034778595;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada del Aseo");
	Teles[MAX_TELES][Dueno] = NFS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2295.4775390625;
	Teles[MAX_TELES][PosY] = 1302.2651367188;
	Teles[MAX_TELES][PosZ] = 10.8203125;
	Teles[MAX_TELES][PosZZ] = 87.4208;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Aseo");
	Teles[MAX_TELES][Dueno] = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2022.8104;
	Teles[MAX_TELES][PosY] = -113.7378;
	Teles[MAX_TELES][PosZ] = 1035.1719;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Oficina del Director");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2264.0251464844;
	Teles[MAX_TELES][PosY] = 1008.1618652344;
	Teles[MAX_TELES][PosZ] = 79.5546875;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] 		= -2029.7047;
	Teles[MAX_TELES][PosY] 		= -120.7131;
	Teles[MAX_TELES][PosZ] 		= 35.1714;
	Teles[MAX_TELES][PosZZ] 		= 175.2865;
	Teles[MAX_TELES][Interior] 	= 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] 		= WORLD_NORMAL;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Patio de los Licencieros");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] 		= -2029.7854;
	Teles[MAX_TELES][PosY] 		= -119.6171;
	Teles[MAX_TELES][PosZ] 		= 1035.1719;
	Teles[MAX_TELES][PosZZ] 		= 0.3638;
	Teles[MAX_TELES][Interior] 	= 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] 		= WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Puerta trasera Licencieros");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] 		= 1525.4343;
	Teles[MAX_TELES][PosY] 		= -1677.7581;
	Teles[MAX_TELES][PosZ] 		= 5.8906;
	Teles[MAX_TELES][PosZZ] 		= 274.0949;
	Teles[MAX_TELES][Interior] 	= 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] 		= WORLD_NORMAL;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Parqueo al fondo LSPD");
	Teles[MAX_TELES][Dueno] = LSPD;
//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] 		= 246.3023;
	Teles[MAX_TELES][PosY] 		= 87.4573;
	Teles[MAX_TELES][PosZ] 		= 1003.6406;
	Teles[MAX_TELES][PosZZ] 		= 180.3136;
	Teles[MAX_TELES][Interior] 	= 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] 		= WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Puerta trasera de la LSPD");
	Teles[MAX_TELES][Dueno] = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2360.966796875;
	Teles[MAX_TELES][PosY] = 1558.0955810547;
	Teles[MAX_TELES][PosZ] = 27.956249237061;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Camaras de Seguridad");
	Teles[MAX_TELES][Dueno] = LSPD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 220.17153930664;
	Teles[MAX_TELES][PosY] = 74.203353881836;
	Teles[MAX_TELES][PosZ] = 1005.0390625;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Camaras de Seguridad");
	Teles[MAX_TELES][Dueno] = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] 		= 1568.6110;
	Teles[MAX_TELES][PosY] 		= -1690.9406;
	Teles[MAX_TELES][PosZ] 		= 5.8906;
	Teles[MAX_TELES][PosZZ] 		= 182.5682;
	Teles[MAX_TELES][Interior] 	= 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] 		= WORLD_NORMAL;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Parqueo a la entrada LSPD");
	Teles[MAX_TELES][Dueno] = LSPD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] 		= 243.1564;
	Teles[MAX_TELES][PosY] 		= 66.3322;
	Teles[MAX_TELES][PosZ] 		= 1003.6406;
	Teles[MAX_TELES][PosZZ] 		= 269.0457;
	Teles[MAX_TELES][Interior] 	= 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] 		= WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] 		= false;
	SetText3DTele(MAX_TELES, "Puerta a la entrada LSPD");
	Teles[MAX_TELES][Dueno] = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1548.6943;
	Teles[MAX_TELES][PosY] = -1364.4369;
	Teles[MAX_TELES][PosZ] = 326.2183;
	Teles[MAX_TELES][PosZZ] = 186.1149;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Asensor a la cima del Edificio");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1574.7563;
	Teles[MAX_TELES][PosY] = -1335.8326;
	Teles[MAX_TELES][PosZ] = 16.4844;
	Teles[MAX_TELES][PosZZ] = 314.2043;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Asensor a la salida del Edificio");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 155.6292;
	Teles[MAX_TELES][PosY] = -1950.2883;
	Teles[MAX_TELES][PosZ] = 47.8750;
	Teles[MAX_TELES][PosZZ] = 6.2527;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Escaleras a la cima del Faro");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 154.2622;
	Teles[MAX_TELES][PosY] = -1946.1864;
	Teles[MAX_TELES][PosZ] = 5.1198;
	Teles[MAX_TELES][PosZZ] = 2.4509;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Escaleras a la salida del Faro");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1445.7500;
	Teles[MAX_TELES][PosY] = -206.1691;
	Teles[MAX_TELES][PosZ] = 6.0000;
	Teles[MAX_TELES][PosZZ] = 273.1129;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Asensor al Subterraneo del Aereo");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1422.1642;
	Teles[MAX_TELES][PosY] = -287.7517;
	Teles[MAX_TELES][PosZ] = 14.1484;
	Teles[MAX_TELES][PosZZ] = 141.0719;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] 	= CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Asensor a la Salida del Aereo");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1951.8713;
	Teles[MAX_TELES][PosY] = -865.8907;
	Teles[MAX_TELES][PosZ] = 32.2266;
	Teles[MAX_TELES][PosZZ] = 2.1572;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Asensor a la entrada del Parque");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1945.5076;
	Teles[MAX_TELES][PosY] = -877.2965;
	Teles[MAX_TELES][PosZ] = 35.8906;
	Teles[MAX_TELES][PosZZ] = 89.7439;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Asensor a la salida del Parque");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2269.5566;
	Teles[MAX_TELES][PosY] = -156.0913;
	Teles[MAX_TELES][PosZ] = 35.3203;
	Teles[MAX_TELES][PosZZ] = 269.8338;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada del GYM");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 774.4182;
	Teles[MAX_TELES][PosY] = -50.2380;
	Teles[MAX_TELES][PosZ] = 1000.5859;
	Teles[MAX_TELES][PosZZ] = 0.2655;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del GYM");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2229.2881;
	Teles[MAX_TELES][PosY] = -1721.8671;
	Teles[MAX_TELES][PosZ] = 13.5669;
	Teles[MAX_TELES][PosZZ] = 126.9885;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada del GYM");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 772.3953;
	Teles[MAX_TELES][PosY] = -4.5627;
	Teles[MAX_TELES][PosZ] = 1000.7291;
	Teles[MAX_TELES][PosZZ] = 2.6997;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del GYM");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2495.3052;
	Teles[MAX_TELES][PosY] = -1690.0558;
	Teles[MAX_TELES][PosZ] = 14.7656;
	Teles[MAX_TELES][PosZZ] = 2.9780;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Casa de CJ");
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2495.8784;
	Teles[MAX_TELES][PosY] = -1692.3300;
	Teles[MAX_TELES][PosZ] = 1014.7422;
	Teles[MAX_TELES][PosZZ] = 182.0026;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la casa de CJ");
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1989.6453;
	Teles[MAX_TELES][PosY] = 1117.8682;
	Teles[MAX_TELES][PosZ] = 54.4688;
	Teles[MAX_TELES][PosZZ] = 271.0806;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada de la Iglesia");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1921.4556884766;
	Teles[MAX_TELES][PosY] = 1199.9836425781;
	Teles[MAX_TELES][PosZ] = 18.10000038147;
	Teles[MAX_TELES][PosZZ] = 357.7330;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], 8, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = 8;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Iglesia");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2649.0046;
	Teles[MAX_TELES][PosY] = 376.0089;
	Teles[MAX_TELES][PosZ] = 6.1593;
	Teles[MAX_TELES][PosZZ] = 89.0708;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada Oficina del Gobierno");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2465.5559082031;
	Teles[MAX_TELES][PosY] = 2250.4775390625;
	Teles[MAX_TELES][PosZ] = 91.631156921387;
	Teles[MAX_TELES][PosZZ] = 89.5417;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida Oficina del Gobierno");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2766.0508;
	Teles[MAX_TELES][PosY] = 375.5933;
	Teles[MAX_TELES][PosZ] = 6.3347;
	Teles[MAX_TELES][PosZZ] = 271.1547;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1274, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][IsBankTele] = true;
	SetText3DTele(MAX_TELES, "Banco de San Fierro");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2305.4546;
	Teles[MAX_TELES][PosY] = -16.1226;
	Teles[MAX_TELES][PosZ] = 26.7496;
	Teles[MAX_TELES][PosZZ] = 270.0407;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1274, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Banco de San Fierro");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 368.50451660156;
	Teles[MAX_TELES][PosY] = 206.96217346191;
	Teles[MAX_TELES][PosZ] = 1008.3828125;
	Teles[MAX_TELES][PosZZ] = 86.4808;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	SetText3DTele(MAX_TELES, "Entrada a la Oficina");
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1857.7513427734;
	Teles[MAX_TELES][PosY] = 1426.7786865234;
	Teles[MAX_TELES][PosZ] = 16.922342300415;
	Teles[MAX_TELES][PosZZ] = 261.6124;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Oficina");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1859.1119384766;
	Teles[MAX_TELES][PosY] = 1413.4916992188;
	Teles[MAX_TELES][PosZ] = 16.922342300415;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Azotea");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1437.8747558594;
	Teles[MAX_TELES][PosY] = -1786.3486328125;
	Teles[MAX_TELES][PosZ] = 33.4296875;
	Teles[MAX_TELES][PosZZ] = 83.3475;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Azotea");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2444.9885253906;
	Teles[MAX_TELES][PosY] = 755.20709228516;
	Teles[MAX_TELES][PosZ] = 35.171875;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al SuperMercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1463.3393554688;
	Teles[MAX_TELES][PosY] = 1457.1593017578;
	Teles[MAX_TELES][PosZ] = 11.051670074463;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del SuperMercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2440.337890625;
	Teles[MAX_TELES][PosY] = 755.37475585938;
	Teles[MAX_TELES][PosZ] = 35.171875;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al SuperMercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1463.3317871094;
	Teles[MAX_TELES][PosY] = 1448.8151855469;
	Teles[MAX_TELES][PosZ] = 11.044595718384;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del SuperMercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1488.4030761719;
	Teles[MAX_TELES][PosY] = 1439.1560058594;
	Teles[MAX_TELES][PosZ] = 10.999785423279;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tiendas Metro");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1321.6187744141;
	Teles[MAX_TELES][PosY] = 1370.10546875;
	Teles[MAX_TELES][PosZ] = 10.879687309265;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 2;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tiendas Metro");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1486.8168945313;
	Teles[MAX_TELES][PosY] = 1469.2908935547;
	Teles[MAX_TELES][PosZ] = 17.923244476318;
	Teles[MAX_TELES][PosZZ] = 184.5551;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tiendas Wong");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1321.1669921875;
	Teles[MAX_TELES][PosY] = 1341.4766845703;
	Teles[MAX_TELES][PosZ] = 10.825604438782;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tiendas Wong");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1488.4807128906;
	Teles[MAX_TELES][PosY] = 1467.4925537109;
	Teles[MAX_TELES][PosZ] = 10.99523639679;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tienda de Discos");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1288.4362792969;
	Teles[MAX_TELES][PosY] = 1304.3870849609;
	Teles[MAX_TELES][PosZ] = 10.89999961853;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 4;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tienda de Discos");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1492.9178466797;
	Teles[MAX_TELES][PosY] = 1437.2796630859;
	Teles[MAX_TELES][PosZ] = 17.958332061768;
	Teles[MAX_TELES][PosZZ] = 357.9750;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tienda de Licores");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1336.8875732422;
	Teles[MAX_TELES][PosY] = 1331.4705810547;
	Teles[MAX_TELES][PosZ] = 10.820769309998;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tienda de Licores");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2851.2627;
	Teles[MAX_TELES][PosY] = -1532.5386;
	Teles[MAX_TELES][PosZ] = 11.0938;
	Teles[MAX_TELES][PosZZ] = 264.7181;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Recreation Park");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -928.1292;
	Teles[MAX_TELES][PosY] = 2192.6589;
	Teles[MAX_TELES][PosZ] = 43.3984;
	Teles[MAX_TELES][PosZZ] = 359.3733;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Recreation Park");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -916.2724;
	Teles[MAX_TELES][PosY] = 2225.0378;
	Teles[MAX_TELES][PosZ] = 43.3984;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Segundo Piso");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -916.1951;
	Teles[MAX_TELES][PosY] = 2225.0432;
	Teles[MAX_TELES][PosZ] = 51.3453;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Primer Piso");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -920.5874;
	Teles[MAX_TELES][PosY] = 2225.0952;
	Teles[MAX_TELES][PosZ] = 51.3453;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Tercer Piso");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -920.7510;
	Teles[MAX_TELES][PosY] = 2225.0178;
	Teles[MAX_TELES][PosZ] = 59.9453;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Segundo Piso");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
    MAX_TELES++;
    Teles[MAX_TELES][PosX] = 613.4033;
    Teles[MAX_TELES][PosY] = 3.5391;
    Teles[MAX_TELES][PosZ] = 1000.9219;
    Teles[MAX_TELES][PosZZ] = 180;
    Teles[MAX_TELES][Interior] = 1;
    Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
    Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
    Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
    Teles[MAX_TELES][Lock] = false;
    SetText3DTele(MAX_TELES, "Entrada a la Oficina");
    Teles[MAX_TELES][Dueno] = TALLER_SF;

   //////////////////////////////
    MAX_TELES++;
    Teles[MAX_TELES][PosX] = 2146.7790527344;
    Teles[MAX_TELES][PosY] = 2413.2453613281;
    Teles[MAX_TELES][PosZ] = 65.303955078125;
    Teles[MAX_TELES][PosZZ] = 0;
    Teles[MAX_TELES][Interior] = 3;
    Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
    Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
    Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
    Teles[MAX_TELES][Lock] = false;
    SetText3DTele(MAX_TELES, "Salida de la Oficina");
    Teles[MAX_TELES][Dueno] = TALLER_SF;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2170.2810;
	Teles[MAX_TELES][PosY] = 635.5530;
	Teles[MAX_TELES][PosZ] = 1052.3750;
	Teles[MAX_TELES][PosZZ] = 2.5660;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al sotano");
	Teles[MAX_TELES][Dueno] = CONTRABANDISTAS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1889.8413;
	Teles[MAX_TELES][PosY] = 1017.8366;
	Teles[MAX_TELES][PosZ] = 31.8828;
	Teles[MAX_TELES][PosZZ] = 268.9445;
	Teles[MAX_TELES][Interior] = 10;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del sotano");
	Teles[MAX_TELES][Dueno] = CONTRABANDISTAS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2157.3743;
	Teles[MAX_TELES][PosY] = 1596.4598;
	Teles[MAX_TELES][PosZ] = 999.9688;
	Teles[MAX_TELES][PosZZ] = 4.7598;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Estudio CNN");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1101;
	Teles[MAX_TELES][PosY] = 1249;
	Teles[MAX_TELES][PosZ] = 11;
	Teles[MAX_TELES][PosZZ] = 269.0042;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Estudio CNN");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 738.1631;
	Teles[MAX_TELES][PosY] = -1340.1409;
	Teles[MAX_TELES][PosZ] = 13.5280;
	Teles[MAX_TELES][PosZZ] = 265.0780;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la CNN");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2168.2505;
	Teles[MAX_TELES][PosY] = 1618.6906;
	Teles[MAX_TELES][PosZ] = 999.9783;
	Teles[MAX_TELES][PosZZ] = 94.5618;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la CNN");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1134.5614;
	Teles[MAX_TELES][PosY] = 1536.8871;
	Teles[MAX_TELES][PosZ] = 8.7609;
	Teles[MAX_TELES][PosZZ] = 11.6660;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Escenario");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1429.37890625;
	Teles[MAX_TELES][PosY] = 1330.96484375;
	Teles[MAX_TELES][PosZ] = 10.824451446533;
	Teles[MAX_TELES][PosZZ] = 8.9184;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada del Escenario");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1467.587890625;
	Teles[MAX_TELES][PosY] = 1768.2156982422;
	Teles[MAX_TELES][PosZ] = 10.886232376099;
	Teles[MAX_TELES][PosZZ] = 256.6949;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada del Escenario");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1136.5123291016;
	Teles[MAX_TELES][PosY] = 1563.9095458984;
	Teles[MAX_TELES][PosZ] = 7.9992809295654;
	Teles[MAX_TELES][PosZZ] = 87.8791;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Escenario");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1108.5697021484;
	Teles[MAX_TELES][PosY] = 1243.2000732422;
	Teles[MAX_TELES][PosZ] = 10.8203125;
	Teles[MAX_TELES][PosZZ] = 1.9525;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Disquera");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1164.0368652344;
	Teles[MAX_TELES][PosY] = 1234.8566894531;
	Teles[MAX_TELES][PosZ] = 10.86562538147;
	Teles[MAX_TELES][PosZZ] = 93.6875;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Disquera");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2172.9865722656;
	Teles[MAX_TELES][PosY] = 1602.1372070313;
	Teles[MAX_TELES][PosZ] = 999.966796875;
	Teles[MAX_TELES][PosZZ] = 81.4674;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Oficina");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1157.4987792969;
	Teles[MAX_TELES][PosY] = 1323.1114501953;
	Teles[MAX_TELES][PosZ] = 10.825625419617;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Oficina");
	Teles[MAX_TELES][Dueno] = CNN;
/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1454.3125;
	Teles[MAX_TELES][PosY] = 1768.3715820313;
	Teles[MAX_TELES][PosZ] = 10.876362800598;
	Teles[MAX_TELES][PosZZ] = 87.5658;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada del Escenario");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1115.4089355469;
	Teles[MAX_TELES][PosY] = 1572.2352294922;
	Teles[MAX_TELES][PosZ] = 7.9992809295654;
	Teles[MAX_TELES][PosZZ] = 255.4415;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Escenario");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2227.1040;
	Teles[MAX_TELES][PosY] = 258.4172;
	Teles[MAX_TELES][PosZ] = 35.3203;
	Teles[MAX_TELES][PosZZ] = 91.3942;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1466.6284179688;
	Teles[MAX_TELES][PosY] = 1785.3125;
	Teles[MAX_TELES][PosZ] = 10.890875816345;
	Teles[MAX_TELES][PosZZ] = 173.0341;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2227.2205;
	Teles[MAX_TELES][PosY] = 245.8377;
	Teles[MAX_TELES][PosZ] = 35.3203;
	Teles[MAX_TELES][PosZZ] = 88.4293;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1454.88671875;
	Teles[MAX_TELES][PosY] = 1785.3096923828;
	Teles[MAX_TELES][PosZ] = 10.887344360352;
	Teles[MAX_TELES][PosZZ] = 178.9875;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2172.0320;
	Teles[MAX_TELES][PosY] = 258.4347;
	Teles[MAX_TELES][PosZ] = 35.3285;
	Teles[MAX_TELES][PosZZ] = 267.4893;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1420.767578125;
	Teles[MAX_TELES][PosY] = 1342.3922119141;
	Teles[MAX_TELES][PosZ] = 10.824451446533;
	Teles[MAX_TELES][PosZZ] = 170.4316;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2172.0396;
	Teles[MAX_TELES][PosY] = 245.8115;
	Teles[MAX_TELES][PosZ] = 35.3307;
	Teles[MAX_TELES][PosZZ] = 274.1675;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1432.4573974609;
	Teles[MAX_TELES][PosY] = 1342.3981933594;
	Teles[MAX_TELES][PosZ] = 10.824451446533;
	Teles[MAX_TELES][PosZZ] = 158.0665;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////

	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 552.0045;
	Teles[MAX_TELES][PosY] = -2982.3110;
	Teles[MAX_TELES][PosZ] = 10.9435;
	Teles[MAX_TELES][PosZZ] = 9.9225;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada Casa en la Isla");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 422.1125;
	Teles[MAX_TELES][PosY] = 2536.4973;
	Teles[MAX_TELES][PosZ] = 10.0000;
	Teles[MAX_TELES][PosZZ] = 84.6123;
	Teles[MAX_TELES][Interior] = 10;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida Casa en la Isla");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 718.6540;
	Teles[MAX_TELES][PosY] = -1476.3484;
	Teles[MAX_TELES][PosZ] = 5.4688;
	Teles[MAX_TELES][PosZZ] = 176.4081;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada Trasera Contrabandistas");
	Teles[MAX_TELES][Dueno] = CONTRABANDISTAS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2170.2568;
	Teles[MAX_TELES][PosY] = 639.5164;
	Teles[MAX_TELES][PosZ] = 1052.3750;
	Teles[MAX_TELES][PosZZ] = 178.6796;
	Teles[MAX_TELES][Interior] = 1;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida Trasera Contrabandistas");
	Teles[MAX_TELES][Dueno] = CONTRABANDISTAS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1564.8403;
	Teles[MAX_TELES][PosY] = -1666.9033;
	Teles[MAX_TELES][PosZ] = 28.3956;
	Teles[MAX_TELES][PosZZ] = 1.3394;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Ascensor a la LSPD");
	Teles[MAX_TELES][Dueno] = LSPD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 217.4351;
	Teles[MAX_TELES][PosY] = 68.2754;
	Teles[MAX_TELES][PosZ] = 1005.0466;
	Teles[MAX_TELES][PosZZ] = 270.9305;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Ascensor al techo de LSPD");
	Teles[MAX_TELES][Dueno] = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1606.3125;
	Teles[MAX_TELES][PosY] = 672.0709;
	Teles[MAX_TELES][PosZ] = -4.9063;
	Teles[MAX_TELES][PosZZ] = 357.5396;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la SFPD");
	Teles[MAX_TELES][Dueno] = SFPD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 214.3840;
	Teles[MAX_TELES][PosY] = 121.9527;
	Teles[MAX_TELES][PosZ] = 999.0156;
	Teles[MAX_TELES][PosZZ] = 272.1939;
	Teles[MAX_TELES][Interior] = 10;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida al Parqueo SFPD");
	Teles[MAX_TELES][Dueno] = SFPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 259.27764892578;
	Teles[MAX_TELES][PosY] = 107.46966552734;
	Teles[MAX_TELES][PosZ] = 1003.2257080078;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 10;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Camaras de Seguridad");
	Teles[MAX_TELES][Dueno] = SFPD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1954.5887451172;
	Teles[MAX_TELES][PosY] = 968.81573486328;
	Teles[MAX_TELES][PosZ] = 21.870922088623;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Camaras de Seguridad");
	Teles[MAX_TELES][Dueno] = SFPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2706.5669;
	Teles[MAX_TELES][PosY] = -1315.4844;
	Teles[MAX_TELES][PosZ] = 1009.6639;
	Teles[MAX_TELES][PosZZ] = 87.3108;
	Teles[MAX_TELES][Interior] = 2;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Univeresidad");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1492.4878;
	Teles[MAX_TELES][PosY] = 920.1396;
	Teles[MAX_TELES][PosZ] = 7.1875;
	Teles[MAX_TELES][PosZZ] = 88.9468;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada de la Universidad");
	Teles[MAX_TELES][Dueno] = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -328.7082;
	Teles[MAX_TELES][PosY] = -877.2928;
	Teles[MAX_TELES][PosZ] = 49.2925;
	Teles[MAX_TELES][PosZZ] = 331.9713;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][IsHotelTele] = true;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Hotel Blur~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 965.0988;
	Teles[MAX_TELES][PosY] = -53.1099;
	Teles[MAX_TELES][PosZ] = 1001.1246;
	Teles[MAX_TELES][PosZZ] = 86.4610;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Hotel Blur");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2393.4978027344;
	Teles[MAX_TELES][PosY] = 1156.5870361328;
	Teles[MAX_TELES][PosZ] = 34.606250762939;
	Teles[MAX_TELES][PosZZ] = 267.0350;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], -1, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = -1;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Cocina del Tren");
	Teles[MAX_TELES][Dueno] = CIVIL;

	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2368.111132813;
	Teles[MAX_TELES][PosY] = 1106.6160888672;
	Teles[MAX_TELES][PosZ] = 35.5234375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], -1, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = -1;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Primer Vagon");
	Teles[MAX_TELES][Dueno] = CIVIL;

	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2407.4384765625;
	Teles[MAX_TELES][PosY] = 1159.5922851563;
	Teles[MAX_TELES][PosZ] = 34.606250762939;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], -1, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = -1;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Segundo Vagon");
	Teles[MAX_TELES][Dueno] = CIVIL;

	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2394.1958007813;
	Teles[MAX_TELES][PosY] = 1136.3139648438;
	Teles[MAX_TELES][PosZ] = 34.267810821533;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], -1, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = -1;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Primer Vagon");
	Teles[MAX_TELES][Dueno] = CIVIL;

	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2408.9052734375;
	Teles[MAX_TELES][PosY] = 1133.2030029297;
	Teles[MAX_TELES][PosZ] = 34.267810821533;
	Teles[MAX_TELES][PosZZ] = 93.6150;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], -1, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = -1;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Bar del Tren");
	Teles[MAX_TELES][Dueno] = CIVIL;

	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2391.4890136719;
	Teles[MAX_TELES][PosY] = 1110.3713378906;
	Teles[MAX_TELES][PosZ] = 34.726249694824;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], -1, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = -1;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Segundo Vagon");
	Teles[MAX_TELES][Dueno] = CIVIL;

	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2156.4973144531;
	Teles[MAX_TELES][PosY] = 645.49560546875;
	Teles[MAX_TELES][PosZ] = 52.3671875;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Callejon");
	Teles[MAX_TELES][Dueno] = YKZ;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 958.16076660156;
	Teles[MAX_TELES][PosY] = 1724.9559326172;
	Teles[MAX_TELES][PosZ] = 8.6735439300537;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Callejon");
	Teles[MAX_TELES][Dueno] = YKZ;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 922.11932373047;
	Teles[MAX_TELES][PosY] = 1893.5383300781;
	Teles[MAX_TELES][PosZ] = 10.953544616699;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Callejon");
	Teles[MAX_TELES][Dueno] = YKZ;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 959.18499755859;
	Teles[MAX_TELES][PosY] = 1734.5708007813;
	Teles[MAX_TELES][PosZ] = 8.6735439300537;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage");
	Teles[MAX_TELES][Dueno] = YKZ;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2172.4489746094;
	Teles[MAX_TELES][PosY] = 679.87506103516;
	Teles[MAX_TELES][PosZ] = 55.161350250244;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Callejon");
	Teles[MAX_TELES][Dueno] = YKZ;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 963.85028076172;
	Teles[MAX_TELES][PosY] = 1742.0075683594;
	Teles[MAX_TELES][PosZ] = 8.6735439300537;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Callejon");
	Teles[MAX_TELES][Dueno] = YKZ;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1670.0425;
	Teles[MAX_TELES][PosY] = 715.2111;
	Teles[MAX_TELES][PosZ] = 10.8751;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Segundo Piso");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1712.5504;
	Teles[MAX_TELES][PosY] = 712.4996;
	Teles[MAX_TELES][PosZ] = 10.8751;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Primer Piso");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1719.3922;
	Teles[MAX_TELES][PosY] = 730.5467;
	Teles[MAX_TELES][PosZ] = 10.8729;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Parking");
	Teles[MAX_TELES][Dueno] = SFMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2116.4800;
	Teles[MAX_TELES][PosY] = 2405.5039;
	Teles[MAX_TELES][PosZ] = 10.8281;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Segundo Piso");
	Teles[MAX_TELES][Dueno] = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1924.6778564453;
	Teles[MAX_TELES][PosY] = 292.90539550781;
	Teles[MAX_TELES][PosZ] = 41.046875;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al concesionario");
	Teles[MAX_TELES][Dueno] = NFS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -496.75540161133;
	Teles[MAX_TELES][PosY] = 2565.6108398438;
	Teles[MAX_TELES][PosZ] = 53.870487213135;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del concesionario");
	Teles[MAX_TELES][Dueno] = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1752.5007;
	Teles[MAX_TELES][PosY] = -1912.1681;
	Teles[MAX_TELES][PosZ] = 13.5675;
	Teles[MAX_TELES][PosZZ] = 271.2171;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada trasera");
	Teles[MAX_TELES][Dueno] = TAXI;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2193.3528;
	Teles[MAX_TELES][PosY] = -1138.6293;
	Teles[MAX_TELES][PosZ] = 1029.7969;
	Teles[MAX_TELES][PosZZ] = 183.2019;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida trasera");
	Teles[MAX_TELES][Dueno] = TAXI;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2468.2424316406;
	Teles[MAX_TELES][PosY] = 136.53466796875;
	Teles[MAX_TELES][PosZ] = 35.171875;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Museo ~B~Colonial SF~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 319.75296020508;
	Teles[MAX_TELES][PosY] = 2524.7204589844;
	Teles[MAX_TELES][PosZ] = 16.950752258301;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Museo ~B~Colonial");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2458.8830566406;
	Teles[MAX_TELES][PosY] = 127.17351531982;
	Teles[MAX_TELES][PosZ] = 35.175952911377;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Museo ~B~Colonial~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 325.13787841797;
	Teles[MAX_TELES][PosY] = 2524.6809082031;
	Teles[MAX_TELES][PosZ] = 16.950752258301;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Museo ~B~Colonial");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 356.43566894531;
	Teles[MAX_TELES][PosY] = 2502.3215332031;
	Teles[MAX_TELES][PosZ] = 17.695938110352;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Segunda Planta");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 211.33430480957;
	Teles[MAX_TELES][PosY] = 2464.2944335938;
	Teles[MAX_TELES][PosZ] = 17.695938110352;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Segunda Planta");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 356.42413330078;
	Teles[MAX_TELES][PosY] = 2492.5109863281;
	Teles[MAX_TELES][PosZ] = 17.688510894775;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Segunda Planta");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 220.27177429199;
	Teles[MAX_TELES][PosY] = 2464.259765625;
	Teles[MAX_TELES][PosZ] = 17.695938110352;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Segunda Planta");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 216.9066;
	Teles[MAX_TELES][PosY] = 2518.2739;
	Teles[MAX_TELES][PosZ] = 16.9508;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Tumba de Skiruch");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 574.20227050781;
	Teles[MAX_TELES][PosY] = 1666.4656982422;
	Teles[MAX_TELES][PosZ] = 7.1796875;
	Teles[MAX_TELES][PosZZ] = 177.3484;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Tumba de Skiruch");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2347.5518;
	Teles[MAX_TELES][PosY] = -661.9667;
	Teles[MAX_TELES][PosZ] = 128.3023;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Almac\x9en");
	Teles[MAX_TELES][Dueno] = LCN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 672.85406494141;
	Teles[MAX_TELES][PosY] = 1833.5776367188;
	Teles[MAX_TELES][PosZ] = 5.623797416687;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 12;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Almac\x9en");
	Teles[MAX_TELES][Dueno] = LCN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1736.0247;
	Teles[MAX_TELES][PosY] = -2052.7773;
	Teles[MAX_TELES][PosZ] = 20.6677;
	Teles[MAX_TELES][PosZZ] = 359.9336;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Taller");
	Teles[MAX_TELES][Dueno] = TALLER_LS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1736.4465;
	Teles[MAX_TELES][PosY] = -2054.0835;
	Teles[MAX_TELES][PosZ] = 13.5707;
	Teles[MAX_TELES][PosZZ] = 186.8224;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Taller");
	Teles[MAX_TELES][Dueno] = TALLER_LS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1297.4171;
	Teles[MAX_TELES][PosY] = -800.9077;
	Teles[MAX_TELES][PosZ] = 84.1406;
	Teles[MAX_TELES][PosZZ] = 273.6443;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Subida a la Piscina");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1302.2789;
	Teles[MAX_TELES][PosY] = -784.9661;
	Teles[MAX_TELES][PosZ] = 88.3125;
	Teles[MAX_TELES][PosZZ] = 173.7368;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Bajada a la entrada");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1295.4213;
	Teles[MAX_TELES][PosY] = -787.3893;
	Teles[MAX_TELES][PosZ] = 88.3125;
	Teles[MAX_TELES][PosZZ] = 270.2211;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Subida a el techo");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1293.5460;
	Teles[MAX_TELES][PosY] = -788.4596;
	Teles[MAX_TELES][PosZ] = 92.0313;
	Teles[MAX_TELES][PosZZ] = 178.7269;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Bajada a la Piscina");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1280.5542;
	Teles[MAX_TELES][PosY] = -812.2928;
	Teles[MAX_TELES][PosZ] = 83.4447;
	Teles[MAX_TELES][PosZZ] = 180.4959;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al balcon");
	Teles[MAX_TELES][Dueno] = CIVIL;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1280.5941;
	Teles[MAX_TELES][PosY] = -828.9892;
	Teles[MAX_TELES][PosZ] = 76.7210;
	Teles[MAX_TELES][PosZZ] = 179.8692;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del balcon");
	Teles[MAX_TELES][Dueno] = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1730.4862;
	Teles[MAX_TELES][PosY] = -2022.9677;
	Teles[MAX_TELES][PosZ] = 20.6677;
	Teles[MAX_TELES][PosZZ] = 273.4293;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Oficina");
	Teles[MAX_TELES][Dueno] = TALLER_LS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1588.6605;
	Teles[MAX_TELES][PosY] = -2505.8286;
	Teles[MAX_TELES][PosZ] = 13.5547;
	Teles[MAX_TELES][PosZZ] = 267.3497;
	Teles[MAX_TELES][Interior] = 15;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], 6, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = 6;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Oficina");
	Teles[MAX_TELES][Dueno] = TALLER_LS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1636.3885;
	Teles[MAX_TELES][PosY] = -2491.0374;
	Teles[MAX_TELES][PosZ] = 13.6198;
	Teles[MAX_TELES][PosZZ] = 273.1169;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a el Recibidor");
	Teles[MAX_TELES][Dueno] = NFS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1502.6072;
	Teles[MAX_TELES][PosY] = 1308.4796;
	Teles[MAX_TELES][PosZ] = 1093.2891;
	Teles[MAX_TELES][PosZZ] = 89.9395;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Concesionario");
	Teles[MAX_TELES][Dueno] = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 549.5990;
	Teles[MAX_TELES][PosY] = -1293.8884;
	Teles[MAX_TELES][PosZ] = 17.2482;
	Teles[MAX_TELES][PosZZ] = 4.7037;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Concesionario");
	Teles[MAX_TELES][Dueno] = NFS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1647.4929;
	Teles[MAX_TELES][PosY] = -2486.1321;
	Teles[MAX_TELES][PosZ] = 13.6146;
	Teles[MAX_TELES][PosZZ] = 178.7792;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Concesionario");
	Teles[MAX_TELES][Dueno] = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 548.6264;
	Teles[MAX_TELES][PosY] = -1314.2053;
	Teles[MAX_TELES][PosZ] = 17.2422;
	Teles[MAX_TELES][PosZZ] = 183.6187;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Concesionario");
	Teles[MAX_TELES][Dueno] = NFS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1646.8503;
	Teles[MAX_TELES][PosY] = -2502.7546;
	Teles[MAX_TELES][PosZ] = 13.6146;
	Teles[MAX_TELES][PosZZ] = 353.6208;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Concesionario");
	Teles[MAX_TELES][Dueno] = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2233.8840;
	Teles[MAX_TELES][PosY] = -1333.2333;
	Teles[MAX_TELES][PosZ] = 23.9815;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Iglesia");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2870.7888183594;
	Teles[MAX_TELES][PosY] = 911.54583740234;
	Teles[MAX_TELES][PosZ] = 10.780518531799;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 19;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Iglesia");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2254.2273;
	Teles[MAX_TELES][PosY] = -1333.2040;
	Teles[MAX_TELES][PosZ] = 23.9815;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Iglesia");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2858.1708984375;
	Teles[MAX_TELES][PosY] = 911.40795898438;
	Teles[MAX_TELES][PosZ] = 10.780572891235;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 19;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Iglesia");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -999.5003;
	Teles[MAX_TELES][PosY] = -416.4885;
	Teles[MAX_TELES][PosZ] = 36.2180;
	Teles[MAX_TELES][PosZZ] = 317.9548;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Garita");
	Teles[MAX_TELES][Dueno] = SFPD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -1229.4156;
	Teles[MAX_TELES][PosY] = -228.9857;
	Teles[MAX_TELES][PosZ] = 14.4109;
	Teles[MAX_TELES][PosZZ] = 309.2047;
	Teles[MAX_TELES][Interior] = 4;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX], Teles[MAX_TELES][PosY], Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Garita");
	Teles[MAX_TELES][Dueno] = SFPD;
	/////////////////////////////////////////////////////////////////////sssssssssssssssssssssssssssssssssssss
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2338.822265625;
	Teles[MAX_TELES][PosY] = -1176.9663085938;
	Teles[MAX_TELES][PosZ] = 1027.9765625;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Sala");
	Teles[MAX_TELES][Dueno] = COLTS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2345.2273;
	Teles[MAX_TELES][PosY] = -1180.6946;
	Teles[MAX_TELES][PosZ] = 1031.9688;
	Teles[MAX_TELES][PosZZ] = 83.8390;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Sala");
	Teles[MAX_TELES][Dueno] = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2329.5974121094;
	Teles[MAX_TELES][PosY] = -1178.0240478516;
	Teles[MAX_TELES][PosZ] = 1031.9765625;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Cocina");
	Teles[MAX_TELES][Dueno] = COLTS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2330.2036132813;
	Teles[MAX_TELES][PosY] = -1173.0665283203;
	Teles[MAX_TELES][PosZ] = 1027.9765625;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Cocina");
	Teles[MAX_TELES][Dueno] = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2319.7219238281;
	Teles[MAX_TELES][PosY] = -1185.8811035156;
	Teles[MAX_TELES][PosZ] = 1028.6401367188;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Subterraneo");
	Teles[MAX_TELES][Dueno] = COLTS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1088.2927246094;
	Teles[MAX_TELES][PosY] = 1707.5489501953;
	Teles[MAX_TELES][PosZ] = 10.915323257446;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entada a la Casa Colts");
	Teles[MAX_TELES][Dueno] = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1103.0180664063;
	Teles[MAX_TELES][PosY] = 1707.4780273438;
	Teles[MAX_TELES][PosZ] = 10.915323257446;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage Colts");
	Teles[MAX_TELES][Dueno] = COLTS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1080.2182617188;
	Teles[MAX_TELES][PosY] = 1752.4036865234;
	Teles[MAX_TELES][PosZ] = 10.872812271118;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Subterraneo");
	Teles[MAX_TELES][Dueno] = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2688.6977539063;
	Teles[MAX_TELES][PosY] = 819.4150390625;
	Teles[MAX_TELES][PosZ] = 10.963800430298;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage");
	Teles[MAX_TELES][Dueno] = AK;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2653.9909667969;
	Teles[MAX_TELES][PosY] = 800.59191894531;
	Teles[MAX_TELES][PosZ] = 11.072454452515;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 6;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Casa AK");
	Teles[MAX_TELES][Dueno] = AK;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1290.7635498047;
	Teles[MAX_TELES][PosY] = -1161.25390625;
	Teles[MAX_TELES][PosZ] = 23.960971832275;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1536.1700439453;
	Teles[MAX_TELES][PosY] = 1715.9340820313;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1283.6845703125;
	Teles[MAX_TELES][PosY] = -1161.2530517578;
	Teles[MAX_TELES][PosZ] = 23.960971832275;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1536.1544189453;
	Teles[MAX_TELES][PosY] = 1724.9639892578;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1312.9364013672;
	Teles[MAX_TELES][PosY] = -1172.4615478516;
	Teles[MAX_TELES][PosZ] = 23.798957824707;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Pasillo");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1486.4763183594;
	Teles[MAX_TELES][PosY] = 1668.74609375;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Pasillo");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1262.4205322266;
	Teles[MAX_TELES][PosY] = -1172.4796142578;
	Teles[MAX_TELES][PosZ] = 23.81217956543;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Pasillo");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1507.8590087891;
	Teles[MAX_TELES][PosY] = 1668.7855224609;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Pasillo");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1257.2631835938;
	Teles[MAX_TELES][PosY] = -1165.2355957031;
	Teles[MAX_TELES][PosZ] = 23.828125;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada Secundaria");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1560.9891357422;
	Teles[MAX_TELES][PosY] = 1427.7696533203;
	Teles[MAX_TELES][PosZ] = 10.93593788147;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1552.3513183594;
	Teles[MAX_TELES][PosY] = 1426.0701904297;
	Teles[MAX_TELES][PosZ] = 10.93593788147;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Boleteria");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1527.1134033203;
	Teles[MAX_TELES][PosY] = 1720.8371582031;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida de la Boleteria");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1530.4528808594;
	Teles[MAX_TELES][PosY] = 1425.8669433594;
	Teles[MAX_TELES][PosZ] = 10.93593788147;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Solo Actores");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1409.2100830078;
	Teles[MAX_TELES][PosY] = 1826.9398193359;
	Teles[MAX_TELES][PosZ] = 10.93593788147;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1488.2552490234;
	Teles[MAX_TELES][PosY] = 1645.0343017578;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1533.6856689453;
	Teles[MAX_TELES][PosY] = 1709.6895751953;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Pasillo");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1506.0463867188;
	Teles[MAX_TELES][PosY] = 1645.3109130859;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1533.8020019531;
	Teles[MAX_TELES][PosY] = 1730.5770263672;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Pasillo");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1526.9104003906;
	Teles[MAX_TELES][PosY] = 1730.3848876953;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Pasillo Principal");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1585.0755615234;
	Teles[MAX_TELES][PosY] = 1598.1029052734;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1526.9020996094;
	Teles[MAX_TELES][PosY] = 1709.9836425781;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Pasillo Principal");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1604.3533935547;
	Teles[MAX_TELES][PosY] = 1598.0865478516;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1594.6496582031;
	Teles[MAX_TELES][PosY] = 1591.458984375;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Teatro");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1370.279296875;
	Teles[MAX_TELES][PosY] = 1829.9675292969;
	Teles[MAX_TELES][PosZ] = 10.8359375;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1245.2952880859;
	Teles[MAX_TELES][PosY] = -1177.4346923828;
	Teles[MAX_TELES][PosZ] = 23.51279258728;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Parking");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1960.4025878906;
	Teles[MAX_TELES][PosY] = 1860.1754150391;
	Teles[MAX_TELES][PosZ] = 27.63437461853;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Parkin");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1225.7741699219;
	Teles[MAX_TELES][PosY] = -1178.9755859375;
	Teles[MAX_TELES][PosZ] = 22.388561248779;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Parking");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1958.3662109375;
	Teles[MAX_TELES][PosY] = 1890.8638916016;
	Teles[MAX_TELES][PosZ] = 27.63437461853;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Parking");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1232.5668945313;
	Teles[MAX_TELES][PosY] = -1210.4500732422;
	Teles[MAX_TELES][PosZ] = 25.60440826416;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Parking");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1883.4437255859;
	Teles[MAX_TELES][PosY] = 1888.3226318359;
	Teles[MAX_TELES][PosZ] = 27.63437461853;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Segundo Piso");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1051.7932128906;
	Teles[MAX_TELES][PosY] = -346.07562255859;
	Teles[MAX_TELES][PosZ] = 73.9921875;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Almacen");
	Teles[MAX_TELES][Dueno] = TRAFICANTES;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2817.095703125;
	Teles[MAX_TELES][PosY] = 2010.1229248047;
	Teles[MAX_TELES][PosZ] = 16.792163848877;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 10;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Almacen");
	Teles[MAX_TELES][Dueno] = TRAFICANTES;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1871.1759033203;
	Teles[MAX_TELES][PosY] = -1668.7211914063;
	Teles[MAX_TELES][PosZ] = 31.811527252197;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Alhambra");
	Teles[MAX_TELES][Dueno] = LCN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 473.89947509766;
	Teles[MAX_TELES][PosY] = -11.645506858826;
	Teles[MAX_TELES][PosZ] = 1003.6953125;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 17;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], 20, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = 20;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Piso Superior");
	Teles[MAX_TELES][Dueno] = LCN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2679.7185;
	Teles[MAX_TELES][PosY] = 1403.4821;
	Teles[MAX_TELES][PosZ] = 23.8926;
	Teles[MAX_TELES][PosZZ] = 344.8997;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Jizzy's");
	Teles[MAX_TELES][Dueno] = YKZ;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2676.2512207031;
	Teles[MAX_TELES][PosY] = 1392.9838867188;
	Teles[MAX_TELES][PosZ] = 918.3515625;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 3;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], 11, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = 11;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Piso Superior");
	Teles[MAX_TELES][Dueno] = YKZ;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 755.12426757813;
	Teles[MAX_TELES][PosY] = -1361.5046386719;
	Teles[MAX_TELES][PosZ] = 13.512796401978;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Parking");
	Teles[MAX_TELES][Dueno] = CNN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2324.7255859375;
	Teles[MAX_TELES][PosY] = 1419.7823486328;
	Teles[MAX_TELES][PosZ] = 42.883346557617;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 11;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Parking");
	Teles[MAX_TELES][Dueno] = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1546.3073;
	Teles[MAX_TELES][PosY] = 1282.2327;
	Teles[MAX_TELES][PosZ] = 10.8268;
	Teles[MAX_TELES][PosZZ] = 265.0191;
	Teles[MAX_TELES][Interior] = 10;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Almac\x9en NFS");
	Teles[MAX_TELES][Dueno] = NFS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -50.6239;
	Teles[MAX_TELES][PosY] = -233.6132;
	Teles[MAX_TELES][PosZ] = 6.7646;
	Teles[MAX_TELES][PosZZ] = 0.9264;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al almac\x9en NFS");
	Teles[MAX_TELES][Dueno] = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1219.2227783203;
	Teles[MAX_TELES][PosY] = -1811.7043457031;
	Teles[MAX_TELES][PosZ] = 16.59375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1397.5463867188;
	Teles[MAX_TELES][PosY] = 1603.9676513672;
	Teles[MAX_TELES][PosZ] = 11.09531211853;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Museo Colonial");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1154.0031738281;
	Teles[MAX_TELES][PosY] = -1772.6787109375;
	Teles[MAX_TELES][PosZ] = 16.599193572998;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1500.4696044922;
	Teles[MAX_TELES][PosY] = 1325.8043212891;
	Teles[MAX_TELES][PosZ] = 11.129955291748;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Museo Colonial");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1111.9200439453;
	Teles[MAX_TELES][PosY] = -1792.8372802734;
	Teles[MAX_TELES][PosZ] = 16.59375;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;

	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1535.1656494141;
	Teles[MAX_TELES][PosY] = 1296.5877685547;
	Teles[MAX_TELES][PosZ] = 11.307640075684;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Museo Colonial");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1111.9191894531;
	Teles[MAX_TELES][PosY] = -1801.1604003906;
	Teles[MAX_TELES][PosZ] = 16.59375;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;

	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1543.0972900391;
	Teles[MAX_TELES][PosY] = 1296.5903320313;
	Teles[MAX_TELES][PosZ] = 11.307619094849;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Museo Colonial");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1113.7189941406;
	Teles[MAX_TELES][PosY] = -1837.3305664063;
	Teles[MAX_TELES][PosZ] = 16.5999584198;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	Teles[MAX_TELES][PrecioEntrada] = 40;
	SetText3DTele(MAX_TELES, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELES][Dueno] = GOBIERNO;

	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1387.5858154297;
	Teles[MAX_TELES][PosY] = 1214.0670166016;
	Teles[MAX_TELES][PosZ] = 10.985989570618;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Museo Colonial");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1449.5339355469;
	Teles[MAX_TELES][PosY] = 1601.7739257813;
	Teles[MAX_TELES][PosZ] = 10.841849327087;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Pasillo");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1338.0384521484;
	Teles[MAX_TELES][PosY] = 1214.0311279297;
	Teles[MAX_TELES][PosZ] = 10.842981338501;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Museo");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1368.1462402344;
	Teles[MAX_TELES][PosY] = 1210.2509765625;
	Teles[MAX_TELES][PosZ] = 11.014349937439;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Museo");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1549.8510742188;
	Teles[MAX_TELES][PosY] = 1338.1644287109;
	Teles[MAX_TELES][PosZ] = 11.148050308228;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 7;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Pasillo");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2770.6630859375;
	Teles[MAX_TELES][PosY] = -1628.7229003906;
	Teles[MAX_TELES][PosZ] = 12.177460670471;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Almac\x9en");
	Teles[MAX_TELES][Dueno] = HEORS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2437.7485351563;
	Teles[MAX_TELES][PosY] = 2083.6484375;
	Teles[MAX_TELES][PosZ] = 62.359275817871;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 4;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Almac\x9en");
	Teles[MAX_TELES][Dueno] = HEORS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2468.8718261719;
	Teles[MAX_TELES][PosY] = 2275.6091308594;
	Teles[MAX_TELES][PosZ] = 92.460479736328;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 4;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Almac\x9en");
	Teles[MAX_TELES][Dueno] = HEORS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2439.1596679688;
	Teles[MAX_TELES][PosY] = 2096.5361328125;
	Teles[MAX_TELES][PosZ] = 62.359275817871;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 4;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage");
	Teles[MAX_TELES][Dueno] = HEORS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -2129.2333984375;
	Teles[MAX_TELES][PosY] = 894.77954101563;
	Teles[MAX_TELES][PosZ] = 80;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage");
	Teles[MAX_TELES][Dueno] = VELTRAN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -53.895202636719;
	Teles[MAX_TELES][PosY] = 2515.6477050781;
	Teles[MAX_TELES][PosZ] = 16.518749237061;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Garage");
	Teles[MAX_TELES][Dueno] = VELTRAN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 39.081974029541;
	Teles[MAX_TELES][PosY] = 2496.4230957031;
	Teles[MAX_TELES][PosZ] = 16.493684768677;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage");
	Teles[MAX_TELES][Dueno] = VELTRAN;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -18.352540969849;
	Teles[MAX_TELES][PosY] = 2500.5434570313;
	Teles[MAX_TELES][PosZ] = 16.518749237061;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 5;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada a la Casa Volts");
	Teles[MAX_TELES][Dueno] = VELTRAN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2807.4494628906;
	Teles[MAX_TELES][PosY] = -1165.1273193359;
	Teles[MAX_TELES][PosZ] = 1025.5703125;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salon Privado");
	Teles[MAX_TELES][Dueno] = SICARIOS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 397.35479736328;
	Teles[MAX_TELES][PosY] = 2435.0407714844;
	Teles[MAX_TELES][PosZ] = 16.5078125;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Salon Privado");
	Teles[MAX_TELES][Dueno] = SICARIOS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2806.9921875;
	Teles[MAX_TELES][PosY] = -1161.3823242188;
	Teles[MAX_TELES][PosZ] = 1029.1645507813;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Armario");
	Teles[MAX_TELES][Dueno] = SICARIOS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 417.75735473633;
	Teles[MAX_TELES][PosY] = 2440.2165527344;
	Teles[MAX_TELES][PosZ] = 16.50937461853;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 8;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Armario");
	Teles[MAX_TELES][Dueno] = SICARIOS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 373.23968505859;
	Teles[MAX_TELES][PosY] = 1912.1655273438;
	Teles[MAX_TELES][PosZ] = 17.715625762939;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Segundo Piso");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 309.90759277344;
	Teles[MAX_TELES][PosY] = 1810.9261474609;
	Teles[MAX_TELES][PosZ] = 17.647813796997;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Primer Piso");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 384.9172668457;
	Teles[MAX_TELES][PosY] = 1913.7716064453;
	Teles[MAX_TELES][PosZ] = 17.715625762939;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Consultorio del Doctor");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 287.93170166016;
	Teles[MAX_TELES][PosY] = 1877.1405029297;
	Teles[MAX_TELES][PosZ] = 17.640625;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida del Consultorio");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 296.59497070313;
	Teles[MAX_TELES][PosY] = 1807.5396728516;
	Teles[MAX_TELES][PosZ] = 17.647813796997;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Sala de Operaciones");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 309.89172363281;
	Teles[MAX_TELES][PosY] = 1900.4086914063;
	Teles[MAX_TELES][PosZ] = 17.741455078125;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 304.07443237305;
	Teles[MAX_TELES][PosY] = 1810.9692382813;
	Teles[MAX_TELES][PosZ] = 17.655624389648;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Sala de Juntas");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 283.35873413086;
	Teles[MAX_TELES][PosY] = 1921.982421875;
	Teles[MAX_TELES][PosZ] = 17.655624389648;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 376.17913818359;
	Teles[MAX_TELES][PosY] = 1910.2803955078;
	Teles[MAX_TELES][PosZ] = 17.715625762939;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Parking");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = -18.11075592041;
	Teles[MAX_TELES][PosY] = 1528.5985107422;
	Teles[MAX_TELES][PosZ] = 12.7953125;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Hospital");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 376.13824462891;
	Teles[MAX_TELES][PosY] = 1913.7503662109;
	Teles[MAX_TELES][PosZ] = 17.715625762939;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Parking");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 33.724506378174;
	Teles[MAX_TELES][PosY] = 1528.7053222656;
	Teles[MAX_TELES][PosZ] = 12.7953125;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Hospital");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2034.1711425781;
	Teles[MAX_TELES][PosY] = -1401.6752929688;
	Teles[MAX_TELES][PosZ] = 17.294792175293;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Bomberos");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1706.3391113281;
	Teles[MAX_TELES][PosY] = 1199.8503417969;
	Teles[MAX_TELES][PosZ] = 34.920310974121;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1697.4730224609;
	Teles[MAX_TELES][PosY] = 1200.0819091797;
	Teles[MAX_TELES][PosZ] = 34.920310974121;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Entrada al Garage");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1914.53515625;
	Teles[MAX_TELES][PosY] = 1193.5671386719;
	Teles[MAX_TELES][PosZ] = 18.354686737061;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Oficina de Bomberos");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1705.1761474609;
	Teles[MAX_TELES][PosY] = 1204.5402832031;
	Teles[MAX_TELES][PosZ] = 34.912826538086;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Sala de Entrenamiento");
	Teles[MAX_TELES][Dueno] = LSMD;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1863.1311035156;
	Teles[MAX_TELES][PosY] = 1387.4490966797;
	Teles[MAX_TELES][PosZ] = 17.001432418823;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 18;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Oficina de Bomberos");
	Teles[MAX_TELES][Dueno] = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1467.2353515625;
	Teles[MAX_TELES][PosY] = -1009.9293823242;
	Teles[MAX_TELES][PosZ] = 26.84375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Super Mercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1825.8466796875;
	Teles[MAX_TELES][PosY] = -2526.0915527344;
	Teles[MAX_TELES][PosZ] = 13.60000038147;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1457.0697021484;
	Teles[MAX_TELES][PosY] = -1009.924621582;
	Teles[MAX_TELES][PosZ] = 26.84375;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Super Mercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1825.8475341797;
	Teles[MAX_TELES][PosY] = -2537.4846191406;
	Teles[MAX_TELES][PosZ] = 13.60000038147;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1430.6143798828;
	Teles[MAX_TELES][PosY] = -969.28149414063;
	Teles[MAX_TELES][PosZ] = 37.407398223877;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Super Mercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1759.7305908203;
	Teles[MAX_TELES][PosY] = -2526.0532226563;
	Teles[MAX_TELES][PosZ] = 13.60000038147;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1422.5239257813;
	Teles[MAX_TELES][PosY] = -967.81103515625;
	Teles[MAX_TELES][PosZ] = 37.448886871338;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Super Mercado");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1759.7341308594;
	Teles[MAX_TELES][PosY] = -2537.4375;
	Teles[MAX_TELES][PosZ] = 13.60000038147;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1802.9294433594;
	Teles[MAX_TELES][PosY] = -2547.7795410156;
	Teles[MAX_TELES][PosZ] = 13.60000038147;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tiendas Wong");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1596.0267333984;
	Teles[MAX_TELES][PosY] = -2566.3146972656;
	Teles[MAX_TELES][PosZ] = 13.574999809265;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1775.4875488281;
	Teles[MAX_TELES][PosY] = -2547.798828125;
	Teles[MAX_TELES][PosZ] = 13.60000038147;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Tiendas Metro");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1541.1444091797;
	Teles[MAX_TELES][PosY] = -2562.5971679688;
	Teles[MAX_TELES][PosZ] = 13.562812805176;
	Teles[MAX_TELES][PosZZ] = 270;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1795.9865722656;
	Teles[MAX_TELES][PosY] = -2515.7409667969;
	Teles[MAX_TELES][PosZ] = 13.60000038147;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Licoreria Bazar");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1593.8149414063;
	Teles[MAX_TELES][PosY] = -2587.7404785156;
	Teles[MAX_TELES][PosZ] = 13.546875;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 16;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1778.7512207031;
	Teles[MAX_TELES][PosY] = -2438.4311523438;
	Teles[MAX_TELES][PosZ] = 13.5546875;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 13;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Callejon");
	Teles[MAX_TELES][Dueno] = HEORS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1732.1931152344;
	Teles[MAX_TELES][PosY] = -2446.1975097656;
	Teles[MAX_TELES][PosZ] = 13.624611854553;
	Teles[MAX_TELES][PosZZ] = 180;
	Teles[MAX_TELES][Interior] = 13;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Casa Heors");
	Teles[MAX_TELES][Dueno] = HEORS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 1730.9169921875;
	Teles[MAX_TELES][PosY] = -2453.0366210938;
	Teles[MAX_TELES][PosZ] = 13.624611854553;
	Teles[MAX_TELES][PosZZ] = 0;
	Teles[MAX_TELES][Interior] = 13;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_DEFAULT_INTERIOR, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES + 1;
	Teles[MAX_TELES][World] = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Salida");
	Teles[MAX_TELES][Dueno] = HEORS;
	//////////////////////////////
	MAX_TELES++;
	Teles[MAX_TELES][PosX] = 2034.4801;
	Teles[MAX_TELES][PosY] = -1112.5176;
	Teles[MAX_TELES][PosZ] = 26.0466;
	Teles[MAX_TELES][PosZZ] = 90;
	Teles[MAX_TELES][PickupID] = CreateTeleDynamicPickup(1239, MAX_TELES, Teles[MAX_TELES][PosX],Teles[MAX_TELES][PosY],Teles[MAX_TELES][PosZ], WORLD_NORMAL, Teles[MAX_TELES][Interior]);
	Teles[MAX_TELES][Interior] = 0;
	Teles[MAX_TELES][PickupIDGo] = MAX_TELES - 1;
	Teles[MAX_TELES][World] = WORLD_NORMAL;
	Teles[MAX_TELES][Lock] = false;
	SetText3DTele(MAX_TELES, "Puerta Tracera");
	Teles[MAX_TELES][Dueno] = HEORS;
	/////////////////////////////////////////////////////////////////////


	// END TELES
	// WORLD_NORMAL
	// WORLD_DEFAULT_INTERIOR

	/////////////////////////////////////////////////////////////////////

//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde"
//		\xa6 = O Con tílde
}
public UpdateTextLabelNegocio(bizzid)
{
	new TextLabelText[400];
	if ( strlen(NegociosData[bizzid][Dueno]) != 1 )
	{
		format(TextLabelText, sizeof(TextLabelText), "%s\n\n\
			{"COLOR_AZUL"}Lugar: {"COLOR_CREMA"}Negocio PN-%i\n\
			{"COLOR_VERDE"}Tipo: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Propietario: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Socio: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Entrada: {"COLOR_CREMA"}$%i",
			NegociosData[bizzid][NameBizz],
			bizzid,
	        NegociosType[NegociosData[bizzid][Type]][TypeName],
	        NegociosData[bizzid][Dueno],
	        NegociosData[bizzid][Extorsion],
	        NegociosData[bizzid][PriceJoin] );
	}
	else
	{
		format(TextLabelText, sizeof(TextLabelText), "\
			{"COLOR_AZUL"}Lugar: {"COLOR_CREMA"}Negocio PN-%i\n\
			{"COLOR_VERDE"}Tipo: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Estado: {"COLOR_CREMA"}¡En Venta!\n\
			{"COLOR_VERDE"}Precio: {"COLOR_CREMA"}$%i\n\
			{"COLOR_VERDE"}Nivel: {"COLOR_CREMA"}%i\n\
			{"COLOR_VERDE"}Use {"COLOR_ROJO"}/Comprar Negocio",
			bizzid,
	        NegociosType[NegociosData[bizzid][Type]][TypeName],
			NegociosData[bizzid][Precio],
	        NegociosData[bizzid][Level] );
	}
	if (IsValidDynamic3DTextLabel(NegociosData[bizzid][TextLabel])) DestroyDynamic3DTextLabel(NegociosData[bizzid][TextLabel]);

	NegociosData[bizzid][TextLabel] = CreateDynamic3DTextLabel(TextLabelText, 0xFFFFFFFF, NegociosData[bizzid][PosOutX], NegociosData[bizzid][PosOutY], NegociosData[bizzid][PosOutZ],
	10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, true, -1, 0);
}
public DataLoadBizz(bizzid)
{
	new query[1000], Cache:cacheid, negocioExiste;
	mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `ID`='%i';", DIR_NEGOCIOS, bizzid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(negocioExiste);

	if ( negocioExiste )
	{
	    cache_get_value_name_float(0, "PosOutX", NegociosData[bizzid][PosOutX]);
	    cache_get_value_name_float(0, "PosOutY", NegociosData[bizzid][PosOutY]);
	    cache_get_value_name_float(0, "PosOutZ", NegociosData[bizzid][PosOutZ]);
	    cache_get_value_name_float(0, "PosOutZZ", NegociosData[bizzid][PosOutZZ]);
	    new pickupid = CreateDynamicPickup(19607, 1, NegociosData[bizzid][PosOutX], NegociosData[bizzid][PosOutY], NegociosData[bizzid][PosOutZ]-1, WORLD_NORMAL, 0);
	    PickupIndex[pickupid][Tipo] = PICKUP_TYPE_NEGOCIO;
	    PickupIndex[pickupid][Tipoid] = bizzid;
	    NegociosData[bizzid][PickupOutId] = pickupid;
	    cache_get_value_name_int(0, "InteriorOut", NegociosData[bizzid][InteriorOut]);
	    cache_get_value_name_int(0, "Deposito", NegociosData[bizzid][Deposito]);
	    cache_get_value_name_int(0, "Precio", NegociosData[bizzid][Precio]);
	    cache_get_value_name_int(0, "Seguro", NegociosData[bizzid][Lock]);
	    cache_get_value_name_int(0, "Type", NegociosData[bizzid][Type]);
	    cache_get_value_name_int(0, "PriceJoin", NegociosData[bizzid][PriceJoin]);
	    cache_get_value_name_int(0, "PricePiece", NegociosData[bizzid][PricePiece]);
		cache_get_value_name(0, "NameBizz", NegociosData[bizzid][NameBizz],   MAX_BIIZ_NAME);
		cache_get_value_name(0, "Dueno", NegociosData[bizzid][Dueno],		  MAX_PLAYER_NAME);
		cache_get_value_name(0, "Extorsion", NegociosData[bizzid][Extorsion], MAX_PLAYER_NAME);
		cache_get_value_name_int(0, "Materiales", NegociosData[bizzid][Materiales]);
		cache_get_value_name_int(0, "DepositoExtorsion", NegociosData[bizzid][DepositoExtorsion]);
		cache_get_value_name_int(0, "Level", NegociosData[bizzid][Level]);

		NegociosData[bizzid][World] = bizzid;

		CreateDynamicMapIconULP(NegociosData[bizzid][PosOutX], NegociosData[bizzid][PosOutY], NegociosData[bizzid][PosOutZ], NegociosType[NegociosData[bizzid][Type]][IdMapIcon]);

        UpdateTextLabelNegocio(bizzid);
	}
	cache_delete(cacheid);
	return negocioExiste;
}
public DataSaveBizz(bizzid, bool:update)
{
	new query[1000], Cache:cacheid, negocioExiste;
	mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `ID`='%i';", DIR_NEGOCIOS, bizzid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(negocioExiste);
	cache_delete(cacheid);

	if (!negocioExiste)
	{
		mysql_format(dataBase, query, 100, "INSERT INTO `%s` (`ID`) VALUES ('%i');", "negocios", bizzid);
		mysql_query(dataBase, query, false);
	}

	format(query, 100, "UPDATE `%s` SET ", DIR_NEGOCIOS);
	strcat(query, "`PosOutX`='%f',`PosOutY`='%f',`PosOutZ`='%f',`PosOutZZ`='%f',`InteriorOut`='%i',`Deposito`='%i',`Precio`='%i',`Seguro`='%i',`Type`='%i',`PriceJoin`='%i',");
	strcat(query, "`PricePiece`='%i',`NameBizz`='%e',`Dueno`='%e',`Extorsion`='%e',`Materiales`='%i',`DepositoExtorsion`='%i',`Level`='%i'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 1000, query,
		NegociosData[bizzid][PosOutX],
	    NegociosData[bizzid][PosOutY],
	    NegociosData[bizzid][PosOutZ],
	    NegociosData[bizzid][PosOutZZ],
	    NegociosData[bizzid][InteriorOut],
	    NegociosData[bizzid][Deposito],
	    NegociosData[bizzid][Precio],
	    NegociosData[bizzid][Lock],
	    NegociosData[bizzid][Type],
	    NegociosData[bizzid][PriceJoin],

	    NegociosData[bizzid][PricePiece],
		NegociosData[bizzid][NameBizz],
		NegociosData[bizzid][Dueno],
		NegociosData[bizzid][Extorsion],
		NegociosData[bizzid][Materiales],
		NegociosData[bizzid][DepositoExtorsion],
		NegociosData[bizzid][Level],
		bizzid);
	mysql_query(dataBase, query, false);

	if ( update )
	{
		UpdateTextLabelNegocio(bizzid);
	}
}
public LoadDataBizzType()
{
	new PickupModelBizz = 1272;
// 00 ///////////////////////////////////////////////////////////////////////// Lugar: Prolaps
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 207.1340;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -139.3590;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1003.2390;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 359.0096;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 199.0661;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -127.7109;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1003.5152;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 180.3268;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 3;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 01 ///////////////////////////////////////////////////////////////////////// Lugar: Victim
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 226.6100;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -8.2260;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1002.2109;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 87.4987;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 206.1365;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -12.1991;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.2178;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 0.1185;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 5;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 02 ///////////////////////////////////////////////////////////////////////// Lugar: SubUrban
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 203.9409;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -49.8919;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.8047;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 3.0708;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 213.3677;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -41.5770;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1002.0234;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 88.5883;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 1;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 03 ///////////////////////////////////////////////////////////////////////// Lugar: Zip
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 161.4387;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -96.1310;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.8047;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 354.3740;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 161.3552;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -72.0944;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.8047;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 177.2982;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 18;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 04 ///////////////////////////////////////////////////////////////////////// Lugar: Didier Sachs
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 204.3610;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -168.0961;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1000.5234;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 3.0833;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 215.4577;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -156.2483;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1000.5234;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 88.3108;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 14;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 05 ///////////////////////////////////////////////////////////////////////// Lugar: Binco
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 207.7097;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -110.5522;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1005.1328;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 357.8142;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 217.2972;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -98.4899;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1005.2578;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 92.2329;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 15;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 06 ///////////////////////////////////////////////////////////////////////// Lugar: Ring Donuts
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 377.1915;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -192.9054;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1000.6401;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 358.7130;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 379.0891;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -187.8959;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1000.6328;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 270.1432;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 17;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Restaurante");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 50;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 07 ///////////////////////////////////////////////////////////////////////// Lugar: Jay's Diner
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 459.9540;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -88.6612;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 999.5547;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 90.9800;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 450.3769;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -84.0060;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 999.5547;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 359.9035;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 4;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Restaurante");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 50;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 08 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 315.8257;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -143.0595;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 999.6016;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 356.5333;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 313.9653;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -133.1587;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 999.6016;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 271.3058;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 7;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 09 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 285.4598;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -40.8969;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 357.8593;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 296.4650;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -38.1313;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 177.8897;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 1;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 10 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 3
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 285.7038;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -85.9912;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.5229;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 5.4625;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 297.8895;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -80.4345;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 178.2963;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 4;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 11 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 4
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 296.8842;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -111.5674;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 356.7233;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 287.7097;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -106.8642;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 355.1800;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 6;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 12 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 5
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 287.7097;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -106.8642;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 355.1800;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 316.3125;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -169.6709;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 999.6010;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 354.2805;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 6;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 13 ///////////////////////////////////////////////////////////////////////// Lugar: Club
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 493.3510;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -24.1066;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1000.6797;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 1.8939;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 499.5866;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -20.4216;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1000.6797;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 273.3881;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 17;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Club");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 48;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 14 ///////////////////////////////////////////////////////////////////////// Lugar: The Pig Pen
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 1204.9838;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -13.4134;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1000.9219;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 355.6215;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 1215.9023;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -13.0323;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1000.9219;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 178.4822;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 2;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Strip Club");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 48;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 15 ///////////////////////////////////////////////////////////////////////// Lugar: Jizzy
	NegociosType[MAX_BIZZ_TYPE][PosInX] = -2636.7153;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = 1403.0614;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 906.4609;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 357.6521;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = -2653.1179;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = 1410.1919;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 906.2734;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 82.8796;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 3;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Jizzy");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 48;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 16 ///////////////////////////////////////////////////////////////////////// Lugar: 24/7 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] = -30.9650;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -91.3013;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 3.2113;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = -28.3832;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -89.6670;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 180.6406;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 18;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "24/7");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 17;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 17 ///////////////////////////////////////////////////////////////////////// Lugar: 24/7 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] = -25.8594;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -140.8397;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 358.6795;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = -22.5046,
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -138.4611;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 181.1223;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 16;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "24/7");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 17;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 18 ///////////////////////////////////////////////////////////////////////// Lugar: Bar 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] = -228.8344;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = 1401.1725;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 27.7656;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 273.3879;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = -225.2749;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = 1404.3914;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 27.7734;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 273.8058;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 18;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Lil' Probe Inn");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 49;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 19 ///////////////////////////////////////////////////////////////////////// Lugar: Bar 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 501.9434;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -68.3368;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 998.7578;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 183.0326;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 497.5212;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -75.6564;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 998.7578;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 182.9688;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 11;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Bar");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 49;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 20 ///////////////////////////////////////////////////////////////////////// Lugar: SexShop 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] = -100.4072;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -24.2039;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1000.7188;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 356.6941;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = -107.0554;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -11.0345;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1000.7188;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 2.6070;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 3;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "SexShop");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 38;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 21 ///////////////////////////////////////////////////////////////////////// Lugar: SexShop 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 744.4740;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = 1436.9453;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1102.7031;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 357.3116;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 745.1048;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = 1440.2638;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1102.7031;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 90.8947;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 6;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "SexShop");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 38;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 22 ///////////////////////////////////////////////////////////////////////// Lugar: Cluckin' Bell
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 364.9758;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -11.0294;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.8516;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 2.6789;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 369.6758;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -6.3894;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.8589;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 1.9072;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 9;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Cluckin' Bell");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 14;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 23 ///////////////////////////////////////////////////////////////////////// Lugar:Burger Shot
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 363.3516;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -74.7660;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.5078;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 305.2676;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 378.2618;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -67.8177;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.5151;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 3.3392;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 10;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Burger Shot");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 10;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 24 ///////////////////////////////////////////////////////////////////////// Lugar: Pizza Stack
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 372.3392;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -132.8387;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.4922;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 0.3519;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 375.5667;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -119.4645;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.4995;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 354.5028;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 5;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Pizza Stack");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 29;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 25 ///////////////////////////////////////////////////////////////////////// Lugar: Bar
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 677.30352783203;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -463.25582885742;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = -25.6171875;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 265.4503;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 681.57141113281;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -456.29409790039;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = -25.609874725342;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]= 25.4987;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] = 1;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Bar");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 49;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 26 ///////////////////////////////////////////////////////////////////////// Lugar: Restaurtante
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 1367.0800;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = 1274.5714;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 10.8203;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 184.6329;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 1374.5895996094;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = 1262.2515869141;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 10.8203125;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]= 15.983;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] = 8;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Burger Restaurant");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 50;
///////////////////////////////////////////////////////////////////////////
    MAX_BIZZ_TYPE++;
/// 27 ////////////////////////////////////////////////////////////////////// Lugar: Barbería 1
    NegociosType[MAX_BIZZ_TYPE][PosInX] = 411.57223510742;
    NegociosType[MAX_BIZZ_TYPE][PosInY] = -23.165138244629;
    NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 0;
    NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 414.43997192383;
    NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -18.894048690796;
    NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC] = 90;
    NegociosType[MAX_BIZZ_TYPE][InteriorId] = 2;
    format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Barbero");
    NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
    NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
    NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 7;
///////////////////////////////////////////////////////////////////////////
    MAX_BIZZ_TYPE++;
// 28 /////////////////////////////////////////////////////////////////////// Lugar: Barbería 2
    NegociosType[MAX_BIZZ_TYPE][PosInX] = 411.92514038086;
    NegociosType[MAX_BIZZ_TYPE][PosInY] = -54.446674346924;
    NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.8984375;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 0;
    NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 415.04098510742;
    NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -52.34215927124;
    NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.8984375;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC] = 90;
    NegociosType[MAX_BIZZ_TYPE][InteriorId] = 12;
    format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Barbero");
    NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
    NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
    NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 7;
///////////////////////////////////////////////////////////////////////////
    MAX_BIZZ_TYPE++;
// 29 /////////////////////////////////////////////////////////////////////// Lugar: Barbería 3
    NegociosType[MAX_BIZZ_TYPE][PosInX] = 418.59677124023;
    NegociosType[MAX_BIZZ_TYPE][PosInY] = -84.363059997559;
    NegociosType[MAX_BIZZ_TYPE][PosInZ] = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 0;
    NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 421.55499267578;
    NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -77.96834564209;
    NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC] = 90;
    NegociosType[MAX_BIZZ_TYPE][InteriorId] = 3;
    format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Barbero");
    NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
    NegociosType[MAX_BIZZ_TYPE][PickupId] = CreateNegocioDynamicPickup(PickupModelBizz, MAX_BIZZ_TYPE, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
    NegociosType[MAX_BIZZ_TYPE][IdMapIcon] = 7;
///////////////////////////////////////////////////////////////////////////
}
public SetFunctionsForBizz(playerid, bizzid)
{
	switch (bizzid)
	{
	    case 24,22,25,23,16,17,18,27, 28, 29, 12,11,10,9,8,7,6,5,4,3,2,1,0:
	    {
	    	SetPlayerCheckpoint(playerid, NegociosType[bizzid][PosInX_PC], NegociosType[bizzid][PosInY_PC], NegociosType[bizzid][PosInZ_PC], 1.0);
		}
	}
}
public LoadCajeros()
{
	// CAJEROS
	CreateDynamicObjectExULP(2942, 1918.806763, -1765.879883, 13.189775, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS 1   # 0
	Cajeros[MAX_CAJEROS][PosX] = 1918.806763;
	Cajeros[MAX_CAJEROS][PosY] = -1765.879883;
	Cajeros[MAX_CAJEROS][PosZ] = 13.189775;

	CreateDynamicObjectExULP(2942, 1367.271484, -1307.826904, 13.189775, 0, 0, -89, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS 2   # 1
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = 1367.271484;
	Cajeros[MAX_CAJEROS][PosY] = -1307.826904;
	Cajeros[MAX_CAJEROS][PosZ] = 13.189775;

	CreateDynamicObjectExULP(2942, 1346.532349, -1759.225220, 13.158481, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS 3   # 2
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = 1346.532349;
	Cajeros[MAX_CAJEROS][PosY] = -1759.225220;
	Cajeros[MAX_CAJEROS][PosZ] = 13.158481;

	CreateDynamicObjectExULP(2942, -79.300514, -1171.916016, 1.777080, 0, 0, 247, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS/FG  # 3
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = -79.300514;
	Cajeros[MAX_CAJEROS][PosY] = -1171.916016;
	Cajeros[MAX_CAJEROS][PosZ] = 1.777080;

	CreateDynamicObjectExULP(2942, -2095.375732, -95.220436, 34.806961, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero SF 1   # 4
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = -2095.375732;
	Cajeros[MAX_CAJEROS][PosY] = -95.220436;
	Cajeros[MAX_CAJEROS][PosZ] = 34.806961;

	CreateDynamicObjectExULP(2942, -1990.503174, 1345.649414, 6.827043, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); 				//Cajero SF 2   # 5
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = -1990.503174;
	Cajeros[MAX_CAJEROS][PosY] = 1345.649414;
	Cajeros[MAX_CAJEROS][PosZ] = 6.827043;
}
public IsPlayerNearCajero(playerid)
{
	for (new i=0;i<=MAX_CAJEROS;i++)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 2.0, Cajeros[i][PosX],Cajeros[i][PosY],Cajeros[i][PosZ]))
	    {
	    	return i;
    	}
	}
	SendInfoMessage(playerid, 0, "766", "No se encuentra cerca de un cajero ni en el banco");
	return -1;
}
public IsMyExtorsion(playerid, bizzid)
{
    if ( strfind(NegociosData[bizzid][Extorsion], PlayersDataOnline[playerid][NameOnline], false) == 0 && strlen(NegociosData[bizzid][Extorsion]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	{
	    return true;
    }
    else
    {
		return false;
	}
}
public IsMyBizz(playerid, bizzid, msg)
{
	if ( strfind(NegociosData[bizzid][Dueno], PlayersDataOnline[playerid][NameOnline], true) == 0 && strlen(NegociosData[bizzid][Dueno]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	{
	    return true;
    }
    else
    {
		if ( msg )
		{
			SendInfoMessage(playerid, 0, "300", "Este negocio no es suyo");
		}
		return false;
	}
}
public IsMyHouse(playerid, houseid)
{
	if ( strfind(HouseData[houseid][Dueno], PlayersDataOnline[playerid][NameOnline], true) == 0 && strlen(HouseData[houseid][Dueno]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	{
	    return true;
    }
    else
    {
		return false;
	}
}
public LoadMenuStatic()
{
////////////// SULTAN
	// Principal_Sultan;
    Principal_Sultan	 = CreateMenu("Sultan", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Sultan, 0, "Pack X-Flow");
	AddMenuItem(Principal_Sultan, 0, "Pack Alien");
	// XFlowYAlien_Sultan[0];
    XFlowYAlien_Sultan[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Aleron");          	XFlowYAlien_SultanID[0][0] = 1139;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_SultanID[0][1] = 1140;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_SultanID[0][2] = 1170;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Bajo Izquierdo");     	XFlowYAlien_SultanID[0][3] = 1030;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Bajo Derecho");       	XFlowYAlien_SultanID[0][4] = 1031;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Techo");			    	XFlowYAlien_SultanID[0][5] = 1033;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Escapes");		    	XFlowYAlien_SultanID[0][6] = 1029;
	// XFlowYAlien_Sultan[1];
    XFlowYAlien_Sultan[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Aleron");          	XFlowYAlien_SultanID[1][0] = 1138;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_SultanID[1][1] = 1141;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_SultanID[1][2] = 1169;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Bajo Izquierdo");     	XFlowYAlien_SultanID[1][3] = 1026;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Bajo Derecho");       	XFlowYAlien_SultanID[1][4] = 1027;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Techo");			    	XFlowYAlien_SultanID[1][5] = 1032;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Escapes");		    	XFlowYAlien_SultanID[1][6] = 1028;
////////////// ELEGY
	// Principal_Elegy;
    Principal_Elegy	 = CreateMenu("Elegy", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Elegy, 0, "Pack X-Flow");
	AddMenuItem(Principal_Elegy, 0, "Pack Alien");
	// XFlowYAlien_Elegy[0];
    XFlowYAlien_Elegy[0]	 = CreateMenu("X-Flow", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Aleron");          	XFlowYAlien_ElegyID[0][0] = 1146;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_ElegyID[0][1] = 1148;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_ElegyID[0][2] = 1172;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Bajo Izquierdo");     	XFlowYAlien_ElegyID[0][3] = 1039;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Bajo Derecho");       	XFlowYAlien_ElegyID[0][4] = 1041;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Techo");			    	XFlowYAlien_ElegyID[0][5] = 1035;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Escapes");		    	XFlowYAlien_ElegyID[0][6] = 1037;
	// XFlowYAlien_Elegy[1];
    XFlowYAlien_Elegy[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Aleron");          	XFlowYAlien_ElegyID[1][0] = 1147;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_ElegyID[1][1] = 1149;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_ElegyID[1][2] = 1171;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Bajo Izquierdo");     	XFlowYAlien_ElegyID[1][3] = 1040;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Bajo Derecho");       	XFlowYAlien_ElegyID[1][4] = 1036;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Techo");			    	XFlowYAlien_ElegyID[1][5] = 1038;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Escapes");		    	XFlowYAlien_ElegyID[1][6] = 1034;
////////////// FLASH
	// Principal_Flash;
    Principal_Flash	 = CreateMenu("Flash", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Flash, 0, "Pack X-Flow");
	AddMenuItem(Principal_Flash, 0, "Pack Alien");
	// XFlowYAlien_Flash[0];
    XFlowYAlien_Flash[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Aleron");          	XFlowYAlien_FlashID[0][0] = 1050;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_FlashID[0][1] = 1151;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_FlashID[0][2] = 1152;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Bajo Izquierdo");     	XFlowYAlien_FlashID[0][3] = 1052;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Bajo Derecho");       	XFlowYAlien_FlashID[0][4] = 1048;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Techo");			    	XFlowYAlien_FlashID[0][5] = 1053;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Escapes");		    	XFlowYAlien_FlashID[0][6] = 1045;
	// Alien_Flash;
    XFlowYAlien_Flash[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Aleron");          	XFlowYAlien_FlashID[1][0] = 1049;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_FlashID[1][1] = 1150;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_FlashID[1][2] = 1153;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Bajo Izquierdo");     	XFlowYAlien_FlashID[1][3] = 1051;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Bajo Derecho");       	XFlowYAlien_FlashID[1][4] = 1047;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Techo");			    	XFlowYAlien_FlashID[1][5] = 1054;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Escapes");		    	XFlowYAlien_FlashID[1][6] = 1046;
////////////// STRATUM
	// Principal_Stratum;
    Principal_Stratum	 = CreateMenu("Stratum", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Stratum, 0, "Pack X-Flow");
	AddMenuItem(Principal_Stratum, 0, "Pack Alien");
	// XFlowYAlien_Stratum[0];
    XFlowYAlien_Stratum[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Stratum[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_StratumID[0][0] = 1156;
	AddMenuItem(XFlowYAlien_Stratum[0], 0, "Paragolpes Delantero"); XFlowYAlien_StratumID[0][1] = 1157;
	// XFlowYAlien_Stratum[1];
    XFlowYAlien_Stratum[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Stratum[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_StratumID[1][0] = 1154;
	AddMenuItem(XFlowYAlien_Stratum[1], 0, "Paragolpes Delantero");	XFlowYAlien_StratumID[1][1] = 1155;
////////////// JESTER
	// Principal_Jester;
    Principal_Jester	 = CreateMenu("Jester", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Jester, 0, "Pack X-Flow");
	AddMenuItem(Principal_Jester, 0, "Pack Alien");
	// XFlowYAlien_Jester[0];
    XFlowYAlien_Jester[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Aleron");          	XFlowYAlien_JesterID[0][0] = 1158;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_JesterID[0][1] = 1161;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_JesterID[0][2] = 1173;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Bajo Izquierdo");     	XFlowYAlien_JesterID[0][3] = 1072;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Bajo Derecho");       	XFlowYAlien_JesterID[0][4] = 1070;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Techo");			    	XFlowYAlien_JesterID[0][5] = 1068;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Escapes");		    	XFlowYAlien_JesterID[0][6] = 1066;
	// XFlowYAlien_Jester[1];
    XFlowYAlien_Jester[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Aleron");          	XFlowYAlien_JesterID[1][0] = 1162;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_JesterID[1][1] = 1159;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_JesterID[1][2] = 1160;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Bajo Izquierdo");     	XFlowYAlien_JesterID[1][3] = 1071;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Bajo Derecho");       	XFlowYAlien_JesterID[1][4] = 1069;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Techo");			    	XFlowYAlien_JesterID[1][5] = 1067;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Escapes");		    	XFlowYAlien_JesterID[1][6] = 1065;
////////////// URANUS
	// Principal_Uranus;
    Principal_Uranus	 = CreateMenu("Uranus", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Uranus, 0, "Pack X-Flow");
	AddMenuItem(Principal_Uranus, 0, "Pack Alien");
	// XFlowYAlien_Uranus[0];
    XFlowYAlien_Uranus[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Aleron");          	XFlowYAlien_UranusID[0][0] = 1163;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_UranusID[0][1] = 1167;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_UranusID[0][2] = 1165;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Bajo Izquierdo");     	XFlowYAlien_UranusID[0][3] = 1093;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Bajo Derecho");       	XFlowYAlien_UranusID[0][4] = 1095;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Techo");			    	XFlowYAlien_UranusID[0][5] = 1091;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Escapes");		    	XFlowYAlien_UranusID[0][6] = 1089;
	// XFlowYAlien_Uranus[1];
    XFlowYAlien_Uranus[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Aleron");          	XFlowYAlien_UranusID[1][0] = 1164;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_UranusID[1][1] = 1168;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_UranusID[1][2] = 1166;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Bajo Izquierdo");     	XFlowYAlien_UranusID[1][3] = 1094;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Bajo Derecho");       	XFlowYAlien_UranusID[1][4] = 1090;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Techo");			    	XFlowYAlien_UranusID[1][5] = 1088;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Escapes");		    	XFlowYAlien_UranusID[1][6] = 1092;

////////////// SAVANNA
	// Principal_Savanna;
    Principal_Savanna	 = CreateMenu("Savanna", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Savanna, 0, "Techo");
	AddMenuItem(Principal_Savanna, 0, "Tubos de Escape");
	AddMenuItem(Principal_Savanna, 0, "Bajos");
	AddMenuItem(Principal_Savanna, 0, "Bumpers");

	// Opciones_Savanna[0];
    Opciones_Savanna[0]	 = CreateMenu("Techo", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[0], 0, "Hardtop");         	Opciones_SavannaID[0][0] = 1130;
	AddMenuItem(Opciones_Savanna[0], 0, "Softtop"); 			Opciones_SavannaID[0][1] = 1131;

    Opciones_Savanna[1]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[1], 0, "Chrome");          	Opciones_SavannaID[1][0]  = 1129;
	AddMenuItem(Opciones_Savanna[1], 0, "Slamin"); 				Opciones_SavannaID[1][1]     = 1132;

    Opciones_Savanna[2]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[2], 0, "Izquierdo");       	Opciones_SavannaID[2][0]  = 1102;
	AddMenuItem(Opciones_Savanna[2], 0, "Derecho"); 			Opciones_SavannaID[2][1]  = 1133;

    Opciones_Savanna[3]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[3], 0, "Slamin Trasero");   	Opciones_SavannaID[3][0]  = 1186;
	AddMenuItem(Opciones_Savanna[3], 0, "Chrome Trasero"); 		Opciones_SavannaID[3][1]  = 1187;
	AddMenuItem(Opciones_Savanna[3], 0, "Slamin Delantero"); 	Opciones_SavannaID[3][2]  = 1188;
	AddMenuItem(Opciones_Savanna[3], 0, "Chrome Delantero"); 	Opciones_SavannaID[3][3]  = 1189;

////////////// Remington
	// Principal_Remington;
    Principal_Remington	 = CreateMenu("Remington", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Remington, 0, "Adornos");
	AddMenuItem(Principal_Remington, 0, "Tubos de Escape");
	AddMenuItem(Principal_Remington, 0, "Bajos");
	AddMenuItem(Principal_Remington, 0, "Bumpers");

	// Opciones_Remington[0];
    Opciones_Remington[0]	 = CreateMenu("Adornos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[0], 0, "Chrome");         			Opciones_RemingtonID[0][0] = 1100;
	AddMenuItem(Opciones_Remington[0], 0, "Luces"); 					Opciones_RemingtonID[0][1] = 1123;
	AddMenuItem(Opciones_Remington[0], 0, "Barras"); 					Opciones_RemingtonID[0][2] = 1123;

    Opciones_Remington[1]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[1], 0, "Chrome");          			Opciones_RemingtonID[1][0]  = 1126;
	AddMenuItem(Opciones_Remington[1], 0, "Slamin"); 					Opciones_RemingtonID[1][1]  = 1127;

    Opciones_Remington[2]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[2], 0, "Izquierdo Chrome Arches");   Opciones_RemingtonID[2][0]  = 1124;
	AddMenuItem(Opciones_Remington[2], 0, "Derecho Chrome Arches"); 	Opciones_RemingtonID[2][1]  = 1106;
	AddMenuItem(Opciones_Remington[2], 0, "Izquierdo Chrome Flames");   Opciones_RemingtonID[2][2]  = 1101;
	AddMenuItem(Opciones_Remington[2], 0, "Derecho Chrome Flames"); 	Opciones_RemingtonID[2][3]  = 1122;

    Opciones_Remington[3]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[3], 0, "Slamin Trasero");   			Opciones_RemingtonID[3][0]  = 1178;
	AddMenuItem(Opciones_Remington[3], 0, "Chrome Trasero"); 			Opciones_RemingtonID[3][1]  = 1180;
	AddMenuItem(Opciones_Remington[3], 0, "Slamin Delantero"); 			Opciones_RemingtonID[3][2]  = 1185;
	AddMenuItem(Opciones_Remington[3], 0, "Chrome Delantero"); 			Opciones_RemingtonID[3][3]  = 1179;

////////////// Slamvan
	// Principal_Slamvan;
    Principal_Slamvan	 = CreateMenu("Slamvan", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Slamvan, 0, "Tubos de Escape");
	AddMenuItem(Principal_Slamvan, 0, "Bajos");
	AddMenuItem(Principal_Slamvan, 0, "Bumpers");

	// Opciones_Slamvan[0];
    Opciones_Slamvan[0]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Slamvan[0], 0, "Chrome");          			Opciones_SlamvanID[0][0]  = 1113;
	AddMenuItem(Opciones_Slamvan[0], 0, "Slamin"); 						Opciones_SlamvanID[0][1]  = 1114;

    Opciones_Slamvan[1]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Slamvan[1], 0, "Izquierdo Chrome");  			Opciones_SlamvanID[1][0]  = 1118;
	AddMenuItem(Opciones_Slamvan[1], 0, "Derecho Chrome"); 				Opciones_SlamvanID[1][1]  = 1120;
	AddMenuItem(Opciones_Slamvan[1], 0, "Izquierdo Wheelcovers");  		Opciones_SlamvanID[1][2]  = 1121;
	AddMenuItem(Opciones_Slamvan[1], 0, "Derecho Wheelcovers"); 		Opciones_SlamvanID[1][3]  = 1119;

    Opciones_Slamvan[2]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Slamvan[2], 0, "Slamin Trasero");   			Opciones_SlamvanID[2][0]  = 1110;
	AddMenuItem(Opciones_Slamvan[2], 0, "Chrome Trasero"); 				Opciones_SlamvanID[2][1]  = 1109;
	AddMenuItem(Opciones_Slamvan[2], 0, "Little Delantero 1"); 			Opciones_SlamvanID[2][2]  = 1111;
	AddMenuItem(Opciones_Slamvan[2], 0, "Little Delantero 2"); 			Opciones_SlamvanID[2][3]  = 1112;
	AddMenuItem(Opciones_Slamvan[2], 0, "Slamin Delantero"); 			Opciones_SlamvanID[2][4]  = 1116;
	AddMenuItem(Opciones_Slamvan[2], 0, "Chrome Delantero 1"); 			Opciones_SlamvanID[2][5]  = 1117;
	AddMenuItem(Opciones_Slamvan[2], 0, "Chrome Delantero 2"); 			Opciones_SlamvanID[2][6]  = 1117;

////////////// Blade
	// Principal_Blade;
    Principal_Blade	 = CreateMenu("Blade", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Blade, 0, "Techo");
	AddMenuItem(Principal_Blade, 0, "Tubos de Escape");
	AddMenuItem(Principal_Blade, 0, "Bajos");
	AddMenuItem(Principal_Blade, 0, "Bumpers");

	// Opciones_Blade[0];
    Opciones_Blade[0]	 = CreateMenu("Techo", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[0], 0, "Covertible");       			Opciones_BladeID[0][0]  = 1103;
	AddMenuItem(Opciones_Blade[0], 0, "Vinyl");       				Opciones_BladeID[0][1]  = 1128;

    Opciones_Blade[1]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[1], 0, "Chrome");          			Opciones_BladeID[1][0]  = 1104;
	AddMenuItem(Opciones_Blade[1], 0, "Slamin"); 					Opciones_BladeID[1][1]  = 1105;

    Opciones_Blade[2]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[2], 0, "Izquierdo Chrome");  		Opciones_BladeID[2][0]  = 1107;
	AddMenuItem(Opciones_Blade[2], 0, "Derecho Chrome"); 			Opciones_BladeID[2][1]  = 1108;

    Opciones_Blade[3]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[3], 0, "Slamin Trasero");   			Opciones_BladeID[3][0]  = 1183;
	AddMenuItem(Opciones_Blade[3], 0, "Chrome Trasero"); 			Opciones_BladeID[3][1]  = 1184;
	AddMenuItem(Opciones_Blade[3], 0, "Slamin Delantero"); 			Opciones_BladeID[3][2]  = 1181;
	AddMenuItem(Opciones_Blade[3], 0, "Chrome Delantero"); 			Opciones_BladeID[3][3]  = 1182;

/*
new Menu:Principal_Savanna;
new Menu:Opciones_Savanna[2];
new Opciones_SavannaID[2][7];
*/

////////////// Escape
    XFlowYAlien_Escape	 = CreateMenu("Otros", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 1");		    	XFlowYAlien_EscapeID[0] = 1018;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 2");		    	XFlowYAlien_EscapeID[1] = 1019;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 3");		    	XFlowYAlien_EscapeID[2] = 1020;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 4");		    	XFlowYAlien_EscapeID[3] = 1021;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 5");		    	XFlowYAlien_EscapeID[4] = 1022;
	AddMenuItem(XFlowYAlien_Escape, 0, "Llantas Especiales");  		XFlowYAlien_EscapeID[5] = 1025;

////////////// Sentinel
    XFlowYAlien_Sentinel	 = CreateMenu("Otros", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 1");		    	XFlowYAlien_SentinelID[0] = 1018;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 2");		    	XFlowYAlien_SentinelID[1] = 1019;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 3");		    	XFlowYAlien_SentinelID[2] = 1020;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 4");		    	XFlowYAlien_SentinelID[3] = 1021;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 5");		    	XFlowYAlien_SentinelID[4] = 1022;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aleron 1");		    XFlowYAlien_SentinelID[5] = 1023;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aleron 2");		    XFlowYAlien_SentinelID[6] = 1014;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aleron 3");		    XFlowYAlien_SentinelID[7] = 1015;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aleron 4");		    XFlowYAlien_SentinelID[8] = 1016;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Llantas Especiales");  	XFlowYAlien_SentinelID[9] = 1025;

////////////// EUROS
    XFlowYAlien_Euros	 = CreateMenu("Otros", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 1");		    	XFlowYAlien_EurosID[0] = 1018;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 2");		    	XFlowYAlien_EurosID[1] = 1019;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 3");		    	XFlowYAlien_EurosID[2] = 1020;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 4");		    	XFlowYAlien_EurosID[3] = 1021;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 5");		    	XFlowYAlien_EurosID[4] = 1022;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aleron 1");		    XFlowYAlien_EurosID[5] = 1023;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aleron 2");		    XFlowYAlien_EurosID[6] = 1014;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aleron 3");		    XFlowYAlien_EurosID[7] = 1015;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aleron 4");		    XFlowYAlien_EurosID[8] = 1016;
	AddMenuItem(XFlowYAlien_Euros, 0, "Llantas Especiales");  	XFlowYAlien_EurosID[9] = 1025;
	AddMenuItem(XFlowYAlien_Euros, 0, "Roof 1");  				XFlowYAlien_EurosID[10] = 1011;
	AddMenuItem(XFlowYAlien_Euros, 0, "Roof 2");  				XFlowYAlien_EurosID[11] = 1012;

	//////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////

	// TallerPrincipal;
    TallerPrincipal = CreateMenu("Taller", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(TallerPrincipal, 0, "Pintura");
	AddMenuItem(TallerPrincipal, 0, "Nitro");
	AddMenuItem(TallerPrincipal, 0, "Hidraulica");
	AddMenuItem(TallerPrincipal, 0, "Estereo");
	AddMenuItem(TallerPrincipal, 0, "Llantas I");
	AddMenuItem(TallerPrincipal, 0, "Llantas II");
	AddMenuItem(TallerPrincipal, 0, "Tunning");
	AddMenuItem(TallerPrincipal, 0, "Vinilos");
	AddMenuItem(TallerPrincipal, 0, "Cambiar Chapa");

	// Nitro;
    Nitro	 = CreateMenu("Nitros", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Nitro, 0, "Nitro 2x");  NitrosID[1] = 1009;
	AddMenuItem(Nitro, 0, "Nitro 5x");  NitrosID[0] = 1008;
	AddMenuItem(Nitro, 0, "Nitro 10x");	NitrosID[2] = 1010;

	// Llantas1;
    Llantas1	 = CreateMenu("Llantas I", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Llantas1, 0, "Shadow");  LlantasID1[0] = 1073;
	AddMenuItem(Llantas1, 0, "Mega");  	 LlantasID1[1] = 1074;
	AddMenuItem(Llantas1, 0, "Rimshine");LlantasID1[2] = 1075;
	AddMenuItem(Llantas1, 0, "Wires");   LlantasID1[3] = 1076;
	AddMenuItem(Llantas1, 0, "Classic"); LlantasID1[4] = 1077;
	AddMenuItem(Llantas1, 0, "Twist");   LlantasID1[5] = 1078;
	AddMenuItem(Llantas1, 0, "Cutter");  LlantasID1[6] = 1079;
	AddMenuItem(Llantas1, 0, "Switch");  LlantasID1[7] = 1080;

	// Llantas2;
    Llantas2	 = CreateMenu("Llantas II", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Llantas2, 0, "Grove");   LlantasID2[0] = 1081;
	AddMenuItem(Llantas2, 0, "Import");  LlantasID2[1] = 1082;
	AddMenuItem(Llantas2, 0, "Dollar");  LlantasID2[2] = 1083;
	AddMenuItem(Llantas2, 0, "Trance");  LlantasID2[3] = 1084;
	AddMenuItem(Llantas2, 0, "Atomic");  LlantasID2[4] = 1085;
	AddMenuItem(Llantas2, 0, "Ahab");	 LlantasID2[5] = 1096;
	AddMenuItem(Llantas2, 0, "Virtual"); LlantasID2[6] = 1097;
	AddMenuItem(Llantas2, 0, "Access");  LlantasID2[7] = 1098;

	// Vinilos;
    Vinilos	 = CreateMenu("Vinilos", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Vinilos, 0, "Vinilo I");
	AddMenuItem(Vinilos, 0, "Vinilo II");
	AddMenuItem(Vinilos, 0, "Vinilo III");
	AddMenuItem(Vinilos, 0, "Eliminar Vinilos");

	// CluckinBell;
    CluckinBell	 = CreateMenu("Cluckin' Bell", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(CluckinBell, 0, "The Little");  				AddMenuItem(CluckinBell, 1, "$12");	CluckinBellPrecios[0] = 12;
	AddMenuItem(CluckinBell, 0, "Cluker");  					AddMenuItem(CluckinBell, 1, "$14"); CluckinBellPrecios[1] = 14;
	AddMenuItem(CluckinBell, 0, "Kids Meal");  					AddMenuItem(CluckinBell, 1, "$16");	CluckinBellPrecios[2] = 16;
	AddMenuItem(CluckinBell, 0, "Cluker Mediana");  			AddMenuItem(CluckinBell, 1, "$18");	CluckinBellPrecios[3] = 18;
	AddMenuItem(CluckinBell, 0, "Super Cluker");  				AddMenuItem(CluckinBell, 1, "$22");	CluckinBellPrecios[4] = 22;
	AddMenuItem(CluckinBell, 0, "Cluker' Bell + Coca Cola");  	AddMenuItem(CluckinBell, 1, "$25");	CluckinBellPrecios[5] = 25;
	AddMenuItem(CluckinBell, 0, "Especial Bell");  				AddMenuItem(CluckinBell, 1, "$30");	CluckinBellPrecios[6] = 30;
	// BurgerShot;
    BurgerShot	 = CreateMenu("Burger Shot", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(BurgerShot, 0, "Simple Shot");  		AddMenuItem(BurgerShot, 1, "$14"); 	BurgerShotPrecios[0] = 14;
	AddMenuItem(BurgerShot, 0, "Doble Barreled");  		AddMenuItem(BurgerShot, 1, "$15"); 	BurgerShotPrecios[1] = 15;
	AddMenuItem(BurgerShot, 0, "Buckshot Especial");	AddMenuItem(BurgerShot, 1, "$18"); 	BurgerShotPrecios[2] = 18;
	AddMenuItem(BurgerShot, 0, "Parilla vegetariana"); 	AddMenuItem(BurgerShot, 1, "$17"); 	BurgerShotPrecios[3] = 17;
	AddMenuItem(BurgerShot, 0, "Filete de Mariscos");	AddMenuItem(BurgerShot, 1, "$35");	BurgerShotPrecios[4] = 35;
	AddMenuItem(BurgerShot, 0, "Pollo Bits");			AddMenuItem(BurgerShot, 1, "$30");	BurgerShotPrecios[5] = 30;
	AddMenuItem(BurgerShot, 0, "Cafe");  				AddMenuItem(BurgerShot, 1, "$15");	BurgerShotPrecios[6] = 15;
	AddMenuItem(BurgerShot, 0, "Shake");  				AddMenuItem(BurgerShot, 1, "$16");	BurgerShotPrecios[7] = 16;
	// PizzaStack;
    PizzaStack	 = CreateMenu("Pizza Stack", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(PizzaStack, 0, "The Bustert");  				AddMenuItem(PizzaStack, 1, "$14"); 	PizzaStackPrecios[0] = 14;
	AddMenuItem(PizzaStack, 0, "The Double D-Lux");  			AddMenuItem(PizzaStack, 1, "$15"); 	PizzaStackPrecios[1] = 15;
	AddMenuItem(PizzaStack, 0, "The Full Rack");				AddMenuItem(PizzaStack, 1, "$18"); 	PizzaStackPrecios[2] = 18;
	AddMenuItem(PizzaStack, 0, "Pizza Jamon y Queso"); 		AddMenuItem(PizzaStack, 1, "$22"); 	PizzaStackPrecios[3] = 22;
	AddMenuItem(PizzaStack, 0, "Pizza Comepleta + Coca Cola");	AddMenuItem(PizzaStack, 1, "$28");	PizzaStackPrecios[4] = 28;
	AddMenuItem(PizzaStack, 0, "Plato Del Hoy");				AddMenuItem(PizzaStack, 1, "$25");	PizzaStackPrecios[5] = 25;
	AddMenuItem(PizzaStack, 0, "Especial Pizza Familiar");		AddMenuItem(PizzaStack, 1, "$40");	PizzaStackPrecios[6] = 40;
	// JaysDiner;
    JaysDiner	 = CreateMenu("Jay's Diner", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(JaysDiner, 0, "Spunk");  				AddMenuItem(JaysDiner, 1, "$14"); 	JaysDinerPrecios[0] = 14;
	AddMenuItem(JaysDiner, 0, "Bocadillo + Spunk");  	AddMenuItem(JaysDiner, 1, "$20"); 	JaysDinerPrecios[1] = 20;
	AddMenuItem(JaysDiner, 0, "Almuerzo Sencillo");		AddMenuItem(JaysDiner, 1, "$28"); 	JaysDinerPrecios[2] = 28;
	AddMenuItem(JaysDiner, 0, "Pollo a la Parilla"); 	AddMenuItem(JaysDiner, 1, "$22"); 	JaysDinerPrecios[3] = 22;
	AddMenuItem(JaysDiner, 0, "Cena completa");			AddMenuItem(JaysDiner, 1, "$60");	JaysDinerPrecios[4] = 60;
	AddMenuItem(JaysDiner, 0, "Cafe");					AddMenuItem(JaysDiner, 1, "$15");	JaysDinerPrecios[5] = 15;
	AddMenuItem(JaysDiner, 0, "Postre");				AddMenuItem(JaysDiner, 1, "$19");	JaysDinerPrecios[6] = 19;
	// RingDonuts;
    RingDonuts	 = CreateMenu("Ring Donuts", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(RingDonuts, 0, "Battered Ring");  				AddMenuItem(RingDonuts, 1, "$14"); 	RingDonutsPrecios[0] = 14;
	AddMenuItem(RingDonuts, 0, "Ring Donuts");  				AddMenuItem(RingDonuts, 1, "$15"); 	RingDonutsPrecios[1] = 15;
	AddMenuItem(RingDonuts, 0, "Especial Ring");				AddMenuItem(RingDonuts, 1, "$18"); 	RingDonutsPrecios[2] = 18;
	AddMenuItem(RingDonuts, 0, "Ring Dung del D\xa2a"); 		AddMenuItem(RingDonuts, 1, "$22"); 	RingDonutsPrecios[3] = 22;
	AddMenuItem(RingDonuts, 0, "Cena de Pareja");				AddMenuItem(RingDonuts, 1, "$28");	RingDonutsPrecios[4] = 28;
	AddMenuItem(RingDonuts, 0, "El especial del Chef");			AddMenuItem(RingDonuts, 1, "$45");	RingDonutsPrecios[5] = 45;
	AddMenuItem(RingDonuts, 0, "Completa de Rings");			AddMenuItem(RingDonuts, 1, "$30");	RingDonutsPrecios[6] = 30;

    SupermercadoArticulos	 = CreateMenu("Super Mercado San Fierro", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(SupermercadoArticulos, 0, "Pack 6 Cervezas");  			AddMenuItem(SupermercadoArticulos, 1, "$50"); 	SupermercadoArticulosPrecios[0] = 50;
	AddMenuItem(SupermercadoArticulos, 0, "5 Vodkas");	  				AddMenuItem(SupermercadoArticulos, 1, "$100"); 	SupermercadoArticulosPrecios[1] = 100;
	AddMenuItem(SupermercadoArticulos, 0, "5 Refrescos");				AddMenuItem(SupermercadoArticulos, 1, "$70"); 	SupermercadoArticulosPrecios[2] = 70;
	AddMenuItem(SupermercadoArticulos, 0, "Pollo Crudo");				AddMenuItem(SupermercadoArticulos, 1, "$110"); 	SupermercadoArticulosPrecios[3] = 110;
	AddMenuItem(SupermercadoArticulos, 0, "Papas"); 					AddMenuItem(SupermercadoArticulos, 1, "$150"); 	SupermercadoArticulosPrecios[4] = 150;
	AddMenuItem(SupermercadoArticulos, 0, "Arroz"); 					AddMenuItem(SupermercadoArticulos, 1, "$250"); 	SupermercadoArticulosPrecios[5] = 250;


//=======================================================================================
//=======================================================================================
/////////// MENU ARMAS

	// Armas_Clases [10][25];
	// Armas_Nombre	[10][11][25];
	// Armas_ID		[10][11];

//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde
//		\xa6 = O Con tílde

	new SumarPrecios = 4;
	// Básicos I				- 01
    Armas_Clases    [0] 	= "Basicos I";
    {
	    Armas_Nombre	[0][0] 	= "01-  Cuchillo"; 			Armas_ID		[0][0]  = 4;	Armas_Precios_Num	[0][0]	= 75 * SumarPrecios;	Armas_Municion[0][0]	= 1;		format(Armas_Precios[0][0], 6, "$%i", Armas_Precios_Num[0][0] * Armas_Municion[0][0]);			// 00   04 - Knife
	    Armas_Nombre	[0][1] 	= "02-  Palo de Golf";		Armas_ID		[0][1]  = 2;	Armas_Precios_Num	[0][1]	= 75 * SumarPrecios;	Armas_Municion[0][1]	= 1;		format(Armas_Precios[0][1], 6, "$%i", Armas_Precios_Num[0][1] * Armas_Municion[0][1]);			// 01   02 - Golf Club
	    Armas_Nombre	[0][2] 	= "03-  Baston Normal"; 	Armas_ID		[0][2]  = 5;	Armas_Precios_Num	[0][2]	= 50 * SumarPrecios;	Armas_Municion[0][2]	= 1;		format(Armas_Precios[0][2], 6, "$%i", Armas_Precios_Num[0][2] * Armas_Municion[0][2]);			// 02	15 - Cane
	    Armas_Nombre	[0][3] 	= "04-  Pala"; 				Armas_ID		[0][3]  = 6;	Armas_Precios_Num	[0][3]	= 75 * SumarPrecios;	Armas_Municion[0][3]	= 1;		format(Armas_Precios[0][3], 6, "$%i", Armas_Precios_Num[0][3] * Armas_Municion[0][3]);			// 03   06 - Shovel
	    Armas_Nombre	[0][4] 	= "05-  Taco de Billar"; 	Armas_ID		[0][4]  = 7;	Armas_Precios_Num	[0][4]	= 75 * SumarPrecios;	Armas_Municion[0][4]	= 1;		format(Armas_Precios[0][4], 6, "$%i", Armas_Precios_Num[0][4] * Armas_Municion[0][4]);			// 04   07 - Pool Cue
	}
	// Básicos II  			- 02
    Armas_Clases    [1] 	= "Basicos II";
    {
	    Armas_Nombre	[1][0] 	= "01-  Bate"; 					Armas_ID		[1][0]  = 5;	Armas_Precios_Num	[1][0]	= 60 * SumarPrecios;	Armas_Municion[1][0]	= 1;		format(Armas_Precios[1][0], 6, "$%i", Armas_Precios_Num[1][0] * Armas_Municion[1][0]);			// 01   05 - Baseball Bat
	    Armas_Nombre	[1][1] 	= "02-  Manopla";				Armas_ID		[1][1]  = 1;	Armas_Precios_Num	[1][1]	= 75 * SumarPrecios;	Armas_Municion[1][1]	= 1;		format(Armas_Precios[1][1], 6, "$%i", Armas_Precios_Num[1][1] * Armas_Municion[1][1]);			// 02	01 - Brass Knuckles
	    Armas_Nombre	[1][2] 	= "03-  Katana"; 				Armas_ID		[1][2]  = 8;	Armas_Precios_Num	[1][2]	= 50 * SumarPrecios;	Armas_Municion[1][2]	= 1;		format(Armas_Precios[1][2], 6, "$%i", Armas_Precios_Num[1][2] * Armas_Municion[1][2]);			// 03   03 - 08 - Katana
	    Armas_Nombre	[1][3] 	= "04-  Motocierra"; 			Armas_ID		[1][3]  = 9;	Armas_Precios_Num	[1][3]	= 75 * SumarPrecios;	Armas_Municion[1][3]	= 1;		format(Armas_Precios[1][3], 6, "$%i", Armas_Precios_Num[1][3] * Armas_Municion[1][3]);			// 04   09 - Chainsaw
    }
    // Pistolas  			- 03
    Armas_Clases    [2] 	= "Pistolas";
    {
		Armas_Nombre	[2][0] 	= "01-  9mm Plateada"; 			Armas_ID		[2][0]  = 22;	Armas_Precios_Num	[2][0]	= 7 * SumarPrecios;	Armas_Municion[2][0]	= 60;		format(Armas_Precios[2][0], 6, "$%i", Armas_Precios_Num[2][0] * Armas_Municion[2][0]);			// 00	22 - 9mm
		Armas_Nombre	[2][1] 	= "02-  Silenciada 9mm"; 		Armas_ID		[2][1]  = 23;	Armas_Precios_Num	[2][1]	= 6 * SumarPrecios;	Armas_Municion[2][1]	= 60;		format(Armas_Precios[2][1], 6, "$%i", Armas_Precios_Num[2][1] * Armas_Municion[2][1]);			// 01	23 - Silenced 9mm
		Armas_Nombre	[2][2] 	= "03-  Desert Eagle Plateada"; Armas_ID		[2][2]  = 24;	Armas_Precios_Num	[2][2]	= 10 * SumarPrecios;	Armas_Municion[2][2]	= 50;		format(Armas_Precios[2][2], 6, "$%i", Armas_Precios_Num[2][2] * Armas_Municion[2][2]);			// 02	24 - Desert Eagle
    }
    // Escopetas  			- 04
    Armas_Clases    [3] 	= "Escopetas";
    {
		Armas_Nombre	[3][0] 	= "01-  Escopeta Normal"; 		Armas_ID		[3][0]  = 25;	Armas_Precios_Num	[3][0]	= 9 * SumarPrecios;	Armas_Municion[3][0]	= 25;		format(Armas_Precios[3][0], 6, "$%i", Armas_Precios_Num[3][0] * Armas_Municion[3][0]);		// 00	25 - Shotgun
		Armas_Nombre	[3][1] 	= "02-  Escopeta de Combate";	Armas_ID		[3][1]  = 27;	Armas_Precios_Num	[3][1]	= 18 * SumarPrecios;	Armas_Municion[3][1]	= 40;		format(Armas_Precios[3][1], 6, "$%i", Armas_Precios_Num[3][1] * Armas_Municion[3][1]);		// 01	27 - Combat Shotgun
    }
    // Sub-Fusiles 			- 05
    Armas_Clases    [4] 	= "Sub-Fusiles";
    {
		Armas_Nombre	[4][0] 	= "01-  MP5";Armas_ID		[4][0]  = 29;	Armas_Precios_Num	[4][0]	= 7 * SumarPrecios;	Armas_Municion[4][0]	= 200;		format(Armas_Precios[4][0], 6, "$%i", Armas_Precios_Num[4][0] * Armas_Municion[4][0]);			// 00  29 - MP5
    }
    // Fusiles              - 06
    Armas_Clases    [5] 	= "Fusiles";
    {
		Armas_Nombre	[5][0] 	= "01-  AK47";				 	Armas_ID		[5][0]  = 30;	Armas_Precios_Num	[5][0]	= 6 * SumarPrecios;	Armas_Municion[5][0]	= 150;		format(Armas_Precios[5][0], 6, "$%i", Armas_Precios_Num[5][0] * Armas_Municion[5][0]);			// 00	 30 - AK47
		Armas_Nombre	[5][1] 	= "02-  M4"; 					Armas_ID		[5][1]  = 31;	Armas_Precios_Num	[5][1]	= 8 * SumarPrecios;	Armas_Municion[5][1]	= 150;		format(Armas_Precios[5][1], 6, "$%i", Armas_Precios_Num[5][1] * Armas_Municion[5][1]);			// 01	 31 - M4
    }
    // Rifles               - 07
    Armas_Clases    [6] 	= "Rifles";
    {
		Armas_Nombre	[6][0] 	= "01-  Rifle Corto Alcance";	Armas_ID		[6][0]  = 33;	Armas_Precios_Num	[6][0]	= 20 * SumarPrecios;	Armas_Municion[6][0]	= 100;		format(Armas_Precios[6][0], 6, "$%i", Armas_Precios_Num[6][0] * Armas_Municion[6][0]);			// 00  33 - Country Rifle
		Armas_Nombre	[6][1] 	= "02-  Rifle Largo Alcance"; 	Armas_ID		[6][1]  = 34;	Armas_Precios_Num	[6][1]	= 22 * SumarPrecios;	Armas_Municion[6][1]	= 100;		format(Armas_Precios[6][1], 6, "$%i", Armas_Precios_Num[6][1] * Armas_Municion[6][1]);			// 01  34 - Sniper Rifle
	}
    // Alto Riesgo          - 08
    Armas_Clases    [7] 	= "Alto Riesgo";
    {
		Armas_Nombre	[7][0] 	= "01-  Granadas"; 				Armas_ID		[7][0]  = 16;	Armas_Precios_Num	[7][0]	= 9 * SumarPrecios;	Armas_Municion[7][0]	= 60;		format(Armas_Precios[7][0], 6, "$%i", Armas_Precios_Num[7][0] *	Armas_Municion[7][0]);			// 00	16 - Grenade
		Armas_Nombre	[7][1] 	= "02-  Molotovs"; 				Armas_ID		[7][1]  = 18;	Armas_Precios_Num	[7][1]	= 10 * SumarPrecios;	Armas_Municion[7][1]= 70;		format(Armas_Precios[7][1], 6, "$%i", Armas_Precios_Num[7][1] * Armas_Municion[7][1]);			// 01	18 - Molotov Cocktail
		Armas_Nombre	[7][2] 	= "03-  Extintor"; 				Armas_ID		[7][2]  = 42;	Armas_Precios_Num	[7][2]	= 1 * SumarPrecios;	Armas_Municion[7][2]	= 250;		format(Armas_Precios[7][2], 6, "$%i", Armas_Precios_Num[7][2] * Armas_Municion[7][2]);			// 02	42 - Fire Extinguisher
    }
    // Otros                - 09
    Armas_Clases    [8] 	= "Otros";
    {
		Armas_Nombre	[8][0] 	= "01-  Spray de Grafitis"; 	Armas_ID		[8][0]  = 41;	Armas_Precios_Num	[8][0]	= 5 * SumarPrecios;	Armas_Municion[8][0]	= 100;		format(Armas_Precios[8][0], 6, "$%i", Armas_Precios_Num[8][0] * Armas_Municion[8][0]);				// 00   41 - Spraycan
		Armas_Nombre	[8][1] 	= "04-  Chaleco"; 				Armas_ID		[8][1]  = 0;	Armas_Precios_Num	[8][1]	= 150 * SumarPrecios;	Armas_Municion[8][1]	= 1;		format(Armas_Precios[8][1], 6, "$%i", Armas_Precios_Num[8][1] * Armas_Municion[8][1]);			// 01   00 - Chaleco
		Armas_Nombre	[8][2] 	= "03-  Paraca\xa2das"; 		Armas_ID		[8][2]  = 46;	Armas_Precios_Num	[8][2]	= 75 * SumarPrecios;	Armas_Municion[8][2]	= 1;		format(Armas_Precios[8][2], 6, "$%i", Armas_Precios_Num[8][2] * Armas_Municion[8][2]);			// 02   46 - Parachute
    }

    // Menu prncipal
	Menu_Principal_Armas = CreateMenu("Menu Principal", 2, 200.0, 100.0, 150.0, 150.0);
	SetMenuColumnHeader(Menu_Principal_Armas, 0, "ID");
	SetMenuColumnHeader(Menu_Principal_Armas, 1, "Clases");

	AddMenuItem(Menu_Principal_Armas, 0, "01-");
	AddMenuItem(Menu_Principal_Armas, 0, "02-");
	AddMenuItem(Menu_Principal_Armas, 0, "03-");
	AddMenuItem(Menu_Principal_Armas, 0, "04-");
	AddMenuItem(Menu_Principal_Armas, 0, "05-");
	AddMenuItem(Menu_Principal_Armas, 0, "06-");
	AddMenuItem(Menu_Principal_Armas, 0, "07-");
	AddMenuItem(Menu_Principal_Armas, 0, "08-");
	AddMenuItem(Menu_Principal_Armas, 0, "09-");

	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [0]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [1]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [2]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [3]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [4]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [5]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [6]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [7]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [8]);

	// Básico I    		- 01
	Menues_Armas					[0] = CreateMenu("01- Basico I", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[0], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[0], 1, "Precio");

	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][0]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][0]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][1]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][1]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][2]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][2]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][3]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][3]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][4]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][4]);

	// Básico II 		- 02
   	Menues_Armas					[1] = CreateMenu("02- Basico II", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[1], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[1], 1, "Precio");

	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][0]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][0]);
	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][1]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][1]);
	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][2]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][2]);
	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][3]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][3]);

	// Pistolas  			- 03
   	Menues_Armas					[2] = CreateMenu("03- Pistolas", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[2], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[2], 1, "Precio");

	AddMenuItem(Menues_Armas[2], 0, Armas_Nombre		[2][0]);  	AddMenuItem(Menues_Armas[2], 1, Armas_Precios	[2][0]);
	AddMenuItem(Menues_Armas[2], 0, Armas_Nombre		[2][1]);  	AddMenuItem(Menues_Armas[2], 1, Armas_Precios	[2][1]);
	AddMenuItem(Menues_Armas[2], 0, Armas_Nombre		[2][2]);  	AddMenuItem(Menues_Armas[2], 1, Armas_Precios	[2][2]);

    // Escopetas  			- 04
   	Menues_Armas					[3] = CreateMenu("04- Escopetas", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[3], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[3], 1, "Precio");

	AddMenuItem(Menues_Armas[3], 0, Armas_Nombre		[3][0]);  	AddMenuItem(Menues_Armas[3], 1, Armas_Precios	[3][0]);
	AddMenuItem(Menues_Armas[3], 0, Armas_Nombre		[3][1]);  	AddMenuItem(Menues_Armas[3], 1, Armas_Precios	[3][1]);

    // Sub-Fusiles 			- 05
   	Menues_Armas					[4] = CreateMenu("05- Sub-Fusiles", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[4], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[4], 1, "Precio");

	AddMenuItem(Menues_Armas[4], 0, Armas_Nombre		[4][0]);  	AddMenuItem(Menues_Armas[4], 1, Armas_Precios	[4][0]);

    // Fusiles              - 06
   	Menues_Armas					[5] = CreateMenu("06- Fusiles", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[5], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[5], 1, "Precio");

	AddMenuItem(Menues_Armas[5], 0, Armas_Nombre		[5][0]);  	AddMenuItem(Menues_Armas[5], 1, Armas_Precios	[5][0]);
	AddMenuItem(Menues_Armas[5], 0, Armas_Nombre		[5][1]);  	AddMenuItem(Menues_Armas[5], 1, Armas_Precios	[5][1]);

    // Rifles               - 07
   	Menues_Armas					[6] = CreateMenu("07- Rifles", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[6], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[6], 1, "Precio");

	AddMenuItem(Menues_Armas[6], 0, Armas_Nombre		[6][0]);  	AddMenuItem(Menues_Armas[6], 1, Armas_Precios	[6][0]);
	AddMenuItem(Menues_Armas[6], 0, Armas_Nombre		[6][1]);  	AddMenuItem(Menues_Armas[6], 1, Armas_Precios	[6][1]);

    // Alto Riesgo          - 08
  	Menues_Armas					[7] = CreateMenu("08- Armas de Alto Riesgo", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[7], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[7], 1, "Precio");

	AddMenuItem(Menues_Armas[7], 0, Armas_Nombre		[7][0]);  	AddMenuItem(Menues_Armas[7], 1, Armas_Precios	[7][0]);
	AddMenuItem(Menues_Armas[7], 0, Armas_Nombre		[7][1]);  	AddMenuItem(Menues_Armas[7], 1, Armas_Precios	[7][1]);
	AddMenuItem(Menues_Armas[7], 0, Armas_Nombre		[7][2]);  	AddMenuItem(Menues_Armas[7], 1, Armas_Precios	[7][2]);

     // Otros                - 09
  	Menues_Armas					[8] = CreateMenu("09- Otros", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[8], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[8], 1, "Precio");

	AddMenuItem(Menues_Armas[8], 0, Armas_Nombre		[8][0]);  	AddMenuItem(Menues_Armas[8], 1, Armas_Precios	[8][0]);
	AddMenuItem(Menues_Armas[8], 0, Armas_Nombre		[8][1]);  	AddMenuItem(Menues_Armas[8], 1, Armas_Precios	[8][1]);
	AddMenuItem(Menues_Armas[8], 0, Armas_Nombre		[8][2]);  	AddMenuItem(Menues_Armas[8], 1, Armas_Precios	[8][2]);
}
public CleanDataDeath(playerid)
{
    StopAudioStreamForPlayer(playerid);
	PlayersData[playerid][IsPlayerInBizz] = false;
	PlayersData[playerid][IsPlayerInHouse] = false;
	PlayersData[playerid][IsPlayerInBank] = false;
	PlayersData[playerid][InLocal] = -1;

	PlayersDataOnline[playerid][JobBonus] = false;
	PlayersDataOnline[playerid][IsTeazer] = false;
	PlayersData[playerid][MyBonus] = false;
	PlayersData[playerid][IsPlayerInVehInt] = false;
	DisablePlayerCheckpoint(playerid);
	PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
	PlayersDataOnline[playerid][AfterMenuRow] = 0;
	SetPlayerDrunkLevel(playerid, 0);

	new CallID;
	for (new i = 0; i <= 2;i++)
	{
		CallID = IsFoundCall(PlayersData[playerid][Phone], i);
		if ( CallID != -1 )
		{
			RemoveCallPublics(CallID, i);
		}
		if ( i <= 1 )
		{
			CallID = IsFoundCallSAMD(PlayersData[playerid][Phone], 1, 0);
			if ( CallID != -1 )
			{
				RemoveCallSAMD(CallID, 0);
			}
			CallID = IsFoundCallSAMD(PlayersData[playerid][Phone], 1, 1);
			if ( CallID != -1 )
			{
				RemoveCallSAMD(CallID, 1);
			}
		}
	}
}
public SetMoneyExtorsion(bizzid, money)
{
    if ( strlen(NegociosData[bizzid][Extorsion]) != 2 )
    {
		NegociosData[bizzid][DepositoExtorsion] = NegociosData[bizzid][DepositoExtorsion] + (money / 5);
	    NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] + (money - (money / 5) );
    }
    else
    {
        NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] + money;
	}
	NegociosData[bizzid][Materiales] = NegociosData[bizzid][Materiales] - 2;
}
public PlayPlayerStreamSound(playerid, soundid)
{
	new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) )
		{
			if ( IsPlayerInRangeOfPoint(i,
			30.0,   				// Radio del sonido
			PlayerPos[0],  			// Coordenadas X
			PlayerPos[1],      		// Coordenadas Y
			PlayerPos[2]) )			// Coordenadas Z
			{
				PlayerPlaySound(i, soundid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
			}
		}
	}
	return 1;
}
public PlayStreamSound(Float:x, Float:y, Float:z, Float:Ratio, soundid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) )
		{
			if ( IsPlayerInRangeOfPoint(i,
			Ratio,   				// Radio del sonido
			x,            			// Coordenadas X
			y,              		// Coordenadas Y
			z) )           			// Coordenadas Z
			{
				PlayerPlaySound(i, soundid, x, y, z);
			}
		}
	}
	return 1;
}
public LoadAllAnims()
{
	//////	ANIMACIONES
	// ATTRACTORS - 2
	ATTRACTORS_ANIMATIONS [0]   = "Stepsit_in";
	ATTRACTORS_ANIMATIONS [1]   = "Stepsit_loop";
	ATTRACTORS_ANIMATIONS [2]   = "Stepsit_out";
	// BAR - 11
	BAR_ANIMATIONS[0]   = "Barcustom_get";
	BAR_ANIMATIONS[1]   = "Barcustom_loop";
	BAR_ANIMATIONS[2]   = "Barcustom_order";
	BAR_ANIMATIONS[3]   = "BARman_idle";
	BAR_ANIMATIONS[4]   = "Barserve_bottle";
	BAR_ANIMATIONS[5]   = "Barserve_give";
	BAR_ANIMATIONS[6]   = "Barserve_glass";
	BAR_ANIMATIONS[7]   = "Barserve_in";
	BAR_ANIMATIONS[8]   = "Barserve_loop";
	BAR_ANIMATIONS[9]   = "Barserve_order";
	BAR_ANIMATIONS[10]   = "dnk_stndF_loop";
	BAR_ANIMATIONS[11]   = "dnk_stndM_loop";
	// BAT - 10
	BAT_ANIMATIONS [0]   = "Bat_1";
	BAT_ANIMATIONS [1]   = "Bat_2";
	BAT_ANIMATIONS [2]   = "Bat_3";
	BAT_ANIMATIONS [3]   = "Bat_4";
	BAT_ANIMATIONS [4]   = "Bat_block";
	BAT_ANIMATIONS [5]   = "Bat_Hit_1";
	BAT_ANIMATIONS [6]   = "Bat_Hit_2";
	BAT_ANIMATIONS [7]   = "Bat_Hit_3";
	BAT_ANIMATIONS [8]   = "Bat_IDLE";
	BAT_ANIMATIONS [9]   = "Bat_M";
	BAT_ANIMATIONS [10]   = "BAT_PART";
	// FIRE - 12
	FIRE_ANIMATIONS [0]   = "BD_Fire1";
	FIRE_ANIMATIONS [1]   = "BD_Fire2";
	FIRE_ANIMATIONS [2]   = "BD_Fire3";
	FIRE_ANIMATIONS [3]   = "BD_GF_Wave";
	FIRE_ANIMATIONS [4]   = "BD_Panic_01";
	FIRE_ANIMATIONS [5]   = "BD_Panic_02";
	FIRE_ANIMATIONS [6]   = "BD_Panic_03";
	FIRE_ANIMATIONS [7]   = "BD_Panic_04";
	FIRE_ANIMATIONS [8]   = "BD_Panic_Loop";
	FIRE_ANIMATIONS [9]   = "Grlfrd_Kiss_03";
	FIRE_ANIMATIONS [10]   = "M_smklean_loop";
	FIRE_ANIMATIONS [11]   = "Playa_Kiss_03";
	FIRE_ANIMATIONS [12]   = "wash_up";
	// PLAYA - 4
	PLAYA_ANIMATIONS [0]   = "bather";
	PLAYA_ANIMATIONS [1]   = "Lay_Bac_Loop";
	PLAYA_ANIMATIONS [2]   = "ParkSit_M_loop";
	PLAYA_ANIMATIONS [3]   = "ParkSit_W_loop";
	PLAYA_ANIMATIONS [4]   = "SitnWait_loop_W";
	// GYM - 6
	GYM_ANIMATIONS [0]   = "gym_bp_celebrate";
	GYM_ANIMATIONS [1]   = "gym_bp_down";
	GYM_ANIMATIONS [2]   = "gym_bp_getoff";
	GYM_ANIMATIONS [3]   = "gym_bp_geton";
	GYM_ANIMATIONS [4]   = "gym_bp_up_A";
	GYM_ANIMATIONS [5]   = "gym_bp_up_B";
	GYM_ANIMATIONS [6]   = "gym_bp_up_smooth";
	// BFINJECT - 3
	BFINJECT_ANIMATIONS [0]   = "BF_getin_LHS";
	BFINJECT_ANIMATIONS [1]   = "BF_getin_RHS";
	BFINJECT_ANIMATIONS [2]   = "BF_getout_LHS";
	BFINJECT_ANIMATIONS [3]   = "BF_getout_RHS";
	// BICID - 18
	BICID_ANIMATIONS [0]   = "BIKEd_Back";
	BICID_ANIMATIONS [1]   = "BIKEd_drivebyFT";
	BICID_ANIMATIONS [2]   = "BIKEd_drivebyLHS";
	BICID_ANIMATIONS [3]   = "BIKEd_drivebyRHS";
	BICID_ANIMATIONS [4]   = "BIKEd_Fwd";
	BICID_ANIMATIONS [5]   = "BIKEd_getoffBACK";
	BICID_ANIMATIONS [6]   = "BIKEd_getoffLHS";
	BICID_ANIMATIONS [7]   = "BIKEd_getoffRHS";
	BICID_ANIMATIONS [8]   = "BIKEd_hit";
	BICID_ANIMATIONS [9]   = "BIKEd_jumponL";
	BICID_ANIMATIONS [10]   = "BIKEd_jumponR";
	BICID_ANIMATIONS [11]   = "BIKEd_kick";
	BICID_ANIMATIONS [12]   = "BIKEd_Left";
	BICID_ANIMATIONS [13]   = "BIKEd_passenger";
	BICID_ANIMATIONS [14]   = "BIKEd_pushes";
	BICID_ANIMATIONS [15]   = "BIKEd_Ride";
	BICID_ANIMATIONS [16]   = "BIKEd_Right";
	BICID_ANIMATIONS [17]   = "BIKEd_shuffle";
	BICID_ANIMATIONS [18]   = "BIKEd_Still";
	// BICIH - 17
	BICIH_ANIMATIONS [0]   = "BIKEh_Back";
	BICIH_ANIMATIONS [1]   = "BIKEh_drivebyFT";
	BICIH_ANIMATIONS [2]   = "BIKEh_drivebyLHS";
	BICIH_ANIMATIONS [3]   = "BIKEh_drivebyRHS";
	BICIH_ANIMATIONS [4]   = "BIKEh_Fwd";
	BICIH_ANIMATIONS [5]   = "BIKEh_getoffBACK";
	BICIH_ANIMATIONS [6]   = "BIKEh_getoffLHS";
	BICIH_ANIMATIONS [7]   = "BIKEh_getoffRHS";
	BICIH_ANIMATIONS [8]   = "BIKEh_hit";
	BICIH_ANIMATIONS [9]   = "BIKEh_jumponL";
	BICIH_ANIMATIONS [10]   = "BIKEh_jumponR";
	BICIH_ANIMATIONS [11]   = "BIKEh_kick";
	BICIH_ANIMATIONS [12]   = "BIKEh_Left";
	BICIH_ANIMATIONS [13]   = "BIKEh_passenger";
	BICIH_ANIMATIONS [14]   = "BIKEh_pushes";
	BICIH_ANIMATIONS [15]   = "BIKEh_Ride";
	BICIH_ANIMATIONS [16]   = "BIKEh_Right";
	BICIH_ANIMATIONS [17]   = "BIKEh_Still";
	// BICIL - 8
	BICIL_ANIMATIONS [0]   = "bk_blnce_in";
	BICIL_ANIMATIONS [1]   = "bk_blnce_out";
	BICIL_ANIMATIONS [2]   = "bk_jmp";
	BICIL_ANIMATIONS [3]   = "bk_rdy_in";
	BICIL_ANIMATIONS [4]   = "bk_rdy_out";
	BICIL_ANIMATIONS [5]   = "struggle_cesar";
	BICIL_ANIMATIONS [6]   = "struggle_driver";
	BICIL_ANIMATIONS [7]   = "truck_driver";
	BICIL_ANIMATIONS [8]   = "truck_getin";
	// BICIS - 19
	BICIS_ANIMATIONS [0]   = "BIKEs_Back";
	BICIS_ANIMATIONS [1]   = "BIKEs_drivebyFT";
	BICIS_ANIMATIONS [2]   = "BIKEs_drivebyLHS";
	BICIS_ANIMATIONS [3]   = "BIKEs_drivebyRHS";
	BICIS_ANIMATIONS [4]   = "BIKEs_Fwd";
	BICIS_ANIMATIONS [5]   = "BIKEs_getoffBACK";
	BICIS_ANIMATIONS [6]   = "BIKEs_getoffLHS";
	BICIS_ANIMATIONS [7]   = "BIKEs_getoffRHS";
	BICIS_ANIMATIONS [8]   = "BIKEs_hit";
	BICIS_ANIMATIONS [9]   = "BIKEs_jumponL";
	BICIS_ANIMATIONS [10]   = "BIKEs_jumponR";
	BICIS_ANIMATIONS [11]   = "BIKEs_kick";
	BICIS_ANIMATIONS [12]   = "BIKEs_Left";
	BICIS_ANIMATIONS [13]   = "BIKEs_passenger";
	BICIS_ANIMATIONS [14]   = "BIKEs_pushes";
	BICIS_ANIMATIONS [15]   = "BIKEs_Ride";
	BICIS_ANIMATIONS [16]   = "BIKEs_Right";
	BICIS_ANIMATIONS [17]   = "BIKEs_Snatch_L";
	BICIS_ANIMATIONS [18]   = "BIKEs_Snatch_R";
	BICIS_ANIMATIONS [19]   = "BIKEs_Still";
	// BICIV - 17
	BICIV_ANIMATIONS [0]   = "BIKEv_Back";
	BICIV_ANIMATIONS [1]   = "BIKEv_drivebyFT";
	BICIV_ANIMATIONS [2]   = "BIKEv_drivebyLHS";
	BICIV_ANIMATIONS [3]   = "BIKEv_drivebyRHS";
	BICIV_ANIMATIONS [4]   = "BIKEv_Fwd";
	BICIV_ANIMATIONS [5]   = "BIKEv_getoffBACK";
	BICIV_ANIMATIONS [6]   = "BIKEv_getoffLHS";
	BICIV_ANIMATIONS [7]   = "BIKEv_getoffRHS";
	BICIV_ANIMATIONS [8]   = "BIKEv_hit";
	BICIV_ANIMATIONS [9]   = "BIKEv_jumponL";
	BICIV_ANIMATIONS [10]   = "BIKEv_jumponR";
	BICIV_ANIMATIONS [11]   = "BIKEv_kick";
	BICIV_ANIMATIONS [12]   = "BIKEv_Left";
	BICIV_ANIMATIONS [13]   = "BIKEv_passenger";
	BICIV_ANIMATIONS [14]   = "BIKEv_pushes";
	BICIV_ANIMATIONS [15]   = "BIKEv_Ride";
	BICIV_ANIMATIONS [16]   = "BIKEv_Right";
	BICIV_ANIMATIONS [17]   = "BIKEv_Still";
	// BICI - 3
	BICI_ANIMATIONS [0]   = "Pass_Driveby_BWD";
	BICI_ANIMATIONS [1]   = "Pass_Driveby_FWD";
	BICI_ANIMATIONS [2]   = "Pass_Driveby_LHS";
	BICI_ANIMATIONS [3]   = "Pass_Driveby_RHS";
	// GOLPE - 11
	GOLPE_ANIMATIONS [0]   = "BJ_COUCH_START_W";
	GOLPE_ANIMATIONS [1]   = "BJ_COUCH_LOOP_W";
	GOLPE_ANIMATIONS [2]   = "BJ_COUCH_END_W";
	GOLPE_ANIMATIONS [3]   = "BJ_COUCH_START_P";
	GOLPE_ANIMATIONS [4]   = "BJ_COUCH_LOOP_P";
	GOLPE_ANIMATIONS [5]   = "BJ_COUCH_END_P";
	GOLPE_ANIMATIONS [6]   = "BJ_STAND_START_W";
	GOLPE_ANIMATIONS [7]   = "BJ_STAND_LOOP_W";
	GOLPE_ANIMATIONS [8]   = "BJ_STAND_END_W";
	GOLPE_ANIMATIONS [9]   = "BJ_STAND_START_P";
	GOLPE_ANIMATIONS [10]   = "BJ_STAND_LOOP_P";
	GOLPE_ANIMATIONS [11]   = "BJ_STAND_END_P";
	// BMX - 17
	BMX_ANIMATIONS [0]   = "BMX_back";
	BMX_ANIMATIONS [1]   = "BMX_bunnyhop";
	BMX_ANIMATIONS [2]   = "BMX_drivebyFT";
	BMX_ANIMATIONS [3]   = "BMX_driveby_LHS";
	BMX_ANIMATIONS [4]   = "BMX_driveby_RHS";
	BMX_ANIMATIONS [5]   = "BMX_fwd";
	BMX_ANIMATIONS [6]   = "BMX_getoffBACK";
	BMX_ANIMATIONS [7]   = "BMX_getoffLHS";
	BMX_ANIMATIONS [8]   = "BMX_getoffRHS";
	BMX_ANIMATIONS [9]   = "BMX_jumponL";
	BMX_ANIMATIONS [10]   = "BMX_jumponR";
	BMX_ANIMATIONS [11]   = "BMX_Left";
	BMX_ANIMATIONS [12]   = "BMX_pedal";
	BMX_ANIMATIONS [13]   = "BMX_pushes";
	BMX_ANIMATIONS [14]   = "BMX_Ride";
	BMX_ANIMATIONS [15]   = "BMX_Right";
	BMX_ANIMATIONS [16]   = "BMX_sprint";
	BMX_ANIMATIONS [17]   = "BMX_still";
	// BOMBER - 5
	BOMBER_ANIMATIONS [0]   = "BOM_Plant";
	BOMBER_ANIMATIONS [1]   = "BOM_Plant_2Idle";
	BOMBER_ANIMATIONS [2]   = "BOM_Plant_Crouch_In";
	BOMBER_ANIMATIONS [3]   = "BOM_Plant_Crouch_Out";
	BOMBER_ANIMATIONS [4]   = "BOM_Plant_In";
	BOMBER_ANIMATIONS [5]   = "BOM_Plant_Loop";
	// BOX - 9
	BOX_ANIMATIONS [0]   = "boxhipin";
	BOX_ANIMATIONS [1]   = "boxhipup";
	BOX_ANIMATIONS [2]   = "boxshdwn";
	BOX_ANIMATIONS [3]   = "boxshup";
	BOX_ANIMATIONS [4]   = "bxhipwlk";
	BOX_ANIMATIONS [5]   = "bxhwlki";
	BOX_ANIMATIONS [6]   = "bxshwlk";
	BOX_ANIMATIONS [7]   = "bxshwlki";
	BOX_ANIMATIONS [8]   = "bxwlko";
	BOX_ANIMATIONS [9]   = "catch_box";
	// BALL - 40
	BALL_ANIMATIONS [0]   = "BBALL_def_jump_shot";
	BALL_ANIMATIONS [1]   = "BBALL_def_loop";
	BALL_ANIMATIONS [2]   = "BBALL_def_stepL";
	BALL_ANIMATIONS [3]   = "BBALL_def_stepR";
	BALL_ANIMATIONS [4]   = "BBALL_Dnk";
	BALL_ANIMATIONS [5]   = "BBALL_Dnk_Gli";
	BALL_ANIMATIONS [6]   = "BBALL_Dnk_Gli_O";
	BALL_ANIMATIONS [7]   = "BBALL_Dnk_Lnch";
	BALL_ANIMATIONS [8]   = "BBALL_Dnk_Lnch_O";
	BALL_ANIMATIONS [9]   = "BBALL_Dnk_Lnd";
	BALL_ANIMATIONS [10]   = "BBALL_Dnk_O";
	BALL_ANIMATIONS [11]   = "BBALL_idle";
	BALL_ANIMATIONS [12]   = "BBALL_idle2";
	BALL_ANIMATIONS [13]   = "BBALL_idle2_O";
	BALL_ANIMATIONS [14]   = "BBALL_idleloop";
	BALL_ANIMATIONS [15]   = "BBALL_idleloop_O";
	BALL_ANIMATIONS [16]   = "BBALL_idle_O";
	BALL_ANIMATIONS [17]   = "BBALL_Jump_Cancel";
	BALL_ANIMATIONS [18]   = "BBALL_Jump_Cancel_O";
	BALL_ANIMATIONS [19]   = "BBALL_Jump_End";
	BALL_ANIMATIONS [20]   = "BBALL_Jump_Shot";
	BALL_ANIMATIONS [21]   = "BBALL_Jump_Shot_O";
	BALL_ANIMATIONS [22]   = "BBALL_Net_Dnk_O";
	BALL_ANIMATIONS [23]   = "BBALL_pickup";
	BALL_ANIMATIONS [24]   = "BBALL_pickup_O";
	BALL_ANIMATIONS [25]   = "BBALL_react_miss";
	BALL_ANIMATIONS [26]   = "BBALL_react_score";
	BALL_ANIMATIONS [27]   = "BBALL_run";
	BALL_ANIMATIONS [28]   = "BBALL_run_O";
	BALL_ANIMATIONS [29]   = "BBALL_SkidStop_L";
	BALL_ANIMATIONS [30]   = "BBALL_SkidStop_L_O";
	BALL_ANIMATIONS [31]   = "BBALL_SkidStop_R";
	BALL_ANIMATIONS [32]   = "BBALL_SkidStop_R_O";
	BALL_ANIMATIONS [33]   = "BBALL_walk";
	BALL_ANIMATIONS [34]   = "BBALL_WalkStop_L";
	BALL_ANIMATIONS [35]   = "BBALL_WalkStop_L_O";
	BALL_ANIMATIONS [36]   = "BBALL_WalkStop_R";
	BALL_ANIMATIONS [37]   = "BBALL_WalkStop_R_O";
	BALL_ANIMATIONS [38]   = "BBALL_walk_O";
	BALL_ANIMATIONS [39]   = "BBALL_walk_start";
	BALL_ANIMATIONS [40]   = "BBALL_walk_start_O";
	// BUDDY - 4
	BUDDY_ANIMATIONS [0]   = "buddy_crouchfire";
	BUDDY_ANIMATIONS [1]   = "buddy_crouchreload";
	BUDDY_ANIMATIONS [2]   = "buddy_fire";
	BUDDY_ANIMATIONS [3]   = "buddy_fire_poor";
	BUDDY_ANIMATIONS [4]   = "buddy_reload";
	// BUS - 8
	BUS_ANIMATIONS [0]   = "BUS_close";
	BUS_ANIMATIONS [1]   = "BUS_getin_LHS";
	BUS_ANIMATIONS [2]   = "BUS_getin_RHS";
	BUS_ANIMATIONS [3]   = "BUS_getout_LHS";
	BUS_ANIMATIONS [4]   = "BUS_getout_RHS";
	BUS_ANIMATIONS [5]   = "BUS_jacked_LHS";
	BUS_ANIMATIONS [6]   = "BUS_open";
	BUS_ANIMATIONS [7]   = "BUS_open_RHS";
	BUS_ANIMATIONS [8]   = "BUS_pullout_LHS";
	// CAM - 13
	CAM_ANIMATIONS [0]   = "camcrch_cmon";
	CAM_ANIMATIONS [1]   = "camcrch_idleloop";
	CAM_ANIMATIONS [2]   = "camcrch_stay";
	CAM_ANIMATIONS [3]   = "camcrch_to_camstnd";
	CAM_ANIMATIONS [4]   = "camstnd_cmon";
	CAM_ANIMATIONS [5]   = "camstnd_idleloop";
	CAM_ANIMATIONS [6]   = "camstnd_lkabt";
	CAM_ANIMATIONS [7]   = "camstnd_to_camcrch";
	CAM_ANIMATIONS [8]   = "piccrch_in";
	CAM_ANIMATIONS [9]   = "piccrch_out";
	CAM_ANIMATIONS [10]   = "piccrch_take";
	CAM_ANIMATIONS [11]   = "picstnd_in";
	CAM_ANIMATIONS [12]   = "picstnd_out";
	CAM_ANIMATIONS [13]   = "picstnd_take";
	// CAR - 10
	CAR_ANIMATIONS [0]   = "Fixn_Car_Loop";
	CAR_ANIMATIONS [1]   = "Fixn_Car_Out";
	CAR_ANIMATIONS [2]   = "flag_drop";
	CAR_ANIMATIONS [3]   = "Sit_relaxed";
	CAR_ANIMATIONS [4]   = "Tap_hand";
	CAR_ANIMATIONS [5]   = "Tyd2car_bump";
	CAR_ANIMATIONS [6]   = "Tyd2car_high";
	CAR_ANIMATIONS [7]   = "Tyd2car_low";
	CAR_ANIMATIONS [8]   = "Tyd2car_med";
	CAR_ANIMATIONS [9]   = "Tyd2car_TurnL";
	CAR_ANIMATIONS [10]   = "Tyd2car_TurnR";
	// CARRY - 6
	CARRY_ANIMATIONS [0]   = "crry_prtial";
	CARRY_ANIMATIONS [1]   = "liftup";
	CARRY_ANIMATIONS [2]   = "liftup05";
	CARRY_ANIMATIONS [3]   = "liftup105";
	CARRY_ANIMATIONS [4]   = "putdwn";
	CARRY_ANIMATIONS [5]   = "putdwn05";
	CARRY_ANIMATIONS [6]   = "putdwn105";
	// CARCHAT - 20
	CARCHAT_ANIMATIONS [0]   = "carfone_in";
	CARCHAT_ANIMATIONS [1]   = "carfone_loopA";
	CARCHAT_ANIMATIONS [2]   = "carfone_loopA_to_B";
	CARCHAT_ANIMATIONS [3]   = "carfone_loopB";
	CARCHAT_ANIMATIONS [4]   = "carfone_loopB_to_A";
	CARCHAT_ANIMATIONS [5]   = "carfone_out";
	CARCHAT_ANIMATIONS [6]   = "CAR_Sc1_BL";
	CARCHAT_ANIMATIONS [7]   = "CAR_Sc1_BR";
	CARCHAT_ANIMATIONS [8]   = "CAR_Sc1_FL";
	CARCHAT_ANIMATIONS [9]   = "CAR_Sc1_FR";
	CARCHAT_ANIMATIONS [10]   = "CAR_Sc2_FL";
	CARCHAT_ANIMATIONS [11]   = "CAR_Sc3_BR";
	CARCHAT_ANIMATIONS [12]   = "CAR_Sc3_FL";
	CARCHAT_ANIMATIONS [13]   = "CAR_Sc3_FR";
	CARCHAT_ANIMATIONS [14]   = "CAR_Sc4_BL";
	CARCHAT_ANIMATIONS [15]   = "CAR_Sc4_BR";
	CARCHAT_ANIMATIONS [16]   = "CAR_Sc4_FL";
	CARCHAT_ANIMATIONS [17]   = "CAR_Sc4_FR";
	CARCHAT_ANIMATIONS [18]   = "car_talkm_in";
	CARCHAT_ANIMATIONS [19]   = "car_talkm_loop";
	CARCHAT_ANIMATIONS [20]   = "car_talkm_out";
	// CASINO - 24
	CASINO_ANIMATIONS [0]   = "cards_in";
	CASINO_ANIMATIONS [1]   = "cards_loop";
	CASINO_ANIMATIONS [2]   = "cards_lose";
	CASINO_ANIMATIONS [3]   = "cards_out";
	CASINO_ANIMATIONS [4]   = "cards_pick_01";
	CASINO_ANIMATIONS [5]   = "cards_pick_02";
	CASINO_ANIMATIONS [6]   = "cards_raise";
	CASINO_ANIMATIONS [7]   = "cards_win";
	CASINO_ANIMATIONS [8]   = "dealone";
	CASINO_ANIMATIONS [9]   = "manwinb";
	CASINO_ANIMATIONS [10]   = "manwind";
	CASINO_ANIMATIONS [11]   = "Roulette_bet";
	CASINO_ANIMATIONS [12]   = "Roulette_in";
	CASINO_ANIMATIONS [13]   = "Roulette_loop";
	CASINO_ANIMATIONS [14]   = "Roulette_lose";
	CASINO_ANIMATIONS [15]   = "Roulette_out";
	CASINO_ANIMATIONS [16]   = "Roulette_win";
	CASINO_ANIMATIONS [17]   = "Slot_bet_01";
	CASINO_ANIMATIONS [18]   = "Slot_bet_02";
	CASINO_ANIMATIONS [19]   = "Slot_in";
	CASINO_ANIMATIONS [20]   = "Slot_lose_out";
	CASINO_ANIMATIONS [21]   = "Slot_Plyr";
	CASINO_ANIMATIONS [22]   = "Slot_wait";
	CASINO_ANIMATIONS [23]   = "Slot_win_out";
	CASINO_ANIMATIONS [24]   = "wof";
	// CHAINSAW - 10
	CHAINSAW_ANIMATIONS [0]   = "CSAW_1";
	CHAINSAW_ANIMATIONS [1]   = "CSAW_2";
	CHAINSAW_ANIMATIONS [2]   = "CSAW_3";
	CHAINSAW_ANIMATIONS [3]   = "CSAW_G";
	CHAINSAW_ANIMATIONS [4]   = "CSAW_Hit_1";
	CHAINSAW_ANIMATIONS [5]   = "CSAW_Hit_2";
	CHAINSAW_ANIMATIONS [6]   = "CSAW_Hit_3";
	CHAINSAW_ANIMATIONS [7]   = "csaw_part";
	CHAINSAW_ANIMATIONS [8]   = "IDLE_csaw";
	CHAINSAW_ANIMATIONS [9]   = "WEAPON_csaw";
	CHAINSAW_ANIMATIONS [10]   = "WEAPON_csawlo";
	// CHOPA - 17
	CHOPA_ANIMATIONS [0]   = "CHOPPA_back";
	CHOPA_ANIMATIONS [1]   = "CHOPPA_bunnyhop";
	CHOPA_ANIMATIONS [2]   = "CHOPPA_drivebyFT";
	CHOPA_ANIMATIONS [3]   = "CHOPPA_driveby_LHS";
	CHOPA_ANIMATIONS [4]   = "CHOPPA_driveby_RHS";
	CHOPA_ANIMATIONS [5]   = "CHOPPA_fwd";
	CHOPA_ANIMATIONS [6]   = "CHOPPA_getoffBACK";
	CHOPA_ANIMATIONS [7]   = "CHOPPA_getoffLHS";
	CHOPA_ANIMATIONS [8]   = "CHOPPA_getoffRHS";
	CHOPA_ANIMATIONS [9]   = "CHOPPA_jumponL";
	CHOPA_ANIMATIONS [10]   = "CHOPPA_jumponR";
	CHOPA_ANIMATIONS [11]   = "CHOPPA_Left";
	CHOPA_ANIMATIONS [12]   = "CHOPPA_pedal";
	CHOPA_ANIMATIONS [13]   = "CHOPPA_Pushes";
	CHOPA_ANIMATIONS [14]   = "CHOPPA_ride";
	CHOPA_ANIMATIONS [15]   = "CHOPPA_Right";
	CHOPA_ANIMATIONS [16]   = "CHOPPA_sprint";
	CHOPA_ANIMATIONS [17]   = "CHOPPA_Still";
	// CLOTHES - 12
	CLOTHES_ANIMATIONS [0]   = "CLO_Buy";
	CLOTHES_ANIMATIONS [1]   = "CLO_In";
	CLOTHES_ANIMATIONS [2]   = "CLO_Out";
	CLOTHES_ANIMATIONS [3]   = "CLO_Pose_Hat";
	CLOTHES_ANIMATIONS [4]   = "CLO_Pose_In";
	CLOTHES_ANIMATIONS [5]   = "CLO_Pose_In_O";
	CLOTHES_ANIMATIONS [6]   = "CLO_Pose_Legs";
	CLOTHES_ANIMATIONS [7]   = "CLO_Pose_Loop";
	CLOTHES_ANIMATIONS [8]   = "CLO_Pose_Out";
	CLOTHES_ANIMATIONS [9]   = "CLO_Pose_Out_O";
	CLOTHES_ANIMATIONS [10]   = "CLO_Pose_Shoes";
	CLOTHES_ANIMATIONS [11]   = "CLO_Pose_Torso";
	CLOTHES_ANIMATIONS [12]   = "CLO_Pose_Watch";
	// COACH - 5
	COACH_ANIMATIONS [0]   = "COACH_inL";
	COACH_ANIMATIONS [1]   = "COACH_inR";
	COACH_ANIMATIONS [2]   = "COACH_opnL";
	COACH_ANIMATIONS [3]   = "COACH_opnR";
	COACH_ANIMATIONS [4]   = "COACH_outL";
	COACH_ANIMATIONS [5]   = "COACH_outR";
	// COLT - 6
	COLT_ANIMATIONS [0]   = "2guns_crouchfire";
	COLT_ANIMATIONS [1]   = "colt45_crouchfire";
	COLT_ANIMATIONS [2]   = "colt45_crouchreload";
	COLT_ANIMATIONS [3]   = "colt45_fire";
	COLT_ANIMATIONS [4]   = "colt45_fire_2hands";
	COLT_ANIMATIONS [5]   = "colt45_reload";
	COLT_ANIMATIONS [6]   = "sawnoff_reload";
	// COP - 11
	COP_ANIMATIONS [0]   = "Copbrowse_in";
	COP_ANIMATIONS [1]   = "Copbrowse_loop";
	COP_ANIMATIONS [2]   = "Copbrowse_nod";
	COP_ANIMATIONS [3]   = "Copbrowse_out";
	COP_ANIMATIONS [4]   = "Copbrowse_shake";
	COP_ANIMATIONS [5]   = "Coplook_in";
	COP_ANIMATIONS [6]   = "Coplook_loop";
	COP_ANIMATIONS [7]   = "Coplook_nod";
	COP_ANIMATIONS [8]   = "Coplook_out";
	COP_ANIMATIONS [9]   = "Coplook_shake";
	COP_ANIMATIONS [10]   = "Coplook_think";
	COP_ANIMATIONS [11]   = "Coplook_watch";
	// COPD - 3
	COPD_ANIMATIONS [0]   = "COP_Dvby_B";
	COPD_ANIMATIONS [1]   = "COP_Dvby_FT";
	COPD_ANIMATIONS [2]   = "COP_Dvby_L";
	COPD_ANIMATIONS [3]   = "COP_Dvby_R";
	// CRACK - 9
	CRACK_ANIMATIONS [0]   = "Bbalbat_Idle_01";
	CRACK_ANIMATIONS [1]   = "Bbalbat_Idle_02";
	CRACK_ANIMATIONS [2]   = "crckdeth1";
	CRACK_ANIMATIONS [3]   = "crckdeth2";
	CRACK_ANIMATIONS [4]   = "crckdeth3";
	CRACK_ANIMATIONS [5]   = "crckdeth4";
	CRACK_ANIMATIONS [6]   = "crckidle1";
	CRACK_ANIMATIONS [7]   = "crckidle2";
	CRACK_ANIMATIONS [8]   = "crckidle3";
	CRACK_ANIMATIONS [9]   = "crckidle4";
	// CRIB - 4
	CRIB_ANIMATIONS [0]   = "CRIB_Console_Loop";
	CRIB_ANIMATIONS [1]   = "CRIB_Use_Switch";
	CRIB_ANIMATIONS [2]   = "PED_Console_Loop";
	CRIB_ANIMATIONS [3]   = "PED_Console_Loose";
	CRIB_ANIMATIONS [4]   = "PED_Console_Win";
	// DAM - 4
	DAM_ANIMATIONS [0]   = "DAM_Dive_Loop";
	DAM_ANIMATIONS [1]   = "DAM_Land";
	DAM_ANIMATIONS [2]   = "DAM_Launch";
	DAM_ANIMATIONS [3]   = "Jump_Roll";
	DAM_ANIMATIONS [4]   = "SF_JumpWall";
	// DANCE - 12
	DANCE_ANIMATIONS [0]   = "bd_clap";
	DANCE_ANIMATIONS [1]   = "bd_clap1";
	DANCE_ANIMATIONS [2]   = "dance_loop";
	DANCE_ANIMATIONS [3]   = "DAN_Down_A";
	DANCE_ANIMATIONS [4]   = "DAN_Left_A";
	DANCE_ANIMATIONS [5]   = "DAN_Loop_A";
	DANCE_ANIMATIONS [6]   = "DAN_Right_A";
	DANCE_ANIMATIONS [7]   = "DAN_Up_A";
	DANCE_ANIMATIONS [8]   = "dnce_M_a";
	DANCE_ANIMATIONS [9]   = "dnce_M_b";
	DANCE_ANIMATIONS [10]   = "dnce_M_c";
	DANCE_ANIMATIONS [11]   = "dnce_M_d";
	DANCE_ANIMATIONS [12]   = "dnce_M_e";
	// DEALER - 6
	DEALER_ANIMATIONS [0]   = "DEALER_DEAL";
	DEALER_ANIMATIONS [1]   = "DEALER_IDLE";
	DEALER_ANIMATIONS [2]   = "DEALER_IDLE_01";
	DEALER_ANIMATIONS [3]   = "DEALER_IDLE_02";
	DEALER_ANIMATIONS [4]   = "DEALER_IDLE_03";
	DEALER_ANIMATIONS [5]   = "DRUGS_BUY";
	DEALER_ANIMATIONS [6]   = "shop_pay";
	// DILDO - 8
	DILDO_ANIMATIONS [0]   = "DILDO_1";
	DILDO_ANIMATIONS [1]   = "DILDO_2";
	DILDO_ANIMATIONS [2]   = "DILDO_3";
	DILDO_ANIMATIONS [3]   = "DILDO_block";
	DILDO_ANIMATIONS [4]   = "DILDO_G";
	DILDO_ANIMATIONS [5]   = "DILDO_Hit_1";
	DILDO_ANIMATIONS [6]   = "DILDO_Hit_2";
	DILDO_ANIMATIONS [7]   = "DILDO_Hit_3";
	DILDO_ANIMATIONS [8]   = "DILDO_IDLE";
	// DODGE - 3
	DODGE_ANIMATIONS [0]   = "Cover_Dive_01";
	DODGE_ANIMATIONS [1]   = "Cover_Dive_02";
	DODGE_ANIMATIONS [2]   = "Crushed";
	DODGE_ANIMATIONS [3]   = "Crush_Jump";
	// DOZER - 9
	DOZER_ANIMATIONS [0]   = "DOZER_Align_LHS";
	DOZER_ANIMATIONS [1]   = "DOZER_Align_RHS";
	DOZER_ANIMATIONS [2]   = "DOZER_getin_LHS";
	DOZER_ANIMATIONS [3]   = "DOZER_getin_RHS";
	DOZER_ANIMATIONS [4]   = "DOZER_getout_LHS";
	DOZER_ANIMATIONS [5]   = "DOZER_getout_RHS";
	DOZER_ANIMATIONS [6]   = "DOZER_Jacked_LHS";
	DOZER_ANIMATIONS [7]   = "DOZER_Jacked_RHS";
	DOZER_ANIMATIONS [8]   = "DOZER_pullout_LHS";
	DOZER_ANIMATIONS [9]   = "DOZER_pullout_RHS";
	// DRIVE - 7
	DRIVE_ANIMATIONS [0]   = "Gang_DrivebyLHS";
	DRIVE_ANIMATIONS [1]   = "Gang_DrivebyLHS_Bwd";
	DRIVE_ANIMATIONS [2]   = "Gang_DrivebyLHS_Fwd";
	DRIVE_ANIMATIONS [3]   = "Gang_DrivebyRHS";
	DRIVE_ANIMATIONS [4]   = "Gang_DrivebyRHS_Bwd";
	DRIVE_ANIMATIONS [5]   = "Gang_DrivebyRHS_Fwd";
	DRIVE_ANIMATIONS [6]   = "Gang_DrivebyTop_LHS";
	DRIVE_ANIMATIONS [7]   = "Gang_DrivebyTop_RHS";
	// FAT - 17
	FAT_ANIMATIONS [0]   = "FatIdle";
	FAT_ANIMATIONS [1]   = "FatIdle_armed";
	FAT_ANIMATIONS [2]   = "FatIdle_Csaw";
	FAT_ANIMATIONS [3]   = "FatIdle_Rocket";
	FAT_ANIMATIONS [4]   = "FatRun";
	FAT_ANIMATIONS [5]   = "FatRun_armed";
	FAT_ANIMATIONS [6]   = "FatRun_Csaw";
	FAT_ANIMATIONS [7]   = "FatRun_Rocket";
	FAT_ANIMATIONS [8]   = "FatSprint";
	FAT_ANIMATIONS [9]   = "FatWalk";
	FAT_ANIMATIONS [10]   = "FatWalkstart";
	FAT_ANIMATIONS [11]   = "FatWalkstart_Csaw";
	FAT_ANIMATIONS [12]   = "FatWalkSt_armed";
	FAT_ANIMATIONS [13]   = "FatWalkSt_Rocket";
	FAT_ANIMATIONS [14]   = "FatWalk_armed";
	FAT_ANIMATIONS [15]   = "FatWalk_Csaw";
	FAT_ANIMATIONS [16]   = "FatWalk_Rocket";
	FAT_ANIMATIONS [17]   = "IDLE_tired";
	// FIGHTB - 9
	FIGHTB_ANIMATIONS [0]   = "FightB_1";
	FIGHTB_ANIMATIONS [1]   = "FightB_2";
	FIGHTB_ANIMATIONS [2]   = "FightB_3";
	FIGHTB_ANIMATIONS [3]   = "FightB_block";
	FIGHTB_ANIMATIONS [4]   = "FightB_G";
	FIGHTB_ANIMATIONS [5]   = "FightB_IDLE";
	FIGHTB_ANIMATIONS [6]   = "FightB_M";
	FIGHTB_ANIMATIONS [7]   = "HitB_1";
	FIGHTB_ANIMATIONS [8]   = "HitB_2";
	FIGHTB_ANIMATIONS [9]   = "HitB_3";
	// FIGHTC - 11
	FIGHTC_ANIMATIONS [0]   = "FightC_1";
	FIGHTC_ANIMATIONS [1]   = "FightC_2";
	FIGHTC_ANIMATIONS [2]   = "FightC_3";
	FIGHTC_ANIMATIONS [3]   = "FightC_block";
	FIGHTC_ANIMATIONS [4]   = "FightC_blocking";
	FIGHTC_ANIMATIONS [5]   = "FightC_G";
	FIGHTC_ANIMATIONS [6]   = "FightC_IDLE";
	FIGHTC_ANIMATIONS [7]   = "FightC_M";
	FIGHTC_ANIMATIONS [8]   = "FightC_Spar";
	FIGHTC_ANIMATIONS [9]   = "HitC_1";
	FIGHTC_ANIMATIONS [10]   = "HitC_2";
	FIGHTC_ANIMATIONS [11]   = "HitC_3";
	// FIGHTD - 9
	FIGHTD_ANIMATIONS [0]   = "FightD_1";
	FIGHTD_ANIMATIONS [1]   = "FightD_2";
	FIGHTD_ANIMATIONS [2]   = "FightD_3";
	FIGHTD_ANIMATIONS [3]   = "FightD_block";
	FIGHTD_ANIMATIONS [4]   = "FightD_G";
	FIGHTD_ANIMATIONS [5]   = "FightD_IDLE";
	FIGHTD_ANIMATIONS [6]   = "FightD_M";
	FIGHTD_ANIMATIONS [7]   = "HitD_1";
	FIGHTD_ANIMATIONS [8]   = "HitD_2";
	FIGHTD_ANIMATIONS [9]   = "HitD_3";
	// FIGHTE - 3
	FIGHTE_ANIMATIONS [0]   = "FightKick";
	FIGHTE_ANIMATIONS [1]   = "FightKick_B";
	FIGHTE_ANIMATIONS [2]   = "Hit_fightkick";
	FIGHTE_ANIMATIONS [3]   = "Hit_fightkick_B";
	// FINALE - 15
	FINALE_ANIMATIONS [0]   = "FIN_Climb_In";
	FINALE_ANIMATIONS [1]   = "FIN_Cop1_ClimbOut2";
	FINALE_ANIMATIONS [2]   = "FIN_Cop1_Loop";
	FINALE_ANIMATIONS [3]   = "FIN_Cop1_Stomp";
	FINALE_ANIMATIONS [4]   = "FIN_Hang_L";
	FINALE_ANIMATIONS [5]   = "FIN_Hang_Loop";
	FINALE_ANIMATIONS [6]   = "FIN_Hang_R";
	FINALE_ANIMATIONS [7]   = "FIN_Hang_Slip";
	FINALE_ANIMATIONS [8]   = "FIN_Jump_On";
	FINALE_ANIMATIONS [9]   = "FIN_Land_Car";
	FINALE_ANIMATIONS [10]   = "FIN_Land_Die";
	FINALE_ANIMATIONS [11]   = "FIN_LegsUp";
	FINALE_ANIMATIONS [12]   = "FIN_LegsUp_L";
	FINALE_ANIMATIONS [13]   = "FIN_LegsUp_Loop";
	FINALE_ANIMATIONS [14]   = "FIN_LegsUp_R";
	FINALE_ANIMATIONS [15]   = "FIN_Let_Go";
	// FINALE2 - 7
	FINALE2_ANIMATIONS [0]   = "FIN_Cop1_ClimbOut";
	FINALE2_ANIMATIONS [1]   = "FIN_Cop1_Fall";
	FINALE2_ANIMATIONS [2]   = "FIN_Cop1_Loop";
	FINALE2_ANIMATIONS [3]   = "FIN_Cop1_Shot";
	FINALE2_ANIMATIONS [4]   = "FIN_Cop1_Swing";
	FINALE2_ANIMATIONS [5]   = "FIN_Cop2_ClimbOut";
	FINALE2_ANIMATIONS [6]   = "FIN_Switch_P";
	FINALE2_ANIMATIONS [7]   = "FIN_Switch_S";
	// FLAME - 0
	FLAME_ANIMATIONS [0]   = "FLAME_fire";
	// FLOWERS - 2
	FLOWERS_ANIMATIONS [0]   = "Flower_attack";
	FLOWERS_ANIMATIONS [1]   = "Flower_attack_M";
	FLOWERS_ANIMATIONS [2]   = "Flower_Hit";
	// FOOD - 32
	FOOD_ANIMATIONS [0]   = "EAT_Burger";
	FOOD_ANIMATIONS [1]   = "EAT_Chicken";
	FOOD_ANIMATIONS [2]   = "EAT_Pizza";
	FOOD_ANIMATIONS [3]   = "EAT_Vomit_P";
	FOOD_ANIMATIONS [4]   = "EAT_Vomit_SK";
	FOOD_ANIMATIONS [5]   = "FF_Dam_Bkw";
	FOOD_ANIMATIONS [6]   = "FF_Dam_Fwd";
	FOOD_ANIMATIONS [7]   = "FF_Dam_Left";
	FOOD_ANIMATIONS [8]   = "FF_Dam_Right";
	FOOD_ANIMATIONS [9]   = "FF_Die_Bkw";
	FOOD_ANIMATIONS [10]   = "FF_Die_Fwd";
	FOOD_ANIMATIONS [11]   = "FF_Die_Left";
	FOOD_ANIMATIONS [12]   = "FF_Die_Right";
	FOOD_ANIMATIONS [13]   = "FF_Sit_Eat1";
	FOOD_ANIMATIONS [14]   = "FF_Sit_Eat2";
	FOOD_ANIMATIONS [15]   = "FF_Sit_Eat3";
	FOOD_ANIMATIONS [16]   = "FF_Sit_In";
	FOOD_ANIMATIONS [17]   = "FF_Sit_In_L";
	FOOD_ANIMATIONS [18]   = "FF_Sit_In_R";
	FOOD_ANIMATIONS [19]   = "FF_Sit_Look";
	FOOD_ANIMATIONS [20]   = "FF_Sit_Loop";
	FOOD_ANIMATIONS [21]   = "FF_Sit_Out_180";
	FOOD_ANIMATIONS [22]   = "FF_Sit_Out_L_180";
	FOOD_ANIMATIONS [23]   = "FF_Sit_Out_R_180";
	FOOD_ANIMATIONS [24]   = "SHP_Thank";
	FOOD_ANIMATIONS [25]   = "SHP_Tray_In";
	FOOD_ANIMATIONS [26]   = "SHP_Tray_Lift";
	FOOD_ANIMATIONS [27]   = "SHP_Tray_Lift_In";
	FOOD_ANIMATIONS [28]   = "SHP_Tray_Lift_Loop";
	FOOD_ANIMATIONS [29]   = "SHP_Tray_Lift_Out";
	FOOD_ANIMATIONS [30]   = "SHP_Tray_Out";
	FOOD_ANIMATIONS [31]   = "SHP_Tray_Pose";
	FOOD_ANIMATIONS [32]   = "SHP_Tray_Return";
	// GYMA - 8
	GYMA_ANIMATIONS [0]   = "gym_barbell";
	GYMA_ANIMATIONS [1]   = "gym_free_A";
	GYMA_ANIMATIONS [2]   = "gym_free_B";
	GYMA_ANIMATIONS [3]   = "gym_free_celebrate";
	GYMA_ANIMATIONS [4]   = "gym_free_down";
	GYMA_ANIMATIONS [5]   = "gym_free_loop";
	GYMA_ANIMATIONS [6]   = "gym_free_pickup";
	GYMA_ANIMATIONS [7]   = "gym_free_putdown";
	GYMA_ANIMATIONS [8]   = "gym_free_up_smooth";
	// GANGS - 32
	GANGS_ANIMATIONS [0]   = "DEALER_DEAL";
	GANGS_ANIMATIONS [1]   = "DEALER_IDLE";
	GANGS_ANIMATIONS [2]   = "drnkbr_prtl";
	GANGS_ANIMATIONS [3]   = "drnkbr_prtl_F";
	GANGS_ANIMATIONS [4]   = "DRUGS_BUY";
	GANGS_ANIMATIONS [5]   = "hndshkaa";
	GANGS_ANIMATIONS [6]   = "hndshkba";
	GANGS_ANIMATIONS [7]   = "hndshkca";
	GANGS_ANIMATIONS [8]   = "hndshkcb";
	GANGS_ANIMATIONS [9]   = "hndshkda";
	GANGS_ANIMATIONS [10]   = "hndshkea";
	GANGS_ANIMATIONS [11]   = "hndshkfa";
	GANGS_ANIMATIONS [12]   = "hndshkfa_swt";
	GANGS_ANIMATIONS [13]   = "Invite_No";
	GANGS_ANIMATIONS [14]   = "Invite_Yes";
	GANGS_ANIMATIONS [15]   = "leanIDLE";
	GANGS_ANIMATIONS [16]   = "leanIN";
	GANGS_ANIMATIONS [17]   = "leanOUT";
	GANGS_ANIMATIONS [18]   = "prtial_gngtlkA";
	GANGS_ANIMATIONS [19]   = "prtial_gngtlkB";
	GANGS_ANIMATIONS [20]   = "prtial_gngtlkC";
	GANGS_ANIMATIONS [21]   = "prtial_gngtlkD";
	GANGS_ANIMATIONS [22]   = "prtial_gngtlkE";
	GANGS_ANIMATIONS [23]   = "prtial_gngtlkF";
	GANGS_ANIMATIONS [24]   = "prtial_gngtlkG";
	GANGS_ANIMATIONS [25]   = "prtial_gngtlkH";
	GANGS_ANIMATIONS [26]   = "prtial_hndshk_01";
	GANGS_ANIMATIONS [27]   = "prtial_hndshk_biz_01";
	GANGS_ANIMATIONS [28]   = "shake_cara";
	GANGS_ANIMATIONS [29]   = "shake_carK";
	GANGS_ANIMATIONS [30]   = "shake_carSH";
	GANGS_ANIMATIONS [31]   = "smkcig_prtl";
	GANGS_ANIMATIONS [32]   = "smkcig_prtl_F";
	// GHANDS - 19
	GHANDS_ANIMATIONS [0]   = "gsign1";
	GHANDS_ANIMATIONS [1]   = "gsign1LH";
	GHANDS_ANIMATIONS [2]   = "gsign2";
	GHANDS_ANIMATIONS [3]   = "gsign2LH";
	GHANDS_ANIMATIONS [4]   = "gsign3";
	GHANDS_ANIMATIONS [5]   = "gsign3LH";
	GHANDS_ANIMATIONS [6]   = "gsign4";
	GHANDS_ANIMATIONS [7]   = "gsign4LH";
	GHANDS_ANIMATIONS [8]   = "gsign5";
	GHANDS_ANIMATIONS [9]   = "gsign5LH";
	GHANDS_ANIMATIONS [10]   = "LHGsign1";
	GHANDS_ANIMATIONS [11]   = "LHGsign2";
	GHANDS_ANIMATIONS [12]   = "LHGsign3";
	GHANDS_ANIMATIONS [13]   = "LHGsign4";
	GHANDS_ANIMATIONS [14]   = "LHGsign5";
	GHANDS_ANIMATIONS [15]   = "RHGsign1";
	GHANDS_ANIMATIONS [16]   = "RHGsign2";
	GHANDS_ANIMATIONS [17]   = "RHGsign3";
	GHANDS_ANIMATIONS [18]   = "RHGsign4";
	GHANDS_ANIMATIONS [19]   = "RHGsign5";
	// GHETTO - 6
	GHETTO_ANIMATIONS [0]   = "GDB_Car2_PLY";
	GHETTO_ANIMATIONS [1]   = "GDB_Car2_SMO";
	GHETTO_ANIMATIONS [2]   = "GDB_Car2_SWE";
	GHETTO_ANIMATIONS [3]   = "GDB_Car_PLY";
	GHETTO_ANIMATIONS [4]   = "GDB_Car_RYD";
	GHETTO_ANIMATIONS [5]   = "GDB_Car_SMO";
	GHETTO_ANIMATIONS [6]   = "GDB_Car_SWE";
	// GOGGLES - 0
	GOGGLES_ANIMATIONS [0]   = "goggles_put_on";
	// GRAFFITI - 1
	GRAFFITI_ANIMATIONS [0]   = "graffiti_Chkout";
	GRAFFITI_ANIMATIONS [1]   = "spraycan_fire";
	// GRAVE - 2
	GRAVE_ANIMATIONS [0]   = "mrnF_loop";
	GRAVE_ANIMATIONS [1]   = "mrnM_loop";
	GRAVE_ANIMATIONS [2]   = "prst_loopa";
	// GRENADE - 2
	GRENADE_ANIMATIONS [0]   = "WEAPON_start_throw";
	GRENADE_ANIMATIONS [1]   = "WEAPON_throw";
	GRENADE_ANIMATIONS [2]   = "WEAPON_throwu";
	// GYMB - 23
	GYMB_ANIMATIONS [0]   = "GYMshadowbox";
	GYMB_ANIMATIONS [1]   = "gym_bike_celebrate";
	GYMB_ANIMATIONS [2]   = "gym_bike_fast";
	GYMB_ANIMATIONS [3]   = "gym_bike_faster";
	GYMB_ANIMATIONS [4]   = "gym_bike_getoff";
	GYMB_ANIMATIONS [5]   = "gym_bike_geton";
	GYMB_ANIMATIONS [6]   = "gym_bike_pedal";
	GYMB_ANIMATIONS [7]   = "gym_bike_slow";
	GYMB_ANIMATIONS [8]   = "gym_bike_still";
	GYMB_ANIMATIONS [9]   = "gym_jog_falloff";
	GYMB_ANIMATIONS [10]   = "gym_shadowbox";
	GYMB_ANIMATIONS [11]   = "gym_tread_celebrate";
	GYMB_ANIMATIONS [12]   = "gym_tread_falloff";
	GYMB_ANIMATIONS [13]   = "gym_tread_getoff";
	GYMB_ANIMATIONS [14]   = "gym_tread_geton";
	GYMB_ANIMATIONS [15]   = "gym_tread_jog";
	GYMB_ANIMATIONS [16]   = "gym_tread_sprint";
	GYMB_ANIMATIONS [17]   = "gym_tread_tired";
	GYMB_ANIMATIONS [18]   = "gym_tread_walk";
	GYMB_ANIMATIONS [19]   = "gym_walk_falloff";
	GYMB_ANIMATIONS [20]   = "Pedals_fast";
	GYMB_ANIMATIONS [21]   = "Pedals_med";
	GYMB_ANIMATIONS [22]   = "Pedals_slow";
	GYMB_ANIMATIONS [23]   = "Pedals_still";
	// HAIR - 12
	HAIR_ANIMATIONS [0]   = "BRB_Beard_01";
	HAIR_ANIMATIONS [1]   = "BRB_Buy";
	HAIR_ANIMATIONS [2]   = "BRB_Cut";
	HAIR_ANIMATIONS [3]   = "BRB_Cut_In";
	HAIR_ANIMATIONS [4]   = "BRB_Cut_Out";
	HAIR_ANIMATIONS [5]   = "BRB_Hair_01";
	HAIR_ANIMATIONS [6]   = "BRB_Hair_02";
	HAIR_ANIMATIONS [7]   = "BRB_In";
	HAIR_ANIMATIONS [8]   = "BRB_Loop";
	HAIR_ANIMATIONS [9]   = "BRB_Out";
	HAIR_ANIMATIONS [10]   = "BRB_Sit_In";
	HAIR_ANIMATIONS [11]   = "BRB_Sit_Loop";
	HAIR_ANIMATIONS [12]   = "BRB_Sit_Out";
	// HEIST - 9
	HEIST_ANIMATIONS [0]   = "CAS_G2_GasKO";
	HEIST_ANIMATIONS [1]   = "swt_wllpk_L";
	HEIST_ANIMATIONS [2]   = "swt_wllpk_L_back";
	HEIST_ANIMATIONS [3]   = "swt_wllpk_R";
	HEIST_ANIMATIONS [4]   = "swt_wllpk_R_back";
	HEIST_ANIMATIONS [5]   = "swt_wllshoot_in_L";
	HEIST_ANIMATIONS [6]   = "swt_wllshoot_in_R";
	HEIST_ANIMATIONS [7]   = "swt_wllshoot_out_L";
	HEIST_ANIMATIONS [8]   = "swt_wllshoot_out_R";
	HEIST_ANIMATIONS [9]   = "Use_SwipeCard";
	// HOUSE - 9
	HOUSE_ANIMATIONS [0]   = "BED_In_L";
	HOUSE_ANIMATIONS [1]   = "BED_In_R";
	HOUSE_ANIMATIONS [2]   = "BED_Loop_L";
	HOUSE_ANIMATIONS [3]   = "BED_Loop_R";
	HOUSE_ANIMATIONS [4]   = "BED_Out_L";
	HOUSE_ANIMATIONS [5]   = "BED_Out_R";
	HOUSE_ANIMATIONS [6]   = "LOU_In";
	HOUSE_ANIMATIONS [7]   = "LOU_Loop";
	HOUSE_ANIMATIONS [8]   = "LOU_Out";
	HOUSE_ANIMATIONS [9]   = "wash_up";
	// OFFICE - 9
	OFFICE_ANIMATIONS [0]   = "FF_Dam_Fwd";
	OFFICE_ANIMATIONS [1]   = "OFF_Sit_2Idle_180";
	OFFICE_ANIMATIONS [2]   = "OFF_Sit_Bored_Loop";
	OFFICE_ANIMATIONS [3]   = "OFF_Sit_Crash";
	OFFICE_ANIMATIONS [4]   = "OFF_Sit_Drink";
	OFFICE_ANIMATIONS [5]   = "OFF_Sit_Idle_Loop";
	OFFICE_ANIMATIONS [6]   = "OFF_Sit_In";
	OFFICE_ANIMATIONS [7]   = "OFF_Sit_Read";
	OFFICE_ANIMATIONS [8]   = "OFF_Sit_Type_Loop";
	OFFICE_ANIMATIONS [9]   = "OFF_Sit_Watch";
	// INTSHOP - 7
	INTSHOP_ANIMATIONS [0]   = "shop_cashier";
	INTSHOP_ANIMATIONS [1]   = "shop_in";
	INTSHOP_ANIMATIONS [2]   = "shop_lookA";
	INTSHOP_ANIMATIONS [3]   = "shop_lookB";
	INTSHOP_ANIMATIONS [4]   = "shop_loop";
	INTSHOP_ANIMATIONS [5]   = "shop_out";
	INTSHOP_ANIMATIONS [6]   = "shop_pay";
	INTSHOP_ANIMATIONS [7]   = "shop_shelf";
	// BUISNESS - 3
	BUISNESS_ANIMATIONS [0]   = "girl_01";
	BUISNESS_ANIMATIONS [1]   = "girl_02";
	BUISNESS_ANIMATIONS [2]   = "player_01";
	BUISNESS_ANIMATIONS [3]   = "smoke_01";
	// KART - 3
	KART_ANIMATIONS [0]   = "KART_getin_LHS";
	KART_ANIMATIONS [1]   = "KART_getin_RHS";
	KART_ANIMATIONS [2]   = "KART_getout_LHS";
	KART_ANIMATIONS [3]   = "KART_getout_RHS";
	// KISSING - 14
	KISSING_ANIMATIONS [0]   = "BD_GF_Wave";
	KISSING_ANIMATIONS [1]   = "gfwave2";
	KISSING_ANIMATIONS [2]   = "GF_CarArgue_01";
	KISSING_ANIMATIONS [3]   = "GF_CarArgue_02";
	KISSING_ANIMATIONS [4]   = "GF_CarSpot";
	KISSING_ANIMATIONS [5]   = "GF_StreetArgue_01";
	KISSING_ANIMATIONS [6]   = "GF_StreetArgue_02";
	KISSING_ANIMATIONS [7]   = "gift_get";
	KISSING_ANIMATIONS [8]   = "gift_give";
	KISSING_ANIMATIONS [9]   = "Grlfrd_Kiss_01";
	KISSING_ANIMATIONS [10]   = "Grlfrd_Kiss_02";
	KISSING_ANIMATIONS [11]   = "Grlfrd_Kiss_03";
	KISSING_ANIMATIONS [12]   = "Playa_Kiss_01";
	KISSING_ANIMATIONS [13]   = "Playa_Kiss_02";
	KISSING_ANIMATIONS [14]   = "Playa_Kiss_03";
	// KNIFE - 15
	KNIFE_ANIMATIONS [0]   = "KILL_Knife_Ped_Damage";
	KNIFE_ANIMATIONS [1]   = "KILL_Knife_Ped_Die";
	KNIFE_ANIMATIONS [2]   = "KILL_Knife_Player";
	KNIFE_ANIMATIONS [3]   = "KILL_Partial";
	KNIFE_ANIMATIONS [4]   = "knife_1";
	KNIFE_ANIMATIONS [5]   = "knife_2";
	KNIFE_ANIMATIONS [6]   = "knife_3";
	KNIFE_ANIMATIONS [7]   = "Knife_4";
	KNIFE_ANIMATIONS [8]   = "knife_block";
	KNIFE_ANIMATIONS [9]   = "Knife_G";
	KNIFE_ANIMATIONS [10]   = "knife_hit_1";
	KNIFE_ANIMATIONS [11]   = "knife_hit_2";
	KNIFE_ANIMATIONS [12]   = "knife_hit_3";
	KNIFE_ANIMATIONS [13]   = "knife_IDLE";
	KNIFE_ANIMATIONS [14]   = "knife_part";
	KNIFE_ANIMATIONS [15]   = "WEAPON_knifeidle";
	// LAPDAN - 1
	LAPDAN1_ANIMATIONS [0]   = "LAPDAN_D";
	LAPDAN1_ANIMATIONS [1]   = "LAPDAN_P";
	// LAPDAN - 2
	LAPDAN2_ANIMATIONS [0]   = "LAPDAN_D";
	LAPDAN2_ANIMATIONS [1]   = "LAPDAN_P";
	// LAPDAN - 3
	LAPDAN3_ANIMATIONS [0]   = "LAPDAN_D";
	LAPDAN3_ANIMATIONS [1]   = "LAPDAN_P";
	// LOWRIDER - 38
	LOWRIDER_ANIMATIONS [0]   = "F_smklean_loop";
	LOWRIDER_ANIMATIONS [1]   = "lrgirl_bdbnce";
	LOWRIDER_ANIMATIONS [2]   = "lrgirl_hair";
	LOWRIDER_ANIMATIONS [3]   = "lrgirl_hurry";
	LOWRIDER_ANIMATIONS [4]   = "lrgirl_idleloop";
	LOWRIDER_ANIMATIONS [5]   = "lrgirl_idle_to_l0";
	LOWRIDER_ANIMATIONS [6]   = "lrgirl_l0_bnce";
	LOWRIDER_ANIMATIONS [7]   = "lrgirl_l0_loop";
	LOWRIDER_ANIMATIONS [8]   = "lrgirl_l0_to_l1";
	LOWRIDER_ANIMATIONS [9]   = "lrgirl_l12_to_l0";
	LOWRIDER_ANIMATIONS [10]   = "lrgirl_l1_bnce";
	LOWRIDER_ANIMATIONS [11]   = "lrgirl_l1_loop";
	LOWRIDER_ANIMATIONS [12]   = "lrgirl_l1_to_l2";
	LOWRIDER_ANIMATIONS [13]   = "lrgirl_l2_bnce";
	LOWRIDER_ANIMATIONS [14]   = "lrgirl_l2_loop";
	LOWRIDER_ANIMATIONS [15]   = "lrgirl_l2_to_l3";
	LOWRIDER_ANIMATIONS [16]   = "lrgirl_l345_to_l1";
	LOWRIDER_ANIMATIONS [17]   = "lrgirl_l3_bnce";
	LOWRIDER_ANIMATIONS [18]   = "lrgirl_l3_loop";
	LOWRIDER_ANIMATIONS [19]   = "lrgirl_l3_to_l4";
	LOWRIDER_ANIMATIONS [20]   = "lrgirl_l4_bnce";
	LOWRIDER_ANIMATIONS [21]   = "lrgirl_l4_loop";
	LOWRIDER_ANIMATIONS [22]   = "lrgirl_l4_to_l5";
	LOWRIDER_ANIMATIONS [23]   = "lrgirl_l5_bnce";
	LOWRIDER_ANIMATIONS [24]   = "lrgirl_l5_loop";
	LOWRIDER_ANIMATIONS [25]   = "M_smklean_loop";
	LOWRIDER_ANIMATIONS [26]   = "M_smkstnd_loop";
	LOWRIDER_ANIMATIONS [27]   = "prtial_gngtlkB";
	LOWRIDER_ANIMATIONS [28]   = "prtial_gngtlkC";
	LOWRIDER_ANIMATIONS [29]   = "prtial_gngtlkD";
	LOWRIDER_ANIMATIONS [30]   = "prtial_gngtlkE";
	LOWRIDER_ANIMATIONS [31]   = "prtial_gngtlkF";
	LOWRIDER_ANIMATIONS [32]   = "prtial_gngtlkG";
	LOWRIDER_ANIMATIONS [33]   = "prtial_gngtlkH";
	LOWRIDER_ANIMATIONS [34]   = "RAP_A_Loop";
	LOWRIDER_ANIMATIONS [35]   = "RAP_B_Loop";
	LOWRIDER_ANIMATIONS [36]   = "RAP_C_Loop";
	LOWRIDER_ANIMATIONS [37]   = "Sit_relaxed";
	LOWRIDER_ANIMATIONS [38]   = "Tap_hand";
	// CHASE - 24
	CHASE_ANIMATIONS [0]   = "Carhit_Hangon";
	CHASE_ANIMATIONS [1]   = "Carhit_Tumble";
	CHASE_ANIMATIONS [2]   = "donutdrop";
	CHASE_ANIMATIONS [3]   = "Fen_Choppa_L1";
	CHASE_ANIMATIONS [4]   = "Fen_Choppa_L2";
	CHASE_ANIMATIONS [5]   = "Fen_Choppa_L3";
	CHASE_ANIMATIONS [6]   = "Fen_Choppa_R1";
	CHASE_ANIMATIONS [7]   = "Fen_Choppa_R2";
	CHASE_ANIMATIONS [8]   = "Fen_Choppa_R3";
	CHASE_ANIMATIONS [9]   = "Hangon_Stun_loop";
	CHASE_ANIMATIONS [10]   = "Hangon_Stun_Turn";
	CHASE_ANIMATIONS [11]   = "MD_BIKE_2_HANG";
	CHASE_ANIMATIONS [12]   = "MD_BIKE_Jmp_BL";
	CHASE_ANIMATIONS [13]   = "MD_BIKE_Jmp_F";
	CHASE_ANIMATIONS [14]   = "MD_BIKE_Lnd_BL";
	CHASE_ANIMATIONS [15]   = "MD_BIKE_Lnd_Die_BL";
	CHASE_ANIMATIONS [16]   = "MD_BIKE_Lnd_Die_F";
	CHASE_ANIMATIONS [17]   = "MD_BIKE_Lnd_F";
	CHASE_ANIMATIONS [18]   = "MD_BIKE_Lnd_Roll";
	CHASE_ANIMATIONS [19]   = "MD_BIKE_Lnd_Roll_F";
	CHASE_ANIMATIONS [20]   = "MD_BIKE_Punch";
	CHASE_ANIMATIONS [21]   = "MD_BIKE_Punch_F";
	CHASE_ANIMATIONS [22]   = "MD_BIKE_Shot_F";
	CHASE_ANIMATIONS [23]   = "MD_HANG_Lnd_Roll";
	CHASE_ANIMATIONS [24]   = "MD_HANG_Loop";
	// END - 7
	END_ANIMATIONS [0]   = "END_SC1_PLY";
	END_ANIMATIONS [1]   = "END_SC1_RYD";
	END_ANIMATIONS [2]   = "END_SC1_SMO";
	END_ANIMATIONS [3]   = "END_SC1_SWE";
	END_ANIMATIONS [4]   = "END_SC2_PLY";
	END_ANIMATIONS [5]   = "END_SC2_RYD";
	END_ANIMATIONS [6]   = "END_SC2_SMO";
	END_ANIMATIONS [7]   = "END_SC2_SWE";
	// MEDIC - 0
	MEDIC_ANIMATIONS [0]   = "CPR";
	// MISC - 40
	MISC_ANIMATIONS [0]   = "bitchslap";
	MISC_ANIMATIONS [1]   = "BMX_celebrate";
	MISC_ANIMATIONS [2]   = "BMX_comeon";
	MISC_ANIMATIONS [3]   = "bmx_idleloop_01";
	MISC_ANIMATIONS [4]   = "bmx_idleloop_02";
	MISC_ANIMATIONS [5]   = "bmx_talkleft_in";
	MISC_ANIMATIONS [6]   = "bmx_talkleft_loop";
	MISC_ANIMATIONS [7]   = "bmx_talkleft_out";
	MISC_ANIMATIONS [8]   = "bmx_talkright_in";
	MISC_ANIMATIONS [9]   = "bmx_talkright_loop";
	MISC_ANIMATIONS [10]   = "bmx_talkright_out";
	MISC_ANIMATIONS [11]   = "bng_wndw";
	MISC_ANIMATIONS [12]   = "bng_wndw_02";
	MISC_ANIMATIONS [13]   = "Case_pickup";
	MISC_ANIMATIONS [14]   = "door_jet";
	MISC_ANIMATIONS [15]   = "GRAB_L";
	MISC_ANIMATIONS [16]   = "GRAB_R";
	MISC_ANIMATIONS [17]   = "Hiker_Pose";
	MISC_ANIMATIONS [18]   = "Hiker_Pose_L";
	MISC_ANIMATIONS [19]   = "Idle_Chat_02";
	MISC_ANIMATIONS [20]   = "KAT_Throw_K";
	MISC_ANIMATIONS [21]   = "KAT_Throw_O";
	MISC_ANIMATIONS [22]   = "KAT_Throw_P";
	MISC_ANIMATIONS [23]   = "PASS_Rifle_O";
	MISC_ANIMATIONS [24]   = "PASS_Rifle_Ped";
	MISC_ANIMATIONS [25]   = "PASS_Rifle_Ply";
	MISC_ANIMATIONS [26]   = "pickup_box";
	MISC_ANIMATIONS [27]   = "Plane_door";
	MISC_ANIMATIONS [28]   = "Plane_exit";
	MISC_ANIMATIONS [29]   = "Plane_hijack";
	MISC_ANIMATIONS [30]   = "Plunger_01";
	MISC_ANIMATIONS [31]   = "Plyrlean_loop";
	MISC_ANIMATIONS [32]   = "plyr_shkhead";
	MISC_ANIMATIONS [33]   = "Run_Dive";
	MISC_ANIMATIONS [34]   = "Scratchballs_01";
	MISC_ANIMATIONS [35]   = "SEAT_LR";
	MISC_ANIMATIONS [36]   = "Seat_talk_01";
	MISC_ANIMATIONS [37]   = "Seat_talk_02";
	MISC_ANIMATIONS [38]   = "SEAT_watch";
	MISC_ANIMATIONS [39]   = "smalplane_door";
	MISC_ANIMATIONS [40]   = "smlplane_door";
	// MTB - 17
	MTB_ANIMATIONS [0]   = "MTB_back";
	MTB_ANIMATIONS [1]   = "MTB_bunnyhop";
	MTB_ANIMATIONS [2]   = "MTB_drivebyFT";
	MTB_ANIMATIONS [3]   = "MTB_driveby_LHS";
	MTB_ANIMATIONS [4]   = "MTB_driveby_RHS";
	MTB_ANIMATIONS [5]   = "MTB_fwd";
	MTB_ANIMATIONS [6]   = "MTB_getoffBACK";
	MTB_ANIMATIONS [7]   = "MTB_getoffLHS";
	MTB_ANIMATIONS [8]   = "MTB_getoffRHS";
	MTB_ANIMATIONS [9]   = "MTB_jumponL";
	MTB_ANIMATIONS [10]   = "MTB_jumponR";
	MTB_ANIMATIONS [11]   = "MTB_Left";
	MTB_ANIMATIONS [12]   = "MTB_pedal";
	MTB_ANIMATIONS [13]   = "MTB_pushes";
	MTB_ANIMATIONS [14]   = "MTB_Ride";
	MTB_ANIMATIONS [15]   = "MTB_Right";
	MTB_ANIMATIONS [16]   = "MTB_sprint";
	MTB_ANIMATIONS [17]   = "MTB_still";
/*	// MUSCULAR - 16
	MUSCULAR_ANIMATIONS [0]   = "MscleWalkst_armed";
	MUSCULAR_ANIMATIONS [1]   = "MscleWalkst_Csaw";
	MUSCULAR_ANIMATIONS [2]   = "Mscle_rckt_run";
	MUSCULAR_ANIMATIONS [3]   = "Mscle_rckt_walkst";
	MUSCULAR_ANIMATIONS [4]   = "Mscle_run_Csaw";
	MUSCULAR_ANIMATIONS [5]   = "MuscleIdle";
	MUSCULAR_ANIMATIONS [6]   = "MuscleIdle_armed";
	MUSCULAR_ANIMATIONS [7]   = "MuscleIdle_Csaw";
	MUSCULAR_ANIMATIONS [8]   = "MuscleIdle_rocket";
	MUSCULAR_ANIMATIONS [9]   = "MuscleRun";
	MUSCULAR_ANIMATIONS [10]   = "MuscleRun_armed";
	MUSCULAR_ANIMATIONS [11]   = "MuscleSprint";
	MUSCULAR_ANIMATIONS [12]   = "MuscleWalk";
	MUSCULAR_ANIMATIONS [13]   = "MuscleWalkstart";
	MUSCULAR_ANIMATIONS [14]   = "MuscleWalk_armed";
	MUSCULAR_ANIMATIONS [15]   = "Musclewalk_Csaw";
	MUSCULAR_ANIMATIONS [16]   = "Musclewalk_rocket";*/
/*	// NEVADA - 1
	NEVADA_ANIMATIONS [0]   = "NEVADA_getin";
	NEVADA_ANIMATIONS [1]   = "NEVADA_getout";*/
	// LOOKERS - 28
	LOOKERS_ANIMATIONS [0]   = "lkaround_in";
	LOOKERS_ANIMATIONS [1]   = "lkaround_loop";
	LOOKERS_ANIMATIONS [2]   = "lkaround_out";
	LOOKERS_ANIMATIONS [3]   = "lkup_in";
	LOOKERS_ANIMATIONS [4]   = "lkup_loop";
	LOOKERS_ANIMATIONS [5]   = "lkup_out";
	LOOKERS_ANIMATIONS [6]   = "lkup_point";
	LOOKERS_ANIMATIONS [7]   = "panic_cower";
	LOOKERS_ANIMATIONS [8]   = "panic_hide";
	LOOKERS_ANIMATIONS [9]   = "panic_in";
	LOOKERS_ANIMATIONS [10]   = "panic_loop";
	LOOKERS_ANIMATIONS [11]   = "panic_out";
	LOOKERS_ANIMATIONS [12]   = "panic_point";
	LOOKERS_ANIMATIONS [13]   = "panic_shout";
	LOOKERS_ANIMATIONS [14]   = "Pointup_in";
	LOOKERS_ANIMATIONS [15]   = "Pointup_loop";
	LOOKERS_ANIMATIONS [16]   = "Pointup_out";
	LOOKERS_ANIMATIONS [17]   = "Pointup_shout";
	LOOKERS_ANIMATIONS [18]   = "point_in";
	LOOKERS_ANIMATIONS [19]   = "point_loop";
	LOOKERS_ANIMATIONS [20]   = "point_out";
	LOOKERS_ANIMATIONS [21]   = "shout_01";
	LOOKERS_ANIMATIONS [22]   = "shout_02";
	LOOKERS_ANIMATIONS [23]   = "shout_in";
	LOOKERS_ANIMATIONS [24]   = "shout_loop";
	LOOKERS_ANIMATIONS [25]   = "shout_out";
	LOOKERS_ANIMATIONS [26]   = "wave_in";
	LOOKERS_ANIMATIONS [27]   = "wave_loop";
	LOOKERS_ANIMATIONS [28]   = "wave_out";
	// OTB - 10
	OTB_ANIMATIONS [0]   = "betslp_in";
	OTB_ANIMATIONS [1]   = "betslp_lkabt";
	OTB_ANIMATIONS [2]   = "betslp_loop";
	OTB_ANIMATIONS [3]   = "betslp_out";
	OTB_ANIMATIONS [4]   = "betslp_tnk";
	OTB_ANIMATIONS [5]   = "wtchrace_cmon";
	OTB_ANIMATIONS [6]   = "wtchrace_in";
	OTB_ANIMATIONS [7]   = "wtchrace_loop";
	OTB_ANIMATIONS [8]   = "wtchrace_lose";
	OTB_ANIMATIONS [9]   = "wtchrace_out";
	OTB_ANIMATIONS [10]   = "wtchrace_win";
	// PARA - 21
	PARA_ANIMATIONS [0]   = "FALL_skyDive";
	PARA_ANIMATIONS [1]   = "FALL_SkyDive_Accel";
	PARA_ANIMATIONS [2]   = "FALL_skyDive_DIE";
	PARA_ANIMATIONS [3]   = "FALL_SkyDive_L";
	PARA_ANIMATIONS [4]   = "FALL_SkyDive_R";
	PARA_ANIMATIONS [5]   = "PARA_decel";
	PARA_ANIMATIONS [6]   = "PARA_decel_O";
	PARA_ANIMATIONS [7]   = "PARA_float";
	PARA_ANIMATIONS [8]   = "PARA_float_O";
	PARA_ANIMATIONS [9]   = "PARA_Land";
	PARA_ANIMATIONS [10]   = "PARA_Land_O";
	PARA_ANIMATIONS [11]   = "PARA_Land_Water";
	PARA_ANIMATIONS [12]   = "PARA_Land_Water_O";
	PARA_ANIMATIONS [13]   = "PARA_open";
	PARA_ANIMATIONS [14]   = "PARA_open_O";
	PARA_ANIMATIONS [15]   = "PARA_Rip_Land_O";
	PARA_ANIMATIONS [16]   = "PARA_Rip_Loop_O";
	PARA_ANIMATIONS [17]   = "PARA_Rip_O";
	PARA_ANIMATIONS [18]   = "PARA_steerL";
	PARA_ANIMATIONS [19]   = "PARA_steerL_O";
	PARA_ANIMATIONS [20]   = "PARA_steerR";
	PARA_ANIMATIONS [21]   = "PARA_steerR_O";
	// PARK - 2
	PARK_ANIMATIONS [0]   = "Tai_Chi_in";
	PARK_ANIMATIONS [1]   = "Tai_Chi_Loop";
	PARK_ANIMATIONS [2]   = "Tai_Chi_Out";
	// PAUL - 11
	PAUL_ANIMATIONS [0]   = "Piss_in";
	PAUL_ANIMATIONS [1]   = "Piss_loop";
	PAUL_ANIMATIONS [2]   = "Piss_out";
	PAUL_ANIMATIONS [3]   = "PnM_Argue1_A";
	PAUL_ANIMATIONS [4]   = "PnM_Argue1_B";
	PAUL_ANIMATIONS [5]   = "PnM_Argue2_A";
	PAUL_ANIMATIONS [6]   = "PnM_Argue2_B";
	PAUL_ANIMATIONS [7]   = "PnM_Loop_A";
	PAUL_ANIMATIONS [8]   = "PnM_Loop_B";
	PAUL_ANIMATIONS [9]   = "wank_in";
	PAUL_ANIMATIONS [10]   = "wank_loop";
	PAUL_ANIMATIONS [11]   = "wank_out";
	// PLAYER - 3
	PLAYER_ANIMATIONS [0]   = "Plyr_DrivebyBwd";
	PLAYER_ANIMATIONS [1]   = "Plyr_DrivebyFwd";
	PLAYER_ANIMATIONS [2]   = "Plyr_DrivebyLHS";
	PLAYER_ANIMATIONS [3]   = "Plyr_DrivebyRHS";
	// PLAYID - 4
	PLAYID_ANIMATIONS [0]   = "shift";
	PLAYID_ANIMATIONS [1]   = "shldr";
	PLAYID_ANIMATIONS [2]   = "stretch";
	PLAYID_ANIMATIONS [3]   = "strleg";
	PLAYID_ANIMATIONS [4]   = "time";
	// POLICE - 9
	POLICE_ANIMATIONS [0]   = "CopTraf_Away";
	POLICE_ANIMATIONS [1]   = "CopTraf_Come";
	POLICE_ANIMATIONS [2]   = "CopTraf_Left";
	POLICE_ANIMATIONS [3]   = "CopTraf_Stop";
	POLICE_ANIMATIONS [4]   = "COP_getoutcar_LHS";
	POLICE_ANIMATIONS [5]   = "Cop_move_FWD";
	POLICE_ANIMATIONS [6]   = "crm_drgbst_01";
	POLICE_ANIMATIONS [7]   = "Door_Kick";
	POLICE_ANIMATIONS [8]   = "plc_drgbst_01";
	POLICE_ANIMATIONS [9]   = "plc_drgbst_02";
	// POOL - 20
	POOL_ANIMATIONS [0]   = "POOL_ChalkCue";
	POOL_ANIMATIONS [1]   = "POOL_Idle_Stance";
	POOL_ANIMATIONS [2]   = "POOL_Long_Shot";
	POOL_ANIMATIONS [3]   = "POOL_Long_Shot_O";
	POOL_ANIMATIONS [4]   = "POOL_Long_Start";
	POOL_ANIMATIONS [5]   = "POOL_Long_Start_O";
	POOL_ANIMATIONS [6]   = "POOL_Med_Shot";
	POOL_ANIMATIONS [7]   = "POOL_Med_Shot_O";
	POOL_ANIMATIONS [8]   = "POOL_Med_Start";
	POOL_ANIMATIONS [9]   = "POOL_Med_Start_O";
	POOL_ANIMATIONS [10]   = "POOL_Place_White";
	POOL_ANIMATIONS [11]   = "POOL_Short_Shot";
	POOL_ANIMATIONS [12]   = "POOL_Short_Shot_O";
	POOL_ANIMATIONS [13]   = "POOL_Short_Start";
	POOL_ANIMATIONS [14]   = "POOL_Short_Start_O";
	POOL_ANIMATIONS [15]   = "POOL_Walk";
	POOL_ANIMATIONS [16]   = "POOL_Walk_Start";
	POOL_ANIMATIONS [17]   = "POOL_XLong_Shot";
	POOL_ANIMATIONS [18]   = "POOL_XLong_Shot_O";
	POOL_ANIMATIONS [19]   = "POOL_XLong_Start";
	POOL_ANIMATIONS [20]   = "POOL_XLong_Start_O";
	// POOR - 1
	POOR_ANIMATIONS [0]   = "WINWASH_Start";
	POOR_ANIMATIONS [1]   = "WINWASH_Wash2Beg";
	// PYTHON - 4
	PYTHON_ANIMATIONS [0]   = "python_crouchfire";
	PYTHON_ANIMATIONS [1]   = "python_crouchreload";
	PYTHON_ANIMATIONS [2]   = "python_fire";
	PYTHON_ANIMATIONS [3]   = "python_fire_poor";
	PYTHON_ANIMATIONS [4]   = "python_reload ";
	// QUAD - 16
	QUAD_ANIMATIONS [0]   = "QUAD_back";
	QUAD_ANIMATIONS [1]   = "QUAD_driveby_FT";
	QUAD_ANIMATIONS [2]   = "QUAD_driveby_LHS";
	QUAD_ANIMATIONS [3]   = "QUAD_driveby_RHS";
	QUAD_ANIMATIONS [4]   = "QUAD_FWD";
	QUAD_ANIMATIONS [5]   = "QUAD_getoff_B";
	QUAD_ANIMATIONS [6]   = "QUAD_getoff_LHS";
	QUAD_ANIMATIONS [7]   = "QUAD_getoff_RHS";
	QUAD_ANIMATIONS [8]   = "QUAD_geton_LHS";
	QUAD_ANIMATIONS [9]   = "QUAD_geton_RHS";
	QUAD_ANIMATIONS [10]   = "QUAD_hit";
	QUAD_ANIMATIONS [11]   = "QUAD_kick";
	QUAD_ANIMATIONS [12]   = "QUAD_Left";
	QUAD_ANIMATIONS [13]   = "QUAD_passenger";
	QUAD_ANIMATIONS [14]   = "QUAD_reverse";
	QUAD_ANIMATIONS [15]   = "QUAD_ride";
	QUAD_ANIMATIONS [16]   = "QUAD_Right";
	// QUADD - 3
	QUADD_ANIMATIONS [0]   = "Pass_Driveby_BWD";
	QUADD_ANIMATIONS [1]   = "Pass_Driveby_FWD";
	QUADD_ANIMATIONS [2]   = "Pass_Driveby_LHS";
	QUADD_ANIMATIONS [3]   = "Pass_Driveby_RHS";
	// RAP - 7
	RAP_ANIMATIONS [0]   = "Laugh_01";
	RAP_ANIMATIONS [1]   = "RAP_A_IN";
	RAP_ANIMATIONS [2]   = "RAP_A_Loop";
	RAP_ANIMATIONS [3]   = "RAP_A_OUT";
	RAP_ANIMATIONS [4]   = "RAP_B_IN";
	RAP_ANIMATIONS [5]   = "RAP_B_Loop";
	RAP_ANIMATIONS [6]   = "RAP_B_OUT";
	RAP_ANIMATIONS [7]   = "RAP_C_Loop";
	// RIFLE - 4
	RIFLE_ANIMATIONS [0]   = "RIFLE_crouchfire";
	RIFLE_ANIMATIONS [1]   = "RIFLE_crouchload";
	RIFLE_ANIMATIONS [2]   = "RIFLE_fire";
	RIFLE_ANIMATIONS [3]   = "RIFLE_fire_poor";
	RIFLE_ANIMATIONS [4]   = "RIFLE_load";
	// RIOT - 6
	RIOT_ANIMATIONS [0]   = "RIOT_ANGRY";
	RIOT_ANIMATIONS [1]   = "RIOT_ANGRY_B";
	RIOT_ANIMATIONS [2]   = "RIOT_challenge";
	RIOT_ANIMATIONS [3]   = "RIOT_CHANT";
	RIOT_ANIMATIONS [4]   = "RIOT_FUKU";
	RIOT_ANIMATIONS [5]   = "RIOT_PUNCHES";
	RIOT_ANIMATIONS [6]   = "RIOT_shout";
	// ROB - 4
	ROB_ANIMATIONS [0]   = "CAT_Safe_End";
	ROB_ANIMATIONS [1]   = "CAT_Safe_Open";
	ROB_ANIMATIONS [2]   = "CAT_Safe_Open_O";
	ROB_ANIMATIONS [3]   = "CAT_Safe_Rob";
	ROB_ANIMATIONS [4]   = "SHP_HandsUp_Scr";
	// ROCKET - 4
	ROCKET_ANIMATIONS [0]   = "idle_rocket";
	ROCKET_ANIMATIONS [1]   = "RocketFire";
	ROCKET_ANIMATIONS [2]   = "run_rocket";
	ROCKET_ANIMATIONS [3]   = "walk_rocket";
	ROCKET_ANIMATIONS [4]   = "WALK_start_rocket";
	// RUSTLER - 4
	RUSTLER_ANIMATIONS [0]   = "Plane_align_LHS";
	RUSTLER_ANIMATIONS [1]   = "Plane_close";
	RUSTLER_ANIMATIONS [2]   = "Plane_getin";
	RUSTLER_ANIMATIONS [3]   = "Plane_getout";
	RUSTLER_ANIMATIONS [4]   = "Plane_open";
	// RYDER - 15
	RYDER_ANIMATIONS [0]   = "RYD_Beckon_01";
	RYDER_ANIMATIONS [1]   = "RYD_Beckon_02";
	RYDER_ANIMATIONS [2]   = "RYD_Beckon_03";
	RYDER_ANIMATIONS [3]   = "RYD_Die_PT1";
	RYDER_ANIMATIONS [4]   = "RYD_Die_PT2";
	RYDER_ANIMATIONS [5]   = "Van_Crate_L";
	RYDER_ANIMATIONS [6]   = "Van_Crate_R";
	RYDER_ANIMATIONS [7]   = "Van_Fall_L";
	RYDER_ANIMATIONS [8]   = "Van_Fall_R";
	RYDER_ANIMATIONS [9]   = "Van_Lean_L";
	RYDER_ANIMATIONS [10]   = "Van_Lean_R";
	RYDER_ANIMATIONS [11]   = "VAN_PickUp_E";
	RYDER_ANIMATIONS [12]   = "VAN_PickUp_S";
	RYDER_ANIMATIONS [13]   = "Van_Stand";
	RYDER_ANIMATIONS [14]   = "Van_Stand_Crate";
	RYDER_ANIMATIONS [15]   = "Van_Throw";
	// SCRAT - 11
	SCRAT_ANIMATIONS [0]   = "scdldlp";
	SCRAT_ANIMATIONS [1]   = "scdlulp";
	SCRAT_ANIMATIONS [2]   = "scdrdlp";
	SCRAT_ANIMATIONS [3]   = "scdrulp";
	SCRAT_ANIMATIONS [4]   = "sclng_l";
	SCRAT_ANIMATIONS [5]   = "sclng_r";
	SCRAT_ANIMATIONS [6]   = "scmid_l";
	SCRAT_ANIMATIONS [7]   = "scmid_r";
	SCRAT_ANIMATIONS [8]   = "scshrtl";
	SCRAT_ANIMATIONS [9]   = "scshrtr";
	SCRAT_ANIMATIONS [10]   = "sc_ltor";
	SCRAT_ANIMATIONS [11]   = "sc_rtol";
	// SHAMAL - 4
	SHAMAL_ANIMATIONS [0]   = "SHAMAL_align";
	SHAMAL_ANIMATIONS [1]   = "SHAMAL_getin_LHS";
	SHAMAL_ANIMATIONS [2]   = "SHAMAL_getout_LHS";
	SHAMAL_ANIMATIONS [3]   = "SHAMAL_open";
	// SHOP - 24
	SHOP_ANIMATIONS [0]   = "ROB_2Idle";
	SHOP_ANIMATIONS [1]   = "ROB_Loop";
	SHOP_ANIMATIONS [2]   = "ROB_Loop_Threat";
	SHOP_ANIMATIONS [3]   = "ROB_Shifty";
	SHOP_ANIMATIONS [4]   = "ROB_StickUp_In";
	SHOP_ANIMATIONS [5]   = "SHP_Duck";
	SHOP_ANIMATIONS [6]   = "SHP_Duck_Aim";
	SHOP_ANIMATIONS [7]   = "SHP_Duck_Fire";
	SHOP_ANIMATIONS [8]   = "SHP_Gun_Aim";
	SHOP_ANIMATIONS [9]   = "SHP_Gun_Duck";
	SHOP_ANIMATIONS [10]   = "SHP_Gun_Fire";
	SHOP_ANIMATIONS [11]   = "SHP_Gun_Grab";
	SHOP_ANIMATIONS [12]   = "SHP_Gun_Threat";
	SHOP_ANIMATIONS [13]   = "SHP_HandsUp_Scr";
	SHOP_ANIMATIONS [14]   = "SHP_Jump_Glide";
	SHOP_ANIMATIONS [15]   = "SHP_Jump_Land";
	SHOP_ANIMATIONS [16]   = "SHP_Jump_Launch";
	SHOP_ANIMATIONS [17]   = "SHP_Rob_GiveCash";
	SHOP_ANIMATIONS [18]   = "SHP_Rob_HandsUp";
	SHOP_ANIMATIONS [19]   = "SHP_Rob_React";
	SHOP_ANIMATIONS [20]   = "SHP_Serve_End";
	SHOP_ANIMATIONS [21]   = "SHP_Serve_Idle";
	SHOP_ANIMATIONS [22]   = "SHP_Serve_Loop";
	SHOP_ANIMATIONS [23]   = "SHP_Serve_Start";
	SHOP_ANIMATIONS [24]   = "Smoke_RYD";
	// SHOTGUN - 2
	SHOTGUN_ANIMATIONS [0]   = "shotgun_crouchfire";
	SHOTGUN_ANIMATIONS [1]   = "shotgun_fire";
	SHOTGUN_ANIMATIONS [2]   = "shotgun_fire_poor";
	// SILENCED - 3
	SILENCED_ANIMATIONS [0]   = "CrouchReload";
	SILENCED_ANIMATIONS [1]   = "SilenceCrouchfire";
	SILENCED_ANIMATIONS [2]   = "Silence_fire";
	SILENCED_ANIMATIONS [3]   = "Silence_reload";
	// SKATE - 2
	SKATE_ANIMATIONS [0]   = "skate_idle";
	SKATE_ANIMATIONS [1]   = "skate_run";
	SKATE_ANIMATIONS [2]   = "skate_sprint";
	// SMOK - 7
	SMOK_ANIMATIONS [0]   = "F_smklean_loop";
	SMOK_ANIMATIONS [1]   = "M_smklean_loop";
	SMOK_ANIMATIONS [2]   = "M_smkstnd_loop";
	SMOK_ANIMATIONS [3]   = "M_smk_drag";
	SMOK_ANIMATIONS [4]   = "M_smk_in";
	SMOK_ANIMATIONS [5]   = "M_smk_loop";
	SMOK_ANIMATIONS [6]   = "M_smk_out";
	SMOK_ANIMATIONS [7]   = "M_smk_tap";
	// SNIPER - 0
	SNIPER_ANIMATIONS [0]   = "WEAPON_sniper";
	// SPRAY - 1
	SPRAY_ANIMATIONS [0]   = "spraycan_fire";
	SPRAY_ANIMATIONS [1]   = "spraycan_full";
	// STRIP - 19
	STRIP_ANIMATIONS [0]   = "PLY_CASH";
	STRIP_ANIMATIONS [1]   = "PUN_CASH";
	STRIP_ANIMATIONS [2]   = "PUN_HOLLER";
	STRIP_ANIMATIONS [3]   = "PUN_LOOP";
	STRIP_ANIMATIONS [4]   = "strip_A";
	STRIP_ANIMATIONS [5]   = "strip_B";
	STRIP_ANIMATIONS [6]   = "strip_C";
	STRIP_ANIMATIONS [7]   = "strip_D";
	STRIP_ANIMATIONS [8]   = "strip_E";
	STRIP_ANIMATIONS [9]   = "strip_F";
	STRIP_ANIMATIONS [10]   = "strip_G";
	STRIP_ANIMATIONS [11]   = "STR_A2B";
	STRIP_ANIMATIONS [12]   = "STR_B2A";
	STRIP_ANIMATIONS [13]   = "STR_B2C";
	STRIP_ANIMATIONS [14]   = "STR_C1";
	STRIP_ANIMATIONS [15]   = "STR_C2";
	STRIP_ANIMATIONS [16]   = "STR_C2B";
	STRIP_ANIMATIONS [17]   = "STR_Loop_A";
	STRIP_ANIMATIONS [18]   = "STR_Loop_B";
	STRIP_ANIMATIONS [19]   = "STR_Loop_C";
	// SUNBA - 17
	SUNBA_ANIMATIONS [0]   = "batherdown";
	SUNBA_ANIMATIONS [1]   = "batherup";
	SUNBA_ANIMATIONS [2]   = "Lay_Bac_in";
	SUNBA_ANIMATIONS [3]   = "Lay_Bac_out";
	SUNBA_ANIMATIONS [4]   = "ParkSit_M_IdleA";
	SUNBA_ANIMATIONS [5]   = "ParkSit_M_IdleB";
	SUNBA_ANIMATIONS [6]   = "ParkSit_M_IdleC";
	SUNBA_ANIMATIONS [7]   = "ParkSit_M_in";
	SUNBA_ANIMATIONS [8]   = "ParkSit_M_out";
	SUNBA_ANIMATIONS [9]   = "ParkSit_W_idleA";
	SUNBA_ANIMATIONS [10]   = "ParkSit_W_idleB";
	SUNBA_ANIMATIONS [11]   = "ParkSit_W_idleC";
	SUNBA_ANIMATIONS [12]   = "ParkSit_W_in";
	SUNBA_ANIMATIONS [13]   = "ParkSit_W_out";
	SUNBA_ANIMATIONS [14]   = "SBATHE_F_LieB2Sit";
	SUNBA_ANIMATIONS [15]   = "SBATHE_F_Out";
	SUNBA_ANIMATIONS [16]   = "SitnWait_in_W";
	SUNBA_ANIMATIONS [17]   = "SitnWait_out_W";
	// SWAT - 22
	SWAT_ANIMATIONS [0]   = "gnstwall_injurd";
	SWAT_ANIMATIONS [1]   = "JMP_Wall1m_180";
	SWAT_ANIMATIONS [2]   = "Rail_fall";
	SWAT_ANIMATIONS [3]   = "Rail_fall_crawl";
	SWAT_ANIMATIONS [4]   = "swt_breach_01";
	SWAT_ANIMATIONS [5]   = "swt_breach_02";
	SWAT_ANIMATIONS [6]   = "swt_breach_03";
	SWAT_ANIMATIONS [7]   = "swt_go";
	SWAT_ANIMATIONS [8]   = "swt_lkt";
	SWAT_ANIMATIONS [9]   = "swt_sty";
	SWAT_ANIMATIONS [10]   = "swt_vent_01";
	SWAT_ANIMATIONS [11]   = "swt_vent_02";
	SWAT_ANIMATIONS [12]   = "swt_vnt_sht_die";
	SWAT_ANIMATIONS [13]   = "swt_vnt_sht_in";
	SWAT_ANIMATIONS [14]   = "swt_vnt_sht_loop";
	SWAT_ANIMATIONS [15]   = "swt_wllpk_L";
	SWAT_ANIMATIONS [16]   = "swt_wllpk_L_back";
	SWAT_ANIMATIONS [17]   = "swt_wllpk_R";
	SWAT_ANIMATIONS [18]   = "swt_wllpk_R_back";
	SWAT_ANIMATIONS [19]   = "swt_wllshoot_in_L";
	SWAT_ANIMATIONS [20]   = "swt_wllshoot_in_R";
	SWAT_ANIMATIONS [21]   = "swt_wllshoot_out_L";
	SWAT_ANIMATIONS [22]   = "swt_wllshoot_out_R";
	// SWEET - 6
	SWEET_ANIMATIONS [0]   = "ho_ass_slapped";
	SWEET_ANIMATIONS [1]   = "LaFin_Player";
	SWEET_ANIMATIONS [2]   = "LaFin_Sweet";
	SWEET_ANIMATIONS [3]   = "plyr_hndshldr_01";
	SWEET_ANIMATIONS [4]   = "sweet_ass_slap";
	SWEET_ANIMATIONS [5]   = "sweet_hndshldr_01";
	SWEET_ANIMATIONS [6]   = "Sweet_injuredloop";
	// SWIM - 6
	SWIM_ANIMATIONS [0]   = "Swim_Breast";
	SWIM_ANIMATIONS [1]   = "SWIM_crawl";
	SWIM_ANIMATIONS [2]   = "Swim_Dive_Under";
	SWIM_ANIMATIONS [3]   = "Swim_Glide";
	SWIM_ANIMATIONS [4]   = "Swim_jumpout";
	SWIM_ANIMATIONS [5]   = "Swim_Tread";
	SWIM_ANIMATIONS [6]   = "Swim_Under";
	// SWORD - 9
	SWORD_ANIMATIONS [0]   = "sword_1";
	SWORD_ANIMATIONS [1]   = "sword_2";
	SWORD_ANIMATIONS [2]   = "sword_3";
	SWORD_ANIMATIONS [3]   = "sword_4";
	SWORD_ANIMATIONS [4]   = "sword_block";
	SWORD_ANIMATIONS [5]   = "Sword_Hit_1";
	SWORD_ANIMATIONS [6]   = "Sword_Hit_2";
	SWORD_ANIMATIONS [7]   = "Sword_Hit_3";
	SWORD_ANIMATIONS [8]   = "sword_IDLE";
	SWORD_ANIMATIONS [9]   = "sword_part";
	// TANK - 5
	TANK_ANIMATIONS [0]   = "TANK_align_LHS";
	TANK_ANIMATIONS [1]   = "TANK_close_LHS";
	TANK_ANIMATIONS [2]   = "TANK_doorlocked";
	TANK_ANIMATIONS [3]   = "TANK_getin_LHS";
	TANK_ANIMATIONS [4]   = "TANK_getout_LHS";
	TANK_ANIMATIONS [5]   = "TANK_open_LHS";
	// TATTOO - 56
	TATTOO_ANIMATIONS [0]   = "TAT_ArmL_In_O";
	TATTOO_ANIMATIONS [1]   = "TAT_ArmL_In_P";
	TATTOO_ANIMATIONS [2]   = "TAT_ArmL_In_T";
	TATTOO_ANIMATIONS [3]   = "TAT_ArmL_Out_O";
	TATTOO_ANIMATIONS [4]   = "TAT_ArmL_Out_P";
	TATTOO_ANIMATIONS [5]   = "TAT_ArmL_Out_T";
	TATTOO_ANIMATIONS [6]   = "TAT_ArmL_Pose_O";
	TATTOO_ANIMATIONS [7]   = "TAT_ArmL_Pose_P";
	TATTOO_ANIMATIONS [8]   = "TAT_ArmL_Pose_T";
	TATTOO_ANIMATIONS [9]   = "TAT_ArmR_In_O";
	TATTOO_ANIMATIONS [10]   = "TAT_ArmR_In_P";
	TATTOO_ANIMATIONS [11]   = "TAT_ArmR_In_T";
	TATTOO_ANIMATIONS [12]   = "TAT_ArmR_Out_O";
	TATTOO_ANIMATIONS [13]   = "TAT_ArmR_Out_P";
	TATTOO_ANIMATIONS [14]   = "TAT_ArmR_Out_T";
	TATTOO_ANIMATIONS [15]   = "TAT_ArmR_Pose_O";
	TATTOO_ANIMATIONS [16]   = "TAT_ArmR_Pose_P";
	TATTOO_ANIMATIONS [17]   = "TAT_ArmR_Pose_T";
	TATTOO_ANIMATIONS [18]   = "TAT_Back_In_O";
	TATTOO_ANIMATIONS [19]   = "TAT_Back_In_P";
	TATTOO_ANIMATIONS [20]   = "TAT_Back_In_T";
	TATTOO_ANIMATIONS [21]   = "TAT_Back_Out_O";
	TATTOO_ANIMATIONS [22]   = "TAT_Back_Out_P";
	TATTOO_ANIMATIONS [23]   = "TAT_Back_Out_T";
	TATTOO_ANIMATIONS [24]   = "TAT_Back_Pose_O";
	TATTOO_ANIMATIONS [25]   = "TAT_Back_Pose_P";
	TATTOO_ANIMATIONS [26]   = "TAT_Back_Pose_T";
	TATTOO_ANIMATIONS [27]   = "TAT_Back_Sit_In_P";
	TATTOO_ANIMATIONS [28]   = "TAT_Back_Sit_Loop_P";
	TATTOO_ANIMATIONS [29]   = "TAT_Back_Sit_Out_P";
	TATTOO_ANIMATIONS [30]   = "TAT_Bel_In_O";
	TATTOO_ANIMATIONS [31]   = "TAT_Bel_In_T";
	TATTOO_ANIMATIONS [32]   = "TAT_Bel_Out_O";
	TATTOO_ANIMATIONS [33]   = "TAT_Bel_Out_T";
	TATTOO_ANIMATIONS [34]   = "TAT_Bel_Pose_O";
	TATTOO_ANIMATIONS [35]   = "TAT_Bel_Pose_T";
	TATTOO_ANIMATIONS [36]   = "TAT_Che_In_O";
	TATTOO_ANIMATIONS [37]   = "TAT_Che_In_P";
	TATTOO_ANIMATIONS [38]   = "TAT_Che_In_T";
	TATTOO_ANIMATIONS [39]   = "TAT_Che_Out_O";
	TATTOO_ANIMATIONS [40]   = "TAT_Che_Out_P";
	TATTOO_ANIMATIONS [41]   = "TAT_Che_Out_T";
	TATTOO_ANIMATIONS [42]   = "TAT_Che_Pose_O";
	TATTOO_ANIMATIONS [43]   = "TAT_Che_Pose_P";
	TATTOO_ANIMATIONS [44]   = "TAT_Che_Pose_T";
	TATTOO_ANIMATIONS [45]   = "TAT_Drop_O";
	TATTOO_ANIMATIONS [46]   = "TAT_Idle_Loop_O";
	TATTOO_ANIMATIONS [47]   = "TAT_Idle_Loop_T";
	TATTOO_ANIMATIONS [48]   = "TAT_Sit_In_O";
	TATTOO_ANIMATIONS [49]   = "TAT_Sit_In_P";
	TATTOO_ANIMATIONS [50]   = "TAT_Sit_In_T";
	TATTOO_ANIMATIONS [51]   = "TAT_Sit_Loop_O";
	TATTOO_ANIMATIONS [52]   = "TAT_Sit_Loop_P";
	TATTOO_ANIMATIONS [53]   = "TAT_Sit_Loop_T";
	TATTOO_ANIMATIONS [54]   = "TAT_Sit_Out_O";
	TATTOO_ANIMATIONS [55]   = "TAT_Sit_Out_P";
	TATTOO_ANIMATIONS [56]   = "TAT_Sit_Out_T";
	// TEC - 3
	TEC_ANIMATIONS [0]   = "TEC_crouchfire";
	TEC_ANIMATIONS [1]   = "TEC_crouchreload";
	TEC_ANIMATIONS [2]   = "TEC_fire";
	TEC_ANIMATIONS [3]   = "TEC_reload";
	// TRAIN - 3
	TRAIN_ANIMATIONS [0]   = "tran_gtup";
	TRAIN_ANIMATIONS [1]   = "tran_hng";
	TRAIN_ANIMATIONS [2]   = "tran_ouch";
	TRAIN_ANIMATIONS [3]   = "tran_stmb";
	// TRUCK - 16
	TRUCK_ANIMATIONS [0]   = "TRUCK_ALIGN_LHS";
	TRUCK_ANIMATIONS [1]   = "TRUCK_ALIGN_RHS";
	TRUCK_ANIMATIONS [2]   = "TRUCK_closedoor_LHS";
	TRUCK_ANIMATIONS [3]   = "TRUCK_closedoor_RHS";
	TRUCK_ANIMATIONS [4]   = "TRUCK_close_LHS";
	TRUCK_ANIMATIONS [5]   = "TRUCK_close_RHS";
	TRUCK_ANIMATIONS [6]   = "TRUCK_getin_LHS";
	TRUCK_ANIMATIONS [7]   = "TRUCK_getin_RHS";
	TRUCK_ANIMATIONS [8]   = "TRUCK_getout_LHS";
	TRUCK_ANIMATIONS [9]   = "TRUCK_getout_RHS";
	TRUCK_ANIMATIONS [10]   = "TRUCK_jackedLHS";
	TRUCK_ANIMATIONS [11]   = "TRUCK_jackedRHS";
	TRUCK_ANIMATIONS [12]   = "TRUCK_open_LHS";
	TRUCK_ANIMATIONS [13]   = "TRUCK_open_RHS";
	TRUCK_ANIMATIONS [14]   = "TRUCK_pullout_LHS";
	TRUCK_ANIMATIONS [15]   = "TRUCK_pullout_RHS";
	TRUCK_ANIMATIONS [16]   = "TRUCK_Shuffle";
	// UZI - 4
	UZI_ANIMATIONS [0]   = "UZI_crouchfire";
	UZI_ANIMATIONS [1]   = "UZI_crouchreload";
	UZI_ANIMATIONS [2]   = "UZI_fire";
	UZI_ANIMATIONS [3]   = "UZI_fire_poor";
	UZI_ANIMATIONS [4]   = "UZI_reload";
	// VAN - 7
	VAN_ANIMATIONS [0]   = "VAN_close_back_LHS";
	VAN_ANIMATIONS [1]   = "VAN_close_back_RHS";
	VAN_ANIMATIONS [2]   = "VAN_getin_Back_LHS";
	VAN_ANIMATIONS [3]   = "VAN_getin_Back_RHS";
	VAN_ANIMATIONS [4]   = "VAN_getout_back_LHS";
	VAN_ANIMATIONS [5]   = "VAN_getout_back_RHS";
	VAN_ANIMATIONS [6]   = "VAN_open_back_LHS";
	VAN_ANIMATIONS [7]   = "VAN_open_back_RHS";
	// VENDING - 5
	VENDING_ANIMATIONS      [0] = "VEND_Drink2_P";
	VENDING_ANIMATIONS      [1] = "VEND_Drink_P";
	VENDING_ANIMATIONS      [2] = "vend_eat1_P";
	VENDING_ANIMATIONS      [3] = "VEND_Eat_P";
	VENDING_ANIMATIONS      [4] = "VEND_Use";
	VENDING_ANIMATIONS      [5] = "VEND_Use_pt2";
	// VORTEX - 3
	VORTEX_ANIMATIONS [0]   = "CAR_jumpin_LHS";
	VORTEX_ANIMATIONS [1]   = "CAR_jumpin_RHS";
	VORTEX_ANIMATIONS [2]   = "vortex_getout_LHS";
	VORTEX_ANIMATIONS [3]   = "vortex_getout_RHS";
	// WAYFA - 17
	WAYFA_ANIMATIONS [0]   = "WF_Back";
	WAYFA_ANIMATIONS [1]   = "WF_drivebyFT";
	WAYFA_ANIMATIONS [2]   = "WF_drivebyLHS";
	WAYFA_ANIMATIONS [3]   = "WF_drivebyRHS";
	WAYFA_ANIMATIONS [4]   = "WF_Fwd";
	WAYFA_ANIMATIONS [5]   = "WF_getoffBACK";
	WAYFA_ANIMATIONS [6]   = "WF_getoffLHS";
	WAYFA_ANIMATIONS [7]   = "WF_getoffRHS";
	WAYFA_ANIMATIONS [8]   = "WF_hit";
	WAYFA_ANIMATIONS [9]   = "WF_jumponL";
	WAYFA_ANIMATIONS [10]   = "WF_jumponR";
	WAYFA_ANIMATIONS [11]   = "WF_kick";
	WAYFA_ANIMATIONS [12]   = "WF_Left";
	WAYFA_ANIMATIONS [13]   = "WF_passenger";
	WAYFA_ANIMATIONS [14]   = "WF_pushes";
	WAYFA_ANIMATIONS [15]   = "WF_Ride";
	WAYFA_ANIMATIONS [16]   = "WF_Right";
	WAYFA_ANIMATIONS [17]   = "WF_Still";
	// ARMA - 16
	ARMA_ANIMATIONS [0]   = "SHP_1H_Lift";
	ARMA_ANIMATIONS [1]   = "SHP_1H_Lift_End";
	ARMA_ANIMATIONS [2]   = "SHP_1H_Ret";
	ARMA_ANIMATIONS [3]   = "SHP_1H_Ret_S";
	ARMA_ANIMATIONS [4]   = "SHP_2H_Lift";
	ARMA_ANIMATIONS [5]   = "SHP_2H_Lift_End";
	ARMA_ANIMATIONS [6]   = "SHP_2H_Ret";
	ARMA_ANIMATIONS [7]   = "SHP_2H_Ret_S";
	ARMA_ANIMATIONS [8]   = "SHP_Ar_Lift";
	ARMA_ANIMATIONS [9]   = "SHP_Ar_Lift_End";
	ARMA_ANIMATIONS [10]   = "SHP_Ar_Ret";
	ARMA_ANIMATIONS [11]   = "SHP_Ar_Ret_S";
	ARMA_ANIMATIONS [12]   = "SHP_G_Lift_In";
	ARMA_ANIMATIONS [13]   = "SHP_G_Lift_Out";
	ARMA_ANIMATIONS [14]   = "SHP_Tray_In";
	ARMA_ANIMATIONS [15]   = "SHP_Tray_Out";
	ARMA_ANIMATIONS [16]   = "SHP_Tray_Pose";
	// WUZI - 11
	WUZI_ANIMATIONS [0]   = "CS_Dead_Guy";
	WUZI_ANIMATIONS [1]   = "CS_Plyr_pt1";
	WUZI_ANIMATIONS [2]   = "CS_Plyr_pt2";
	WUZI_ANIMATIONS [3]   = "CS_Wuzi_pt1";
	WUZI_ANIMATIONS [4]   = "CS_Wuzi_pt2";
	WUZI_ANIMATIONS [5]   = "Walkstart_Idle_01";
	WUZI_ANIMATIONS [6]   = "Wuzi_follow";
	WUZI_ANIMATIONS [7]   = "Wuzi_Greet_Plyr";
	WUZI_ANIMATIONS [8]   = "Wuzi_Greet_Wuzi";
	WUZI_ANIMATIONS [9]   = "Wuzi_grnd_chk";
	WUZI_ANIMATIONS [10]   = "Wuzi_stand_loop";
	WUZI_ANIMATIONS [11]   = "Wuzi_Walk";
	// PED - 285
	PED_ANIMATIONS[0]   = "abseil";
	PED_ANIMATIONS[1]   = "ARRESTgun";
	PED_ANIMATIONS[2]   = "ATM";
	PED_ANIMATIONS[3]   = "BIKE_elbowL";
	PED_ANIMATIONS[4]   = "BIKE_elbowR";
	PED_ANIMATIONS[5]   = "BIKE_fallR";
	PED_ANIMATIONS[6]   = "BIKE_fall_off";
	PED_ANIMATIONS[7]   = "BIKE_pickupL";
	PED_ANIMATIONS[8]   = "BIKE_pickupR";
	PED_ANIMATIONS[9]   = "BIKE_pullupL";
	PED_ANIMATIONS[10]   = "BIKE_pullupR";
	PED_ANIMATIONS[11]   = "bomber";
	PED_ANIMATIONS[12]   = "CAR_alignHI_LHS";
	PED_ANIMATIONS[13]   = "CAR_alignHI_RHS";
	PED_ANIMATIONS[14]   = "CAR_align_LHS";
	PED_ANIMATIONS[15]   = "CAR_align_RHS";
	PED_ANIMATIONS[16]   = "CAR_closedoorL_LHS";
	PED_ANIMATIONS[17]   = "CAR_closedoorL_RHS";
	PED_ANIMATIONS[18]   = "CAR_closedoor_LHS";
	PED_ANIMATIONS[19]   = "CAR_close_LHS";
	PED_ANIMATIONS[20]   = "CAR_close_RHS";
	PED_ANIMATIONS[21]   = "CAR_crawloutRHS";
	PED_ANIMATIONS[22]   = "CAR_dead_LHS";
	PED_ANIMATIONS[23]   = "CAR_dead_RHS";
	PED_ANIMATIONS[24]   = "CAR_doorlocked_LHS";
	PED_ANIMATIONS[25]   = "CAR_doorlocked_RHS";
	PED_ANIMATIONS[26]   = "CAR_fallout_RHS";
	PED_ANIMATIONS[27]   = "CAR_getinL_LHS";
	PED_ANIMATIONS[28]   = "CAR_getinL_RHS";
	PED_ANIMATIONS[29]   = "CAR_getin_LHS";
	PED_ANIMATIONS[30]   = "CAR_getin_RHS";
	PED_ANIMATIONS[31]   = "CAR_getoutL_LHS";
	PED_ANIMATIONS[32]   = "CAR_getoutL_RHS";
	PED_ANIMATIONS[33]   = "CAR_getout_LHS";
	PED_ANIMATIONS[34]   = "CAR_getout_RHS";
	PED_ANIMATIONS[35]   = "car_hookertalk";
	PED_ANIMATIONS[36]   = "CAR_jackedLHS";
	PED_ANIMATIONS[37]   = "CAR_jackedRHS";
	PED_ANIMATIONS[38]   = "CAR_jumpin_LHS";
	PED_ANIMATIONS[39]   = "CAR_LB";
	PED_ANIMATIONS[40]   = "CAR_LB_pro";
	PED_ANIMATIONS[41]   = "CAR_LB_weak";
	PED_ANIMATIONS[42]   = "CAR_LjackedLHS";
	PED_ANIMATIONS[43]   = "CAR_LjackedRHS";
	PED_ANIMATIONS[44]   = "CAR_Lshuffle_RHS";
	PED_ANIMATIONS[45]   = "CAR_Lsit";
	PED_ANIMATIONS[46]   = "CAR_open_LHS";
	PED_ANIMATIONS[47]   = "CAR_open_RHS";
	PED_ANIMATIONS[48]   = "CAR_pulloutL_LHS";
	PED_ANIMATIONS[49]   = "CAR_pulloutL_RHS";
	PED_ANIMATIONS[50]   = "CAR_pullout_LHS";
	PED_ANIMATIONS[51]   = "CAR_pullout_RHS";
	PED_ANIMATIONS[52]   = "CAR_Qjacked";
	PED_ANIMATIONS[53]   = "CAR_rolldoor";
	PED_ANIMATIONS[54]   = "CAR_rolldoorLO";
	PED_ANIMATIONS[55]   = "CAR_rollout_LHS";
	PED_ANIMATIONS[56]   = "CAR_rollout_RHS";
	PED_ANIMATIONS[57]   = "CAR_shuffle_RHS";
	PED_ANIMATIONS[58]   = "CAR_sit";
	PED_ANIMATIONS[59]   = "CAR_sitp";
	PED_ANIMATIONS[60]   = "CAR_sitpLO";
	PED_ANIMATIONS[61]   = "CAR_sit_pro";
	PED_ANIMATIONS[62]   = "CAR_sit_weak";
	PED_ANIMATIONS[63]   = "CAR_tune_radio";
	PED_ANIMATIONS[64]   = "CLIMB_idle";
	PED_ANIMATIONS[65]   = "CLIMB_jump";
	PED_ANIMATIONS[66]   = "CLIMB_jump2fall";
	PED_ANIMATIONS[67]   = "CLIMB_jump_B";
	PED_ANIMATIONS[68]   = "CLIMB_Pull";
	PED_ANIMATIONS[69]   = "CLIMB_Stand";
	PED_ANIMATIONS[70]   = "CLIMB_Stand_finish";
	PED_ANIMATIONS[71]   = "cower";
	PED_ANIMATIONS[72]   = "Crouch_Roll_L";
	PED_ANIMATIONS[73]   = "Crouch_Roll_R";
	PED_ANIMATIONS[74]   = "DAM_armL_frmBK";
	PED_ANIMATIONS[75]   = "DAM_armL_frmFT";
	PED_ANIMATIONS[76]   = "DAM_armL_frmLT";
	PED_ANIMATIONS[77]   = "DAM_armR_frmBK";
	PED_ANIMATIONS[78]   = "DAM_armR_frmFT";
	PED_ANIMATIONS[79]   = "DAM_armR_frmRT";
	PED_ANIMATIONS[80]   = "DAM_LegL_frmBK";
	PED_ANIMATIONS[81]   = "DAM_LegL_frmFT";
	PED_ANIMATIONS[82]   = "DAM_LegL_frmLT";
	PED_ANIMATIONS[83]   = "DAM_LegR_frmBK";
	PED_ANIMATIONS[84]   = "DAM_LegR_frmFT";
	PED_ANIMATIONS[85]   = "DAM_LegR_frmRT";
	PED_ANIMATIONS[86]   = "DAM_stomach_frmBK";
	PED_ANIMATIONS[87]   = "DAM_stomach_frmFT";
	PED_ANIMATIONS[88]   = "DAM_stomach_frmLT";
	PED_ANIMATIONS[89]   = "DAM_stomach_frmRT";
	PED_ANIMATIONS[90]   = "DOOR_LHinge_O";
	PED_ANIMATIONS[91]   = "DOOR_RHinge_O";
	PED_ANIMATIONS[92]   = "DrivebyL_L";
	PED_ANIMATIONS[93]   = "DrivebyL_R";
	PED_ANIMATIONS[94]   = "Driveby_L";
	PED_ANIMATIONS[95]   = "Driveby_R";
	PED_ANIMATIONS[96]   = "DRIVE_BOAT";
	PED_ANIMATIONS[97]   = "DRIVE_BOAT_back";
	PED_ANIMATIONS[98]   = "DRIVE_BOAT_L";
	PED_ANIMATIONS[99]   = "DRIVE_BOAT_R";
	PED_ANIMATIONS[100]   = "Drive_L";
	PED_ANIMATIONS[101]   = "Drive_LO_l";
	PED_ANIMATIONS[102]   = "Drive_LO_R";
	PED_ANIMATIONS[103]   = "Drive_L_pro";
	PED_ANIMATIONS[104]   = "Drive_L_pro_slow";
	PED_ANIMATIONS[105]   = "Drive_L_slow";
	PED_ANIMATIONS[106]   = "Drive_L_weak";
	PED_ANIMATIONS[107]   = "Drive_L_weak_slow";
	PED_ANIMATIONS[108]   = "Drive_truck";
	PED_ANIMATIONS[109]   = "DRIVE_truck_back";
	PED_ANIMATIONS[110]   = "DRIVE_truck_L";
	PED_ANIMATIONS[111]   = "DRIVE_truck_R";
	PED_ANIMATIONS[112]   = "Drown";
	PED_ANIMATIONS[113]   = "DUCK_cower";
	PED_ANIMATIONS[114]   = "endchat_01";
	PED_ANIMATIONS[115]   = "endchat_02";
	PED_ANIMATIONS[116]   = "endchat_03";
	PED_ANIMATIONS[117]   = "EV_dive";
	PED_ANIMATIONS[118]   = "EV_step";
	PED_ANIMATIONS[119]   = "facanger";
	PED_ANIMATIONS[120]   = "facgum";
	PED_ANIMATIONS[121]   = "facsurp";
	PED_ANIMATIONS[122]   = "facsurpm";
	PED_ANIMATIONS[123]   = "factalk";
	PED_ANIMATIONS[124]   = "facurios";
	PED_ANIMATIONS[125]   = "FALL_back";
	PED_ANIMATIONS[126]   = "FALL_collapse";
	PED_ANIMATIONS[127]   = "FALL_fall";
	PED_ANIMATIONS[128]   = "FALL_front";
	PED_ANIMATIONS[129]   = "FALL_glide";
	PED_ANIMATIONS[130]   = "FALL_land";
	PED_ANIMATIONS[131]   = "FALL_skyDive";
	PED_ANIMATIONS[132]   = "Fight2Idle";
	PED_ANIMATIONS[133]   = "FightA_1";
	PED_ANIMATIONS[134]   = "FightA_2";
	PED_ANIMATIONS[135]   = "FightA_3";
	PED_ANIMATIONS[136]   = "FightA_block";
	PED_ANIMATIONS[137]   = "FightA_G";
	PED_ANIMATIONS[138]   = "FightA_M";
	PED_ANIMATIONS[139]   = "FIGHTIDLE";
	PED_ANIMATIONS[140]   = "FightShB";
	PED_ANIMATIONS[141]   = "FightShF";
	PED_ANIMATIONS[142]   = "FightSh_BWD";
	PED_ANIMATIONS[143]   = "FightSh_FWD";
	PED_ANIMATIONS[144]   = "FightSh_Left";
	PED_ANIMATIONS[145]   = "FightSh_Right";
	PED_ANIMATIONS[146]   = "flee_lkaround_01";
	PED_ANIMATIONS[147]   = "FLOOR_hit";
	PED_ANIMATIONS[148]   = "FLOOR_hit_f";
	PED_ANIMATIONS[149]   = "fucku";
	PED_ANIMATIONS[150]   = "gang_gunstand";
	PED_ANIMATIONS[151]   = "gas_cwr";
	PED_ANIMATIONS[152]   = "getup";
	PED_ANIMATIONS[153]   = "getup_front";
	PED_ANIMATIONS[154]   = "gum_eat";
	PED_ANIMATIONS[155]   = "GunCrouchBwd";
	PED_ANIMATIONS[156]   = "GunCrouchFwd";
	PED_ANIMATIONS[157]   = "GunMove_BWD";
	PED_ANIMATIONS[158]   = "GunMove_FWD";
	PED_ANIMATIONS[159]   = "GunMove_L";
	PED_ANIMATIONS[160]   = "GunMove_R";
	PED_ANIMATIONS[161]   = "Gun_2_IDLE";
	PED_ANIMATIONS[162]   = "GUN_BUTT";
	PED_ANIMATIONS[163]   = "GUN_BUTT_crouch";
	PED_ANIMATIONS[164]   = "Gun_stand";
	PED_ANIMATIONS[165]   = "handscower";
	PED_ANIMATIONS[166]   = "handsup";          //////////// LEVANTAR MANOS
	PED_ANIMATIONS[167]   = "HitA_1";
	PED_ANIMATIONS[168]   = "HitA_2";
	PED_ANIMATIONS[169]   = "HitA_3";
	PED_ANIMATIONS[170]   = "HIT_back";
	PED_ANIMATIONS[171]   = "HIT_behind";
	PED_ANIMATIONS[172]   = "HIT_front";
	PED_ANIMATIONS[173]   = "HIT_GUN_BUTT";
	PED_ANIMATIONS[174]   = "HIT_L";
	PED_ANIMATIONS[175]   = "HIT_R";
	PED_ANIMATIONS[176]   = "HIT_walk";
	PED_ANIMATIONS[177]   = "HIT_wall";
	PED_ANIMATIONS[178]   = "Idlestance_fat";
	PED_ANIMATIONS[179]   = "idlestance_old";
	PED_ANIMATIONS[180]   = "IDLE_armed";
	PED_ANIMATIONS[181]   = "IDLE_chat";
	PED_ANIMATIONS[182]   = "IDLE_csaw";
	PED_ANIMATIONS[183]   = "Idle_Gang1";
	PED_ANIMATIONS[184]   = "IDLE_HBHB";
	PED_ANIMATIONS[185]   = "IDLE_ROCKET";
	PED_ANIMATIONS[186]   = "IDLE_stance";
	PED_ANIMATIONS[187]   = "IDLE_taxi";
	PED_ANIMATIONS[188]   = "IDLE_tired";
	PED_ANIMATIONS[189]   = "Jetpack_Idle";
	PED_ANIMATIONS[190]   = "JOG_femaleA";
	PED_ANIMATIONS[191]   = "JOG_maleA";
	PED_ANIMATIONS[192]   = "JUMP_glide";
	PED_ANIMATIONS[193]   = "JUMP_land";
	PED_ANIMATIONS[194]   = "JUMP_launch";
	PED_ANIMATIONS[195]   = "JUMP_launch_R";
	PED_ANIMATIONS[196]   = "KART_drive";
	PED_ANIMATIONS[197]   = "KART_L";
	PED_ANIMATIONS[198]   = "KART_LB";
	PED_ANIMATIONS[199]   = "KART_R";
	PED_ANIMATIONS[200]   = "KD_left";
	PED_ANIMATIONS[201]   = "KD_right";
	PED_ANIMATIONS[202]   = "KO_shot_face";
	PED_ANIMATIONS[203]   = "KO_shot_front";
	PED_ANIMATIONS[204]   = "KO_shot_stom";
	PED_ANIMATIONS[205]   = "KO_skid_back";
	PED_ANIMATIONS[206]   = "KO_skid_front";
	PED_ANIMATIONS[207]   = "KO_spin_L";
	PED_ANIMATIONS[208]   = "KO_spin_R";
	PED_ANIMATIONS[209]   = "pass_Smoke_in_car";
	PED_ANIMATIONS[210]   = "phone_in";
	PED_ANIMATIONS[211]   = "phone_out";
	PED_ANIMATIONS[212]   = "phone_talk";
	PED_ANIMATIONS[213]   = "Player_Sneak";
	PED_ANIMATIONS[214]   = "Player_Sneak_walkstart";
	PED_ANIMATIONS[215]   = "roadcross";                    //////////////// CRUZAR LAS MANOS?
	PED_ANIMATIONS[216]   = "roadcross_female";
	PED_ANIMATIONS[217]   = "roadcross_gang";
	PED_ANIMATIONS[218]   = "roadcross_old";
	PED_ANIMATIONS[219]   = "run_1armed";
	PED_ANIMATIONS[220]   = "run_armed";
	PED_ANIMATIONS[221]   = "run_civi";
	PED_ANIMATIONS[222]   = "run_csaw";
	PED_ANIMATIONS[223]   = "run_fat";
	PED_ANIMATIONS[224]   = "run_fatold";
	PED_ANIMATIONS[225]   = "run_gang1";
	PED_ANIMATIONS[226]   = "run_left";
	PED_ANIMATIONS[227]   = "run_old";
	PED_ANIMATIONS[228]   = "run_player";
	PED_ANIMATIONS[229]   = "run_right";
	PED_ANIMATIONS[230]   = "run_rocket";
	PED_ANIMATIONS[231]   = "Run_stop";
	PED_ANIMATIONS[232]   = "Run_stopR";
	PED_ANIMATIONS[233]   = "Run_Wuzi";
	PED_ANIMATIONS[234]   = "SEAT_down";
	PED_ANIMATIONS[235]   = "SEAT_idle";
	PED_ANIMATIONS[236]   = "SEAT_up";
	PED_ANIMATIONS[237]   = "SHOT_leftP";
	PED_ANIMATIONS[238]   = "SHOT_partial";
	PED_ANIMATIONS[239]   = "SHOT_partial_B";
	PED_ANIMATIONS[240]   = "SHOT_rightP";
	PED_ANIMATIONS[241]   = "Shove_Partial";
	PED_ANIMATIONS[242]   = "Smoke_in_car";
	PED_ANIMATIONS[243]   = "sprint_civi";
	PED_ANIMATIONS[244]   = "sprint_panic";
	PED_ANIMATIONS[245]   = "Sprint_Wuzi";
	PED_ANIMATIONS[246]   = "swat_run";
	PED_ANIMATIONS[247]   = "Swim_Tread";
	PED_ANIMATIONS[248]   = "Tap_hand";
	PED_ANIMATIONS[249]   = "Tap_handP";
	PED_ANIMATIONS[250]   = "turn_180";
	PED_ANIMATIONS[251]   = "Turn_L";
	PED_ANIMATIONS[252]   = "Turn_R";
	PED_ANIMATIONS[253]   = "WALK_armed";
	PED_ANIMATIONS[254]   = "WALK_civi";
	PED_ANIMATIONS[255]   = "WALK_csaw";
	PED_ANIMATIONS[256]   = "Walk_DoorPartial";
	PED_ANIMATIONS[257]   = "WALK_drunk";
	PED_ANIMATIONS[258]   = "WALK_fat";
	PED_ANIMATIONS[259]   = "WALK_fatold";
	PED_ANIMATIONS[260]   = "WALK_gang1";
	PED_ANIMATIONS[261]   = "WALK_gang2";
	PED_ANIMATIONS[262]   = "WALK_old";
	PED_ANIMATIONS[263]   = "WALK_player";
	PED_ANIMATIONS[264]   = "WALK_rocket";
	PED_ANIMATIONS[265]   = "WALK_shuffle";
	PED_ANIMATIONS[266]   = "WALK_start";
	PED_ANIMATIONS[267]   = "WALK_start_armed";
	PED_ANIMATIONS[268]   = "WALK_start_csaw";
	PED_ANIMATIONS[269]   = "WALK_start_rocket";
	PED_ANIMATIONS[270]   = "Walk_Wuzi";
	PED_ANIMATIONS[271]   = "WEAPON_crouch";
	PED_ANIMATIONS[272]   = "woman_idlestance";
	PED_ANIMATIONS[273]   = "woman_run";
	PED_ANIMATIONS[274]   = "WOMAN_runbusy";
	PED_ANIMATIONS[275]   = "WOMAN_runfatold";
	PED_ANIMATIONS[276]   = "woman_runpanic";
	PED_ANIMATIONS[277]   = "WOMAN_runsexy";
	PED_ANIMATIONS[278]   = "WOMAN_walkbusy";
	PED_ANIMATIONS[279]   = "WOMAN_walkfatold";
	PED_ANIMATIONS[280]   = "WOMAN_walknorm";
	PED_ANIMATIONS[281]   = "WOMAN_walkold";
	PED_ANIMATIONS[282]   = "WOMAN_walkpro";
	PED_ANIMATIONS[283]   = "WOMAN_walksexy";
	PED_ANIMATIONS[284]   = "WOMAN_walkshop";
	PED_ANIMATIONS[285]   = "XPRESSscratch";
}
public ApplyPlayerAnimCustom(playerid, const animlib[], const animid[], loop)
{
	if ( loop )
	{
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
	}
	else
	{
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
	}
	PlayersDataOnline[playerid][InAnim] = true;
}
public LoadTypeObjectsBolsillos()
{
	ObjetosBolsillosNombres[0] = "Vacío";
	ObjetosBolsillosNombres[1] = "Patines";
	ObjetosBolsillosNombres[2] = "Dados";
	ObjetosBolsillosNombres[3] = "Móvil";
	ObjetosBolsillosNombres[4] = "Agenda";
}
public IsNotFullBolsillo(playeridError, playerid, const error[])
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == 0)
	    {
			return true;
		}
	}
	SendInfoMessage(playeridError, 0, "1020", error);
	return false;
}
public IsObjectInBolsillo(playerid, objectid)
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == objectid)
	    {
	        return true;
		}
	}
	return false;
}
public RemoveObjectBolsillo(playerid, objectid)
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == objectid)
	    {
	        PlayersData[playerid][Bolsillos][i] = 0;
			return true;
		}
	}
	return false;
}
public AddObjectBolsillo(playerid, objectid)
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == 0)
	    {
	        PlayersData[playerid][Bolsillos][i] = objectid;
			return true;
		}
	}
	return false;
}
public IntentarAccion(playerid, const text[], rndNum)
{
	if ( gettime() - PlayersDataOnline[playerid][Intentar]  >= 5 )
	{
	    PlayersDataOnline[playerid][Intentar] = gettime();
	    if ( rndNum )
	    {
            Acciones(playerid, 2, text);
            return true;
        }
        else
        {
            Acciones(playerid, 3, text);
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "130", "Tiene que esperar 5 segundos entre cada uso de /Intentar [Acción].");
	}
    return false;
}
public GetNearFaccion(playerid)
{
	if ( PlayersDataOnline[playerid][InPickup] )
	{
	    if (PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_FACCION)
	    {
	        if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipoid] == PlayersDataOnline[playerid][InPickupFaccion])
	        {
				return PlayersDataOnline[playerid][InPickupFaccion];
			}
	    }
	}
	SendInfoMessage(playerid, 0, "382", "Aquí no esta su facción");
    return -1;
}
public SetPlayerDescolgar(playerid)
{
	PlayPlayerStreamSound(playerid, 3600);
	SetPlayerSpecialAction(playerid, 11);
	if ( MovilesObjects[PlayersData[playerid][TypePhone]] == 330 )
	{
		SetPlayerAttachedObject(playerid, 9, MovilesObjects[PlayersData[playerid][TypePhone]], 6);
	}
	else
	{
		SetPlayerAttachedObject(playerid, 9, MovilesObjects[PlayersData[playerid][TypePhone]], 6, 0.079999, -0.004999, -0.009999, 270.000000, 0.000000, 180.000000, 1.000000, 1.000000, 1.000000);
	 //   0.079999, -0.004999, -0.009999, 270.000000, 0.000000, 180.000000, 1.000000, 1.000000, 1.000000
	}
}
public SetPlayerColgar(playerid)
{
	SetPlayerSpecialAction(playerid, 13);
	RemovePlayerAttachedObject(playerid, 9);
}
public ShowBolsillosToPlayer(playerid, playeridshow)
{
    new MsgBolsillos[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
	 ">>>>>>>>>> .:Bolsillos:. <<<<<<<<<");
	for (new i = 0; i<=4;i++)
	{
		format(MsgBolsillos, sizeof(MsgBolsillos), "Bolsillo %i: %s", i + 1, ObjetosBolsillosNombres[PlayersData[playerid][Bolsillos][i]]);
		SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, MsgBolsillos);
	}
}
public ShowBolsaToPlayer(playerid, playeridshow)
{
    new MsgBolsa[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
	 ">>>>>>>>>> .:Bolsa:. <<<<<<<<<");
	for (new i = 0; i<4;i++)
	{
		format(MsgBolsa, sizeof(MsgBolsa), "Bolsa %i: %s (%i)", i + 1, Articulos[PlayersData[playerid][Bolsa][i]][NameA], PlayersData[playerid][BolsaC][i]);
		SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, MsgBolsa);
	}
}
public ShowPasaporteToPlayer(playerid, playeridshow)
{
	new MsgPasaporteShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::PASAPORTE:::::............");
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Nombre: %s", PlayersDataOnline[playerid][NameOnlineFix]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Edad: %i", PlayersData[playerid][Edad]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Ciudad: %s", Ciudades[PlayersData[playerid][Ciudad]]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	if ( PlayersData[playerid][Faccion] != YKZ &&
		 PlayersData[playerid][Faccion] != LCN &&
		 PlayersData[playerid][Faccion] != SICARIOS &&
		 PlayersData[playerid][Faccion] != CONTRABANDISTAS &&
		 PlayersData[playerid][Faccion] != TRAFICANTES &&
		 PlayersData[playerid][Faccion] != COLTS &&
		 PlayersData[playerid][Faccion] != AK &&
		 PlayersData[playerid][Faccion] != VELTRAN &&
		 PlayersData[playerid][Faccion] != HEORS &&
		 PlayersData[playerid][Faccion] != CIVIL)
	{
		format(MsgPasaporteShow, MAX_TEXT_CHAT, "Trabajo: %s", FaccionData[PlayersData[playerid][Faccion]][NameFaccion]);
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
		format(MsgPasaporteShow, MAX_TEXT_CHAT, "Cargo: %s", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]]);
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	}
	else if ( PlayersData[playerid][Faccion] != CIVIL )
	{
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Trabajo: Desconocido");
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Cargo: Desconocido");
	}
	else
	{
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Trabajo: Ninguno");
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Cargo: Ninguno");
	}

	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Sexo: %s", Sexos[PlayersData[playerid][Sexo]]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Casado: %s", PlayersData[playerid][GirlFreind]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);

}
public ShowPapelesToPlayer(playerid, playeridshow)
{
	new MsgPapeles[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], "|___________ PAPELES DEL VEHÍCULO ___________|");
	format(MsgPapeles, sizeof(MsgPapeles), "Propietario: %s", PlayersDataOnline[playerid][NameOnlineFix]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
	format(MsgPapeles, sizeof(MsgPapeles), "Modelo: %s", coches_Todos_Nombres[GetVehicleModel(PlayersData[playerid][Car]) - 400]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
	format(MsgPapeles, sizeof(MsgPapeles), "Caduca: En %i días y %i horas", DataCars[PlayersData[playerid][Car]][Time] / 24, DataCars[PlayersData[playerid][Car]][Time] % 24);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
	format(MsgPapeles, sizeof(MsgPapeles), "Matrícula: %i",DataCars[PlayersData[playerid][Car]][Matricula]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
}
public ShowTextDrawFijosVelocimentros(playerid)
{
	TextDrawShowForPlayer(playerid, VelocimetroFijos[0]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[1]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[2]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[3]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[4]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[5]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[6]);
	ShowLockTextDraws(PlayersDataOnline[playerid][InCarId], -1);
}
public HideTextDrawFijosVelocimentros(playerid)
{
	TextDrawHideForPlayer(playerid, VelocimetroFijos[0]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[1]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[2]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[3]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[4]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[5]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[6]);
    if ( !DataCars[PlayersDataOnline[playerid][InCarId]][Lock] )
    {
	    TextDrawHideForPlayer(playerid, VelocimetroFijos[7]);
    }
    else
    {
	    TextDrawHideForPlayer(playerid, VelocimetroFijos[8]);
    }
}
public CreateTextDrawFijosVelocimetros()
{
	new COLOR_BORDES = 0xFFFFFFFF;
	VelocimetroFijos[0] = TextDrawCreateEx(455.0, 398.0,"~B~Ace\xa2te:~N~~G~Gas:~N~~R~Estado:~N~~P~Temp:~N~~W~Velocidad:                 ~Y~KM/H");
	TextDrawUseBox(VelocimetroFijos[0], 1);
	TextDrawBackgroundColor(VelocimetroFijos[0] ,0x000000A3);
	TextDrawColor(VelocimetroFijos[0], 0x2DFF00FF);
	TextDrawBoxColor(VelocimetroFijos[0], 0x000000A1);
	TextDrawTextSize(VelocimetroFijos[0], 624, 400.0);
	TextDrawSetShadow(VelocimetroFijos[0], 1);
	TextDrawLetterSize(VelocimetroFijos[0], 0.3 , 1.0);
	TextDrawFont(VelocimetroFijos[0], 2);

	// Barra 1 FONDO GAS;
	VelocimetroFijos[1] = TextDrawCreateEx(487.0, 411.0,"_");
	TextDrawUseBox(VelocimetroFijos[1], 1);
	TextDrawBackgroundColor(VelocimetroFijos[1] ,0x00000000);
	TextDrawColor(VelocimetroFijos[1], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[1], COLOR_BORDES);
	TextDrawTextSize(VelocimetroFijos[1], 620.0, 411.0);
	TextDrawSetShadow(VelocimetroFijos[1], 1);
	TextDrawLetterSize(VelocimetroFijos[1], 0.5 , 0.3);

	// Barra 2 FONDO GAS
	VelocimetroFijos[2] = TextDrawCreateEx(488.0, 412.0,"_");
	TextDrawUseBox(VelocimetroFijos[2], 1);
	TextDrawBackgroundColor(VelocimetroFijos[2] ,0x00000000);
	TextDrawColor(VelocimetroFijos[2], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[2], 0x2D9800FC);
	TextDrawTextSize(VelocimetroFijos[2], 619.0, 412.0);
	TextDrawSetShadow(VelocimetroFijos[2], 1);
	TextDrawLetterSize(VelocimetroFijos[2], 0.1 , 0.1);

	// Barra 1 FONDO ESTADO;
	VelocimetroFijos[3] = TextDrawCreateEx(511.0, 420.0,"_");
	TextDrawUseBox(VelocimetroFijos[3], 1);
	TextDrawBackgroundColor(VelocimetroFijos[3] ,0x00000000);
	TextDrawColor(VelocimetroFijos[3], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[3], COLOR_BORDES);
	TextDrawTextSize(VelocimetroFijos[3], 620.0, 420.0);
	TextDrawSetShadow(VelocimetroFijos[3], 1);
	TextDrawLetterSize(VelocimetroFijos[3], 0.5 , 0.3);

	// Barra 2 FONDO ESTADO
	VelocimetroFijos[4] = TextDrawCreateEx(512.0, 421.0,"_");
	TextDrawUseBox(VelocimetroFijos[4], 1);
	TextDrawBackgroundColor(VelocimetroFijos[4] ,0x00000000);
	TextDrawColor(VelocimetroFijos[4], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[4], 0x620000FF);
	TextDrawTextSize(VelocimetroFijos[4], 619.0, 421.0);
	TextDrawSetShadow(VelocimetroFijos[4], 1);
	TextDrawLetterSize(VelocimetroFijos[4], 0.1 , 0.1);

	// Barra 1 FONDO ACEITE;
	VelocimetroFijos[5] = TextDrawCreateEx(505.0, 401.8,"_");
	TextDrawUseBox(VelocimetroFijos[5], 1);
	TextDrawBackgroundColor(VelocimetroFijos[5] ,0x00000000);
	TextDrawColor(VelocimetroFijos[1], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[5], COLOR_BORDES);
	TextDrawTextSize(VelocimetroFijos[5], 620.0, 401.8);
	TextDrawSetShadow(VelocimetroFijos[5], 1);
	TextDrawLetterSize(VelocimetroFijos[5], 0.5 , 0.3);

	// Barra 2 FONDO ACEITE
	VelocimetroFijos[6] = TextDrawCreateEx(506.0, 402.8,"_");
	TextDrawUseBox(VelocimetroFijos[6], 1);
	TextDrawBackgroundColor(VelocimetroFijos[6] ,0x00000000);
	TextDrawColor(VelocimetroFijos[6], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[6], 0x0041FFFF);
	TextDrawTextSize(VelocimetroFijos[6], 619.0, 402.8);
	TextDrawSetShadow(VelocimetroFijos[6], 1);
	TextDrawLetterSize(VelocimetroFijos[6], 0.1 , 0.1);

	//Barra del seguro Abierta
	VelocimetroFijos[7] = TextDrawCreateEx(592.8, 430.0, "_");
	TextDrawUseBox(VelocimetroFijos[7], 1);
	TextDrawColor(VelocimetroFijos[7], 0x00CC00FF);
	TextDrawBoxColor(VelocimetroFijos[7], 0x00CC00FF);
	TextDrawSetShadow(VelocimetroFijos[7], 1);
	TextDrawTextSize(VelocimetroFijos[7], 616.2, 403.8);
	TextDrawLetterSize(VelocimetroFijos[7], 0.2, 0.3);

	//Barra del seguro Cerada
	VelocimetroFijos[8] = TextDrawCreateEx(592.8, 430.0, "_");
	TextDrawUseBox(VelocimetroFijos[8], 1);
	TextDrawColor(VelocimetroFijos[8], 0xFF3200FF);
	TextDrawBoxColor(VelocimetroFijos[8], 0xFF3200FF);
	TextDrawSetShadow(VelocimetroFijos[8], 1);
	TextDrawTextSize(VelocimetroFijos[8], 616.2, 403.8);
	TextDrawLetterSize(VelocimetroFijos[8], 0.2, 0.3);
}
public SetMenuTraficante(playerid)
{
	new ListDialog[700];
	format(ListDialog, sizeof(ListDialog),
	"{E6E6E6}01- %s {00F50A}(%i)\r\n{E6E6E6}02- %s {00F50A}(%i)\r\n{E6E6E6}03- %s {00F50A}(%i)\r\n{E6E6E6}04- %s {00F50A}(%i)\r\n{E6E6E6}05- %s {00F50A}(%i)\r\n{E6E6E6}06- %s {00F50A}(%i)\r\n{E6E6E6}07- %s {00F50A}(%i)\r\n{E6E6E6}08- %s {00F50A}(%i)\r\n{E6E6E6}09- %s {00F50A}(%i)\r\n{E6E6E6}10- %s {00F50A}(%i)\r\n{E6E6E6}11- %s {00F50A}(%i)\r\n{E6E6E6}12- %s {00F50A}(%i)\r\n{E6E6E6}13- %s {00F50A}(%i)\r\n{E6E6E6}14- %s {00F50A}(%i){E6E6E6}\r\n15- Bomba {00F50A}(1000)",
	SlotNameWeapon[IdArmasTraficantes[0]],
	MaterialesArmasTraficantes[0],
	SlotNameWeapon[IdArmasTraficantes[1]],
	MaterialesArmasTraficantes[1],
	SlotNameWeapon[IdArmasTraficantes[2]],
	MaterialesArmasTraficantes[2],
	SlotNameWeapon[IdArmasTraficantes[3]],
	MaterialesArmasTraficantes[3],
	SlotNameWeapon[IdArmasTraficantes[4]],
	MaterialesArmasTraficantes[4],
	SlotNameWeapon[IdArmasTraficantes[5]],
	MaterialesArmasTraficantes[5],
	SlotNameWeapon[IdArmasTraficantes[6]],
	MaterialesArmasTraficantes[6],
	SlotNameWeapon[IdArmasTraficantes[7]],
	MaterialesArmasTraficantes[7],
	SlotNameWeapon[IdArmasTraficantes[8]],
	MaterialesArmasTraficantes[8],
	SlotNameWeapon[IdArmasTraficantes[9]],
	MaterialesArmasTraficantes[9],
	SlotNameWeapon[IdArmasTraficantes[10]],
	MaterialesArmasTraficantes[10],
	SlotNameWeapon[IdArmasTraficantes[11]],
	MaterialesArmasTraficantes[11],
	SlotNameWeapon[IdArmasTraficantes[12]],
	MaterialesArmasTraficantes[12],
	SlotNameWeapon[IdArmasTraficantes[13]],
	MaterialesArmasTraficantes[13]
	);
	ShowPlayerDialogEx(playerid,10,DIALOG_STYLE_LIST,"{00A5FF}Crear Arma", ListDialog, "Crear", "Cancelar");
}
public GetMySecondNearVehicle(playerid)
{
    new MyVehicle = GetPlayerVehicleID(playerid);
    new Float:X, Float:Y, Float:Z;
	for (new i = 1; i <= MAX_CAR; i++)
	{
	    GetVehiclePos(i, X, Y, Z);
		if (IsPlayerInRangeOfPoint(playerid, 9.0,
			X,
			Y,
			Z) && i != MyVehicle)
		{
		    return i;
		}
	}
	return false;
}
public ShowLicenciasToPlayer(playerid, playeridshow)
{
	new MsgLicenciasShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::Licencias:::::............");
	for (new i = 0; i <= 6; i++)
	{
	    format(MsgLicenciasShow, sizeof(MsgLicenciasShow), "%s: %s", LicenciasNames[i], SiOrNo[PlayersData[playerid][Licencias][i]]);
	    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgLicenciasShow);
	}
    format(MsgLicenciasShow, sizeof(MsgLicenciasShow), "%s: %s", LicenciasNames[7], SiOrNo[PlayersData[playerid][LicenciaPesca]]);
    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgLicenciasShow);
}
public ShowIdiomasToPlayer(playerid, playeridshow)
{
	new MsgIdiomasShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::Idiomas:::::............");
	for (new i = 0; i <= 5; i++)
	{
	    format(MsgIdiomasShow, sizeof(MsgIdiomasShow), "%s: %s", IdiomasNames[i], SiOrNo[PlayersData[playerid][Idiomas][i]]);
	    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgIdiomasShow);
	}
}
public SendChatStreamIdioma(playerid, const text[], idiomaid)
{
	new Float:X, Float:Y, Float:Z;
	new MsgSendChat[MAX_TEXT_CHAT];
	new MsgSendChatDesconocido[MAX_TEXT_CHAT];
	GetPlayerPos(playerid,X,Y,Z);
	format(MsgSendChat, sizeof(MsgSendChat), "*%s [%s]: %s", PlayersDataOnline[playerid][NameOnlineFix], IdiomasNames[idiomaid], text);
	format(MsgSendChatDesconocido, sizeof(MsgSendChatDesconocido), "*%s [%s]: [No entendiste ninguna palabra]", PlayersDataOnline[playerid][NameOnlineFix], IdiomasNames[idiomaid]);
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[0],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[0],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[1],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[1],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[2],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[2],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[3],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[3],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[4],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[4],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[5],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[5],MsgSendChatDesconocido);
				}
			}
		}
	}
}
public LoadGasolineras()
{
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1941.8757;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -1772.9500;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 13.3906;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1003.6893;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -936.8884;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 42.3281;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1382.0477;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 459.5733;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 19.9506;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = 655.9045;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -564.9619;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 16.3359;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -94.3134;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -1167.7059;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 2.5095;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1605.8174;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2714.1812;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 48.5335;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2244.1245;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2560.6711;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 31.9219;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2026.7905;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 156.6203;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 29.0391;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2410.9126;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 976.2447;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 45.2969;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2968.8276;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 462.4414;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 4.9141;

	MAX_GASOLINERAS++; // LSPD
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1601.4536;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -1710.0747;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 5.8906;

	MAX_GASOLINERAS++; // SFPD
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1638.7878;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 692.7825;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = -5.2422;

	MAX_GASOLINERAS++; // SFPD CERCA DE LA POLICIA 1
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1672.1112;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 410.0213;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 7.3984;

	MAX_GASOLINERAS++; //SFPD CERCA DE LA POLICIA 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1678.8711;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 416.1111;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 7.6771;

	MAX_GASOLINERAS++; // Taller LS 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1788.7537;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2043.5769;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 13.5417;

	MAX_GASOLINERAS++; // LS Botes 1
	Gasolineras[MAX_GASOLINERAS][PosX]       = 851.4378;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2086.6902;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;

	MAX_GASOLINERAS++; // LS Botes 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = 851.3387;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2079.0093;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;

	MAX_GASOLINERAS++; // LS Botes 3
	Gasolineras[MAX_GASOLINERAS][PosX]       = 820.9417;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2070.0710;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;

	MAX_GASOLINERAS++; // LS Botes 4
	Gasolineras[MAX_GASOLINERAS][PosX]       = 820.9888;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2079.0459;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;

	MAX_GASOLINERAS++; // SF Botes 1
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1451.9092;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 806.9544;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;

	MAX_GASOLINERAS++; // SF Botes 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1451.7827;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 817.9048;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;


	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sGasolineras.ulp", DIR_MISC);

	if ( fexist(DirBD) )
	{
	    new GasData[MAX_PLAYER_DATA];
	    new GasDataSlots[MAX_GASOLINERAS_COUNT][30];
		new File:LoadGas = fopen(DirBD, io_read);
		fread(LoadGas, GasData);
		fclose(LoadGas);

		new PosSplitAfter = 0;
		for ( new i = 0; i <= MAX_GASOLINERAS; i++ )
		{
			PosSplitAfter = strfind(GasData, ",", false);
			strmid(GasDataSlots[i], GasData, 0, PosSplitAfter, sizeof(GasData));
			strdel(GasData, 0, PosSplitAfter + 1);
			Gasolineras[i][Fuel]	= strval(GasDataSlots[i]);
			// printf("%i", Gasolineras[i][Fuel]);
			CreateDynamicMapIconULP(Gasolineras[i][PosX], Gasolineras[i][PosY], Gasolineras[i][PosZ], 56);
		}
	}
	else
	{
	    print(" ERROR AL CARGAR LAS GASOLINERAS !!!!!!");
	}
}
public SaveGasolineras()
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sGasolineras.ulp", DIR_MISC);

	new GasData[MAX_PLAYER_DATA];
	new TempConvert[MAX_PLAYER_DATA];
	for (new i = 0; i <= MAX_GASOLINERAS; i++)
	{
	    format(TempConvert, sizeof(TempConvert), "%i,", Gasolineras[i][Fuel]);
        strcat(GasData, TempConvert, sizeof(GasData));
	}

	new File:SaveGas = fopen(DirBD, io_write);
	fwrite(SaveGas, GasData);
	fclose(SaveGas);
}
public GetMyNearGas(playerid)
{
	for (new i = 0; i <= MAX_GASOLINERAS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 8.0,
			Gasolineras[i][PosX],
			Gasolineras[i][PosY],
			Gasolineras[i][PosZ]) )
		{
		    return i;
		}
	}
	SendInfoMessage(playerid, 0, "519", "No hay ninguna gasolinera a su alrededor");
	return -1;
}
public LoadIconsPlayers()
{
	// CAJEROS
	CreateDynamicMapIconULP(1918.806763, -1765.879883, 13.189775,  52);
	CreateDynamicMapIconULP(1367.271484, -1307.826904, 13.189775,  52);
	CreateDynamicMapIconULP(1346.532349, -1759.225220, 13.158481,  52);
	CreateDynamicMapIconULP(-79.300514, -1171.916016, 1.777080,  52);
	CreateDynamicMapIconULP(-2095.375732, -95.220436, 34.806961,  52);
	CreateDynamicMapIconULP(-1990.503174, 1345.649414, 6.827043,  52);

	// Iglesia SF
	CreateDynamicMapIconULP(-1989.6453, 1117.8682, 54.4688,  25);

	// Museo SF
	CreateDynamicMapIconULP(-2649.4194, 375.9588, 6.1593,  26);

	// Supermercado SF
	CreateDynamicMapIconULP(-2442.7781,754.3596,35.1719,  38);

	// TALLER SF
	CreateDynamicMapIconULP(-2974.1428,467.2453,4.9141, 27);

	// Motel
	CreateDynamicMapIconULP(-328.1154,-879.5229,52.5222,  25);

	// PUERTOS
	CreateDynamicMapIconULP(-1461.0663,	742.7130,	1.5133,  9); // PUERTO SF
	CreateDynamicMapIconULP(951.7868,	-2005.9248,	1.6664,  9); // PUERTO LS

	// PETROLERA
	CreateDynamicMapIconULP(-3634.8325,	1884.3127,	2.1854,  56);

	// BANCO
	CreateDynamicMapIconULP(-2720.6372, 127.7362, 7.0391,  52);

	// ISLA
	CreateDynamicMapIconULP(552.0045,	-2982.3110, 10.9435,  9);

	// LSPD y SFPD
	CreateDynamicMapIconULP(1554.5630,-1675.3883,16.1953,  20);
	CreateDynamicMapIconULP(-1604.6736,712.1967,13.8672,  30);

	// SFMD
	CreateDynamicMapIconULP(-2655.0632,638.5620,14.4531,  22);
	// LSMD
	CreateDynamicMapIconULP(1172.0780,-1324.5406,15.4056,  22);

	// Teatro
	CreateDynamicMapIconULP(-2227.0073,253.8429,35.6081,  42); // SF
	CreateDynamicMapIconULP(1287.7460,-1165.7391,41.0554,  42); // LS

	// Concesionaríos
	CreateDynamicMapIconULP(-1661.5085,1212.9225,21.1563,  55);
	CreateDynamicMapIconULP(-1951.7966,279.0199,40.4895,  55);

	// TALLER LS
	CreateDynamicMapIconULP(1803.5313,-2035.7900,13.5206, 27);

	// Recreations Park
	CreateDynamicMapIconULP(2850.9480,-1532.3707,11.0991,  61);

}
public VerificarCochesVencidos()
{
	for (new i = 1; i <= MAX_CAR_DUENO; i++ )
	{
		if ( strlen(DataCars[i][Dueno]) != 1 )
		{
		    if ( DataCars[i][Time] <= 1 )
		    {
				RemoveDuenoOfVehicle(i, 3);
			}
			else
			{
				DataCars[i][Time]--;
			}
		}
	}
}
public LoadTypeJails()
{
	JailsType[0][PosX_Preso] = 226.8328;
	JailsType[0][PosY_Preso] = 108.7341;
	JailsType[0][PosZ_Preso] = 999.0156;
	JailsType[0][PosZZ_Preso] = 356.5217;

	JailsType[0][PosX_Liberado] = 250.6270;
	JailsType[0][PosY_Liberado] = 113.2188;
	JailsType[0][PosZ_Liberado] = 1003.2188;
	JailsType[0][PosZZ_Liberado] = 91.9038;

	JailsType[0][Interior_Preso] = 10;
	JailsType[0][Interior_Liberado] = 10;

	JailsType[0][WorldLiberado] 	= WORLD_DEFAULT_INTERIOR;
	///////////////////////////////

	JailsType[1][PosX_Preso] = 263.6870;
	JailsType[1][PosY_Preso] = 77.9530;
	JailsType[1][PosZ_Preso] = 1001.0391;
	JailsType[1][PosZZ_Preso] = 275.9217;

	JailsType[1][PosX_Liberado] = 243.7247;
	JailsType[1][PosY_Liberado] = 70.2739;
	JailsType[1][PosZ_Liberado] = 1003.6406;
	JailsType[1][PosZZ_Liberado] = 270.1367;

	JailsType[1][Interior_Preso] = 6;
	JailsType[1][Interior_Liberado] = 6;

	JailsType[1][WorldLiberado] 	= WORLD_DEFAULT_INTERIOR;
	///////////////////////////////

	JailsType[2][PosX_Preso] = 317.9501;
	JailsType[2][PosY_Preso] = 313.0646;
	JailsType[2][PosZ_Preso] = 1001.0391;
	JailsType[2][PosZZ_Preso] = 999.1484;

	JailsType[2][PosX_Liberado] = 1457.5309;
	JailsType[2][PosY_Liberado] = -1662.5865;
	JailsType[2][PosZ_Liberado] = 14.0469;
	JailsType[2][PosZZ_Liberado] = 270.5110;

	JailsType[2][Interior_Preso] = 5;
	JailsType[2][Interior_Liberado] = 0;

	JailsType[2][WorldLiberado] 	= 0;


	///////////////////////////////
}
public GetPosSpace(const text[], option)
{
	new SavePos = -1;
	for (new i = 1; i <= option; i++)
	{
		SavePos = strfind(text, " ", false, SavePos + 1);
	}
	return SavePos;
}
public LoadTypeHouse()
{
	// 0 ///////////////////////////////////////////////////////////////////////// Typo: Cuatro Cuartos
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Cuatro Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2365.3381;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1135.3933;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.8750;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.2460;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 8;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 1 ///////////////////////////////////////////////////////////////////////// Typo: Un Cuarto
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Un Cuarto");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2308.7741699219;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1212.9265136719;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1049.0234375;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 2.8829;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 6;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 2 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase I
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase I");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2468.6477;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1698.2053;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1013.5078;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 91.2169;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 3 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase I
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase I");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2524.0813;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1679.4822;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1015.4986;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 268.9842;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 1;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 4 ///////////////////////////////////////////////////////////////////////// Typo: Estudio
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Estudio");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 266.7592;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 305.0596;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 999.1484;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 270.5936;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 5 ///////////////////////////////////////////////////////////////////////// Typo: Trailer
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Trailer");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2.0276;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -3.0860;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 999.4284;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 83.7629;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 6 ///////////////////////////////////////////////////////////////////////// Typo: Tres Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Tres Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2233.7747;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1115.0977;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.8828;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 355.3266;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 7 ///////////////////////////////////////////////////////////////////////// Typo: Dos Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Dos Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2259.5925;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1136.0444;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.6328;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 271.6231;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 10;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 8 ///////////////////////////////////////////////////////////////////////// Typo: Chalet
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Chalet");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 235.3826;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1186.8677;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 358.2490;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 3;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 9 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 226.1616;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1239.9657;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1082.1406;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 87.6160;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 10 ///////////////////////////////////////////////////////////////////////// Typo: Un Cuarto
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Un Cuarto");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 223.2299;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1287.2865;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1082.1406;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 2.1973;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 1;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 11 ///////////////////////////////////////////////////////////////////////// Typo: Finca
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Finca");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 226.6335;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1114.3988;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.9946;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 270.7229;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 12 ///////////////////////////////////////////////////////////////////////// Typo: Cuatro Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Cuatro Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 295.1449;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1472.2834;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.6496;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 15;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);


	// 13 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase III
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase III");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 446.9776;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1397.3701;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3047;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 359.0408;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 14 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 261.1623;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1284.5057;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 359.4435;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 4;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 15 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase III
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase III");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 24.1222;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1340.2295;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3750;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 4.1435;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 10;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 16 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase I
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase I");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 221.8144;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1140.5055;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1082.6094;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 5.8735;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 4;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);


	// 17 ///////////////////////////////////////////////////////////////////////// Typo: Un Cuarto
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Un Cuarto");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 446.71649169922;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 506.32403564453;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1001.4194946289;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 271.9994;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 12;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 18 ///////////////////////////////////////////////////////////////////////// Typo: Chalet
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Chalet");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -260.6692;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1456.6316;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3672;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 91.0199;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 4;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 19 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase III
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase III");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 22.8068;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1403.4597;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.4370;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 355.7854;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 20 ///////////////////////////////////////////////////////////////////////// Typo: Mansión
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Mansion");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 140.5783;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1366.0577;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1083.8594;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 0.5053;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 21 ///////////////////////////////////////////////////////////////////////// Typo: Mansión
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Mansion");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 234.1057;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1063.8470;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.2120;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 355.3038;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 6;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 22 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -68.7345;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1351.7261;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2109;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 356.4911;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 6;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 23 ///////////////////////////////////////////////////////////////////////// Typo: Finca
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Finca");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -283.5833;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1471.1552;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3750;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 89.1725;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 15;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 24 ///////////////////////////////////////////////////////////////////////// Typo: Tres Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Tres Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2218.2312;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1076.3168;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.4844;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 90.4850;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 1;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 25 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2237.5933;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1081.4789;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1049.0234;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.4616;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 26 ///////////////////////////////////////////////////////////////////////// Typo: Cuatro Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Cuatro Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -42.6557;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1412.5956;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.4297;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 178.7076;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 8;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 27 ///////////////////////////////////////////////////////////////////////// Typo: Finca
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Finca");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 83.1146;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1322.4788;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1083.8662;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.0887;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 9;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 28 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 260.8197;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1237.4691;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 3.2391;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 9;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreateCasaTipoDynamicPickup(1239, MAX_HOUSE_TYPE, TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);
}

public LoadHouse(houseid)
{
	new query[100], Cache:cacheid, casaExiste;
	format(query, 100, "SELECT * FROM `%s` WHERE ID=%i;", DIR_HOUSES, houseid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(casaExiste);

	if (casaExiste)
	{
		new SplitPos[2] = 0;

		HouseData[houseid][StationID]        = -1;

		cache_get_value_name(0, "Dueno", HouseData[houseid][Dueno], MAX_PLAYER_NAME);
		cache_get_value_name(0, "Armario", HouseData[houseid][ArmarioData], 500);
		for(new a=0; a !=7; a++)
		{
		    new ArmarioDataPart[2][10];
			SplitPos[0] = strfind(HouseData[houseid][ArmarioData], "|", false);
			SplitPos[1] = strfind(HouseData[houseid][ArmarioData], ",", false);
			strmid(ArmarioDataPart[0], HouseData[houseid][ArmarioData], 0, SplitPos[0]);
			strmid(ArmarioDataPart[1], HouseData[houseid][ArmarioData], SplitPos[0]+1, SplitPos[1]);
			strdel(HouseData[houseid][ArmarioData], 0, SplitPos[1]+1);

			HouseData[houseid][ArmarioWeapon][a] = strval(ArmarioDataPart[0]);
			HouseData[houseid][ArmarioAmmo][a]   = strval(ArmarioDataPart[1]);
		}
		cache_get_value_name_float(0, "Chaleco", HouseData[houseid][Chaleco]);
		cache_get_value_name_int(0, "Drogas", HouseData[houseid][Drogas]);
		cache_get_value_name_int(0, "Ganzuas", HouseData[houseid][Ganzuas]);
		cache_get_value_name_float(0, "PosX", HouseData[houseid][PosX]);
		cache_get_value_name_float(0, "PosY", HouseData[houseid][PosY]);
		cache_get_value_name_float(0, "PosZ", HouseData[houseid][PosZ]);
		cache_get_value_name_float(0, "PosZZ", HouseData[houseid][PosZZ]);
		cache_get_value_name_int(0, "Interior", HouseData[houseid][Interior]);
		cache_get_value_name_int(0, "TypeHouseId", HouseData[houseid][TypeHouseId]);
		new pickupid = CreateDynamicPickup(19606, 1, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ] - 1, WORLD_NORMAL, 0);
		PickupIndex[pickupid][Tipo] = PICKUP_TYPE_CASA;
		PickupIndex[pickupid][Tipoid] = houseid;
		HouseData[houseid][PickupId] = pickupid;
		cache_get_value_name_int(0, "PriceRent", HouseData[houseid][PriceRent]);
		cache_get_value_name_int(0, "Level", HouseData[houseid][Level]);
		HouseData[houseid][World] = houseid;
		cache_get_value_name_int(0, "Seguro", HouseData[houseid][Lock]);
		cache_get_value_name_int(0, "Price", HouseData[houseid][Price]);
		cache_get_value_name_int(0, "Bombas", HouseData[houseid][Bombas]);
		cache_get_value_name_int(0, "Deposito", HouseData[houseid][Deposito]);
		cache_get_value_name_int(0, "Materiales", HouseData[houseid][Materiales]);
		cache_get_value_name_int(0, "ArmarioLock", HouseData[houseid][ArmarioLock]);

		for(new garageid=0; garageid != MAX_GARAGE_FOR_HOUSE; garageid++)
		{
		    new
		    GarageDIR[10],
			GarageData[500],
		    GarageDataPart[16][40];

		    format(GarageDIR, 20, "Garage%i", garageid);
		    cache_get_value_name(0, GarageDIR, GarageData, 500);
            for(new g=0;  g!=16; g++)
			{
				SplitPos[0] = strfind(GarageData, "|", false);
				strmid(GarageDataPart[g], GarageData, 0, SplitPos[0]);
				strdel(GarageData, 0, SplitPos[0]+1);
			}
			Garages[houseid][garageid][Xg]          = floatstr(GarageDataPart[0]);
			Garages[houseid][garageid][Yg]          = floatstr(GarageDataPart[1]);
			Garages[houseid][garageid][Zg]          = floatstr(GarageDataPart[2]);
			Garages[houseid][garageid][ZZg]         = floatstr(GarageDataPart[3]);
			Garages[houseid][garageid][XgIn]        = floatstr(GarageDataPart[4]);
			Garages[houseid][garageid][YgIn]        = floatstr(GarageDataPart[5]);
			Garages[houseid][garageid][ZgIn]        = floatstr(GarageDataPart[6]);
			Garages[houseid][garageid][ZZgIn]       = floatstr(GarageDataPart[7]);
			Garages[houseid][garageid][XgOut]       = floatstr(GarageDataPart[8]);
			Garages[houseid][garageid][YgOut]       = floatstr(GarageDataPart[9]);
			Garages[houseid][garageid][ZgOut]       = floatstr(GarageDataPart[10]);
			Garages[houseid][garageid][ZZgOut]      = floatstr(GarageDataPart[11]);
			Garages[houseid][garageid][LockIn]      = strval(GarageDataPart[12]);
			Garages[houseid][garageid][LockOut]     = strval(GarageDataPart[13]);
			Garages[houseid][garageid][TypeGarageE] = strval(GarageDataPart[14]);
			Garages[houseid][garageid][WorldG]      = strval(GarageDataPart[15]);
		}
		cache_get_value_name(0, "HouseFriend0", HouseFriends[houseid][0][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend1", HouseFriends[houseid][1][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend2", HouseFriends[houseid][2][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend3", HouseFriends[houseid][3][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend4", HouseFriends[houseid][4][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "Refrigerador", HouseData[houseid][RefrigeradorData], MAX_PLAYER_NAME);
		for(new r=0; r !=MAX_REFRIGERADOR_SLOTS_COUNT; r++)
		{
		    new RefrigeradorDataSlot[2][10];
			SplitPos[0] = strfind(HouseData[houseid][RefrigeradorData], "|", false);
			SplitPos[1] = strfind(HouseData[houseid][RefrigeradorData], ",", false);
			strmid(RefrigeradorDataSlot[0], HouseData[houseid][RefrigeradorData], 0, SplitPos[0]);
			strmid(RefrigeradorDataSlot[1], HouseData[houseid][RefrigeradorData], SplitPos[0]+1, SplitPos[1]);
			strdel(HouseData[houseid][RefrigeradorData], 0, SplitPos[1]+1);

			Refrigerador[houseid][Articulo][r] 	= strval(RefrigeradorDataSlot[0]);
			Refrigerador[houseid][Cantidad][r] 	= strval(RefrigeradorDataSlot[1]);
		}
		cache_get_value_name_int(0, "RefrigeradorLock", HouseData[houseid][RefrigeradorLock]);
		cache_get_value_name_int(0, "StationID", HouseData[houseid][StationID]);
		cache_get_value_name_int(0, "GavetaLock", HouseData[houseid][GavetaLock]);
		cache_get_value_name_int(0, "GavetaObjects0", HouseData[houseid][GavetaObjects][0]);
		cache_get_value_name_int(0, "GavetaObjects1", HouseData[houseid][GavetaObjects][1]);
		cache_get_value_name_int(0, "GavetaObjects2", HouseData[houseid][GavetaObjects][2]);
		cache_get_value_name_int(0, "GavetaObjects3", HouseData[houseid][GavetaObjects][3]);
		cache_get_value_name_int(0, "GavetaObjects4", HouseData[houseid][GavetaObjects][4]);
		cache_get_value_name_int(0, "GavetaObjects5", HouseData[houseid][GavetaObjects][5]);
		cache_get_value_name_int(0, "GavetaObjects6", HouseData[houseid][GavetaObjects][6]);
		cache_get_value_name_int(0, "GavetaObjects7", HouseData[houseid][GavetaObjects][7]);

		UpdateTextLabelCasa(houseid);
	}
	cache_delete(cacheid);
	return casaExiste;
}

public SaveHouse(houseid, bool:update)
{
	new query[1000], Cache:cacheid, casaExiste;
	mysql_format(dataBase, query, 100, "SELECT `ID` FROM `%s` WHERE `ID`='%i';", DIR_HOUSES, houseid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(casaExiste);
	cache_delete(cacheid);

	if (!casaExiste)
	{
		format(query, 100, "INSERT INTO `%s` (`ID`) VALUES ('%i');", DIR_HOUSES, houseid);
		mysql_query(dataBase, query, false);
	}

	new tempString[500];

	format(query, 100, "UPDATE `%s` SET ", DIR_HOUSES);
	strcat(query, "`Dueno`='%e',`Armario`='");
	for(new i=0; i != 7; i++)
	{
		format(tempString, 500, "%i|%i,", HouseData[houseid][ArmarioWeapon][i], HouseData[houseid][ArmarioAmmo][i]);
		strcat(query, tempString, 1000);
	}
	strcat(query, "',`Chaleco`='%f',`Drogas`='%i',`Ganzuas`='%i',`PosX`='%f',`PosY`='%f',`PosZ`='%f',`PosZZ`='%f',`Interior`='%i',`TypeHouseId`='%i',");
	strcat(query, "`PriceRent`='%i',`Level`='%i',`Seguro`='%i',`Price`='%i',`Bombas`='%i',`Deposito`='%i',`Materiales`='%i',`ArmarioLock`='%i',`HouseFriend0`='%e',`HouseFriend1`='%e'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 1000, query,
		HouseData[houseid][Dueno],
		HouseData[houseid][Chaleco],
		HouseData[houseid][Drogas],
		HouseData[houseid][Ganzuas],
		HouseData[houseid][PosX],
		HouseData[houseid][PosY],
		HouseData[houseid][PosZ],
		HouseData[houseid][PosZZ],
		HouseData[houseid][Interior],
		HouseData[houseid][TypeHouseId],

		HouseData[houseid][PriceRent],
		HouseData[houseid][Level],
		HouseData[houseid][Lock],
		HouseData[houseid][Price],
		HouseData[houseid][Bombas],
		HouseData[houseid][Deposito],
		HouseData[houseid][Materiales],
		HouseData[houseid][ArmarioLock],
		HouseFriends[houseid][0][Name],
		HouseFriends[houseid][1][Name],

		houseid);
	mysql_query(dataBase, query, false);

	format(query, 100, "UPDATE `%s` SET ", DIR_HOUSES);
	strcat(query, "`HouseFriend2`='%e',`HouseFriend3`='%e',`HouseFriend4`='%e',`Refrigerador`='");
	for(new i=0; i != 10; i++)
	{
		format(tempString, 100, "%i|%i,", Refrigerador[houseid][Articulo][i], Refrigerador[houseid][Cantidad][i]);
		strcat(query, tempString, 1000);
	}
	strcat(query, "',`RefrigeradorLock`='%i',`StationID`='%i',");
	strcat(query, "`GavetaLock`='%i',`GavetaObjects0`='%i',`GavetaObjects1`='%i',`GavetaObjects2`='%i',`GavetaObjects3`='%i',");
	strcat(query, "`GavetaObjects4`='%i',`GavetaObjects5`='%i',`GavetaObjects6`='%i',`GavetaObjects7`='%i'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 1000, query,

		HouseFriends[houseid][2][Name],
		HouseFriends[houseid][3][Name],
		HouseFriends[houseid][4][Name],

		HouseData[houseid][RefrigeradorLock],
		HouseData[houseid][StationID],

		HouseData[houseid][GavetaLock],
		HouseData[houseid][GavetaObjects][0],
		HouseData[houseid][GavetaObjects][1],
		HouseData[houseid][GavetaObjects][2],
		HouseData[houseid][GavetaObjects][3],

		HouseData[houseid][GavetaObjects][4],
		HouseData[houseid][GavetaObjects][5],
		HouseData[houseid][GavetaObjects][6],
		HouseData[houseid][GavetaObjects][7],

		houseid);
	mysql_query(dataBase, query, false);

	for(new i=0; i != MAX_GARAGE_FOR_HOUSE; i++)
	{
		format(query, 100, "UPDATE `%s` SET `Garage%i`='", DIR_HOUSES, i);
		format(tempString, 500, "%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%i|%i|%i|%i|",
			Garages[houseid][i][Xg],
			Garages[houseid][i][Yg],
			Garages[houseid][i][Zg],
			Garages[houseid][i][ZZg],
			Garages[houseid][i][XgIn],
			Garages[houseid][i][YgIn],
			Garages[houseid][i][ZgIn],
			Garages[houseid][i][ZZgIn],
			Garages[houseid][i][XgOut],
			Garages[houseid][i][YgOut],
			Garages[houseid][i][ZgOut],
			Garages[houseid][i][ZZgOut],
			Garages[houseid][i][LockIn],
			Garages[houseid][i][LockOut],
			Garages[houseid][i][TypeGarageE],
			Garages[houseid][i][WorldG]);
		strcat(query, tempString, 1000);
		format(tempString, 100, "' WHERE `ID`='%i';", houseid);
		strcat(query, tempString, 1000);
		mysql_query(dataBase, query, false);
	}

	if ( update )
	{
		UpdateTextLabelCasa(houseid);
	}
}

public UpdateTextLabelCasa(houseid)
{
	new TextLabelText[300];
	if ( strlen(HouseData[houseid][Dueno]) != 2 )
	{
		new PriceRentText[50];
		if ( HouseData[houseid][PriceRent] != 0 )
		{
		    format(PriceRentText, sizeof(PriceRentText), "$%i", HouseData[houseid][PriceRent]);
		}
		else
		{
			PriceRentText = "No se renta";
		}
		format(TextLabelText, sizeof(TextLabelText),
			"Lugar: {"COLOR_CREMA"}Casa PC-%i\n\
			{"COLOR_VERDE"}Tipo: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Garage: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Propietario: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Renta: {"COLOR_CREMA"}%s\n",
			houseid,
	        TypeHouse[HouseData[houseid][TypeHouseId]][TypeName],
	        SiOrNo[ExistGarageInHouse(houseid)],
			HouseData[houseid][Dueno],
			PriceRentText
		);
	}
	else
	{
		format(TextLabelText, sizeof(TextLabelText),
			"Lugar: {"COLOR_CREMA"}Casa PC-%i\n\
			{"COLOR_VERDE"}Tipo: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Garage: {"COLOR_CREMA"}%s\n\
			{"COLOR_VERDE"}Estado: {"COLOR_CREMA"}¡En Venta!\n\
			{"COLOR_VERDE"}Precio: {"COLOR_CREMA"}$%i\n\
			{"COLOR_VERDE"}Nivel: {"COLOR_CREMA"}%i\n\
			{"COLOR_VERDE"}Use: {"COLOR_ROJO"}/Comprar Casa",
			houseid,
	        TypeHouse[HouseData[houseid][TypeHouseId]][TypeName],
	        SiOrNo[ExistGarageInHouse(houseid)],
			HouseData[houseid][Price],
			HouseData[houseid][Level]
		);
	}
	if ( IsValidDynamic3DTextLabel(HouseData[houseid][TextLabel])) DestroyDynamic3DTextLabel(HouseData[houseid][TextLabel]);

	HouseData[houseid][TextLabel] = CreateDynamic3DTextLabel(TextLabelText, 0x00A5FFFF, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ],
	10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, true, WORLD_NORMAL, 0);
}
public CheckIsPlayerRentAndRemove(playerid, houseid)
{
	if ( IsPlayerConnected(playerid) )
	{
		if ( PlayersData[playerid][Alquiler] == houseid && strlen(HouseData[houseid][Dueno]) == 2 || PlayersData[playerid][Alquiler] == houseid && !HouseData[houseid][PriceRent])
		{
			PlayersData[playerid][Alquiler] = -1;
			PlayersData[playerid][House] 	= -1;
			SendInfoMessage(playerid, 3, "0", "Has sido desalojado de su alquiler");
		}
	}
}
public RemoveDuenoOfVehicle(vehicleid, option)
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", DataCars[vehicleid][Dueno]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsVehicleMyVehicle(i, vehicleid) )
		{
			playerid = i;
			break;
		}
	}
	if ( playerid == 499 )
	{
		PlayersDataOnline[playerid][Spawn] = false;
		DataUserLoad(playerid);
	}
	new lastLock = DataCars[vehicleid][Lock];
	DataCars[vehicleid][Lock] = false;
	if ( lastLock )
	{
		ShowLockTextDraws(vehicleid, lastLock);
	}
	format(DataCars[vehicleid][Dueno], MAX_PLAYER_NAME, "0");
	PlayersData[playerid][Car] = -1;
	DataUserSave(playerid);
	SaveDataVehicle(vehicleid, DIR_VEHICLES);
	printf("Vehículo con ID[%i] vencido. Opción: %i", vehicleid, option);
	return playerid;
}
public RemoveDuenoOfHouse(houseid)
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", HouseData[houseid][Dueno]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][House] == houseid )
		{
			playerid = i;
			break;
		}
	}

	if ( playerid == 499 )
	{
		PlayersDataOnline[playerid][Spawn] = false;
		DataUserLoad(playerid);
	}

    for ( new i = 0; i < MAX_PLAYERS; i++)
    {
		if ( i != playerid && IsPlayerConnected(i) &&  PlayersDataOnline[i][State] == 3 && PlayersData[i][Alquiler] == houseid )
		{
			PlayersData[i][Alquiler] = -1;
			PlayersData[i][House] 	= -1;
			SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler!");
		}
	}
    format(HouseData[houseid][Dueno], MAX_PLAYER_NAME, "No");
    HouseData[houseid][Lock] = true;
    SaveHouse(houseid, true);

	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
		format(HouseFriends[houseid][i][Name], MAX_PLAYER_NAME, "No");
	}

    PlayersData[playerid][House] = -1;
    PlayersData[playerid][Alquiler] = -1;

	DataUserSave(playerid);
	return playerid;
}
public RemoveDuenoOfBizz(bizzid)
{
	NegociosData[bizzid][Lock] = true;
    format(NegociosData[bizzid][Dueno], MAX_PLAYER_NAME, "0");
    format(NegociosData[bizzid][Extorsion], MAX_PLAYER_NAME, "No");
    DataSaveBizz(bizzid, true);
}
public ChangePasswordUser(playerid_admin, const playeridname[], const newpassword[])
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", playeridname);

	if ( !IsValidName(PlayersDataOnline[playerid][NameOnline]) )
	{
		SendInfoMessage(playerid_admin, 0, "1463", "El nick que introdujo está deshabilitado por cuestiones de seguridad.");
	}
	else if ( DataUserLoad(playerid) )
	{
	    if ( PlayersData[playerid][Admin] == 9 )
	    {
			SendInfoMessage(playerid_admin, 0, "1464", "No existe ese jugador en la base de datos!");
			return false;
		}
	    new MsgChangePassword[MAX_TEXT_CHAT];
	    format(PlayersData[playerid][Password], 25, "%s", newpassword);
		PlayersDataOnline[playerid][Spawn] = false;
		format(MsgChangePassword, sizeof(MsgChangePassword), "Has cambiado la password de %s por: %s", playeridname, newpassword);
		SendInfoMessage(playerid_admin, 3, "0", MsgChangePassword);
		DataUserSave(playerid);
	}
	else
	{
		SendInfoMessage(playerid_admin, 0, "1465", "No existe ese jugador en la base de datos!");
	}
	return true;
}
public UnBanUser(playerid_admin, const playeridname[], option)
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", playeridname);

	if ( !IsValidName(PlayersDataOnline[playerid][NameOnline]) )
	{
		SendInfoMessage(playerid_admin, 0, "676", "El nick que introdujo está deshabilitado por cuestiones de seguridad.");
	}
	else if ( DataUserLoad(playerid) )
	{
	    new MsgDesban[MAX_TEXT_CHAT];
	    if ( PlayersData[playerid][Admin] == 9 )
	    {
			SendInfoMessage(playerid_admin, 0, "1451", "No existe ese jugador en la base de datos!");
			return false;
		}
	    if ( !option )
	    {
			if ( PlayersData[playerid][AccountState] == 3 )
			{
			    PlayersData[playerid][AccountState] = 0;
				PlayersDataOnline[playerid][Spawn] = false;
				format(MsgDesban, sizeof(MsgDesban), "Has desbaneado a %s", playeridname);
				new UnBanIpCommand[MAX_TEXT_CHAT];
				format(UnBanIpCommand, sizeof(UnBanIpCommand), "unbanip %s", PlayersData[playerid][MyIP]);
				SendRconCommand(UnBanIpCommand);
				SendInfoMessage(playerid_admin, 3, "0", MsgDesban);
				DataUserSave(playerid);
			}
			else
			{
				format(MsgDesban, sizeof(MsgDesban), "El jugador %s no se encuentra baneado", playeridname);
				SendInfoMessage(playerid_admin, 0, "673", MsgDesban);
			}
		}
		else
		{
			if ( PlayersData[playerid][AccountState] != 3 )
			{
			    PlayersData[playerid][AccountState] = 3;
				PlayersDataOnline[playerid][Spawn] = false;
				format(MsgDesban, sizeof(MsgDesban), "Has baneado a %s", playeridname);
				new BanIpCommand[MAX_TEXT_CHAT];
				format(BanIpCommand, sizeof(BanIpCommand), "banip %s", PlayersData[playerid][MyIP]);
				SendRconCommand(BanIpCommand);
				SendInfoMessage(playerid_admin, 3, "0", MsgDesban);
				DataUserSave(playerid);
			}
			else
			{
				format(MsgDesban, sizeof(MsgDesban), "El jugador %s ya se encuentra baneado", playeridname);
				SendInfoMessage(playerid_admin, 0, "972", MsgDesban);
			}
		}
	}
	else
	{
		SendInfoMessage(playerid_admin, 0, "212", "No existe ese jugador en la base de datos!");
	}
	return true;
}
public IsTunnigContinue(playerid)
{
	if ( PlayersDataOnline[playerid][MyIDVehicleTunning] == IsPlayerInNearVehicle(playerid) )
	{
	    return true;
	}
	else
	{
		TogglePlayerControllableEx(playerid, true);
		SendInfoMessage(playerid, 0, "677", "Acérquese o suba al vehículo que estaba tunenado!");
	    return false;
	}
}
public IsPlayerInTaller(playerid)
{
	if ( IsPlayerInRangeOfPoint(playerid, 30.0, -2973.7065,470.3227,4.9141) &&
         PlayersData[playerid][Faccion] == TALLER_SF ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 615.3417,-10.6391,1000.9219) &&
         PlayersData[playerid][Faccion] == TALLER_SF ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1794.7306,-2037.6821,13.5245) &&
         PlayersData[playerid][Faccion] == TALLER_LS ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1751.9133,-2021.4797,20.6677) &&
         PlayersData[playerid][Faccion] == TALLER_LS  )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "682", "No se encuentra en el taller!");
	    return false;
	}
}
public IsPlayerInTallerEx(playerid)
{
	if ( IsPlayerInRangeOfPoint(playerid, 30.0, -2973.7065,470.3227,4.9141) ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 615.3417,-10.6391,1000.9219) ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1794.7306,-2037.6821,13.5245) ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1751.9133,-2021.4797,20.6677) )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "682", "No se encuentra en el taller!");
	    return false;
	}
}
public IsPlayerInConcencionario(playerid)
{
	new RANGE_POINT = 50;
	if ( IsPlayerInRangeOfPoint(playerid, RANGE_POINT, 546.3749,-1293.4868,17.2482) ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, -1661.5085,1212.9225,21.1563) ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, -1951.7966,279.0199,40.4895) ||
		 GetPlayerVirtualWorld(playerid) == WORLD_DEFAULT_INTERIOR && (
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, -509.2497,2561.0613,53.8653)  ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, 1644.9438,-2495.1252,13.6146) ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, 1577.2163,1262.2421,10.8268)
		 )  )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsPlayerInAlmacen(playerid, option)
{
	if ( FaccionData[PlayersData[playerid][Faccion]][AlmacenX] != 0.0 )
	{
	    for ( new i = 0; i < MAX_ALMACENES; i++ )
	    {
			if ( IsPlayerInRangeOfPoint(playerid, 3.0,
			FaccionData[PlayersData[playerid][Faccion]][AlmacenX][i],
			FaccionData[PlayersData[playerid][Faccion]][AlmacenY][i],
			FaccionData[PlayersData[playerid][Faccion]][AlmacenZ][i]) &&
			FaccionData[PlayersData[playerid][Faccion]][AlmacenWorld][i] == GetPlayerVirtualWorld(playerid) )
			{
				return i;
			}
		}
		if ( option )
		{
			SendInfoMessage(playerid, 0, "732", "No se encuentra cerca del almacén");
		}
	}
	else
	{
	    if ( option )
	    {
			SendInfoMessage(playerid, 0, "733", "Su facción no tiene almacén");
		}
	}
	return -1;

}
public LoadPickupsAlmacenes(faccionid)
{
	for (new a=0; a!=MAX_ALMACENES; a++)
	{
	    if ( FaccionData[faccionid][AlmacenX][a] != 0 )
	    {
	        new pickupid = CreateDynamicPickup(1575, 1, FaccionData[faccionid][AlmacenX][a], FaccionData[faccionid][AlmacenY][a], FaccionData[faccionid][AlmacenZ][a], FaccionData[faccionid][AlmacenWorld][a]);
	        PickupIndex[pickupid][Tipo] = PICKUP_TYPE_FACCION_ALMACEN;
			PickupIndex[pickupid][Tipoid] = faccionid;
	    }
	}
}

public UpdateFaccionTextLabel(faccionid, update)
{
	if (faccionid == CIVIL) return 1;
    new string[100];
	if ( strlen(FaccionData[faccionid][Lider]) > 2 )
	{
	    format(string, sizeof(string), "Lugar: {"COLOR_CREMA"}%s \n{"COLOR_VERDE"}Propietario: {"COLOR_CREMA"}%s", FaccionData[faccionid][NameFaccion], FaccionData[faccionid][Lider]);
	}
	else
	{
	    format(string, sizeof(string), "Lugar: {"COLOR_CREMA"}%s \n{"COLOR_VERDE"}Propietario: {"COLOR_CREMA"}Nadie", FaccionData[faccionid][NameFaccion]);
	}
	if (!update)
	{
	    FaccionData[faccionid][TextLabelOut] =
		CreateDynamic3DTextLabel(string, 0x00A5FFFF, FaccionData[faccionid][PickupOut_X], FaccionData[faccionid][PickupOut_Y], FaccionData[faccionid][PickupOut_Z],
		10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, true, WORLD_NORMAL, 0);

		FaccionData[faccionid][TextLabelIn] =
		CreateDynamic3DTextLabel(string, 0x00A5FFFF, FaccionData[faccionid][PickupIn_X], FaccionData[faccionid][PickupIn_Y], FaccionData[faccionid][PickupIn_Z],
		10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, true, WORLD_DEFAULT_INTERIOR, FaccionData[faccionid][InteriorFaccion]);
	}
	else
	{
	    if (IsValidDynamic3DTextLabel(FaccionData[faccionid][TextLabelOut]))
	    UpdateDynamic3DTextLabelText(FaccionData[faccionid][TextLabelOut], 0x00A5FFFF, string);

	    if (IsValidDynamic3DTextLabel(FaccionData[faccionid][TextLabelIn]))
	    UpdateDynamic3DTextLabelText(FaccionData[faccionid][TextLabelIn], 0x00A5FFFF, string);
	}
	return 1;
}
public GetMyNearDoor(playerid, key)
{
	new iBucle;
	new i = -1;
	new Float:RangoC;
    do
    {
	    RangoC++;
	    iBucle = 0;
	    
	    for (; iBucle != MAX_PUERTAS_COUNT; iBucle++)
	    {
	        if (Puerta[iBucle][Creada])
	        {
	            if (IsPlayerInRangeOfPoint(playerid, RangoC, Puerta[iBucle][PosX], Puerta[iBucle][PosY], Puerta[iBucle][PosZ]) ||
	            	IsPlayerInRangeOfPoint(playerid, RangoC, Mapeo[Puerta[iBucle][ID_Mapeo]][PosX], Mapeo[Puerta[iBucle][ID_Mapeo]][PosY], Mapeo[Puerta[iBucle][ID_Mapeo]][PosZ]) )
	            {
	                i = iBucle;
	                RangoC = 15.0;
	                break;
	            }
	        }
	    }
	}
	while ( RangoC != 15.0 );

	if ( i != -1 )
	{
	    if (Puerta[i][PosX] == 0) return SendInfoMessage(playerid, 0, "", "Esta puerta no tiene un recorrido valido!");
	    
	    if (Puerta[i][LlaveTipo] == 0 && Puerta[i][LlaveOwnerID] == CIVIL ||
	    	Puerta[i][LlaveTipo] == 0 && PlayersData[playerid][Faccion] == Puerta[i][LlaveOwnerID] ||
	    	Puerta[i][LlaveTipo] == 1 && PlayersData[playerid][House] == Puerta[i][LlaveOwnerID] ||
	    	Puerta[i][LlaveTipo] == 1 && PlayersData[playerid][Alquiler] == Puerta[i][LlaveOwnerID] ||
	    	Puerta[i][LlaveTipo] == 1 && IsPlayerInHouseFriend(playerid, Puerta[i][LlaveOwnerID]) != -1 ||
	    	Puerta[i][LlaveTipo] == 2 && PlayerHaveLocalKeys(playerid, Puerta[i][LlaveOwnerID])   )
    	{
    	    if (Puerta[i][Abierta])
    	    {
    	        new mapeoid = Puerta[i][ID_Mapeo];
    	        MoveDynamicObject(Mapeo[mapeoid][ID_Objeto], Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ], Puerta[i][Velocidad], Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ]);
    	        Puerta[i][Abierta] = false;
    	    }
    	    else
    	    {
    	        new objectid = Mapeo[Puerta[i][ID_Mapeo]][ID_Objeto];
    	        MoveDynamicObject(objectid, Puerta[i][PosX], Puerta[i][PosY], Puerta[i][PosZ], Puerta[i][Velocidad], Puerta[i][PosRX], Puerta[i][PosRY], Puerta[i][PosRZ]);
    	        Puerta[i][Abierta] = true;
    	    }
    	    return 1;
    	}
		else
		{
		    SendInfoMessage(playerid, 0, "778", "No tienes las llaves de esta puerta");
			return -1;
		}
	}
	if ( !key )
	{
	    SendInfoMessage(playerid, 0, "777", "No hay ninguna puerta a su alrededor");
	}
	return -1;
}
public LoadPointsExtraction()
{
	FaccionesMercancias[CAMIONEROS][PosX] = -3634.9949;
	FaccionesMercancias[CAMIONEROS][PosY] = 1884.2264;
	FaccionesMercancias[CAMIONEROS][PosZ] = 2.1854;
	CreateDynamicPickup(1210, 1, FaccionesMercancias[CAMIONEROS][PosX], FaccionesMercancias[CAMIONEROS][PosY], FaccionesMercancias[CAMIONEROS][PosZ], WORLD_NORMAL, 0);

	FaccionesMercancias[CONTRABANDISTAS][PosX] = 417.6441;
	FaccionesMercancias[CONTRABANDISTAS][PosY] = 2541.6646;
	FaccionesMercancias[CONTRABANDISTAS][PosZ] = 10.0000;
	CreateDynamicPickup(1210, 1, FaccionesMercancias[CONTRABANDISTAS][PosX], FaccionesMercancias[CONTRABANDISTAS][PosY], FaccionesMercancias[CONTRABANDISTAS][PosZ]);

	FaccionesMercancias[TRAFICANTES][PosX] = -1421.7528;
	FaccionesMercancias[TRAFICANTES][PosY] = -964.7759;
	FaccionesMercancias[TRAFICANTES][PosZ] = 200.7651;
 	CreateDynamicPickup(1210, 1, FaccionesMercancias[TRAFICANTES][PosX], FaccionesMercancias[TRAFICANTES][PosY], FaccionesMercancias[TRAFICANTES][PosZ], WORLD_NORMAL, 0);
}
public CleanVCP()
{
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    VCP[i][objectid_vcp] = -1;
	    VCP[i][objectmodel] = -1;
	    VCP[i][pickupidVCP] = -1;
	}
}
public AddVCP(playerid, objectid, Float:Xv, Float:Yv, Float:Zv, Float:ZZv)
{
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    if ( VCP[i][objectid_vcp] == -1 )
	    {
	        if ( playerid != -1 )
	        {
				GetPlayerPos(playerid, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ]); GetPlayerFacingAngle(playerid, VCP[i][ObjZRot]);
			}
			else
			{
			    VCP[i][ObjX] 	= Xv;
			    VCP[i][ObjY] 	= Yv;
			    VCP[i][ObjZ] 	= Zv;
			    VCP[i][ObjZRot] = ZZv;
			}
		    VCP[i][objectmodel] = objectid;
		    if ( playerid != -1 )
			{
				if ( objectid == PINCHO)
				{
					VCP[i][ObjZ] = VCP[i][ObjZ] - 0.9;
		    	}
		    	else if ( objectid == CONO )
		    	{
					VCP[i][ObjZ] = VCP[i][ObjZ] - 0.7;
				}
		    	else if ( objectid == VALLA )
		    	{
			    	VCP[i][ObjZ] = VCP[i][ObjZ] - 0.4;
				}
			}
			if ( objectid == PINCHO)
			{
				new pickupid = CreatePickupEx(1247, 1, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ] - 1, WORLD_NORMAL, 0);
				PickupIndex[pickupid][Tipo] = PICKUP_TYPE_PINCHO;
				PickupIndex[pickupid][Tipoid] = i;

				VCP[i][pickupidVCP] = pickupid;
			}
	    	VCP[i][objectid_vcp] = CreateDynamicObjectExULP(objectid, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ], 0, 0, VCP[i][ObjZRot], -1, -1, -1, MAX_RADIO_STREAM);
			if ( playerid != -1 )
	        {
		    	SetPlayerPos(playerid, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ] + 0.5);
	    	}
	        return true;
		}
	}
	if ( playerid != -1 )
	{
		SendInfoMessage(playerid, 0, "840", "Han llegado al límite de 100 objetos que pueden usar entre: Vallas, Conos y Pinchos");
	}
	return false;
}
public RemoveVCP(objectid)
{
    if ( VCP[objectid][pickupidVCP] != -1 )
	{
	    new pickupid = VCP[objectid][pickupidVCP];
		DestroyDynamicPickup(pickupid);
		PickupIndex[pickupid][Tipo] = PICKUP_TYPE_NINGUNO;
		PickupIndex[pickupid][Tipoid] = 0;
	}
	DestroyDynamicObject(VCP[objectid][objectid_vcp]);
   	VCP[objectid][objectid_vcp] = -1;
    VCP[objectid][objectmodel] = -1;
    VCP[objectid][pickupidVCP] = -1;
}
public IsNearVCP(playerid)
{
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    if ( VCP[i][objectid_vcp] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ])  )
	    {
			return i;
	    }
    }
	return -1;
}
public SetPlayerTutorial(playerid, tutorialid)
{
	if ( IsPlayerConnected(playerid) && PlayersData[playerid][InTutorial] )
	{
	    new TimeTutorial;
		switch( tutorialid )
		{
		    case 0: // Ayuntamiento
		    {
		        SetPlayerVirtualWorldEx(playerid, 0);
				SetPlayerPos(playerid, 1499.5968,-1663.2734,7.0682);

				SetCameraPresent(playerid, 15, 0, CamerasPresent[15][0], CamerasPresent[15][1], CamerasPresent[15][2], 15, 18);
                TimeTutorial = 15000;
			}
		    case 1: // Camioneros
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 19, 0, CamerasPresent[19][0], CamerasPresent[19][1], CamerasPresent[19][2], 19, 23);
				SetPlayerPos(playerid, -513.8900,-518.0787,25.5234);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 2: // Taxis
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 24, 0, CamerasPresent[24][0], CamerasPresent[24][1], CamerasPresent[24][2], 24, 28);
				SetPlayerPos(playerid, 1772.3389,-1924.6448,3.4906);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 3: // Taller
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 34, 0, CamerasPresent[34][0], CamerasPresent[34][1], CamerasPresent[34][2], 34, 38);
				SetPlayerPos(playerid, -2860.8513,468.8911,-20.2054);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 4: // CNN
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 45, 0, CamerasPresent[45][0], CamerasPresent[45][1], CamerasPresent[45][2], 45, 51);
				SetPlayerPos(playerid, 757.7950,-1357.0710,7.3166);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 5: // Detectives
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 39, 0, CamerasPresent[29][0], CamerasPresent[39][1], CamerasPresent[39][2], 39, 44);
				SetPlayerPos(playerid, -2039.1923,1271.1046,23.3799);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 6: // Licencieros
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 29, 0, CamerasPresent[29][0], CamerasPresent[29][1], CamerasPresent[29][2], 29, 33);
				SetPlayerPos(playerid, -2028.0050,-114.0599,29.5306);

                TimeTutorial = 25000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 7: // ¿Qué es un server de Rol? ///////////////
		    {
		        SetPlayerVirtualWorldEx(playerid, playerid + 5);
				for (new AE = 0; AE <= 20; AE++)
				{
				    SendClientMessage(playerid, 0xFFF, " ");
				}
				TextDrawShowForPlayer(playerid, WideScreen);
				TextDrawShowForPlayer(playerid, WideScreen2);

			    SetPlayerPos(playerid, 154.1154,-1952.1362,51.3438);
			    SetPlayerFacingAngle(playerid, 350.7448);

   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 0, 0, CamerasPresent[0][0], CamerasPresent[0][1], CamerasPresent[0][2], 0, 14);
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 8:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 9:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 10:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 11:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 12:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 13:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 14:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 15:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 16:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 17:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
			default:
			{
				PlayersDataOnline[playerid][StateDeath] = true;
				PlayersData[playerid][InTutorial] = false;
				PlayersDataOnline[playerid][IsNotSilenciado] = true;
				SetPlayerVirtualWorldEx(playerid, 0);
				UpdateSpawnPlayer(playerid);
				SpawnPlayerEx(playerid);
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);

				TextDrawHideForPlayer(playerid, WideScreen);
				TextDrawHideForPlayer(playerid, WideScreen2);

				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);

				SendInfoMessage(playerid, 2, "0", "Ha finalizado el tutorial.");
				return false;
			}
		}
		TextDrawShowForPlayer(playerid, TexdrawsTutorial[tutorialid]);
		tutorialid++;
		PlayersDataOnline[playerid][TimerTutorialId] = SetTimerEx("SetPlayerTutorial", TimeTutorial, false, "dd", playerid, tutorialid);
		return false;
	}
	return true;
}
public LoadTexDrawsTutorial()
{
//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde
//		\xa6 = O Con tílde

	// Ayuntamiento
	SetTextDrawTutorial(0, "~B~Buenas! Te queremos presentar todo ~N~lo que es y somos ~B~UN ~G~Player~N~~W~Para eso, hemos preparado este corto tutorial y~N~darte una calurosa bienvenida!");
	// Camioneros
	SetTextDrawTutorial(1, "En el servidor encontraras lo t\xa2pico y lo no t\xa2pico ~N~de servidores ~G~RolePlay~W~ como por ejemplo:~N~~B~-Interiores para cada Faccion~N~-Sub-Interiores dentro de los mismos~N~-Todos los sistemas desde 0~N~~W~Entre muchisimas otras cosas que usted mismo ~N~podra descubrir!");
	// Taxis
	SetTextDrawTutorial(2, "Solo pedimos que se respeten todas las reglas~N~del servidor, para eso le aconsejamos~N~que lea las reglas ~R~\"/Reglas\"~W~~N~y a la vez nos ayuda a ser un mejor servidor!");
	// Taller
	SetTextDrawTutorial(3, "Recuerde visitar el foro en: ~G~"WEBPAGE" ~W~donde ~N~ encontrara diversa informacion ~N~para debatir");
	// CNN
	SetTextDrawTutorial(4, "Al igual el foro es un medio muy t\xa2pico ~N~de encontrar un empleo, as\xa2 ~N~que no pierda el tiempo!");
	// Detectives
	SetTextDrawTutorial(5, "Tambi\x9en si consta con un micro y usa el TeamSpeak 3~N~Puede conectarse a nuestro servidor~N~en la siguiente IP:~N~~G~----~N~~W~All\xa2 podras encontrar varias salas privadas ~N~para cada faccion entre otros");
	// Licencieros
	SetTextDrawTutorial(6, "Esperamos que con este corto tutorial vaya ~N~teniendo una idea de cual es nuestro objetivo que ~N~no es mas ~B~Que divertirnos!~N~~N~~N~~N~~N~~R~Ahora lo dejamos con una breve~N~explicacion de las reglas principales");
	SetTextDrawTutorial(7, "~R~Qu\x9e es un server de Rol~B~?~N~~N~~W~-Un servidor de Rol es una simulacion de la vida~N~real, donde se debe tratar de  actuar y hacer las ~N~cosas lo mas aproximado a la vida real.");
	SetTextDrawTutorial(8, "~R~Qu\x9e son los canales IC y OOC~B~?~N~~N~~B~IC(In Character)~W~ Es cuando hablas dentro del personaje~N~que representas el juego.~N~~N~~B~OOC(Out Of Character)~W~ Es cuando hablas fuera de~N~ tu personaje (La persona en la vida real)");
	SetTextDrawTutorial(9, "~R~Qu\x9e es confusion de canales~B~?~N~~N~~W~Es cuando se dicen cosas OOC en IC.~N~Es mezclar informacion de la vida real, con la otra~N~realidad dentro del servidor.~N~~N~~B~Ejemplo: ~W~Te acercas a una persona y le preguntas IC: ~N~¿Qui\x9en es admin aqu\xa2? ¿De que faccion eres?");
	SetTextDrawTutorial(10, "~R~Qu\x9e es MG(MetaGaming)~B~?~N~~N~~W~Es cuando llamas a una persona por su nombre, sin~N~que \x9el te lo hubiera  dicho IC, Simplemente lo~N~llamaste por su nombre porque lo viste  encima de~N~su cabeza.~N~~G~Continua...");
	SetTextDrawTutorial(11, "~B~Ejemplo: ~N~~W~Vez el nombre del jefe de una~N~mafia del server,~N~en alguna otra parte, y te diriges directamente a~N~hacia donde \x9el, sin conocerlo IC, vas y le pides~N~que te meta a su faccion.");
	SetTextDrawTutorial(12, "~R~Qu\x9e es PG (PowerGaming)~B~?~N~~N~~W~Es forzar a tu personaje, para hacer cosas irrealistas.~N~~N~~B~Ejemplo: ~W~Si estas en la carcel, no puede poner~N~~P~/me rompe las rejas con sus poderes~N~~G~/Intentar derrumbar el ayuntamiento con una patada voladora.~N~~G~Continua...");
	SetTextDrawTutorial(13, "Tampoco se puede  manipular o forzar el personaje~N~de otro jugador para hacer una~N~accion imposible~N~y fuera de la realidad. ~N~~N~~B~Ejemplos: ~N~~P~/me mata a Javier_Peralta con su vision laser~N~~G~/Intentar enviar a Javier_Peralta a la luna de un golpe.");
	SetTextDrawTutorial(14, "~R~Qu\x9e es CJ(CarJaked)~B~?~N~~N~~W~-Es cuando se acerca una persona en un auto y pulsas~N~ \"Enter\" y lo sacas del auto solo porque si, sin razon alguna.");
	SetTextDrawTutorial(15, "~R~Qu\x9e es CK(CarKill)~B~?~N~~N~~W~Es cuando se mata a una persona atropellando o a-~N~plastandolo con un auto.");
	SetTextDrawTutorial(16, "~R~Qu\x9e es DB(Drive-By)~B~?~N~~N~~W~Es disparar desde el asiento del conductor de una~N~moto o de un auto (Generalmente tambi\x9en esta Prohi-~N~bido, debido a cuando se dispara desde el asiento~N~del conductor, el GTA SA utiliza el AUTO-AIM \"Mi-~N~ra Automatica\")");
	SetTextDrawTutorial(17, "~R~Qu\x9e es BJ (BunnyJump)~B~?~N~~N~~W~Es ir corriendo y saltando a al mismo tiempo para~N~avanzar mas rapido y no cansarse.~N~Esto es considerado como Anti-Rol.~N~~N~~N~~N~~N~~R~FIN DEL TUTORIAL DE REGLAS");
//				             Es ir corriendo y saltando a al mismo tiempo para   Es ir corriendo y saltando a al mismo tiempo para        Es ir corriendo y saltando a al mismo tiempo para   Es ir corriendo y saltando a al mismo tiempo para

}
public SetTextDrawTutorial(textdrawid, const text[])
{
	TexdrawsTutorial[textdrawid] = TextDrawCreateEx(300.0, 200.0, text);
	TextDrawColor(TexdrawsTutorial[textdrawid], 0xFFFEFFFF);
	TextDrawSetShadow(TexdrawsTutorial[textdrawid] ,1);
	TextDrawFont(TexdrawsTutorial[textdrawid], 1);
	TextDrawAlignment(TexdrawsTutorial[textdrawid], 2);
	TextDrawLetterSize(TexdrawsTutorial[textdrawid], 0.5, 1.3);
}
public EncenderVehicle(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && (PlayersDataOnline[playerid][InCarId] || PlayersDataOnline[playerid][InVehicle]) )
	{
	    new MyVehicleID = GetPlayerVehicleID(playerid);
	    if ( IsVehicleNotBici(playerid, MyVehicleID) )
	    {
			if ( !DataCars[MyVehicleID][StateEncendido] )
			{
			    if ( MyVehicleID <= MAX_CAR_DUENO && !DataCars[MyVehicleID][Puente] && strlen(DataCars[MyVehicleID][Dueno]) == 1 ||
					 MyVehicleID > MAX_CAR_DUENO ||
					 MyVehicleID <= MAX_CAR_DUENO && strlen(DataCars[MyVehicleID][Dueno]) != 1)
			    {
			        if ( !DataCars[MyVehicleID][LlenandoGas] )
			        {
			            if ( DataCars[MyVehicleID][Oil] < 1)
					    {
							SendInfoMessage(playerid, 2, "0", "Vehículo sin aceíte! Use (Enter) para salir del mismo.");
							return 1;
					    }
			            if ( DataCars[MyVehicleID][Gas] < 1)
					    {
					        SendInfoMessage(playerid, 2, "0", "Vehículo sin gas! Use (Enter) para salir del mismo.");
							return 1;
						}
				        new Float:VidaVehiculo; GetVehicleHealth(MyVehicleID,VidaVehiculo);
			            new IntentarText[100];
			            new puedeArrancar;

		            	if (GetPlayerVehicleSeat(playerid) == 0)
						format(IntentarText, sizeof(IntentarText), "encender el vehículo");
						else
						format(IntentarText, sizeof(IntentarText), "ayudar a encender el vehículo");

						if ( VidaVehiculo >= 650.0 )
						{
						    if (GetPlayerVehicleSeat(playerid) == 0)
						    {
						        Acciones(playerid, 0, "encendio el motor del vehículo.");
						        puedeArrancar = true;
						    }
						    else if (IntentarAccion(playerid, IntentarText, random(5)))
						    {
						        puedeArrancar = true;
						    }
						}
						else
						{
						    new RandNum;
							if ( VidaVehiculo >= 550.0 )
							RandNum = 4;
							else
							RandNum = 2;
							if (IntentarAccion(playerid, IntentarText, random(RandNum)))
							puedeArrancar = true;
						}
			            if (puedeArrancar)
			            {
			                DataCars[MyVehicleID][StateEncendido] = true;
						    Acciones(playerid, 7, "Vehículo: Encendido...");
	    					DataCars[MyVehicleID][TimeGas] = gettime();
							IsVehicleOff(MyVehicleID);
							new IsBomb = IsVehicleHaveBomba(MyVehicleID);
							if ( IsBomb != -1 )
							{
							    ActivarBomba(IsBomb, 20);
								SetVehicleHealthEx(MyVehicleID, 0.0);
							}
			            }

					}
					else
					{
						SendInfoMessage(playerid, 0, "1057", "Éste vehículo está llenando el deposito, espere que termine para encenderlo!");
					}
			     }
			}
			else
			{
				SendInfoMessage(playerid, 0, "833", "Éste vehículo ya se encuentra encendido!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "834", "Suba al vehículo que desea encender y use (/Encender o Click Izquierdo)");
	}
	return 1;
}
public ApagarVehicle(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    new MyVehicleID = GetPlayerVehicleID(playerid);
	    if ( IsVehicleNotBici(playerid, MyVehicleID) )
	    {
			if ( DataCars[MyVehicleID][StateEncendido] )
			{
			    if ( GetPlayerVehicleSeat(playerid) == 0 )
			    {
					if ( coches_Todos_Type[GetVehicleModel(MyVehicleID) - 400] != MOTO )
				  	{
						ApplyPlayerAnimCustom(playerid,
							"PED",
							PED_ANIMATIONS[63], false);
					}
					Acciones(playerid, 8, "apaga el motor del vehículo");
				    Acciones(playerid, 7, "Vehículo: Apagado...");
					DataCars[MyVehicleID][StateEncendido] = false;
					IsVehicleOff(MyVehicleID);

				}
				else
				{
					SendInfoMessage(playerid, 0, "829", "Solo puede apagar el vehículo desde el asiento del conductor!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "860", "Éste vehículo ya se encuentra apagado!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "861", "Suba al vehículo que desea apagar y use (/Apagar)");
	}
}
public SetPlayerCall(playerid, numberphone)
{
	if ( PlayersData[playerid][Phone] != 0)
	{
	    if ( !IsPlayerInCall(playerid) )
	    {
	        if ( PlayersData[playerid][Phone] != numberphone )
	        {
	            if ( numberphone > 0 )
	            {
	                if ( PlayersDataOnline[playerid][PhoneOnline] )
	                {
			            for (new i = 0; i < MAX_PLAYERS; i++)
			            {
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == numberphone && PlayersDataOnline[i][PhoneOnline] && IsNotPhoneInBlackList(i, PlayersData[playerid][Phone]) )
							{
								if ( PlayersDataOnline[i][InCall] == -1 )
								{
								    if ( PlayersData[playerid][Saldo] >= 1 )
								    {
								    	if ( PlayersDataOnline[playerid][CallTime] < gettime() )
								    	{
									        PlayersDataOnline[playerid][CallTime] = gettime() + 5;
										    PlayersDataOnline[playerid][Altavoz] = false;
									        PlayersDataOnline[playerid][ICall] = true;
										    PlayersDataOnline[playerid][InCall] = i;
										    PlayersDataOnline[i][InCall] = playerid;

										    new MsgToMe[MAX_TEXT_CHAT];
										    new MsgToPlayer[MAX_TEXT_CHAT];
										    new IsAgenda = IsInAgendaNumber(playerid, numberphone);
										    new IsAgendaYou = IsInAgendaNumber(i, PlayersData[playerid][Phone]);

											if ( IsAgenda != -1)
											{
												format(MsgToMe, sizeof(MsgToMe), " Está llamando a %s al número %i, use \"/C\" (Colgar).",  AgendaData[playerid][IsAgenda][NameC], PlayersData[i][Phone]);
											}
											else
											{
									            format(MsgToMe, sizeof(MsgToMe), " Está dando timbre el número %i use \"/C\" (Colgar).", PlayersData[i][Phone]);
								            }

										    if (PlayersData[i][Admin] >= 1)
										    {
												if ( IsAgendaYou != -1)
												{
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada de %s número %i use \"/D\" (Descolgar) o \"/C\" (Colgar) (([%i]))", AgendaData[i][IsAgendaYou][NameC], PlayersData[playerid][Phone], playerid);
		       								    }
		       								    else
		       								    {
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada del número %i use \"/D\" (Descolgar) o \"/C\" (Colgar) (([%i]))", PlayersData[playerid][Phone], playerid);
												}
										    }
										    else
										    {
												if ( IsAgendaYou != -1)
												{
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada de %s número %i use \"/D\" (Descolgar) o \"/C\" (Colgar)", AgendaData[i][IsAgendaYou][NameC], PlayersData[playerid][Phone]);
		       								    }
		       								    else
		       								    {
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada del número %i use \"/D\" (Descolgar) o \"/C\" (Colgar)", PlayersData[playerid][Phone]);
												}
											}
											Acciones(playerid, 8, "saca su móvil y marca unos números");
											Acciones(i, 8, "le suena el móvil");

											SendClientMessage(playerid, COLOR_INFO_MOVIL, MsgToMe);
											SendClientMessage(i, COLOR_INFO_MOVIL, MsgToPlayer);
											PlayersDataOnline[playerid][IsDescolgado] 	= true;
											PlayersDataOnline[i][IsDescolgado] 			= false;

											SetPlayerDescolgar(playerid);
											return true;
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1219", "Tienes que esperar 5 segundos entre cada llamada!");
										}
								    }
								    else
								    {
										SendInfoMessage(playerid, 0, "1021", "No tienes saldo para realizar una llamada!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "393", "El móvil que llama se encuentra ocupado!");
								}
							    return false;
							}
						}
						SendInfoMessage(playerid, 0, "394", "El móvil que llama se encuentra apagado o no existe!");
					}
					else
					{
						SendInfoMessage(playerid, 0, "894", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "395", "El número que introdujo no existe");
				}
			}
	        else
	        {
				SendInfoMessage(playerid, 0, "396", "Ha introducído su mismo número de móvil");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "398", "Tú no tienes móvil");
	}
	return false;
}
public IsNotZero(playerid, number)
{
	if ( number > 0 && number <= 999999)
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "882", "Debe depositar o retirar más de $0 y menos de $999999");
		return false;
	}
}
public SetVehicleHidden(vehicleid)
{
	if ( GetVehicleVirtualWorld(vehicleid) != 999 )
	{
		SetVehicleVirtualWorld(vehicleid, 999);
		DataCars[vehicleid][RespawnTimerId] = SetTimerEx("SetVehicleShow", MAX_TIME_VEHICLE_HIDDEN, false, "d", vehicleid);
		DataCars[vehicleid][WorldLast] 		= DataCars[vehicleid][World];
		DataCars[vehicleid][InteriorLast]	= DataCars[vehicleid][Interior];
	}
}
public SetVehicleShow(vehicleid)
{
	SetVehicleVirtualWorldEx(vehicleid, DataCars[vehicleid][World]);
	LinkVehicleToInteriorEx(vehicleid, DataCars[vehicleid][Interior]);
}
public RemoveVehicleHidden(vehicleid)
{
	if (GetVehicleVirtualWorld(vehicleid) == 999 )
	{
		KillTimer(DataCars[vehicleid][RespawnTimerId]);
		SetVehicleShow(vehicleid);
	}
}
public GetPlayerScoreEx(playerid)
{
	new LevelRp;
	new MyHoursPlaying = PlayersData[playerid][HoursPlaying];
	new Count=4;
	while (MyHoursPlaying >= Count)
	{
	    MyHoursPlaying = MyHoursPlaying - Count;
	    Count = Count + 4;
	    LevelRp++;
	}
	return LevelRp;
}
public GetPlayerScoreMax(playerid)
{
	new MyHoursPlaying = PlayersData[playerid][HoursPlaying];
	new Count=4;
	while (MyHoursPlaying >= Count)
	{
	    MyHoursPlaying = MyHoursPlaying - Count;
	    Count = Count + 4;
	}
    return Count;
}
public GetPlayerScoreMin(playerid)
{
	new MyHoursPlaying = PlayersData[playerid][HoursPlaying];
	new Count=4;
	while (MyHoursPlaying >= Count)
	{
	    MyHoursPlaying = MyHoursPlaying - Count;
	    Count = Count + 4;
	}
    return MyHoursPlaying;
}
public CheckPlayersAFK()
{
	new Float:PosAFK[4];
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
		{
		    GetPlayerPos(i, PosAFK[0], PosAFK[1], PosAFK[2]);
			GetPlayerFacingAngle(i, PosAFK[3]);
		    if ( PlayersDataOnline[i][IsAFK] && PlayersDataOnline[i][CoordenadasAFK][0] == PosAFK[0] && PlayersDataOnline[i][CoordenadasAFK][1] == PosAFK[1] && PlayersDataOnline[i][CoordenadasAFK][2] == PosAFK[2] && PlayersDataOnline[i][CoordenadasAFK][3] == PosAFK[3] )
		    {
				SendInfoMessage(i, 0, "1162", "Has sido kickeado automáticamente por inactividad (AFK)");
				KickEx(i, 7);
			}
			else
			{
			    GetPlayerPos(i, PlayersDataOnline[i][CoordenadasAFK][0], PlayersDataOnline[i][CoordenadasAFK][1], PlayersDataOnline[i][CoordenadasAFK][2]);
			    GetPlayerFacingAngle(i, PlayersDataOnline[i][CoordenadasAFK][3]);
			    PlayersDataOnline[i][IsAFK] = true;
			}
		}
	}
	SetTimer("CheckPlayersAFK", 900000, false);
}
public LoadAgenda(playerid)
{
	CleanAgenda(playerid);
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_CONTACTS, PlayersDataOnline[playerid][NameOnline]);
	if ( fexist(DirBD) )
	{
	    new AgendaDataLoad[MAX_AGENDA_DATA];
	    new TempNumber[10];
		new File:LoadAgendaF = fopen(DirBD, io_read);
		fread(LoadAgendaF, AgendaDataLoad);
		fclose(LoadAgendaF);

		new PosSplitAfter;
		new NameOrNumber;
		new AgendaCount;
		new PassAgenda;
		for ( new i = 0; i < MAX_PLAYER_CONTACT*3; i++ )
		{
			PosSplitAfter = strfind(AgendaDataLoad, "³", false);
			if (!NameOrNumber)
			{
				strmid(AgendaData[playerid][AgendaCount][NameC], AgendaDataLoad, 0, PosSplitAfter, sizeof(AgendaDataLoad));
				NameOrNumber = true;
			}
			else if ( NameOrNumber == 1 )
			{
				strmid(TempNumber, AgendaDataLoad, 0, PosSplitAfter, sizeof(AgendaDataLoad));
				AgendaData[playerid][AgendaCount][NumberC] = strval(TempNumber);
				NameOrNumber = 2;

			}
			else
			{
				strmid(TempNumber, AgendaDataLoad, 0, PosSplitAfter, sizeof(AgendaDataLoad));
				if ( strval(TempNumber) )
				{
					AgendaData[playerid][AgendaCount][IsBlackList] = true;
				}
				else
				{
					AgendaData[playerid][AgendaCount][IsBlackList] = false;
				}
				NameOrNumber = false;
				PassAgenda = true;
			}
			strdel(AgendaDataLoad, 0, PosSplitAfter + 1);

		    //printf("%s - %i - %i", AgendaData[playerid][AgendaCount][NameC], AgendaData[playerid][AgendaCount][NumberC], AgendaData[playerid][AgendaCount][IsBlackList]);
		    if ( PassAgenda )
		    {
                AgendaCount++;
                PassAgenda = false;
			}

		}
	}
}
public SaveAgenda(playerid)
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_CONTACTS, PlayersDataOnline[playerid][NameOnline]);

	new AgendaDataSave[MAX_AGENDA_DATA];
	new TempConvert[50];
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    format(TempConvert, sizeof(TempConvert), "%s³%i³%i³", AgendaData[playerid][i][NameC], AgendaData[playerid][i][NumberC], AgendaData[playerid][i][IsBlackList]);
        strcat(AgendaDataSave, TempConvert, sizeof(AgendaDataSave));
	}
	new File:SaveAgenda1 = fopen(DirBD, io_write);
	fwrite(SaveAgenda1, AgendaDataSave);
	fclose(SaveAgenda1);
}
public CleanAgenda(playerid)
{
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    format(AgendaData[playerid][i][NameC], MAX_AGENDA_NAME, "");
	    AgendaData[playerid][i][NumberC] 		= 0;
	    AgendaData[playerid][i][IsBlackList] 	= false;
    }
}
public ShowHomeAgenda(playerid)
{
	ShowPlayerDialogEx(playerid,19,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Inicio", "{00F50A}1- {E6E6E6}Contactos \r\n{00F50A}2- {E6E6E6}Agregar \r\n{00F50A}3- {E6E6E6}Eliminar\r\n{00A5FF}4- {E6E6E6}Contactos Bloqueados\r\n{00A5FF}5- {E6E6E6}Bloquear\r\n{00A5FF}6- {E6E6E6}Desbloquear\r\n{F5FF00}7- {E6E6E6}SMS\r\n{F5FF00}8- {E6E6E6}SMS Borrar Todos\r\n{0037FF}9- {E6E6E6}Buscar", "Ir", "Salir");
}
public ShowHomeAgendaOptions(playerid, agendaid)
{
	PlayersDataOnline[playerid][SaveAfterAgenda][0] = agendaid;
	new TempFormat[35];
	format(TempFormat, sizeof(TempFormat), "{00A5FF}Agenda - %s", AgendaData[playerid][agendaid][NameC]);
	if ( AgendaData[playerid][agendaid][IsBlackList] )
	{
		ShowPlayerDialogEx(playerid,127,DIALOG_STYLE_LIST, TempFormat,"{00F50A}1- {E6E6E6}Llamar\r\n{00F50A}2- {E6E6E6}Enviar SMS\r\n{00F50A}3- {00F50A}Desbloquear\r\n{00F50A}4- {E6E6E6}Eliminar", "Seleccionar", "Atrás");
	}
	else
	{
		ShowPlayerDialogEx(playerid,127,DIALOG_STYLE_LIST, TempFormat,"{00F50A}1- {E6E6E6}Llamar\r\n{00F50A}2- {E6E6E6}Enviar SMS\r\n{00F50A}3- {F50000}Bloquear\r\n{00F50A}4- {E6E6E6}Eliminar", "Seleccionar", "Atrás");
	}
}
public ShowContactosAgenda(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 )
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,20,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Contactos", AgendaDialog, "Opciones", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos en la agenda.", "Aceptar", "Volver");
	}
}
public ShowAgregarAgenda(playerid, option)
{
	switch(option)
	{
		// Agregar Nombre
		case 0:
		{
			ShowPlayerDialogEx(playerid,22,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - Agregar Nombre", "{F0F0F0}Introduzca un nombre para su contacto", "Siguiente", "Inicio");
		}
		// Agregar Número
		case 1:
		{
			ShowPlayerDialogEx(playerid,23,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - Agregar Número", "{F0F0F0}Introduzca el número para su contacto", "Agregar", "Inicio");
		}
	}
}
public ShowEliminarAgenda(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 )
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,26,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Eliminar Contacto", AgendaDialog, "Eliminar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos en la agenda.", "Aceptar", "Volver");
	}
}
public AddNumberToAgenda(playerid, const name[], number)
{
	new found;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) <= 1 )
	    {
	        format(AgendaData[playerid][i][NameC], MAX_AGENDA_NAME, "%s", name);
	        AgendaData[playerid][i][NumberC] = number;
	        AgendaData[playerid][i][IsBlackList] = false;
	        found = true;
	        break;
	    }
    }
    if ( !found )
    {
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}Agenda llena.", "Aceptar", "Volver");
		return false;
	}
	else
	{
	    return true;
	}
}
public RemoveNumberToAgenda(playerid, agendaid)
{
    format(AgendaData[playerid][agendaid][NameC], MAX_AGENDA_NAME, "");
    AgendaData[playerid][agendaid][NumberC] = 0;
    AgendaData[playerid][playerid][IsBlackList]    = false;
}
public ShowContactosBloqueados(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && AgendaData[playerid][i][IsBlackList])
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Lista de loqueados", AgendaDialog, "Aceptar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos bloqueados en la agenda.", "Aceptar", "Volver");
	}
}
public ShowAgregarBloqueado(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && !AgendaData[playerid][i][IsBlackList])
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,51,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Bloquear", AgendaDialog, "Bloquear", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos desbloqueados en la agenda.", "Aceptar", "Volver");
	}
}
public ShowEliminarBloqueado(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && AgendaData[playerid][i][IsBlackList])
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,52,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Desbloquear", AgendaDialog, "Desbloquear", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos bloqueados en la agenda.", "Aceptar", "Volver");
	}
}
public AddContactToBlock(playerid, agendaid)
{
    AgendaData[playerid][agendaid][IsBlackList] = true;
	new MsgDialog[MAX_TEXT_CHAT];
	format(MsgDialog, sizeof(MsgDialog), "{F0F0F0}El contacto:\n\n{00F50A}Nombre: {F5FF00}%s\n{00F50A}Número: {F5FF00}%i\n\n{F0F0F0}Fue {F50000}BLOQUEADO {F0F0F0}con éxito!", AgendaData[playerid][agendaid][NameC], AgendaData[playerid][agendaid][NumberC]);
	ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", MsgDialog, "Aceptar", "Volver");
}
public RemoveContactToBlock(playerid, agendaid)
{
    AgendaData[playerid][agendaid][IsBlackList] = false;
	new MsgDialog[MAX_TEXT_CHAT];
	format(MsgDialog, sizeof(MsgDialog), "{F0F0F0}El contacto:\n\n{00F50A}Nombre: {F5FF00}%s\n{00F50A}Número: {F5FF00}%i\n\n{F0F0F0}Fue {00F50A}DESBLOQUEADO {F0F0F0}con éxito!", AgendaData[playerid][agendaid][NameC], AgendaData[playerid][agendaid][NumberC]);
	ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", MsgDialog, "Aceptar", "Volver");
}
public IsPlayerInCall(playerid)
{
    if ( PlayersDataOnline[playerid][InCall] == -1 )
    {
        return false;
	}
	else
	{
		SendInfoMessage(playerid, 0, "397", "Finalize su llamada telefónica actual, antes de realizar otra");
	    return true;
	}
}
public IsInAgendaNumber(playerid, number)
{
	if ( IsObjectInBolsillo(playerid, 4) )
	{
		for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
		{
		    if ( AgendaData[playerid][i][NumberC] == number)
		    {
				return i;
		    }
	    }
	}
    return -1;
}
public IsNotMax100(Float:number, option)
{
	if (number <= 100)
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsVehicleWithInterior(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (  vehicleid > MAX_CAR_DUENO && vehicleid <= MAX_CAR_FACCION && GetPlayerVehicleSeat(playerid) >= 2)
	{
	    if ( DataCars[vehicleid][Time] == CNN && GetVehicleModel(vehicleid) == 582 )
	    {
		    SetPlayerVirtualWorldEx(playerid, vehicleid);
		    SetPlayerPos(playerid, PickupInfo[PickupidFurgoCNN][PosInfoX], PickupInfo[PickupidFurgoCNN][PosInfoY], PickupInfo[PickupidFurgoCNN][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 359.5986);
			SetCameraBehindPlayer(playerid);
			return true;
		}
		else if ( (DataCars[vehicleid][Time] == SFPD || DataCars[vehicleid][Time] == LSPD) && GetVehicleModel(vehicleid) == 427 )
		{
		    SetPlayerVirtualWorldEx(playerid, vehicleid);
		    SetPlayerPos(playerid, PickupInfo[PickupidPoliceFurgo][PosInfoX], PickupInfo[PickupidPoliceFurgo][PosInfoY], PickupInfo[PickupidPoliceFurgo][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 0);
			SetCameraBehindPlayer(playerid);
			return true;
		}
		else if ( (DataCars[vehicleid][Time] == SFMD || DataCars[vehicleid][Time] == LSMD ) && GetVehicleModel(vehicleid) == 416 )
		{
		    SetPlayerVirtualWorldEx(playerid, vehicleid);
		    SetPlayerPos(playerid, PickupInfo[PickupidAmbulance][PosInfoX], PickupInfo[PickupidAmbulance][PosInfoY], PickupInfo[PickupidAmbulance][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 359.5986);
			SetCameraBehindPlayer(playerid);
		    return true;
		}
	}
	return false;
}
public IsPlayerInTrain(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if ( GetTrainByVehicleID(vehicleid) )
	{
	    new Vagonid = GetVagonByVehicleID(vehicleid);
	    if ( Vagonid )
	    {
		    SetPlayerVirtualWorldEx(playerid, GetTrainByVehicleID(vehicleid));
		    SetPlayerPos(playerid, PickupInfo[PickupExitVagones[Vagonid - 1]][PosInfoX], PickupInfo[PickupExitVagones[Vagonid - 1]][PosInfoY], PickupInfo[PickupExitVagones[Vagonid - 1]][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 180.0);
			SetCameraBehindPlayer(playerid);
			return true;
		}
	}
	return false;
}
public RemoveRallaName(playerid)
{
	new h = strlen(PlayersDataOnline[playerid][NameOnline]);
    for( new i = 0; i < h; i++)
    {
        if ( PlayersDataOnline[playerid][NameOnline][i] == '_')
        {
			format(PlayersDataOnline[playerid][NameOnlineFix], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
			PlayersDataOnline[playerid][NameOnlineFix][i] = ' ';
			return true;
		}
	}
	format(PlayersDataOnline[playerid][NameOnlineFix], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
	return false;
}
public SendMessageToCallCNN(playerid)
{
	new MsgLlamar[MAX_TEXT_CHAT];
	format(MsgLlamar, sizeof(MsgLlamar), "Ha entrado una llamada vía telefónica a CNN. Número: %i", PlayersData[playerid][Phone]);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == CNN)
		{
			SendInfoMessage(i, 3, "0", MsgLlamar);
		}
	}
}
public UpdateSpawnPlayer(playerid)
{
	if ( PlayersData[playerid][Nacer] == 1 && PlayersData[playerid][House] != -1 ||
		 PlayersData[playerid][Nacer] == 1 && PlayersData[playerid][Alquiler] != -1 ||
		 PlayersData[playerid][Nacer] == 2 && IsPlayerInHouseFriend(playerid, PlayersData[playerid][SpawnAmigo]) != -1
		 )
	{
	    new HouseId;
	    if ( PlayersData[playerid][Nacer] == 1 )
	    {
		    if ( PlayersData[playerid][Alquiler] != -1 )
		    {
		        HouseId = PlayersData[playerid][Alquiler];
			}
			else
			{
			    HouseId = PlayersData[playerid][House];
			}
		}
		else
		{
		    HouseId = PlayersData[playerid][SpawnAmigo];
		}
		SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	HouseData[HouseId][PosX], HouseData[HouseId][PosY], HouseData[HouseId][PosZ], HouseData[HouseId][PosZZ], 0, 0, 0, 0, 0, 0);
	}
	else
	{
	    if ( !PlayersData[playerid][Ciudad] && PlayersData[playerid][Faccion] == CIVIL || PlayersData[playerid][Faccion] != CIVIL)
	    {
			SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	FaccionData[PlayersData[playerid][Faccion]][Spawn_X][PlayersData[playerid][SpawnFac]], FaccionData[PlayersData[playerid][Faccion]][Spawn_Y][PlayersData[playerid][SpawnFac]], FaccionData[PlayersData[playerid][Faccion]][Spawn_Z][PlayersData[playerid][SpawnFac]], FaccionData[PlayersData[playerid][Faccion]][Spawn_ZZ][PlayersData[playerid][SpawnFac]], 0, 0, 0, 0, 0, 0);
		}
		else
		{
			SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	-2049.9419,461.4292,35.1719,312.4388, 0, 0, 0, 0, 0, 0);
		}
	}
}
stock IsPlayerInPincho(playerid, pickupid)
{
	if ( PickupIndex[pickupid][Tipo] == PICKUP_TYPE_PINCHO && IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
	{
	    new pinchoid = PickupIndex[pickupid][Tipoid];
	    if (VCP[pinchoid][objectid_vcp] != -1 && VCP[pinchoid][pickupidVCP] == pickupid)
	    {
	        new MyVehicle = GetPlayerVehicleID(playerid);
			new Vpanel, Vdoors, Vlights, Vtires;
			GetVehicleDamageStatus(MyVehicle, Vpanel, Vdoors, Vlights, Vtires);
			UpdateVehicleDamageStatus(MyVehicle, Vpanel, Vdoors, Vlights, 15);
	    }
	}
}
public IsVehicleNotBici(playerid, vehicleid)
{
    if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] != BICI &&
		 GetVehicleModel(vehicleid) != 570 )
    {
        return true;
    }
    else
    {
		SendInfoMessage(playerid, 0, "951", "No puede utilizar ese comando con éste vehículo");
		return false;
	}
}
public IsValidName(const name[])
{
	// Nombres no permitidos por windows, para archivos.
//CON, PRN, AUX, NUL, COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9,
// LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9

	if ( strcmp(name, "CON", true, 3) == 0
	||  strcmp(name, "PRN", true, 3) == 0
	||  strcmp(name, "AUX", true, 3) == 0
	||  strcmp(name, "NUL", true, 3) == 0
	||  strcmp(name, "COM0", true, 4) == 0
	||  strcmp(name, "COM1", true, 4) == 0
	||  strcmp(name, "COM2", true, 4) == 0
	||  strcmp(name, "COM3", true, 4) == 0
	||  strcmp(name, "COM4", true, 4) == 0
	||  strcmp(name, "COM5", true, 4) == 0
	||  strcmp(name, "COM6", true, 4) == 0
	||  strcmp(name, "COM7", true, 4) == 0
	||  strcmp(name, "COM8", true, 4) == 0
	||  strcmp(name, "COM9", true, 4) == 0
	||  strcmp(name, "LPT0", true, 4) == 0
	||  strcmp(name, "LPT1", true, 4) == 0
	||  strcmp(name, "LPT2", true, 4) == 0
	||  strcmp(name, "LPT3", true, 4) == 0
	||  strcmp(name, "LPT4", true, 4) == 0
	||  strcmp(name, "LPT5", true, 4) == 0
	||  strcmp(name, "LPT6", true, 4) == 0
	||  strcmp(name, "LPT7", true, 4) == 0
	||  strcmp(name, "LPT8", true, 4) == 0
	||  strcmp(name, "LPT9", true, 4) == 0 )
	{
		return false;
	}
	else
	{
		return true;
	}
}
public SetPlayerFaccion(playerid, const cmdfaccion[])
{
    if (PlayersData[playerid][Admin] >= 7)
    {
		if ( strlen(cmdfaccion) > 10)
		{

			new Datos_PicadosFaccion[3][10];
			            	// 00  	= 	"/Jail"
							// 01	= 	ID
							// 02   =   ID_FACCION
		       // DatosOriginales   =   RANGO

			new DatosOriginales[150];
			format(DatosOriginales, sizeof(DatosOriginales), "%s ", cmdfaccion);
			new wPos;
   			for (new i = 0; i < 3; i++)
    		{
				wPos = strfind(DatosOriginales, " ", false); // HOLA³QUE³PASA³
				strmid(Datos_PicadosFaccion[i], DatosOriginales, 0, wPos, sizeof(DatosOriginales));
				strdel(DatosOriginales, 0, wPos + 1);
			}

			if ( IsPlayerConnected(strval(Datos_PicadosFaccion[1])) )
			{
				if ( strval(Datos_PicadosFaccion[2]) >= CIVIL && strval(Datos_PicadosFaccion[2]) <= MAX_FACCION )
				{
					if ( strval(DatosOriginales) <= GetMaxFaccionRango(strval(Datos_PicadosFaccion[2])) || strval(Datos_PicadosFaccion[2]) == 0 )
					{
					    if( PlayersData[strval(Datos_PicadosFaccion[1])][Rango] == 0)
						{
						    format(FaccionData[PlayersData[strval(Datos_PicadosFaccion[1])][Faccion]][Lider], 2, "");
						    UpdateFaccionTextLabel(PlayersData[strval(Datos_PicadosFaccion[1])][Faccion], true);
						}
                        PlayersData[strval(Datos_PicadosFaccion[1])][Faccion] = strval(Datos_PicadosFaccion[2]);
                        PlayersData[strval(Datos_PicadosFaccion[1])][HorasWork] = 0;
                        PlayersData[strval(Datos_PicadosFaccion[1])][SpawnFac] = 0;
						if ( strval(Datos_PicadosFaccion[2]) != CIVIL )
						{
	                        PlayersData[strval(Datos_PicadosFaccion[1])][Rango]   = strval(DatosOriginales);
							PlayersData[strval(Datos_PicadosFaccion[1])][Skin] = RangosSkins[PlayersData[strval(Datos_PicadosFaccion[1])][Faccion]][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]][0];
							SetPlayerSkinEx(strval(Datos_PicadosFaccion[1]), RangosSkins[PlayersData[strval(Datos_PicadosFaccion[1])][Faccion]][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]][0]);

							if( PlayersData[strval(Datos_PicadosFaccion[1])][Rango] == 0)
							{
							    format(FaccionData[strval(Datos_PicadosFaccion[2])][Lider], MAX_PLAYER_NAME, "%s", PlayersDataOnline[strval(Datos_PicadosFaccion[1])][NameOnline]);
							    UpdateFaccionTextLabel(strval(Datos_PicadosFaccion[2]), true);
							}
						}
						else
						{
		                    PlayersData[strval(Datos_PicadosFaccion[1])][Rango]   = 7;
						    PlayersData[strval(Datos_PicadosFaccion[1])][Skin] = 26;
						    SetPlayerSkinEx(strval(Datos_PicadosFaccion[1]), 26);
						}

						new MsgAcceptUser[MAX_TEXT_CHAT]; format(MsgAcceptUser, sizeof(MsgAcceptUser), "Metíste a %s a la Facción \"%s\" con rango \"%s\"", PlayersDataOnline[strval(Datos_PicadosFaccion[1])][NameOnline], FaccionData[strval(Datos_PicadosFaccion[2])][NameFaccion], FaccionesRangos[strval(Datos_PicadosFaccion[2])][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]]);
						new MsgAcceptMe[MAX_TEXT_CHAT]; format(MsgAcceptMe, sizeof(MsgAcceptMe), "El administrador %s te ha metido ha la Facción \"%s\" con rango \"%s\"", PlayersDataOnline[playerid][NameOnline], FaccionData[strval(Datos_PicadosFaccion[2])][NameFaccion], FaccionesRangos[strval(Datos_PicadosFaccion[2])][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]]);
                        SendInfoMessage(strval(Datos_PicadosFaccion[1]), 3, "0", MsgAcceptMe);
                        SendInfoMessage(playerid, 3, "0", MsgAcceptUser);

						CheckAsignados(strval(Datos_PicadosFaccion[1]));
						SetPlayerLockAllVehicles(strval(Datos_PicadosFaccion[1]));
						UpdateSpawnPlayer(strval(Datos_PicadosFaccion[1]));
					}
					else
					{
						SendInfoMessage(playerid, 0, "139", "La rango que introdujo no existe para esa facción");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "140", "La Facción que introdujo no existe");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "141", "El jugador que desea cambiar de Facción no se encuentra conectado");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "142", "Ha introducído mal el sintaxis del comando /Facción. Ejemplo correcto: /Facción 2 8 2.");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "143", "Tú no tienes acceso a el comando /Facción.");
	}
}
public SetPlayerFaccionEx(playerid, const command[])
{
    if (PlayersData[playerid][Admin] >= 7)
    {
		if ( strlen(command) > 15)
		{

			new NameF[MAX_PLAYER_NAME];
			strmid(NameF, command, GetPosSpace(command, 1) + 1, GetPosSpace(command, 2));

			new FaccionID = strval(command[GetPosSpace(command, 2)]);
			new RangoID = strval(command[GetPosSpace(command, 3)]);

			if ( IsPlayerConnectedEx(NameF) == -1)
			{
				if ( FaccionID >= CIVIL && FaccionID <= MAX_FACCION )
				{
					if ( RangoID <= GetMaxFaccionRango(FaccionID) || FaccionID == 0 )
					{
					    new playeridF = 499;
					    format(PlayersDataOnline[playeridF][NameOnline], MAX_PLAYER_NAME, "%s", NameF);
						if (DataUserLoad(playeridF))
						{
						    new LastFaccion = PlayersData[playeridF][Faccion];
						    new LastRango = PlayersData[playeridF][Rango];
							PlayersData[playeridF][Faccion] = FaccionID;
						    PlayersData[playeridF][HorasWork] = 0;
                            PlayersData[playeridF][SpawnFac] = 0;
							if ( FaccionID != CIVIL )
							{
								PlayersData[playeridF][Rango]   = RangoID;
								PlayersData[playeridF][Skin] = RangosSkins[PlayersData[playeridF][Faccion]][PlayersData[playeridF][Rango]][0];

								if ( PlayersData[playeridF][Job] == VENDEDOR_MOVIL )
								{
								    PlayersData[playeridF][Job] = NINGUNO;
								}
							}
							else
							{
							    PlayersData[playeridF][Rango]   = 7;
							    PlayersData[playeridF][Skin] = 26;
							}
							CheckAsignados(playeridF);

							new MsgAcceptUser[256];
							format(MsgAcceptUser, sizeof(MsgAcceptUser), "Metíste a %s a la Facción \"%s\" con rango \"%s\" estaba en la facción \"%s\" con rango \"%s\"",
							PlayersDataOnline[playeridF][NameOnline],
							FaccionData[FaccionID][NameFaccion],
							FaccionesRangos[FaccionID][PlayersData[playeridF][Rango]],
							FaccionData[LastFaccion][NameFaccion],
							FaccionesRangos[LastFaccion][LastRango]);

	                        SendInfoMessage(playerid, 3, "0", MsgAcceptUser);

							PlayersDataOnline[playeridF][Spawn] = false;
							DataUserSave(playeridF);
						}
						else
						{
							SendInfoMessage(playerid, 0, "956", "No existe ese jugador en la base de datos!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "957", "La rango que introdujo no existe para esa facción");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "958", "La Facción que introdujo no existe");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "959", "El jugador que desea cambiar de Facción se encuentra conectado, utilize /Facción");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "960", "Ha introducído mal el sintaxis del comando /FacciónEx. Ejemplo correcto: /FacciónEx Ikki_Katsu 5 0.");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "961", "Tú no tienes acceso a el comando /FacciónEx.");
	}
}
public IsPlayerConnectedEx(const playername[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && strfind(playername, PlayersDataOnline[i][NameOnline], true) == 0 && strlen(playername) == strlen(PlayersDataOnline[i][NameOnline]) )
		{
		    return i;
		}
    }
	return -1;
}
public LoadJobs()
{
	format(Jobs[NINGUNO][NameJob], MAX_FACCION_NAME, "Ninguno");

	format(Jobs[PESCA][NameJob], MAX_FACCION_NAME, "Pescador");
	format(Jobs[VENDEDOR_MOVIL][NameJob], MAX_FACCION_NAME, "Vendedor de Móviles");
}
public LoadInfoPickups()
{
	// PESCA
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 612.8910;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = -2995.3770;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 7.2706;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_NORMAL, 0);
    Jobs[PESCA][pickupidGet] = PickupInfo[MAX_PICKUP_INFO][PickupId];
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Si desea ser pescador\nUse {"COLOR_ROJO"}/{"COLOR_VERDE"}Trabajar", WORLD_NORMAL, 0);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = -1503.5508;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1380.0824;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 3.4375;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_NORMAL, 0);
    JobsData[PESCA_PickupidVender] = PickupInfo[MAX_PICKUP_INFO][PickupId];
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Use {"COLOR_ROJO"}/{"COLOR_VERDE"}Vender Peces", WORLD_NORMAL, 0);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 565.2724;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = -3035.1536;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 3.0419;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_NORMAL, 0);
    JobsData[PESCA_PickupidPescar] = PickupInfo[MAX_PICKUP_INFO][PickupId];
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Zona de pesca\nUse {"COLOR_ROJO"}/{"COLOR_VERDE"}Pescar", WORLD_NORMAL, 0);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 2452.4606933594;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1845.6982421875;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 16.32413482666;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], -1, 3);
    PickupidAmbulance = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Salir de la ambulancia", -1, 3);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 2643.2592773438;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1887.0278320313;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 18.815624237061;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], -1, 3);
    PickupidFurgoCNN = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Salir de la furgona CNN", -1, 3);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 1755.9699707031;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = -2670.3698730469;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 13.637499809265;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], -1, 3);
    PickupidPoliceFurgo = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Salir del camion Swat", -1, 3);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 2394.7495117188;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1159.5728759766;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 34.606250762939;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], -1, 3);
    PickupExitVagones[0] = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Salida del Vagon 1", -1, 3);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 2407.3837890625;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1136.6993408203;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 34.267810821533;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], -1, 3);
    PickupExitVagones[1] = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Salida del Vagon 2", -1, 3);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 2393.4990234375;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1113.5131835938;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 34.726249694824;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], -1, 3);
    PickupExitVagones[2] = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Salida del Vagon 3", -1, 3);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 2365.8909;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1559.6465;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 27.9562;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_DEFAULT_INTERIOR, 11);
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Camaras Los Santos\nUse {"COLOR_ROJO"}/{"COLOR_VERDE"}Camaras", WORLD_DEFAULT_INTERIOR, 11);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 1961.4952;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 973.3851;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 21.8714;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_DEFAULT_INTERIOR, 7);
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Camaras San Fierro\nUse {"COLOR_ROJO"}/{"COLOR_VERDE"}Camaras", WORLD_DEFAULT_INTERIOR, 7);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 1316.2865;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 1385.0859;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 10.8797;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_DEFAULT_INTERIOR, 2);
    SuperMercadosPickupid[0] = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "SuperMercados {"COLOR_AMARILLO"}San {"COLOR_AZUL"}Fierro\n{"COLOR_AZUL"}Use {"COLOR_ROJO"}/{"COLOR_VERDE"}SuperMercado", WORLD_DEFAULT_INTERIOR, 2);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = 1555.6737;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = -2558.0864;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 13.5628;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_DEFAULT_INTERIOR, 16);
    SuperMercadosPickupid[1] = MAX_PICKUP_INFO;
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "SuperMercados {"COLOR_AMARILLO"}Los {"COLOR_AZUL"}Santos\n{"COLOR_AZUL"}Use {"COLOR_ROJO"}/{"COLOR_VERDE"}SuperMercado", WORLD_DEFAULT_INTERIOR, 16);

	////////////////////////////////////////////////
	MAX_PICKUP_INFO++;
    PickupInfo[MAX_PICKUP_INFO][PosInfoX] = -1961.2986;
    PickupInfo[MAX_PICKUP_INFO][PosInfoY] = 438.8855;
    PickupInfo[MAX_PICKUP_INFO][PosInfoZ] = 35.1719;
    PickupInfo[MAX_PICKUP_INFO][PickupId] = CreateInfoPickup(1239, MAX_PICKUP_INFO, PickupInfo[MAX_PICKUP_INFO][PosInfoX], PickupInfo[MAX_PICKUP_INFO][PosInfoY], PickupInfo[MAX_PICKUP_INFO][PosInfoZ], WORLD_NORMAL, 0);
    Jobs[VENDEDOR_MOVIL][pickupidGet] = PickupInfo[MAX_PICKUP_INFO][PickupId];
	CreateTextLabelPickupInfo(MAX_PICKUP_INFO, "Conviertase en un vendedor de moviles!\nUse {"COLOR_ROJO"}/{"COLOR_VERDE"}Trabajar", WORLD_NORMAL, 0);
}

stock CreateTextLabelPickupInfo(pickupidinfo, const info[], worldid, interiorid)
{
	new string[300];
	format(string, sizeof(string), "Info: {"COLOR_CREMA"}%s", info);
    CreateDynamic3DTextLabel(string, 0x00A5FFFF, PickupInfo[pickupidinfo][PosInfoX], PickupInfo[pickupidinfo][PosInfoY], PickupInfo[pickupidinfo][PosInfoZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, true,
    worldid, interiorid);
}

public SetVehicleTaxi(vehicleid)
{
	TaxisTaximetro[MAX_TAXIS][TaxiVehicleid] = vehicleid;
	SetTaxiReadyTextDraw(MAX_TAXIS, 0);
	SetTaxiReadyTextDraw(MAX_TAXIS, 1);
	SetTaxiReadyTextDraw(MAX_TAXIS, 2);
	MAX_TAXIS++;
}
public SetTaxiReadyTextDraw(taxiid, textdrawid)
{
	TaxisTaximetro[taxiid][Seats][textdrawid] = TextDrawCreateEx(524.0, 395.0,"Empty");
	TextDrawUseBox(TaxisTaximetro[taxiid][Seats][textdrawid], 1);
	TextDrawBackgroundColor(TaxisTaximetro[taxiid][Seats][textdrawid], 0x000000A3);
	TextDrawColor(TaxisTaximetro[taxiid][Seats][textdrawid], 0x2DFF00FF);
	TextDrawBoxColor(TaxisTaximetro[taxiid][Seats][textdrawid], 0x000000A1);
	TextDrawTextSize(TaxisTaximetro[taxiid][Seats][textdrawid], 625, 400.0);
	TextDrawSetShadow(TaxisTaximetro[taxiid][Seats][textdrawid], 1);
	TextDrawLetterSize(TaxisTaximetro[taxiid][Seats][textdrawid], 0.3 , 1.0);
	TextDrawFont(TaxisTaximetro[taxiid][Seats][textdrawid], 2);
}
public IsVehicleTaxi(vehicleid)
{
	for ( new i = 0; i < MAX_TAXIS; i++)
	{
	    if ( TaxisTaximetro[i][TaxiVehicleid] == vehicleid )
	    {
	        return i;
		}
	}
	return -1;
}
public IsReadyCallPublic(playerid)
{
	if ( gettime() - PlayersDataOnline[playerid][TimeCallPublics] >= 30 )
	{
		PlayersDataOnline[playerid][TimeCallPublics] = gettime();
		return true;
	}
	else
	{
		new MsgDinamicCallP[MAX_TEXT_CHAT];
		format(MsgDinamicCallP, sizeof(MsgDinamicCallP), "No puedes volver a llamar a un teléfono de servicios públicos hasta dentro de %i segundos.", 30 - (gettime() - PlayersDataOnline[playerid][TimeCallPublics]));
		SendInfoMessage(playerid, 0, "979", MsgDinamicCallP);
		return false;
	}
}
public ShowPlayerMenuSelectWalk(playerid)
{
	new ListDialog[350];
	for (new i = 0; i < sizeof(ModeWalkID); i++)
	{
	    if ( i != 0 )
	    {
	    	strcat(ListDialog, "\r\n{E6E6E6}", sizeof(ListDialog));
		}
	    if ( PlayersData[playerid][MyStyleWalk] == i)
	    {
	    	strcat(ListDialog, "{00F50A}> ", sizeof(ListDialog));
	    	strcat(ListDialog, ModeWalkName[i], sizeof(ListDialog));
    	}
    	else
    	{
	    	strcat(ListDialog, ModeWalkName[i], sizeof(ListDialog));
		}
	}
	ShowPlayerDialogEx(playerid,27,DIALOG_STYLE_LIST,"{00A5FF}Seleccionar mi estilo de caminar", ListDialog, "Seleccionar", "Cancelar");
}
public ShowPlayerMenuSelectTalk(playerid)
{
	new ListDialog[350];
	for (new i = 0; i < sizeof(ModeTalkName); i++)
	{
	    if ( i != 0 )
	    {
	    	strcat(ListDialog, "\r\n{E6E6E6}", sizeof(ListDialog));
		}
	    if ( PlayersData[playerid][MyStyleTalk] == i)
	    {
	    	strcat(ListDialog, "{00F50A}> ", sizeof(ListDialog));
	    	strcat(ListDialog, ModeTalkName[i], sizeof(ListDialog));
    	}
    	else
    	{
	    	strcat(ListDialog, ModeTalkName[i], sizeof(ListDialog));
		}
	}
	ShowPlayerDialogEx(playerid,60,DIALOG_STYLE_LIST,"{00A5FF}Seleccionar mi estilo de hablar", ListDialog, "Seleccionar", "Cancelar");
}
/*public ShowPlayerMenuSelectSprint(playerid)
{
	new ListDialog[350];
	for (new i = 0; i < sizeof(ModeSprintName); i++)
	{
	    if ( i != 0 )
	    {
	    	strcat(ListDialog, "\r\n{E6E6E6}", sizeof(ListDialog));
		}
	    if ( PlayersData[playerid][MyStyleSprint] == i)
	    {
	    	strcat(ListDialog, "{00F50A}> ", sizeof(ListDialog));
	    	strcat(ListDialog, ModeSprintName[i], sizeof(ListDialog));
    	}
    	else
    	{
	    	strcat(ListDialog, ModeSprintName[i], sizeof(ListDialog));
		}
	}
	ShowPlayerDialogEx(playerid,61,DIALOG_STYLE_LIST,"{00A5FF}Seleccionar mi estilo de correr", ListDialog, "Seleccionar", "Cancelar");
}*/
public IsNotFullMaterialsPlayer(playerid, newamount)
{
	if ( (PlayersData[playerid][Materiales] + newamount) <= 2500 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsNotOneWeapon(weaponid)
{

	if ( SlotIDWeapon[weaponid] != 0   &&
		 SlotIDWeapon[weaponid] != 1   &&
		 SlotIDWeapon[weaponid] != 10  &&
		 SlotIDWeapon[weaponid] != 11  &&
		 SlotIDWeapon[weaponid] != 12   )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public CreateVehicleEx(model, Float:Xc, Float:Yc, Float:Zc, Float:ZZc, color1, color2, vehicleid)
{
	if ( coches_Todos_Type[model - 400] != TREN )
	{
   		CreateVehicle(model, Xc, Yc, Zc, ZZc, color1, color2, -1);
   	}
   	else
   	{
   		if ( model == 538 || model == 449 )
   		{
	   		AddStaticVehicle(model, Xc, Yc, Zc, ZZc, color1, color2);

			DataCars[vehicleid][Gas] = MAX_GAS_VEHICLE;
			DataCars[vehicleid][Oil] = MAX_OIL_VEHICLE;

	   		if ( model == 538 )
	   		{
	   			MAX_TRAIN++;
		   		TrainGroups[MAX_TRAIN][0] = vehicleid;
		   		TrainGroups[MAX_TRAIN][1] = vehicleid + 1;
		   		TrainGroups[MAX_TRAIN][2] = vehicleid + 2;
		   		TrainGroups[MAX_TRAIN][3] = vehicleid + 3;
	   		}
   		}
	}

	SetVehicleNumberPlate(vehicleid, DataCars[vehicleid][MatriculaString]);

	if ( vehicleid <= MAX_CAR_DUENO && strlen(DataCars[vehicleid][Dueno]) == 1 )
	{
		DataCars[vehicleid][AlarmOn] = true;
	}
	else
	{
		DataCars[vehicleid][AlarmOn] = false;
	}
	if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] != BICI )
	{
		DataCars[vehicleid][StateEncendido] = false;
	}
	else
	{
		DataCars[vehicleid][StateEncendido] = true;
		IsVehicleOff(vehicleid);
	}
	if ( vehicleid > MAX_CAR_DUENO && vehicleid <= MAX_CAR_FACCION && DataCars[vehicleid][Time] == TRAFICANTES && GetVehicleModel(vehicleid) == 483 )
	{
		ChangeVehiclePaintjob(vehicleid, 0);
	}

	SetVehicleParamsEx(vehicleid, DataCars[vehicleid][StateEncendido], DataCars[vehicleid][LightState], false, false, DataCars[vehicleid][CapoState], DataCars[vehicleid][MaleteroState], false);

	SetVehicleVirtualWorld(vehicleid, DataCars[vehicleid][World]);
	LinkVehicleToInterior(vehicleid, DataCars[vehicleid][Interior]);
}
public SetPlateToCarFaccion(vehicleid, faccionid)
{
	format(DataCars[vehicleid][MatriculaString], 32, "%i%i%i%i", faccionid, faccionid, faccionid, vehicleid);
	DataCars[vehicleid][Matricula]	= strval(DataCars[vehicleid][MatriculaString]);
}
public IsVehicleOff(vehicleid)
{
	new EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC;
	GetVehicleParamsEx(vehicleid, EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC);
	SetVehicleParamsEx(vehicleid, DataCars[vehicleid][StateEncendido], DataCars[vehicleid][LightState], DataCars[vehicleid][AlarmOn], DoorsC, DataCars[vehicleid][CapoState], DataCars[vehicleid][MaleteroState], ObjectiveC);
}
public IsAlarmaBug(vehicleid)
{
	new EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC;
	GetVehicleParamsEx(vehicleid, EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC);
	if ( AlarmC && DataCars[vehicleid][AlarmOn] )
	{
		SetVehicleParamsEx(vehicleid, DataCars[vehicleid][StateEncendido], DataCars[vehicleid][LightState], DataCars[vehicleid][AlarmOn], DoorsC, DataCars[vehicleid][CapoState], DataCars[vehicleid][MaleteroState], ObjectiveC);
	}
}
public IsPlayerFoundWeapon(playerid, weaponid)
{
	for (new i = 0; i < 13; i++)
	{
		if ( PlayersData[playerid][WeaponS][i] == weaponid)
		{
		    return i;
		}
	}
    return -1;
}
public CheckVehicleGas()
{
	new CheckTimeVehicle = gettime();
	for (new i = 1; i <= MAX_CAR; i++)
	{
	    if ( coches_Todos_Type[DataCars[i][Modelo] - 400] != TREN && coches_Todos_Type[DataCars[i][Modelo] - 400] != VUELO)
	    {
			IsVehicleBug(i, true);
			if ( DataCars[i][StateEncendido] && (CheckTimeVehicle - DataCars[i][TimeGas]) >= (TIME_CHECK_GAS_VEHICLES / 1000))
			{
			    if ( DataCars[i][Gas] >= 1 )
			    {
			        DataCars[i][Gas]--;
			 	}
			    if ( DataCars[i][ConteoOil] >= 8 && DataCars[i][Oil] >= 1 )
			    {
			        DataCars[i][Oil]--;
			        DataCars[i][ConteoOil] = false;
			 	}

			 	DataCars[i][ConteoOil]++;

		        DataCars[i][TimeGas] = CheckTimeVehicle;

				UpdateGasAndOil(i);
			}
			IsAlarmaBug(i);
		}
	}

    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if (IsPlayerConnected(i)&&PlayersDataOnline[i][StateChannelOOC]&&PlayersDataOnline[i][State] == 3&&!PlayersData[i][Enfermedad])
        {
            if (PlayersDataOnline[i][VidaOn]<=VIDA_CRACK || PlayersData[i][Cansansio]<=1 )
            {
	            if ( random(30) == 15 )
	            {
					new RandomEnfermedad = random(4);
					switch ( RandomEnfermedad )
					{
					    case 0:
					    {
							ChangeEnfermedad(i, 1);
						}
					    case 1:
					    {
							ChangeEnfermedad(i, 2);
						}
					    case 2:
					    {
							ChangeEnfermedad(i, 4);
						}
						case 3:
						{
							ChangeEnfermedad(i, 5);
						}
					}
	       		}
       		}
        }
	}
	new RconCommand[50];
	new SaveTime[3];gettime(SaveTime[0], SaveTime[1], SaveTime[2]);
	format(RconCommand, sizeof(RconCommand), "worldtime Son las %i:%i", SaveTime[0], SaveTime[1], SaveTime[2]);
	SendRconCommand(RconCommand);
	SetTimer("CheckVehicleGas", TIME_CHECK_GAS_VEHICLES, false);
}
public SetPlayerSelectedTypeHair(playerid)
{
	PlayersDataOnline[playerid][RowHair] = -1;
	GetSpawnInfo(playerid);
	PlayersDataOnline[playerid][Spawn]      = false;
	SetPlayerVirtualWorldEx(playerid, playerid);

	TogglePlayerControllableEx(playerid, 0);
	SetPlayerInteriorEx(playerid, 2);
	SetPlayerPos(playerid, 271.7302, 304.7271 ,999.1558);
	SetPlayerFacingAngle(playerid, 51.5407);

	switch ( PlayersDataOnline[playerid][TypeBuy] )
	{
	    case TYPE_PELO, TYPE_BOINA, TYPE_GORRAS, TYPE_GAFAS, TYPE_CASCO:
	    {
			SetPlayerCameraPos(playerid, 270.673370,305.207397,1000.148193);
			SetPlayerCameraLookAt(playerid, 272.111755,304.713104,1000.055541);
	    }
	    case TYPE_RELOJES:
	    {
			SetPlayerCameraPos(playerid, 270.643951,303.595184,999.548339);
			SetPlayerCameraLookAt(playerid, 271.883331,304.441558,999.555664);
	    }
	    default:
	    {
			SetPlayerCameraPos(playerid, 270.3158,305.6811,1000.0);
			SetPlayerCameraLookAt(playerid, 271.7302, 304.7271 ,999.1558);
	    }
	}

	NextHairSelect(playerid);
}
public NextHairSelect(playerid)
{
	for (new i = PlayersDataOnline[playerid][RowHair]; i <= sizeof(ObjectPlayersInt);)
	{
//	    printf("Here %i", i);
	    i++;
		if ( i >= sizeof(ObjectPlayersInt) )
		{
			i = 0;
		}
	    if ( PlayersDataOnline[playerid][TypeBuy] == ObjectPlayersInt[i][2] )
	    {
//		    printf("Here -> %i", i);
            PlayersDataOnline[playerid][RowHair] = i;
			new RemoveTemp = GetObjectByType(playerid, PlayersDataOnline[playerid][TypeBuy]);
            if ( RemoveTemp != -1 )
            {
                RemoveObjectHoldToPlayer(playerid, -1, RemoveTemp);
            }
            AddObjectHoldToPlayer(playerid, ObjectPlayersInt[i][0]);
            break;
	    }
	}
	if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_PELO )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de peluca quiere?", "{F0F0F0}Escoga su peluca más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_BOINA )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de boina quiere?", "{F0F0F0}Escoga su boina más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_GORRAS )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de gorra quiere?", "{F0F0F0}Escoga su gorra más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_RELOJES )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de reloj quiere?", "{F0F0F0}Escoga su reloj más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_GAFAS )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de gafas quiere?", "{F0F0F0}Escoga sus gafas favoritas y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_CASCO )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de casco quiere?", "{F0F0F0}Escoga su casco favorito y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
}
public SetPlayerSelectedTypeSkin(playerid, option)
{
	if ( option )
	{
		PlayersDataOnline[playerid][TypeSkinList] = false;
	    SetPlayerSelectedSkin(playerid);
	}
	else
	{
	    if ( PlayersData[playerid][Faccion] != CIVIL )
	    {
			ShowPlayerDialogEx(playerid, 28, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué ropa desea ponerse?", "{F0F0F0}Seleccione la ropa que desea seleccionar", "Civil", "Trabajo");
		}
		else
		{
			PlayersDataOnline[playerid][TypeSkinList] = true;
			SetPlayerSelectedSkin(playerid);
		}
	}

	GetSpawnInfo(playerid);
	PlayersDataOnline[playerid][Spawn]      = false;
	SetPlayerVirtualWorldEx(playerid, playerid);

	TogglePlayerControllableEx(playerid, 0);
	SetPlayerInteriorEx(playerid, 2);
	SetPlayerPos(playerid, 271.7302, 304.7271 ,999.1558);
	SetPlayerFacingAngle(playerid, 51.5407);
	SetPlayerCameraPos(playerid, 268.2326, 306.7652, 999.1509);
	SetPlayerCameraLookAt(playerid, 271.7302, 304.7271 ,999.1558);
}
public SetPlayerSelectedSkin(playerid)
{
	PlayersDataOnline[playerid][RowSkin] = 0;
	SetPlayerRowSkin(playerid, false);
}
public SetPlayerRowSkin(playerid, response)
{
    if ( response == 0 )
    {
	    if (!PlayersDataOnline[playerid][TypeSkinList] && PlayersData[playerid][Faccion] != CIVIL )
	    {
	        if ( RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][PlayersDataOnline[playerid][RowSkin]] != 0 )
	        {
			    PlayersData[playerid][Skin] = RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][PlayersDataOnline[playerid][RowSkin]];
	            SetPlayerSkinEx(playerid, RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][PlayersDataOnline[playerid][RowSkin]]);
	            PlayersDataOnline[playerid][RowSkin]++;
			}
			else
			{
			    PlayersData[playerid][Skin] = RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][0];
				SetPlayerSkinEx(playerid, RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][0]);
				PlayersDataOnline[playerid][RowSkin] = 1;
			}
		}
		else if ( PlayersDataOnline[playerid][TypeSkinList] )
		{
	        if ( SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]] != 999 )
	        {
	            while ( SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]] == 0 )
	            {
	                PlayersDataOnline[playerid][RowSkin]++;
				}
			    PlayersData[playerid][Skin] = SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]];
	            SetPlayerSkinEx(playerid, SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]]);
	            PlayersDataOnline[playerid][RowSkin]++;
			}
			else
			{
			    PlayersData[playerid][Skin] = SKIN_CIVILES[0];
				SetPlayerSkinEx(playerid, SKIN_CIVILES[0]);
				PlayersDataOnline[playerid][RowSkin] = 1;
			}
		}
		PlayersData[playerid][Skin] = GetPlayerSkin(playerid);
		ShowPlayerDialogEx(playerid, 5, DIALOG_STYLE_MSGBOX, "{00A5FF}Seleccione la ropa", "{F0F0F0}Si desea esta ropa pulse en \"Escoger\"", "Escoger", "Siguiente");
	}
	else
	{
	    UpdateSpawnPlayer(playerid);
		PlayersDataOnline[playerid][StateDeath] = true;
	    SpawnPlayerEx(playerid);
		//Streamer_UpdateEx(playerid, FaccionData[PlayersData[playerid][Faccion]][Spawn_X], FaccionData[PlayersData[playerid][Faccion]][Spawn_Y], FaccionData[PlayersData[playerid][Faccion]][Spawn_Z]);
		PlayersDataOnline[playerid][Spawn]      = true;
		TogglePlayerControllableEx(playerid, 1);
		SetSpawnInfoEx(playerid);
	}
}
public SetBuyBares(playerid, option, IsBizz)
{
	new MoneySet;
	switch (option)
	{
	    // AGUA
	    case 0:
		{
			MoneySet = 10;
			Acciones(playerid, 8, "bebe agua");
		}
	    // REFRESCO
	    case 1:
		{
			MoneySet = 20;
			Acciones(playerid, 8, "compra un refresco");
			SetPlayerSpecialAction(playerid, 23); // SPUNK
		}
	    // CERVEZA
	    case 2:
		{
			MoneySet = 30;
			Acciones(playerid, 8, "compra una cerveza");
			SetPlayerSpecialAction(playerid, 22); // CERVEZA
		}
	    // VODKA
	    case 3:
		{
			MoneySet = 40;
			Acciones(playerid, 8, "compra una botella de Vodka");
			SetPlayerSpecialAction(playerid, 22); // WINE
		}
	}
	SetPlayerHealthEx(playerid, MoneySet);
    GivePlayerMoneyEx(playerid, -MoneySet);
	if ( IsBizz )
	{
		SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), MoneySet);
	}
}
public IsBizzBar(playerid, bizzid)
{
	if (bizzid == 13 ||
		bizzid == 14 ||
		bizzid == 15 ||
		bizzid == 18 ||
		bizzid == 19 ||
		bizzid == 25 ||
		bizzid == 26
	  )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public LockAlarma(playerid)
{
	new MyNearCar = IsPlayerInNearVehicle(playerid);
	if ( MyNearCar )
	{
		if (IsVehicleMyVehicle(playerid, MyNearCar) ||
			IsVehicleMyFaccion(playerid, MyNearCar) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyNearCar) && IsMyCarAsignados(playerid, MyNearCar))
		{
		    new MsgAlarm[MAX_TEXT_CHAT];
		    if ( DataCars[MyNearCar][AlarmOn] )
		    {
		    	DataCars[MyNearCar][AlarmOn] = false;
				GameTextForPlayer(playerid, "~w~Alarma ~R~Desactivada", 1000, 3);
				IsVehicleOff(MyNearCar);
				Acciones(playerid, 8, "desactiva la alarma del vehículo");
	    	}
	    	else
	    	{
		    	DataCars[MyNearCar][AlarmOn] = true;
				GameTextForPlayer(playerid, "~w~Alarma ~G~Activada", 1000, 3);
				Acciones(playerid, 8, "activa la alarma del vehículo");
			}

			if ( MyNearCar <= MAX_CAR_DUENO )
			{
				format(MsgAlarm, sizeof(MsgAlarm), "%s la alarma de su vehículo.", NamesAlarma[DataCars[MyNearCar][AlarmOn]]);
			}
			else
			{
				format(MsgAlarm, sizeof(MsgAlarm), "%s la alarma a un vehículo de facción.", NamesAlarma[DataCars[MyNearCar][AlarmOn]]);
			}
		    SendInfoMessage(playerid, 2, "0", MsgAlarm);
			PlayPlayerStreamSound(playerid, 1147);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "1006", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
	    return false;
	}
}
public encode_lights(light1, light2, light3, light4)
{
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}
public TimerIntermitentes(vehicleid)
{
	if ( DataCars[vehicleid][IsIntermitente] )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
		if ( DataCars[vehicleid][ConteoIntermitente] )
		{
		    DataCars[vehicleid][ConteoIntermitente] = false;
			if ( DataCars[vehicleid][IsIntermitente] == 1)
			{
				UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(1,1,0,0), Tires);
			}
			else if ( DataCars[vehicleid][IsIntermitente] == 2)
			{
				UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,1,1), Tires);
			}
			else if ( DataCars[vehicleid][IsIntermitente] == 3)
			{
				DataCars[vehicleid][LightState] = false;
				IsVehicleOff(vehicleid);
				UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(1,1,1,1), Tires);
			}
		}
		else
		{
		    DataCars[vehicleid][ConteoIntermitente] = true;
			DataCars[vehicleid][LightState] = true;
			IsVehicleOff(vehicleid);
			UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,0,0), Tires);
		}
	    SetTimerEx("TimerIntermitentes", 500, false, "d", vehicleid);
	}
	else
	{
		DataCars[vehicleid][LightState] = true;
		IsVehicleOff(vehicleid);
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,0,0), Tires);
	}
}
public LockGuantera(playerid)
{
	new MyLockVehicle = IsPlayerInsideVehicle(playerid);
	if ( MyLockVehicle )
	{
		if (IsVehicleMyVehicle(playerid, MyLockVehicle) ||
			IsVehicleMyFaccion(playerid, MyLockVehicle) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyLockVehicle) && IsMyCarAsignados(playerid, MyLockVehicle))
		{
		    new MsgLock[MAX_TEXT_CHAT];
		    if ( DataCars[MyLockVehicle][GuanteraLock] )
		    {
		    	DataCars[MyLockVehicle][GuanteraLock] = false;
				GameTextForPlayer(playerid, "~w~Guantera ~R~Cerrada", 1000, 3);
	    	}
	    	else
	    	{
		    	DataCars[MyLockVehicle][GuanteraLock] = true;
				GameTextForPlayer(playerid, "~w~Guantera ~G~Abierta", 1000, 3);
			}

			if ( MyLockVehicle <= MAX_CAR_DUENO )
			{
				format(MsgLock, sizeof(MsgLock), "%s la guantera de su vehículo.", NamesLookReverse[DataCars[MyLockVehicle][GuanteraLock]]);
			}
			else
			{
				format(MsgLock, sizeof(MsgLock), "%s la guantera de un vehículo de facción.", NamesLookReverse[DataCars[MyLockVehicle][GuanteraLock]]);
			}
		    SendInfoMessage(playerid, 2, "0", MsgLock);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "747", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "748", "No se encuentra dentro del vehículo");
	    return false;
	}
}
public IsPlayerInsideVehicle(playerid)
{
	if ( PlayersDataOnline[playerid][InCarId] )
	{
	    return PlayersDataOnline[playerid][InCarId];
	}
	else if ( PlayersDataOnline[playerid][InVehicle] )
	{
	    return PlayersDataOnline[playerid][InVehicle];
	}
	return false;
}
public LockMaletero(playerid)
{
	new MyNearCar = IsPlayerInNearVehicle(playerid);
	if ( MyNearCar )
	{
		if (IsVehicleMyVehicle(playerid, MyNearCar) ||
			IsVehicleMyFaccion(playerid, MyNearCar) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyNearCar) && IsMyCarAsignados(playerid, MyNearCar))
		{
		    new MsgLock[MAX_TEXT_CHAT];
		    if ( DataCars[MyNearCar][MaleteroState] )
		    {
		    	DataCars[MyNearCar][MaleteroState] = false;
				GameTextForPlayer(playerid, "~w~Maletero ~R~Cerrado", 1000, 3);
	    	}
	    	else
	    	{
		    	DataCars[MyNearCar][MaleteroState] = true;
				GameTextForPlayer(playerid, "~w~Maletero ~G~Abierto", 1000, 3);
			}

			if ( MyNearCar <= MAX_CAR_DUENO )
			{
				format(MsgLock, sizeof(MsgLock), "%s el maletero de su vehículo.", NamesLookReverse[DataCars[MyNearCar][MaleteroState]]);
			}
			else
			{
				format(MsgLock, sizeof(MsgLock), "%s el maletero a un vehículo de facción.", NamesLookReverse[DataCars[MyNearCar][MaleteroState]]);
			}
		    SendInfoMessage(playerid, 2, "0", MsgLock);
			IsVehicleOff(MyNearCar);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "1007", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
	    return false;
	}
}
public ShowDialogBar(playerid, listview)
{
    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
    {
		if (PlayersData[playerid][Dinero] >= 20 )
		{
		    SetBuyBares(playerid, listview, true);
		}
		else
		{
   		    SendInfoMessage(playerid, 0, "1000", "No tienes suficiente dinero para comprar está bebida");
		}
	}
	else
	{
	    SendInfoMessage(playerid, 0, "1001", "Este bar no tiene materiales");
	}
	ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"{00A5FF}Bar", "{E6E6E6}Agua          {00F50A}$10\r\n{E6E6E6}Refresco     {00F50A}$20\r\n{E6E6E6}Cerveza      {00F50A}$30\r\n{E6E6E6}Vodka        {00F50A}$40", "Comprar", "Salir");
}
public ShowDialogBarra(playerid, listview)
{
	if (PlayersData[playerid][Dinero] >= 20 )
	{
	    SetBuyBares(playerid, listview, false);
	}
	else
	{
	    SendInfoMessage(playerid, 0, "1289", "No tienes suficiente dinero para comprar está bebida");
	}
	ShowPlayerDialogEx(playerid,76,DIALOG_STYLE_LIST,"{00A5FF}Barra", "{E6E6E6}Agua          {00F50A}$10\r\n{E6E6E6}Refresco     {00F50A}$20\r\n{E6E6E6}Cerveza      {00F50A}$30\r\n{E6E6E6}Vodka        {00F50A}$40", "Comprar", "Salir");
}
public PayCall(playerid)
{
	if ( PlayersDataOnline[playerid][IsDescolgado] && CallCNN == playerid ||
		 IsPlayerConnected(playerid) && PlayersDataOnline[playerid][IsDescolgado] && PlayersDataOnline[playerid][InCall] != -1 && PlayersDataOnline[playerid][InCall] != 888 && PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado] )
	{
	    if ( PlayersDataOnline[playerid][ICall] )
	    {
			new MenosSaldo = (gettime() - PlayersDataOnline[playerid][TimeCall]) / 5;
			/* Debug System */
			if ( MenosSaldo >= 1000 )
			{
				new MsgAvisoWeapon[256];
			    if ( PlayersDataOnline[playerid][InCall] != 888 )
			    {
				    format(MsgAvisoWeapon, sizeof(MsgAvisoWeapon), "%s Debug-System - Type: Móvil Saldo Múltiple. Usuario bugueado: %s[%i]. Usuario involucrado: %s[%i]. Saldo: %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnline], PlayersDataOnline[playerid][InCall], MenosSaldo);
			    }
			    else
			    {
				    format(MsgAvisoWeapon, sizeof(MsgAvisoWeapon), "%s Debug-System Type: Móvil Saldo Sólo. Usuario bugueado: %s[%i]. Usuario involucrado: %s[%i]. Saldo: %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnline], PlayersDataOnline[playerid][InCall], MenosSaldo);
			    }
				MsgCheatsReportsToAdmins(MsgAvisoWeapon);
			    printf("%s", MsgAvisoWeapon);
			}
			else
			{
			/* Debug System */

				if ( MenosSaldo == 0 )
				{
			    	PlayersData[playerid][Saldo]--;
			    	MenosSaldo = 1;
			   	}
			   	else
			   	{
					PlayersData[playerid][Saldo] = PlayersData[playerid][Saldo] - MenosSaldo;
				}
			}
		    PlayersDataOnline[playerid][ICall] = false;
			if (IsPlayerConnected(playerid))
			{
				SetGameTextMoneyMin(playerid, MenosSaldo);
			}
			FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + MenosSaldo;
		}
	}
}
public SetGameTextMoneyMin(playerid, money)
{
	new MsgExToPlayer[MAX_TEXT_CHAT];
	format(MsgExToPlayer, sizeof(MsgExToPlayer), "~W~-~R~%i", money);
	GameTextForPlayer(playerid, MsgExToPlayer, 3000, 1);
}
public SaveDatosPlayerDisconnect(playerid)
{
	if ( IsPlayerConnected(playerid) )
	{
	    if ( PlayersDataOnline[playerid][State] == 3 )
	    {
			RemovePlayerDescription(playerid, false, false);
		    new MyTime = gettime();
			if ( PlayersData[playerid][Jail] != 0 )
			{
				PlayersData[playerid][Jail] = PlayersData[playerid][Jail] - MyTime;
			}
			PlayersData[playerid][IsPaga] = (MyTime - PlayersDataOnline[playerid][IsPagaO]) + PlayersData[playerid][IsPaga];
			if ( PlayersData[playerid][IsPaga] < 0 )
			{
				PlayersData[playerid][IsPaga] = 0;
			}
			if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
			{
				PayTaxi(playerid, false);
			}
		    if ( PlayersData[playerid][Phone] != 0 && PlayersDataOnline[playerid][InCall] != -1 )
		    {
				PayCall(playerid);
				if ( PlayersDataOnline[playerid][InCall] != 888 )
				{
					PayCall(PlayersDataOnline[playerid][InCall]);
			        PlayersDataOnline[PlayersDataOnline[playerid][InCall]][InCall] = -1;
					Acciones(PlayersDataOnline[playerid][InCall], 8, "guarda su móvil");
					SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_COLGAR_DESCOLGAR, " Han colgado!");
			        PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado] = false;
					SetPlayerColgar(PlayersDataOnline[playerid][InCall]);
				}
				else
				{
					if ( CallCNN == playerid )
					{
						SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica finalizada.");
					    CallCNN = -1;
					}
				}
		        PlayersDataOnline[playerid][IsDescolgado] = false;
		        PlayersDataOnline[playerid][InCall] = -1;
			}
			if ( PlayersData[playerid][InTutorial] )
			{
				KillTimer(PlayersDataOnline[playerid][TimerTutorialId]);
				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
			}
		    if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
		    {
		        new PistasDialogText[MAX_TEXT_CHAT];
			    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Se desconectó)).", PlayersDataOnline[playerid][NameOnlineFix]);
				SendMessageToRaceChat(playerid, PistasDialogText, true);
				RemovePlayerToRace(playerid, false, true, STATE_RACE_EXIT_DISCONNECT);
			}
			DataUserSave(playerid);
			SaveAgenda(playerid);
			SavePlayerSMS(playerid);
			SaveAccountBanking(playerid);
			ResetPlayerWeapons(playerid);
			printf("%s[%i] se desconectó.", PlayersDataOnline[playerid][NameOnline], playerid);
			PlayersDataOnline[playerid][MarcaZZ] = true;
		}
		else
		{
			PlayersDataOnline[playerid][MarcaZZ] = true;
			KillTimer(PlayersDataOnline[playerid][TimerLoginId]);
		}
	}
	else
	{
	    printf("Error! Jugador no conectado! %s[%i]", PlayersDataOnline[playerid][NameOnline], playerid);
	}
}
public CreateDynamicObjectExULP(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid, interior, playerid, Float:distance)
{
	return CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interior, -1, distance);
}
public IsPlayerNotVehicleWeapondAction(playerid, playeridtwo)
{
	if ( !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(playeridtwo) )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1032", "No puede estár ninguno de los 2 en un vehículo para dar armas, municiones o quitar una misma");
	    return false;
	}
}
public SetPlayerOrginalTime(playerid)
{
	new HourA, MinutesA;
	gettime(HourA, MinutesA);
	SetPlayerTime(playerid, GetOriginalHours(HourA), GetOriginalMinute(MinutesA));
}
public GetOriginalHours(hour)
{
	if ( hour == 24 )
	{
	    return 0;
	}
	else if ( !hour )
	{
	    return 1;
	}
	else
	{
	    return hour;
	}
}
public GetOriginalMinute(minute)
{
	if ( minute == 60 )
	{
	    return 0;
	}
	else if ( !minute )
	{
	    return 1;
	}
	else
	{
	    return minute;
	}
}
public ShowHomeBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
		if ( PlayersData[playerid][IsPlayerInBank] )
		{
			ShowPlayerDialogEx(playerid,31,DIALOG_STYLE_LIST,"{00A5FF}Banco - Inicio", "{006CAA}1- {E6E6E6}Consultar\r\n{006CAA}2- {E6E6E6}Retirar\r\n{006CAA}3- {E6E6E6}Depositar\r\n{006CAA}4- {E6E6E6}Cobrar un Cheque\r\n{006CAA}5- {E6E6E6}Ver mis Cheques\r\n{006CAA}6- {E6E6E6}Hacer una transferencia\r\n{006CAA}{006CAA}7- {E6E6E6}Controlar mis Cuentas\r\n{006CAA}8- {E6E6E6}Configuración", "Ir", "Salir");
		}
		else
		{
			ShowPlayerDialogEx(playerid,31,DIALOG_STYLE_LIST,"{00A5FF}Banco - Inicio", "{006CAA}1 {E6E6E6}Consultar\r\n{006CAA}2 {E6E6E6}Retirar\r\n{006CAA}3 {E6E6E6}Depositar", "Ir", "Salir");
		}
	}
}
public ShowConsultarBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
        new MsgConsultarBanco[MAX_TEXT_CHAT];
        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "{E6E6E6}Tiene usted {00F50A}$%i {E6E6E6}en su cuenta bancaria", PlayersData[playerid][Banco]);
		ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Consultar",MsgConsultarBanco, "Aceptar", "Volver");
	}
}
public ShowRetirarBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
		ShowPlayerDialogEx(playerid,33,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Retirar","{E6E6E6}Ingrese la cantidad que desea retirar", "Retirar", "Volver");
	}
}
public ShowDepositarBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
		ShowPlayerDialogEx(playerid,34,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Depositar","{E6E6E6}Ingrese la cantidad que desea depositar", "Depositar", "Volver");
	}
}
public ShowRetirarBancoFunction(playerid, option, amount)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
        if (PlayersData[playerid][Banco] >= amount )
        {
            if ( !PlayersData[playerid][IsPlayerInBank] && amount >= 50 && amount <= 250 ||
				 PlayersData[playerid][IsPlayerInBank] )
            {
                if ( !PlayersData[playerid][IsPlayerInBank] && PlayersData[playerid][TimeRequestBank] <= gettime() ||
					 PlayersData[playerid][IsPlayerInBank])
                {
				    if (IsNotZero(playerid, amount))
				    {
			            PlayersData[playerid][Banco] = PlayersData[playerid][Banco] - amount;
			            GivePlayerMoneyEx(playerid, amount);

				        new MsgConsultarBanco[MAX_TEXT_CHAT];
				        if ( option )
				        {
					        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "Ha retirado $%i del banco, su nuevo balance es: $%i", amount, PlayersData[playerid][Banco]);
			    			SendInfoMessage(playerid, 1, " ", "|___________________  Banco ___________________|");
			    			SendInfoMessage(playerid, 1, MsgConsultarBanco, "Banco: ");
			    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
		    			}
		    			else
		    			{
					        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "{E6E6E6}Ha retirado  {F50000}$%i  {E6E6E6}del banco.\n\n{E6E6E6}Su nuevo balance es: {00F50A}$%i", amount, PlayersData[playerid][Banco]);
							ShowPlayerDialogEx(playerid,35,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Retiro Realizado",MsgConsultarBanco, "Aceptar", "Volver");
						}
						if ( !PlayersData[playerid][IsPlayerInBank] )
						{
                            PlayersData[playerid][TimeRequestBank] = gettime() + 900;
						}
						return true;
					}
    			}
    			else
    			{
    			    new MsgErrorDinamicBank[MAX_TEXT_CHAT];
    			    format(MsgErrorDinamicBank, sizeof(MsgErrorDinamicBank), "Debe esperar %i minutos para volver a retirar dinero de un cajero", (PlayersData[playerid][TimeRequestBank] - gettime()) / 60 );
					SendInfoMessage(playerid, 0, "717", MsgErrorDinamicBank);
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "716", "Solo puedes retirar $250 máximo y $50 mínimo de un cajero cada 15 minutos, vaya al banco si desea retirar más dinero");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "303", "No tienes esa cantidad de dinero para retirar del banco");
		}
        if ( !option )
        {
			ShowPlayerDialogEx(playerid,33,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Retirar","{E6E6E6}Ingrese la cantidad menor a retirar", "Retirar", "Volver");
        }
	}
	return false;
}
public ShowDepositarBancoFunction(playerid, option, amount)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
        if (PlayersData[playerid][Dinero] >= amount )
        {
		    if (IsNotZero(playerid, amount))
		    {
	            PlayersData[playerid][Banco] = PlayersData[playerid][Banco] + amount;
	            GivePlayerMoneyEx(playerid, -amount);

		        new MsgDepositarBanco[MAX_TEXT_CHAT];
		        if ( option )
		        {
			        format(MsgDepositarBanco, sizeof(MsgDepositarBanco), "Ha depositado $%i en el banco, su nuevo balance es: $%i", amount, PlayersData[playerid][Banco]);
	    			SendInfoMessage(playerid, 1, " ", "|___________________  Banco ___________________|");
	    			SendInfoMessage(playerid, 1, MsgDepositarBanco, "Banco: ");
	    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
    			}
    			else
    			{
			        format(MsgDepositarBanco, sizeof(MsgDepositarBanco), "{E6E6E6}Ha depositado  {00F50A}$%i  {E6E6E6}en el banco.\n\n{E6E6E6}Su nuevo balance es: {00F50A}$%i", amount, PlayersData[playerid][Banco]);
					ShowPlayerDialogEx(playerid,36,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Depósito Realizado",MsgDepositarBanco, "Aceptar", "Volver");
				}
				return true;
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "304", "No tienes esa cantidad de dinero para depositar en el banco");
		}
        if ( !option )
        {
			ShowPlayerDialogEx(playerid,34,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Reintentar Deposito","{E6E6E6}Ingrese una cantidad menor a depositar", "Depositar", "Volver");
        }
	}
	return false;
}
public SaveGaragesExLock()
{
	new DirBD[50];
	new DataSave[20];
	new File:SaveTeles;
	for(new i=0;i<=MAX_GARAGES_EX;i++)
	{
		format(DirBD, sizeof(DirBD), "%s%i.ulp", DIR_GARAGES_EX, i);
		format(DataSave, sizeof(DataSave), "%i", GaragesEx[i][Lock]);
		SaveTeles = fopen(DirBD, io_write);
		fwrite(SaveTeles, DataSave);
		fclose(SaveTeles);
	}
}
public LoadGaragesExLock()
{
	new DirBD[50];
    new DataRead[20];
	new File:ReadDataT;
	for(new i=0;i<=MAX_GARAGES_EX;i++)
	{
		format(DirBD, sizeof(DirBD), "%s%i.ulp", DIR_GARAGES_EX, i);
		if ( fexist(DirBD) )
		{
	        ReadDataT = fopen(DirBD, io_read);
	      	fread(ReadDataT, DataRead);
			fclose(ReadDataT);
			GaragesEx[i][Lock] = strval(DataRead);
		}
	}
}
public SetPlayerHealthEx(playerid, Float:Health)
{
	if ( PlayersDataOnline[playerid][VidaOn] + Health >= 100.0 )
	{
	    PlayersDataOnline[playerid][VidaOn] = 100.0;
	}
	else
	{
		PlayersDataOnline[playerid][VidaOn] = PlayersDataOnline[playerid][VidaOn] + Health;
	}
	PlayersDataOnline[playerid][ChangeVC] = 10;
}
public SetPlayerArmourEx(playerid, Float:Armour)
{
	if ( PlayersDataOnline[playerid][ChalecoOn] + Armour >= 85.0 )
	{
	    PlayersDataOnline[playerid][ChalecoOn] = 85.0;
	}
	else
	{
		PlayersDataOnline[playerid][ChalecoOn] = PlayersDataOnline[playerid][ChalecoOn] + Armour;
	}
	PlayersDataOnline[playerid][ChangeVC] = 10;
}
public UpdateArmourAndArmour(playerid, Float:Health, Float:Armour)
{
	if ( PlayersDataOnline[playerid][VidaOn] >= Health && PlayersDataOnline[playerid][ChalecoOn] >= Armour )
	{
	    PlayersDataOnline[playerid][VidaOn] = Health;
	    PlayersDataOnline[playerid][ChalecoOn] = Armour;
	    return true;
	}
	else
	{
        SetPlayerHealth(playerid, PlayersDataOnline[playerid][VidaOn]);
        SetPlayerArmour(playerid, PlayersDataOnline[playerid][ChalecoOn]);
	    return false;
	}
}
public CheckWeapondCheat(playerid)
{
	if ( PlayersDataOnline[playerid][StateWeaponPass] <= gettime() && !PlayersDataOnline[playerid][ModeDM] )
	{
		new WeapoindID, AmmoQl;
		for (new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, WeapoindID, AmmoQl);
			if ( PlayersData[playerid][WeaponS][i] == WeapoindID && PlayersData[playerid][AmmoS][i] >= AmmoQl || AmmoQl == 0)
			{
			 	//   printf("%i - %i || %i - %i", PlayersData[playerid][WeaponS][i], PlayersData[playerid][AmmoS][i], WeapoindID, AmmoQl);
			    PlayersData[playerid][WeaponS][i] = WeapoindID;
	            PlayersData[playerid][AmmoS][i] = AmmoQl;
			}
			else
			{
				GivePlayerWeaponReturn(playerid);
				PlayersDataOnline[playerid][CountCheat]++;
				if ( PlayersDataOnline[playerid][CountCheat] % 100 == 0 )
				{
					new MsgAvisoWeapon[MAX_TEXT_CHAT];
				    format(MsgAvisoWeapon, sizeof(MsgAvisoWeapon), "%s AntiCheat-Weapon - %s[%i] posible cheat de Weapon.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
					MsgCheatsReportsToAdmins(MsgAvisoWeapon);
				    printf("%s", MsgAvisoWeapon);
			    }
				return false;
			}
		}
	}
	return true;
}
public GivePlayerWeaponReturn(playerid)
{
	ResetPlayerWeapons(playerid);
	for (new i = 0; i < 13; i++)
	{
	    if ( IsValidWeapon(playerid, PlayersData[playerid][WeaponS][i]) && PlayersData[playerid][WeaponS][i] != 0 && PlayersData[playerid][AmmoS][i] > 0 )
	    {
			GivePlayerWeapon(playerid, PlayersData[playerid][WeaponS][i], PlayersData[playerid][AmmoS][i]);
		}
		else
		{
			PlayersData[playerid][WeaponS][i] = 0;
			PlayersData[playerid][AmmoS][i] = 0;
		}
	}
}
public GivePlayerWeaponEx(playerid, weaponid, ammo)
{
	if ( IsValidWeapon(playerid, weaponid) )
	{
		PlayersDataOnline[playerid][StateWeaponPass] 	= gettime() + 5;
		PlayersData[playerid][WeaponS][SlotIDWeapon[weaponid]] = weaponid;
	    PlayersData[playerid][AmmoS][SlotIDWeapon[weaponid]] = PlayersData[playerid][AmmoS][SlotIDWeapon[weaponid]] + ammo;
		GivePlayerWeapon(playerid, weaponid, ammo);
	}
}
public RemovePlayerWeapond(playerid, weaponsid)
{
	ResetPlayerWeapons(playerid);
	PlayersData[playerid][WeaponS][SlotIDWeapon[weaponsid]] = 0;
	PlayersData[playerid][AmmoS][SlotIDWeapon[weaponsid]] = 0;
	for (new i = 0; i < 13; i++)
	{
	    if ( PlayersData[playerid][WeaponS][i] != 0 && PlayersData[playerid][AmmoS][i] > 0)
	    {
			GivePlayerWeapon(playerid, PlayersData[playerid][WeaponS][i], PlayersData[playerid][AmmoS][i]);
		}
		else
		{
			PlayersData[playerid][WeaponS][i] = 0;
			PlayersData[playerid][AmmoS][i] = 0;
		}
	}
}
public ResetPlayerWeaponsEx(playerid)
{
	for (new i = 0; i < 13; i++)
	{
		PlayersData[playerid][WeaponS][i]	= 0;
		PlayersData[playerid][AmmoS][i]		= 0;
	}
	ResetPlayerWeapons(playerid);
}
public FillVehicleGas(vehicleid)
{
	if ( DataCars[vehicleid][Gas] < DataCars[vehicleid][LlenandoGas] )
	{
		DataCars[vehicleid][Gas]++;
		SetTimerEx("FillVehicleGas", 1000, false, "d", vehicleid);
		UpdateGasAndOil(vehicleid);
	}
	else
	{
 	    DataCars[vehicleid][LlenandoGas] = false;
	}
}
public IsValidWeapon(playerid, weaponid)
{
	if ( weaponid >= 0 &&
	 	 weaponid <= 46 &&
	 	 weaponid != 19 &&
	 	 weaponid != 20 &&
	 	 weaponid != 21 )
	{
	    return true;
    }
    else
    {
		new MsgAvisoBug[MAX_TEXT_CHAT];
	    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Bug´s Owned - El jugador %s[%i] se le bugueo un arma ID: %i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, weaponid);
		MsgCheatsReportsToAdmins(MsgAvisoBug);
        return false;
	}
}
public LoadCameras()
{
    CamerasM[0]	 = CreateMenu("Camaras de seguridad", 2, 400.0, 200.0, 150.0, 20.0);
	SetMenuColumnHeader(CamerasM[0], 0, "Lugar"); 	SetMenuColumnHeader(CamerasM[0], 1, "Ciudad");

////////////////////////////
	AddMenuItem(CamerasM[0], 0, "Ayuntamiento");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 1500.253417;
	Cameras[MAX_CAMERAS][PosYLook] = -1749.436035;
	Cameras[MAX_CAMERAS][PosZLook] = 28.546878;
	Cameras[MAX_CAMERAS][PosXAt]   = 1481.0820;
	Cameras[MAX_CAMERAS][PosYAt]   = -1742.2435;
	Cameras[MAX_CAMERAS][PosZAt]   = 14.5965;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Frente LSPD");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 1553.016357;
	Cameras[MAX_CAMERAS][PosYLook] = -1671.663452;
	Cameras[MAX_CAMERAS][PosZLook] = 24.560710;
	Cameras[MAX_CAMERAS][PosXAt]   = 1545.5803;
	Cameras[MAX_CAMERAS][PosYAt]   = -1675.6162;
	Cameras[MAX_CAMERAS][PosZAt]   = 13.5606;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Frente SFPD");	  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -1614.280639;
	Cameras[MAX_CAMERAS][PosYLook] = 715.070068;
	Cameras[MAX_CAMERAS][PosZLook] = 18.846490;
	Cameras[MAX_CAMERAS][PosXAt]   = -1589.2537;
	Cameras[MAX_CAMERAS][PosYAt]   = 720.2092;
	Cameras[MAX_CAMERAS][PosZAt]   = 9.0221;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje LS 1");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 50.849651;
	Cameras[MAX_CAMERAS][PosYLook] = -1520.297729;
	Cameras[MAX_CAMERAS][PosZLook] = 9.930357;
	Cameras[MAX_CAMERAS][PosXAt]   = 61.7497;
	Cameras[MAX_CAMERAS][PosYAt]   = -1525.7979;
	Cameras[MAX_CAMERAS][PosZAt]   = 4.9304;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje LS 2");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 54.939651;
	Cameras[MAX_CAMERAS][PosYLook] = -1544.197509;
	Cameras[MAX_CAMERAS][PosZLook] = 10.030358;
	Cameras[MAX_CAMERAS][PosXAt]   = 45.2062;
	Cameras[MAX_CAMERAS][PosYAt]   = -1538.8624;
	Cameras[MAX_CAMERAS][PosZAt]   = 5.1866;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje SF 1 (1)");  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -1767.118164;
	Cameras[MAX_CAMERAS][PosYLook] = -654.620605;
	Cameras[MAX_CAMERAS][PosZLook] = 23.252027;
	Cameras[MAX_CAMERAS][PosXAt]   = -1765.0730;
	Cameras[MAX_CAMERAS][PosYAt]   = -652.3367;
	Cameras[MAX_CAMERAS][PosZAt]   = 19.8950;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje SF 1 (2)");	  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -1753.985229;
	Cameras[MAX_CAMERAS][PosYLook] = -662.802978;
	Cameras[MAX_CAMERAS][PosZLook] = 24.397844;
	Cameras[MAX_CAMERAS][PosXAt]   = -1756.4503;
	Cameras[MAX_CAMERAS][PosYAt]   = -665.7925;
	Cameras[MAX_CAMERAS][PosZAt]   = 21.6430;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje SF 2");	  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -997.220397;
	Cameras[MAX_CAMERAS][PosYLook] = -419.065368;
	Cameras[MAX_CAMERAS][PosZLook] = 39.445178;
	Cameras[MAX_CAMERAS][PosXAt]   = -987.2131;
	Cameras[MAX_CAMERAS][PosYAt]   = -439.5078;
	Cameras[MAX_CAMERAS][PosZAt]   = 35.8483;

	// END CAMERAS
}
/*enum CamerasEnum
{
	Page,
	PosXLook,
	PosYLook,
	PosZLook,
	PosXAt,
	PosYAt,
	PosZAt
}
MAX_CAMERAS
*/
public IsValidVehicle(playerid, vehiclemodel)
{
	if ( coches_Todos_Type[vehiclemodel - 400] != BICI &&
		 coches_Todos_Type[vehiclemodel - 400] != MOTO &&
		 coches_Todos_Type[vehiclemodel - 400] != CAMION &&
		 coches_Todos_Type[vehiclemodel - 400] != VUELO )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsValidVehiclePaintJob(vehiclemodel)
{
	if ( vehiclemodel == 560 ||
		 vehiclemodel == 561 ||
		 vehiclemodel == 567 ||
		 vehiclemodel == 562 ||
		 vehiclemodel == 565 ||
		 vehiclemodel == 569 ||
		 vehiclemodel == 568 ||
		 vehiclemodel == 434 ||
		 vehiclemodel == 535 ||
		 vehiclemodel == 536 ||
 		 vehiclemodel == 558 ||
 		 vehiclemodel == 545 ||
 		 vehiclemodel == 559
	   )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IntermitenteIzquierdo(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] != 1 )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(1,0,0,0), Tires);
		if ( !DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] )
		{
		    SetTimerEx("TimerIntermitentes", 500, false, "d", GetPlayerVehicleID(playerid));
	    }
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 1;
	    DataCars[GetPlayerVehicleID(playerid)][ConteoIntermitente] = false;
	}
}
public IntermitenteDerecho(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] != 2 )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,0,1), Tires);
		if ( !DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] )
		{
		    SetTimerEx("TimerIntermitentes", 500, false, "d", GetPlayerVehicleID(playerid));
	    }
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 2;
	    DataCars[GetPlayerVehicleID(playerid)][ConteoIntermitente] = false;
	}
}
public IntermitenteEstacionamiento(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] != 3 )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(1,1,1,1), Tires);
		if ( !DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] )
		{
		    SetTimerEx("TimerIntermitentes", 500, false, "d", GetPlayerVehicleID(playerid));
	    }
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 3;
	    DataCars[GetPlayerVehicleID(playerid)][ConteoIntermitente] = false;
	}
}
public IntermitenteEncendido(playerid)
{
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] == 0 )
	{
	    if ( DataCars[GetPlayerVehicleID(playerid)][LightState] )
	    {
	        DataCars[GetPlayerVehicleID(playerid)][LightState] = false;
		}
		else
		{
			DataCars[GetPlayerVehicleID(playerid)][LightState] = true;
		}
	    IsVehicleOff(GetPlayerVehicleID(playerid));
	}
	else if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][StateEncendido] && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente])
	{
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 0;
	}
}
public ShowDialogAccount(playerid)
{
	new ListDialog[350];
	format(ListDialog, sizeof(ListDialog),
	"{00F50A}1- {E6E6E6}Cambiar Contraseña\r\n{00F50A}2- {E6E6E6}Sexo\r\n{00F50A}3- {E6E6E6}Edad\r\n{00F50A}4- {E6E6E6}Email({F5FF00}%s{E6E6E6})\r\n{00F50A}5- {E6E6E6}Opciones",
		PlayersData[playerid][Email]
	);
	ShowPlayerDialogEx(playerid,18,DIALOG_STYLE_LIST,"{00A5FF}Configuración de mi Cuenta", ListDialog, "Seleccionar", "Salir");
}
public ShowDialogAccountOptions(playerid)
{
	new ListDialog[500];

	format(ListDialog, sizeof(ListDialog),
		"{00F50A}1- {E6E6E6}Intermitentes: %s{00F50A}",
		NameConfigutionUser[PlayersData[playerid][IntermitentState]]
	);

	ShowPlayerDialogEx(playerid,49,DIALOG_STYLE_LIST,"{00A5FF}Opciones de mi Cuenta", ListDialog, "Seleccionar", "Volver");
}
public IsNotPhoneInBlackList(playerid, number)
{
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && AgendaData[playerid][i][NumberC] == number && AgendaData[playerid][i][IsBlackList] )
	    {
	        return false;
	    }
    }
    return true;
}
public SendAlertCallRequestSAMD(type, const text[], faccionid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid )
		{
		    if ( !type )
		    {
				if ( PlayersData[i][Rango] == 5 ||
			 	PlayersData[i][Rango] <= 2 )
			 	{
					SendInfoMessage(i, 3, "0", text);
				}
		    }
		    else
		    {
		        if ( PlayersData[i][Rango] != 5 )
		        {
					SendInfoMessage(i, 3, "0", text);
				}
			}
		}
	}
}
public SendAlertCallRequest(faccionid, const text[])
{
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid)
		{
			SendInfoMessage(i, 3, "0", text);
		}
	}
}
public RemoveCall(callid, departament)
{
	CallPolice[callid][departament][Number] 			= 0;
	format(CallPolice[callid][departament][NameC], MAX_PLAYER_NAME, "");
	format(CallPolice[callid][departament][ReasonC], MAX_TEXT_CHAT, "");
	CallPolice[callid][departament][TimeCall][0] = false;
	CallPolice[callid][departament][TimeCall][1] = false;
	CallPolice[callid][departament][TimeCall][2] = false;
}
public AddCall(number, const name[], const reason[], departament)
{
	new callid;
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( !CallPolice[i][departament][Number] )
		{
		    callid = i;
		    break;
		}
	}
	CallPolice[callid][departament][Number] 			= number;
	format(CallPolice[callid][departament][NameC], MAX_PLAYER_NAME, "%s", name);
	format(CallPolice[callid][departament][ReasonC], MAX_TEXT_CHAT, "%s", reason);
	gettime(CallPolice[callid][departament][TimeCall][0], CallPolice[callid][departament][TimeCall][1], CallPolice[callid][departament][TimeCall][2]);
}
public ShowConnectedPolice(playerid)
{
	if ( !PlayersDataOnline[playerid][NumberCallPublic] )
	{
		ShowPlayerDialogEx(playerid,53,DIALOG_STYLE_MSGBOX,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Bienvenido a el departamento de denuncias de la {F5FF00}LSPD", "Comenzar", "Colgar");
	}
	else
	{
		ShowPlayerDialogEx(playerid,53,DIALOG_STYLE_MSGBOX,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Bienvenido a el departamento de denuncias de la {F5FF00}SFPD", "Comenzar", "Colgar");
	}
}
public ShowNamePolice(playerid)
{
	if ( !PlayersDataOnline[playerid][NumberCallPublic] )
	{
		ShowPlayerDialogEx(playerid,54,DIALOG_STYLE_INPUT,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Diganos su nombre para proceder.\n\n Sí no desea darnos su nombre diga que \"No\"", "Seguir", "No");
	}
	else
	{
		ShowPlayerDialogEx(playerid,54,DIALOG_STYLE_INPUT,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Diganos su nombre para proceder.\n\n Sí no desea darnos su nombre diga que \"No\"", "Seguir", "No");
	}
}
public ShowReasonPolice(playerid)
{
	if ( !PlayersDataOnline[playerid][NumberCallPublic])
	{
		ShowPlayerDialogEx(playerid,55,DIALOG_STYLE_INPUT,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Ingrese la razón de su denuncia\n\n{F0F0F0}Por favor, sea breve y claro en su reporte policial.", "Reportar", "Colgar");
	}
	else
	{
		ShowPlayerDialogEx(playerid,55,DIALOG_STYLE_INPUT,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Ingrese la razón de su denuncia\n\n{F0F0F0}Por favor, sea breve y claro en su reporte policial.", "Reportar", "Colgar");
	}
}
public ShowDetailsCall(playerid, callid)
{
	new CallDialog[300];
	new NowTime[3]; gettime(NowTime[0], NowTime[1], NowTime[2]);
	format(CallDialog ,sizeof(CallDialog), "   {F50000}REPORTE POLICIAL\n   {E6E6E6}Hora actual: {00A5FF}%i:%i:%i\n\n {00F50A}Nombre: {F5FF00}%s\n\n {00F50A}Número: {F5FF00}%i\n\n {00F50A}Hora: {F5FF00}%i:%i:%i\n\n {00F50A}Razón: {F5FF00}%s",
	NowTime[0],
	NowTime[1],
	NowTime[2],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][NameC],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][Number],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][TimeCall][0],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][TimeCall][1],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][TimeCall][2],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][ReasonC]);

	ShowPlayerDialogEx(playerid,58,DIALOG_STYLE_MSGBOX,"{00A5FF}Detalles - Reporte Policial", CallDialog, "Atender", "Volver");
}
public ShowCallPolice(playerid)
{
	new CallDialog[700];
	new TempConvert[35];
	new ReasonShort[10];
	new ConteoCall = -1;
	for (new i = 0; i < MAX_CALL_POLICE_COUNT; i++)
	{
	    if ( CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
	    {
		    format(ReasonShort, sizeof(ReasonShort), "%s", CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][ReasonC]);
			if ( ConteoCall != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - [%s...]",
				CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
		    	ReasonShort
				);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - [%s...]",
				CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
		    	ReasonShort
				);
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCall] = i;
        }
	}
	if (ConteoCall != -1)
	{
		if ( !PlayersDataOnline[playerid][NumberCallPublic] )
		{
			ShowPlayerDialogEx(playerid,57,DIALOG_STYLE_LIST,"{00A5FF}LSPD - Reportes policiales", CallDialog, "Ver", "Salir");
		}
		else
		{
			ShowPlayerDialogEx(playerid,57,DIALOG_STYLE_LIST,"{00A5FF}SFPD - Reportes policiales", CallDialog, "Ver", "Salir");
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}No se encontrarón reportes policiales! Intente más tarde.", "Aceptar", "");
	}
}
public GetNumberID(number)
{
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == number && PlayersDataOnline[i][PhoneOnline] )
		{
		    return i;
		}
	}
	return -1;
}
public AddCallPublics(playerid, number, departament)
{
	new callid;
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( !CallPublics[i][departament][Number] )
		{
		    CallPublics[i][departament][City] = GetMyNearCity(playerid);
		    callid = i;
		    break;
		}
	}
	CallPublics[callid][departament][Number] 			= number;
}
public RemoveCallPublics(callid, departament)
{
	CallPublics[callid][departament][Number] 			= 0;
}
public ShowCallPublics(playerid)
{
	new CallDialog[750];
	new TempConvert[45];
	new ConteoCall = -1;
	for (new i = 0; i < MAX_CALL_POLICE_COUNT; i++)
	{
	    if ( CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
	    {
			if ( ConteoCall != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Número: {00F50A}%i (%s)",
				CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
				Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Número: {00F50A}%i (%s)",
				CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
			    Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCall] = i;
        }
	}
	if (ConteoCall != -1)
	{
	    switch ( PlayersDataOnline[playerid][NumberCallPublic] )
	    {
			case 0:
			{
				ShowPlayerDialogEx(playerid,59,DIALOG_STYLE_LIST,"{00A5FF}Taxístas - Centro de Llamadas", CallDialog, "Atender", "Salir");
			}
			case 1:
			{
				ShowPlayerDialogEx(playerid,59,DIALOG_STYLE_LIST,"{00A5FF}Taller San Fierro - Centro de Llamadas", CallDialog, "Atender", "Salir");
			}
			case 2:
			{
				ShowPlayerDialogEx(playerid,59,DIALOG_STYLE_LIST,"{00A5FF}Taller Los Santos - Centro de Llamadas", CallDialog, "Atender", "Salir");
			}
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - Información", "{F0F0F0}No se encontrarón llamadas! Intente más tarde.", "Aceptar", "");
	}
}

public IsFoundCallSAMD(number, type, samdid)
{
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( CallSAMD[samdid][i][Number] && CallSAMD[samdid][i][Number] == number && type == CallSAMD[samdid][i][Type])
		{
			return i;
		}
	}
	return -1;
}
public IsFoundCall(number, departament)
{
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( CallPublics[i][departament][Number] && CallPublics[i][departament][Number] == number)
		{
			return i;
		}
	}
	return -1;
}
public UpdatePlayerVehicleStatus(vehicleid , Float:Healt)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid )
		{
			SetPlayerHealthEx(i, -Healt);
			if ( coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(i)) - 400] != MOTO )
			{
				ApplyPlayerAnimCustom(i,
				"PED",
				PED_ANIMATIONS[23], false);
				if ( GetPlayerVehicleSeat(i) == 0 )
				{
				    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",i);
				}
				else
				{
				    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",i);
				}
			}
		    if ( Healt >= 20 )
		    {
			    SetPlayerWeather(i, -15);
			    SetPlayerDrunkLevel(i, 50000);
				SetTimerEx("ReturnPlayerNormalState", 15000, false, "d", i);
		    }
		}
	}
}
public ApplyPlayerAnimAccident(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) )
	{
		ApplyPlayerAnimCustom(playerid,
		"PED",
		PED_ANIMATIONS[59], false);
	}
}
public ApplyPlayerAnimAccidentD(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) )
	{
		ApplyPlayerAnimCustom(playerid,
		"PED",
		PED_ANIMATIONS[63], false);
	}
}
public ReturnPlayerNormalState(playerid)
{
	if (IsPlayerConnected(playerid) && IsPlayerInAnyVehicle(playerid))
	{
	    SetPlayerDrunkLevel(playerid, 4000);
	    SetPlayerWeather(playerid, WeatherCurrent);
	}
}
public IsOpenCloset(playerid, houseid)
{
	if ( !HouseData[houseid][ArmarioLock] )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1111", "El armario se encuentra cerrado!");
	    return false;
	}
}
public IsOpenRefrigerador(playerid, houseid)
{
	if ( !HouseData[houseid][RefrigeradorLock] )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "832", "El refrigerador se encuentra cerrado!");
	    return false;
	}
}
public IsOpenGaveta(playerid, houseid)
{
	if ( !HouseData[houseid][GavetaLock] )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1583", "La gaveta se encuentra cerrada!");
	    return false;
	}
}
public SendSMS(playerid, number, const text[])
{
    if ( PlayersData[playerid][Phone] != 0)
    {
	    if ( PlayersDataOnline[playerid][PhoneOnline] )
	    {
	        if ( PlayersDataOnline[playerid][InCall] == -1 )
	        {
	            if ( PlayersData[playerid][Phone] != number )
	            {
	                if ( number > 0 )
	                {
						if (PlayersData[playerid][Saldo] >= strlen(text) )
						{
						    if ( strlen(text) >= 1 )
						    {
					            for (new i = 0; i < MAX_PLAYERS; i++)
					            {
									if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == number && PlayersDataOnline[i][PhoneOnline] && IsNotPhoneInBlackList(i, PlayersData[playerid][Phone]) )
									{
									    new MsgToMe[MAX_TEXT_CHAT];
									    new MsgToPlayer[MAX_TEXT_CHAT];
									    new IsAgenda = IsInAgendaNumber(playerid, PlayersData[i][Phone]);
									    new IsAgendaYou = IsInAgendaNumber(i, PlayersData[playerid][Phone]);

										if ( IsAgenda != -1)
										{
									   		format(MsgToMe, sizeof(MsgToMe), "[SMS] Enviado a %s al número %i: %s", AgendaData[playerid][IsAgenda][NameC], PlayersData[i][Phone], text);
								   		}
								   		else
								   		{
									   		format(MsgToMe, sizeof(MsgToMe), "[SMS] Enviado al número %i: %s", PlayersData[i][Phone], text);
										}
									    if (IsAgendaYou != -1)
									    {
										    format(MsgToPlayer, sizeof(MsgToPlayer), " [SMS] Recibido de %s número %i: %s", AgendaData[i][IsAgendaYou][NameC], PlayersData[playerid][Phone], text, playerid);
									    }
									    else
									    {
										    format(MsgToPlayer, sizeof(MsgToPlayer), " [SMS] Recibido del número %i: %s", PlayersData[playerid][Phone], text);
										}

										if ( PlayersData[i][Admin] >= 1 )
										{
										    format(MsgToPlayer, sizeof(MsgToPlayer), "%s (([%i]))",MsgToPlayer, playerid);
										}

										Acciones(playerid, 8, "saca su móvil y envia un SMS");
										Acciones(i, 8, "recibe un SMS en el móvil");

										SendClientMessage(playerid, COLOR_INFO_MOVIL, MsgToMe);
										SendClientMessage(i, COLOR_INFO_MOVIL, MsgToPlayer);
										SetPlayerDescolgar(playerid);
										SetTimerEx("SetPlayerColgar", 3000, false, "d", playerid);

										AddSMS(i, PlayersData[playerid][Phone], text);

										PlayersData[playerid][Saldo] = PlayersData[playerid][Saldo]  -strlen(text);
									    FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + strlen(text);
									    return true;
									}
								}
								SendInfoMessage(playerid, 0, "819", "El móvil que desea enviar un SMS se encuentra apagado o no existe!");
							}
							else
							{
								SendInfoMessage(playerid, 0, "826", "Mínimo utilza un caracter para el SMS");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "824", "No tiene suficiente saldo para enviar un SMS");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "820", "El número que introdujo no existe");
					}
				}
	            else
	            {
					SendInfoMessage(playerid, 0, "821", "Ha introducído su mismo número de móvil");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "822", "Finalize su llamada telefónica actual antes de enviar un SMS");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1520", "Tiene el móvil apagado, enciendelo si desea realizar enviar un SMS!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "823", "Tú no tienes móvil");
	}
	return false;
}
public LoadPlayerSMS(playerid)
{
    CleanSMS(playerid);
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_SMS, PlayersDataOnline[playerid][NameOnline]);
	if ( fexist(DirBD) )
	{
		new DataRead[256];
		new File:ReadDataF;
		new NumberStr[8];
		new NumberInt;
		new EndFile;
        ReadDataF = fopen(DirBD, io_read);
        while ( !EndFile )
        {
        	fread(ReadDataF, DataRead);
        	new PosFind = strfind(DataRead, "³", false);
            if ( PosFind != -1 )
            {
				strmid(NumberStr, DataRead, 0, PosFind);
				NumberInt = strval(NumberStr);
		    	if ( NumberInt )
		    	{
		    	    strmid(DataRead, DataRead, PosFind + 1, strlen(DataRead) - 2);
		    	    if ( !AddSMS(playerid, NumberInt, DataRead) )
		    	    {
		    	        EndFile = true;
		    	    }
				}
				// printf("%i || %s", NumberInt, DataRead);
			}
			else
			{
	    	    EndFile = true;
			}
        }
		fclose(ReadDataF);
	}
}
public SavePlayerSMS(playerid)
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_SMS, PlayersDataOnline[playerid][NameOnline]);
    new File:SaveFP;
    new TempTextSave[250];
    new Count;
    SaveFP = fopen(DirBD, io_write);
	for (new i = 0; i < MAX_SMS_COUNT; i++)
	{
	    if ( Count )
	    {
		    format(TempTextSave, sizeof(TempTextSave), "\r\n%i³%s",
			SMS[playerid][i][Number],
			SMS[playerid][i][SMSText]
			);
	    }
	    else
	    {
	        Count = true;
		    format(TempTextSave, sizeof(TempTextSave), "%i³%s",
			SMS[playerid][i][Number],
			SMS[playerid][i][SMSText]
			);
		}
	    fwrite(SaveFP, TempTextSave);
	}
    fclose(SaveFP);
}
public AddSMS(playerid, number, const text[])
{
	for (new i = 0; i < MAX_SMS_COUNT;i++)
	{
	    if ( !SMS[playerid][i][Number] )
	    {
	        SMS[playerid][i][Number] = number;
	        format(SMS[playerid][i][SMSText], MAX_TEXT_SMS, "%s", text);
	        return true;
        }
	}
    SendInfoMessage(playerid, 2, "0", "No se están almacenando los SMS en la Agenda, debido a que está llena!");
	return false;
}
public CleanSMS(playerid)
{
	for (new i = 0; i < MAX_SMS_COUNT;i++)
	{
		SMS[playerid][i][Number] = 0;
		format(SMS[playerid][i][SMSText], MAX_TEXT_SMS, "0");
	}
}
public RemoveSMS(playerid, smsid)
{
	SMS[playerid][smsid][Number] = 0;
	format(SMS[playerid][smsid][SMSText], MAX_TEXT_SMS, "0");
}
public ShowSMSToPlayer(playerid)
{
	new SMSDialog[750];
	new Msg10Char[10];
	new TempConvert[50];
	new ConteoSMS = -1;
	for (new i = 0; i < MAX_SMS_COUNT; i++)
	{
	    if ( SMS[playerid][i][Number] )
	    {
	    	new IsAgenda = IsInAgendaNumber(playerid, SMS[playerid][i][Number]);
		    format(Msg10Char, sizeof(Msg10Char), "%s", SMS[playerid][i][SMSText]);
			if ( ConteoSMS != -1 )
			{
    	    	if ( IsAgenda != -1 )
    	    	{
			    	format(TempConvert, sizeof(TempConvert), "\r\n%i (%s) - {F5FF00}[%s...]", SMS[playerid][i][Number], AgendaData[playerid][IsAgenda][NameC],  Msg10Char);
	    		}
	    		else
	    		{
			    	format(TempConvert, sizeof(TempConvert), "\r\n%i - {F5FF00}[%s...]", SMS[playerid][i][Number], Msg10Char);
				}
	    	}
			else
			{
    	    	if ( IsAgenda != -1 )
    	    	{
			    	format(TempConvert, sizeof(TempConvert), "%i (%s) - {F5FF00}[%s...]", SMS[playerid][i][Number], AgendaData[playerid][IsAgenda][NameC],  Msg10Char);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "%i - {F5FF00}[%s...]", SMS[playerid][i][Number], Msg10Char);
				}
			}
	        strcat(SMSDialog, TempConvert, sizeof(SMSDialog));
	        ConteoSMS++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoSMS] = i;
        }
	}
	if (ConteoSMS != -1)
	{
		ShowPlayerDialogEx(playerid,62,DIALOG_STYLE_LIST,"{00A5FF}Agenda - SMS", SMSDialog, "Opciones", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón SMS.", "Aceptar", "Volver");
	}
}
public ShowSMSOptionsToPlayer(playerid, smsid)
{
	ShowPlayerDialogEx(playerid,61,DIALOG_STYLE_LIST, "{00A5FF}Agenda - SMS {F5FF00}Opciones", "{00A5FF}1 - {E6E6E6}Leer\r\n{00A5FF}2 - {E6E6E6}Responder\r\n{00A5FF}3 - {E6E6E6}Llamar\r\n{00A5FF}4 - {E6E6E6}Borrar", "Seleccionar", "Volver");
}
public ShowReadSMS(playerid, smsid)
{
	new MsgRead[350];
   	new IsAgenda = IsInAgendaNumber(playerid, SMS[playerid][smsid][Number]);
   	if ( IsAgenda != -1 )
   	{
		format(MsgRead, sizeof(MsgRead), "{00F50A}Número: {E6E6E6}%i (%s)\n\n{00F50A}Contenido:\n{E6E6E6}%s", SMS[playerid][smsid][Number], AgendaData[playerid][IsAgenda][NameC], SMS[playerid][smsid][SMSText]);
	}
	else
	{
		format(MsgRead, sizeof(MsgRead), "{00F50A}Número: {E6E6E6}%i\n\n{00F50A}Contenido:\n{E6E6E6}%s", SMS[playerid][smsid][Number], SMS[playerid][smsid][SMSText]);
	}

	ShowPlayerDialogEx(playerid,63,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - SMS {F5FF00}Leer", MsgRead, "Aceptar", "Volver");
}
public ShowReplySMS(playerid, smsid)
{
	new MsgTitleDialog[150];
   	new IsAgenda = IsInAgendaNumber(playerid, SMS[playerid][smsid][Number]);
   	if ( IsAgenda != -1 )
   	{
		format(MsgTitleDialog, sizeof(MsgTitleDialog), "{F0F0F0}Escriba lo que desea responderle a {F5FF00}%s {F0F0F0}({00F50A}%i{F0F0F0})", AgendaData[playerid][IsAgenda][NameC], SMS[playerid][smsid][Number]);
	}
	else
	{
		format(MsgTitleDialog, sizeof(MsgTitleDialog), "{F0F0F0}Escriba lo que desea responder al número {00F50A}%i", SMS[playerid][smsid][Number]);
	}
	ShowPlayerDialogEx(playerid,64,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - SMS {F5FF00}Responder", MsgTitleDialog, "Enviar", "Volver");
}
public ShowRemoveSMS(playerid, smsid)
{
	ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}Ha eliminado con éxito este SMS.", "Aceptar", "Inicio");
	RemoveSMS(playerid, smsid);
}
public SendMessageDeathMatch(playerid)
{
	new MsgGameText[MAX_TEXT_CHAT];
	switch ( random(8) )
	{
	    case 0:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Asesino ~<~~<~");
		}
	    case 1:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Criminal ~<~~<~");
		}
	    case 2:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Homicida ~<~~<~");
		}
	    case 3:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Playa ~<~~<~");
		}
	    case 4:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Owned ~<~~<~");
		}
	    case 5:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~POwned ~<~~<~");
		}
	    case 6:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~LOL ~<~~<~");
		}
	    case 7:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Serial Kill ~<~~<~");
		}
	}
	GameTextForPlayer(playerid, MsgGameText, 500, 5);
}
public SendMessageToPlayerDeathMatch(playerid, killerid, weaponid)
{
    new MsgDMToAll[MAX_TEXT_CHAT];
    format(MsgDMToAll, sizeof(MsgDMToAll), "{00F50A}*** DeathMatch: {F50000}%s mató a %s.", PlayersDataOnline[killerid][NameOnlineFix], PlayersDataOnline[playerid][NameOnlineFix]);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] )
	    {
			SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
	    }
    }
}
public IsVehicleOpen(playerid, vehicleid, ispassenger)
{
	if (vehicleid > MAX_CAR_FACCION ||
	    !DataCars[vehicleid][Lock] && vehicleid <= MAX_CAR_DUENO ||
		IsVehicleMyFaccion(playerid, vehicleid) && !DataCars[vehicleid][Lock] ||
		strlen(DataCars[vehicleid][Dueno]) == 1 && vehicleid <= MAX_CAR_DUENO
       )
	{
	    return true;
	}
	else
	{
	    if (vehicleid > MAX_CAR_DUENO && !DataCars[vehicleid][Lock] && ispassenger != 0)
	    {
	        return true;
	    }
	    else
	 	{
	    	return false;
    	}
	}
}
public SetPlayerSleep(playerid)
{
	if ( IsPlayerConnected(playerid) && PlayersDataOnline[playerid][InSleep] )
	{
		if ( PlayersDataOnline[playerid][InSleep] )
		{
		    if ( PlayersData[playerid][Cansansio] < MAX_CANSANSIO )
		    {
		    	PlayersData[playerid][Cansansio]++;
				SetTimerEx("SetPlayerSleep", 1000, false, "d", playerid);
			}
			else
			{
				SendInfoMessage(playerid, 2, "0", "Has descansado ya suficiente, puede levantarse!");
				TogglePlayerControllableEx(playerid, true);
				PlayersDataOnline[playerid][InSleep] = false;
			}
		}
	}
}
public UpdateTextDrawVehicle(playerid, vehicleid)
{
	new Float:Velocity[3], StringVelocity[3];
	GetVehicleVelocity(vehicleid, Velocity[0], Velocity[1], Velocity[2]);
//	new Float:VelocityInt = (floatabs(Velocity[0]) + floatabs(Velocity[1]) + floatabs(Velocity[2])) * 70;
	new VelocityInt = floatround(floatsqroot(floatpower(floatabs(Velocity[0]), 2.0) + floatpower(floatabs(Velocity[1]), 2.0) + floatpower(floatabs(Velocity[2]), 2.0)) * 120.0);
	format(StringVelocity, sizeof(StringVelocity), "%i", VelocityInt);

	TextDrawHideForPlayer(playerid, VelocimetroNumber1[PlayersDataOnline[playerid][LastVel][0]]);
	TextDrawHideForPlayer(playerid, VelocimetroNumber2[PlayersDataOnline[playerid][LastVel][1]]);
	TextDrawHideForPlayer(playerid, VelocimetroNumber3[PlayersDataOnline[playerid][LastVel][2]]);

	StringVelocity[0] = AbsVel(StringVelocity[0]);
	StringVelocity[1] = AbsVel(StringVelocity[1]);

	TextDrawShowForPlayer(playerid, VelocimetroNumber1[StringVelocity[0]]);
	if ( VelocityInt >= 10 )
	{
		TextDrawShowForPlayer(playerid, VelocimetroNumber2[StringVelocity[1]]);
		if ( VelocityInt >= 100 )
		{
			TextDrawShowForPlayer(playerid, VelocimetroNumber3[VelocityInt%10]);
		}
	}

	PlayersDataOnline[playerid][LastVel][0] = StringVelocity[0];
	PlayersDataOnline[playerid][LastVel][1] = StringVelocity[1];
	PlayersDataOnline[playerid][LastVel][2] = VelocityInt%10;

	new Float:Estado; GetVehicleHealth(vehicleid, Estado);
	if ( coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400] )
	{
	    new TextTempId;
	    if (Estado >= 650.0)
	    TextTempId = floatround((10 * float(VelocityInt) / (float(coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400]) / float(100)) / 100));
	    else if (Estado >= 550.0)//Humo blanco
	    TextTempId = floatround((20 * float(VelocityInt) / (float(coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400]) / float(100)) / 100));
	    else
		TextTempId = floatround((40 * float(VelocityInt) / (float(coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400]) / float(100)) / 100));
		if ( TextTempId <= coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400] )
		{
		    if ( TextTempId <= 40 )
		    {
				TextDrawHideForPlayer(playerid, TemperaturaTextDraws[PlayersDataOnline[playerid][LastTextDrawTemperatura]]);
			    TextDrawShowForPlayer(playerid, TemperaturaTextDraws[TextTempId]);
			    PlayersDataOnline[playerid][LastTextDrawTemperatura] = TextTempId;
		    }

			if ( TextTempId >= 40 )
			{
			    if ( !DataCars[vehicleid][TemperaturaC] )
			    {
			        if ( gettime() > DataCars[vehicleid][TimeCalentamiento] && DataCars[vehicleid][TimeCalentamiento])
			        {
				        DataCars[vehicleid][TemperaturaC] = true;
			        	SetVehicleHealthEx(GetPlayerVehicleID(playerid), Estado - 50);
			        	DataCars[vehicleid][LastDamage] = DataCars[vehicleid][LastDamage] - 50;
			        	Estado -= 50;
		        	}
		        	else
		        	{
			        	PlayPlayerStreamSound(playerid, 1056);
						if ( !DataCars[vehicleid][TimeCalentamiento] )
						{
		        	    	DataCars[vehicleid][TimeCalentamiento] = gettime() + 5;
	        	    	}
					}
				}
        	}
        	else
        	{
        	    DataCars[vehicleid][TimeCalentamiento] = 0;
	        	DataCars[vehicleid][TemperaturaC] = false;
			}
	    }
	}
	if ( (DataCars[vehicleid][LastDamage] - Estado) != 0 )
	{
	    if ( (DataCars[vehicleid][LastDamage] - Estado) > 0.0 )
	    {
//	        printf("LastDamage: %f Estado: %f",DataCars[vehicleid][LastDamage], Estado);
			if ( PlayersDataOnline[playerid][PistaIDp] != -1 && Pistas[PlayersDataOnline[playerid][PistaIDp]][Repair] )
			{
				RepairVehicle(vehicleid);
				SetVehicleHealthEx(vehicleid, 1000.0);
				Estado = 1000.0;
			}
			else if ( !DataCars[vehicleid][TemperaturaC] )
			{
			    if ( !PlayersDataOnline[playerid][AdminOn] )
			    {
					UpdatePlayerVehicleStatus(vehicleid, (DataCars[vehicleid][LastDamage] - Estado) / 10);
			    }
			}
		}
		UpdateDamage(playerid, Estado);
	}
	DataCars[vehicleid][LastDamage] 		= Estado;
	/*else if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
	{
		if ( VelocityInt - DataCars[vehicleid][LastVelocityInt] > 10 )
		{
		    new MsgCheatSpeed[256];
		    format(MsgCheatSpeed, sizeof(MsgCheatSpeed), "%s AntiCheat-Speed Hack - %s[%i] posible cheat de Speed Hack. Datos: Diferencia: %i | Actual: %i | Anterior: %i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, VelocityInt - DataCars[vehicleid][LastVelocityInt], VelocityInt, DataCars[vehicleid][LastVelocityInt]);
		    MsgCheatsReportsToAdmins(MsgCheatSpeed);
		    return true;
	    }
	}*/
//	DataCars[vehicleid][LastVelocityInt] 	= VelocityInt;
	return true;
	//printf("%0.2f - %0.2f - %i", Estado / 9.34, Estado, floatround(Estado));
}
public UpdateDamage(playerid, &Float:newdamage)
{
	if ( newdamage > DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage] && DataCars[PlayersDataOnline[playerid][InCarId]][VehicleAnticheat] <= gettime() )
	{
		SetVehicleHealth(PlayersDataOnline[playerid][InCarId], DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage]);
		UpdateVehicleDamageStatus(PlayersDataOnline[playerid][InCarId], DataCars[PlayersDataOnline[playerid][InCarId]][PanelS], DataCars[PlayersDataOnline[playerid][InCarId]][DoorS], DataCars[PlayersDataOnline[playerid][InCarId]][LightS], DataCars[PlayersDataOnline[playerid][InCarId]][TiresS]);
		newdamage = DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage];
		new MsgAviso[MAX_TEXT_CHAT];
		format(MsgAviso, sizeof(MsgAviso), "%s AntiCheat-Repair - %s[%i] posible cheat de repair vehicle. Datos: ID del vehículo %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[playerid][InCarId]);
		MsgCheatsReportsToAdmins(MsgAviso);
	}
	else
	{
		new IntDamage = floatround(newdamage / 9.34);
		TextDrawHideForPlayer(playerid, BarsDamage[PlayersDataOnline[playerid][LastDamageInt]]);
		TextDrawShowForPlayer(playerid, BarsDamage[IntDamage]);
		PlayersDataOnline[playerid][LastDamageInt] = IntDamage;
		GetVehicleDamageStatus(PlayersDataOnline[playerid][InCarId], DataCars[PlayersDataOnline[playerid][InCarId]][PanelS], DataCars[PlayersDataOnline[playerid][InCarId]][DoorS], DataCars[PlayersDataOnline[playerid][InCarId]][LightS], DataCars[PlayersDataOnline[playerid][InCarId]][TiresS]);
	}
}
public UpdateGasAndOil(vehicleid)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( IsPlayerConnected(i) && PlayersDataOnline[i][InCarId] == vehicleid)
	    {
			TextDrawHideForPlayer(i, BarsGas[PlayersDataOnline[i][LastGas]]);
			TextDrawShowForPlayer(i, BarsGas[DataCars[vehicleid][Gas]]);
			PlayersDataOnline[i][LastGas] = DataCars[vehicleid][Gas];

			TextDrawHideForPlayer(i, BarsOil[PlayersDataOnline[i][LastOil]]);
			TextDrawShowForPlayer(i, BarsOil[DataCars[vehicleid][Oil]]);
			PlayersDataOnline[i][LastOil] = DataCars[vehicleid][Oil];
		}
	}
}
public CreateTextDrawGas()
{
	for (new i = 0; i <= MAX_GAS_VEHICLE; i++)
	{
		BarsGas[i] = TextDrawCreateEx(488.0, 412.0,"_");
		TextDrawUseBox(BarsGas[i], 1);
		TextDrawBackgroundColor(BarsGas[i] ,0x00000000);
		TextDrawColor(BarsGas[i], 0x00000000);
		TextDrawBoxColor(BarsGas[i], 0x2EFF03FF);
		TextDrawTextSize(BarsGas[i], 488.0 + i, 421.0);
		TextDrawSetShadow(BarsGas[i], 1);
		TextDrawLetterSize(BarsGas[i], 0.1 , 0.1);
	}
}
public CreateTextDrawDamage()
{
	for (new i = 0; i <= MAX_DAMAGE_VEHICLE; i++)
	{
		BarsDamage[i] = TextDrawCreateEx(512.0, 421.0,"_");
		TextDrawUseBox(BarsDamage[i], 1);
		TextDrawBackgroundColor(BarsDamage[i] ,0x00000000);
		TextDrawColor(BarsDamage[i], 0x00000000);
		TextDrawBoxColor(BarsDamage[i], 0xFF0005FF);
		TextDrawTextSize(BarsDamage[i], 512.0 + i, 421.0);
		TextDrawSetShadow(BarsDamage[i], 1);
		TextDrawLetterSize(BarsDamage[i], 0.1 , 0.1);
	}
}
public CreateTextDrawOil()
{
	for (new i = 0; i <= MAX_OIL_VEHICLE; i++)
	{
		BarsOil[i] = TextDrawCreateEx(506.0, 402.8,"_");
		TextDrawUseBox(BarsOil[i], 1);
		TextDrawBackgroundColor(BarsOil[6] ,0x00000000);
		TextDrawColor(BarsOil[i], 0x00000000);
		TextDrawBoxColor(BarsOil[i], 0x00A5FFFF);
		TextDrawTextSize(BarsOil[i], 506 + i, 402.8); // + 506
		TextDrawSetShadow(BarsOil[i], 1);
		TextDrawLetterSize(BarsOil[i], 0.1 , 0.1);
	}
}
public CreateTextDrawNumbers()
{
    new TextChange[10];
	for ( new i = 0; i < 10; i++ )
	{
	    format(TextChange, sizeof(TextChange),"%i", i);
		VelocimetroNumber1[i] = TextDrawCreateEx(532.0, 428.0, TextChange);
		TextDrawColor(VelocimetroNumber1[i], 0xFFFEFFFF);
		TextDrawSetShadow(VelocimetroNumber1[i] ,1);
		TextDrawFont(VelocimetroNumber1[i], 2);
		TextDrawLetterSize(VelocimetroNumber1[i], 0.7 , 1.7);

	    format(TextChange, sizeof(TextChange),"__%i", i);
		VelocimetroNumber2[i] = TextDrawCreateEx(532.0, 428.0, TextChange);
		TextDrawColor(VelocimetroNumber2[i], 0xFFFEFFFF);
		TextDrawSetShadow(VelocimetroNumber2[i] ,1);
		TextDrawFont(VelocimetroNumber2[i], 2);
		TextDrawLetterSize(VelocimetroNumber2[i], 0.7 , 1.7);

	    format(TextChange, sizeof(TextChange),"____%i", i);
		VelocimetroNumber3[i] = TextDrawCreateEx(532.0, 428.0, TextChange);
		TextDrawColor(VelocimetroNumber3[i], 0xFFFEFFFF);
		TextDrawSetShadow(VelocimetroNumber3[i] ,1);
		TextDrawFont(VelocimetroNumber3[i], 2);
		TextDrawLetterSize(VelocimetroNumber3[i], 0.7 , 1.7);
	}
	new Colors[41] = {
	0x4A4AF1FF, //80
	0x5E5EF1FF,
	0x7171F1FF,
	0x7B7BF1FF,
	0x8E8EF1FF,
	0xA1A1F1FF,
	0xB5B5F1FF,
	0xCACAF1FF,
	0xDDDDF1FF,
	0xF1F1F1FF, // 90
	0xF1E8E7FF,
	0xF1DDDDFF,
	0xF1D3D3FF,
	0xF1CACAFF,
	0xF1C0C0FF,
	0xF1B5B5FF,
	0xF1ABABFF,
	0xF1A3A1FF,
	0xF19897FF,
	0xF18E8CFF, //100
	0xF18484FF,
	0xF17A7AFF,
	0xF1716FFF,
	0xF16867FF,
	0xF15C5CFF, //105
	0xF15252FF,
	0xF14A4AFF,
	0xF14141FF,
	0xF13838FF,
	0xF1302EFF, //110
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF
	};
	for ( new i = 80; i <= 120; i++ )
	{
	    format(TextChange, sizeof(TextChange),"%iC", i);
		TemperaturaTextDraws[i - 80] = TextDrawCreateEx(492.0, 425.0, TextChange);
		TextDrawColor(TemperaturaTextDraws[i - 80], Colors[i - 80]);
		TextDrawSetShadow(TemperaturaTextDraws[i - 80] ,1);
		TextDrawFont(TemperaturaTextDraws[i - 80], 1);
		TextDrawLetterSize(TemperaturaTextDraws[i - 80], 0.5 , 1.0);
	}
	TemperaturaTextDraws[41] = TextDrawCreateEx(492.0, 425.0, "N/A");
	TextDrawColor(TemperaturaTextDraws[41], 0xFFFEFFFF);
	TextDrawSetShadow(TemperaturaTextDraws[41] ,1);
	TextDrawFont(TemperaturaTextDraws[41], 1);
	TextDrawLetterSize(TemperaturaTextDraws[41], 0.5 , 1.0);

	// TemperaturaTextDraws
}
public AbsVel(numberAscci)
{
	if ( numberAscci - 48 >= 0 )
	{
	    return (numberAscci - 48);
	}
	else
	{
    	return false;
	}
}
public OnGameModeExitEx()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) )
		{
	    	SaveDatosPlayerDisconnect(i);
    	}
	}
	for (new i = 0; i < MAX_FACCION_COUNT; i++ )
	{
	    new TempDirFaccion[25];
	    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, i);
		if ( fexist(TempDirFaccion) )
		{
			SaveDataFaccion(i);
		}
		else
		{
		    break;
		}
	}
	// Negocios
	for (new i = 1; i <= MAX_BIZZ; i++)
	{
		DataSaveBizz(i, true);
	}
	// Houses
	for (new i = 1; i <= MAX_HOUSE; i++)
	{
		CheckGarageRemove(i);
		SaveHouse(i, true);
	}
	// Teles
	for (new i=0; i!=MAX_TELES_COUNT; i++)
	{
	    if (Teles[i][PickupID] == 0) continue;
	    SaveTele(i, false);
	}
	// Otros
	SaveMapeos();
	SaveGasolineras();
	SaveIncendios();
	SaveBombas();
	SaveVCP();
	SaveDataPistas();
	// Save Car's
	for (new i = 1; i <= MAX_CAR; i++)
	{
	    GetVehiclePos(i, DataCars[i][LastX], DataCars[i][LastY], DataCars[i][LastZ]);
		GetVehicleZAngle(i, DataCars[i][LastZZ]);
		GetVehicleDamageStatus(i, DataCars[i][PanelS], DataCars[i][DoorS], DataCars[i][LightS], DataCars[i][TiresS]);
		if ( DataCars[i][LlenandoGas] )
		{
            DataCars[i][Gas] = DataCars[i][LlenandoGas];
		}
		DataCars[i][IsLastSpawn] = true;
	}
	for (new i = 1; i <= MAX_CAR_DUENO; i++ )
	{
		SaveDataVehicle(i, DIR_VEHICLES);
	}
	for (new i = MAX_CAR_DUENO + 1; i <= MAX_CAR_FACCION; i++)
	{
		SaveDataVehicle(i, DIR_VEHICLESF);
    }
	for ( new i = MAX_CAR_FACCION + 1; i <= MAX_CAR_PUBLIC; i++)
	{
		SaveDataVehicle(i, DIR_VEHICLESP);
    }
	SaveGaragesExLock();

	DestroyAllDynamicObjects();

	for (new i=0; i <= MAX_LOCAL_ID; i++ )
	{
		SaveLocal(i, false);
	}

	mysql_close(dataBase);
	print("___________________ GAMEMODE DESCARGADO CORRECTAMENTE! ___________________");
	print("___________________ GAMEMODE DESCARGADO CORRECTAMENTE! ___________________");
	print("___________________ GAMEMODE DESCARGADO CORRECTAMENTE! ___________________");
}
public ResetServer()
{
	OnGameModeExitEx();
	ResetGM = true;
	SendRconCommand("gmx");
    for ( new i = 0; i < 10; i++)
    {
    	SendClientMessageToAll(0x000000FF, " ");
	}
	SendClientMessageToAll(COLOR_MESSAGES[2], "{F50000}ATENCIÓN: {00F50A}En estos momentos el servidor está reiniciando, {F50000}POR FAVOR NO SE DESCONECTE! {00F50A}Sólo demorará 5 segundos.");
	SendClientMessageToAll(COLOR_MESSAGES[2], ReasonReset);
   	SendClientMessageToAll(0x000000FF, " ");
	SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Saludos Cordiales,");
	SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Equipo de Old Players.");
	GameTextForAll( "~G~Servidor Reiniciando...~N~Por favor espere...", 6000, 0);
}
public ConfirmDeletedAllSMS(playerid)
{
	ShowPlayerDialogEx(playerid,66,DIALOG_STYLE_MSGBOX, "{00A5FF}Agenda - SMS {F5FF00}Borrar Todos","{E6E6E6}¿Está seguro que desea {F50000}BORRAR TODOS{00A5FF} los SMS?", "Borrarlos", "Volver");
}
public IsTunningForVehicle(modelid)
{
	for ( new i = 0; i < sizeof(ListTRANSFENDEREscape);i++)
	{
	    if ( ListTRANSFENDEREscape[i] == modelid )
	    {
	        return 1;
		}
	}
	for ( new i = 0; i < sizeof(ListTRANSFENDERSentinel);i++)
	{
	    if ( ListTRANSFENDERSentinel[i] == modelid )
	    {
	        return 2;
		}
	}
	for ( new i = 0; i < sizeof(ListTRANSFENDER);i++)
	{
	    if ( ListTRANSFENDER[i] == modelid )
	    {
	        return 3;
		}
	}
	return false;
}
public CleanTunningSlots(vehicleid)
{
	for (new t = 0; t < 14; t++ )
	{
		DataCars[vehicleid][SlotsTunning][t] = 0;
    }
    DataCars[vehicleid][Vinillo] = -1;
}
public SetLastSettingVehicle(vehicleid)
{
	CreateVehicleEx(DataCars[vehicleid][Modelo], DataCars[vehicleid][LastX], DataCars[vehicleid][LastY], DataCars[vehicleid][LastZ], DataCars[vehicleid][LastZZ], DataCars[vehicleid][Color1], DataCars[vehicleid][Color2], vehicleid);
	UpdateVehicleDamageStatus(vehicleid, DataCars[vehicleid][PanelS], DataCars[vehicleid][DoorS], DataCars[vehicleid][LightS], DataCars[vehicleid][TiresS]);
	if ( DataCars[vehicleid][Vinillo] != -1 && IsValidVehiclePaintJob(DataCars[vehicleid][Modelo]) )
	{
		ChangeVehiclePaintjob(vehicleid, DataCars[vehicleid][Vinillo]);
	}
	else
	{
		DataCars[vehicleid][Vinillo] = -1;
	}
	for (new t = 0; t < 14; t++ )
	{
	    if ( DataCars[vehicleid][SlotsTunning][t] )
	    {
			AddVehicleComponentEx(vehicleid, DataCars[vehicleid][SlotsTunning][t]);
		}
	}
	if ( DataCars[vehicleid][LastDamage] >= 250.0 )
	{
		SetVehicleHealthEx(vehicleid, DataCars[vehicleid][LastDamage]);
		GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
	}
	SetVehicleVirtualWorld(vehicleid, DataCars[vehicleid][WorldLast]);
	LinkVehicleToInterior(vehicleid, DataCars[vehicleid][InteriorLast]);
}
public AddVehicleComponentEx(vehicleid, componentid)
{
	AddVehicleComponent(vehicleid, componentid);
	DataCars[vehicleid][SlotsTunning][GetVehicleComponentType(componentid)] = componentid;
}
public GetMyNearCity(playerid)
{
    for ( new i = 10000; i >= 0;i=i-100)
    {
		if (IsPlayerInRangeOfPoint(playerid, i, -1720.5479,1018.1831,17.2422) &&
			IsPlayerInRangeOfPoint(playerid, i, 2804.9290,-1432.0378,39.7068) )
		{
		    continue;
		}
		else
		{
			if ( IsPlayerInRangeOfPoint(playerid, i, -1720.5479,1018.1831,17.2422) )
			{
				return true; // SF
			}
			else
			{
				return false; // LS
			}
		}
	}
	return false;
}
public SetVehicleToRespawnEx(vehicleid)
{
	if ( coches_Todos_Type[DataCars[vehicleid][Modelo] - 400] != TREN )
	{

		RemoveVehicleHidden(vehicleid);
		DestroyVehicle(vehicleid);
		CleanTunningSlots(vehicleid);
		CreateVehicleEx(DataCars[vehicleid][Modelo],
		DataCars[vehicleid][PosX],
		DataCars[vehicleid][PosY],
		DataCars[vehicleid][PosZ],
		DataCars[vehicleid][PosZZ],
		DataCars[vehicleid][Color1],
		DataCars[vehicleid][Color2],
		vehicleid
		);
	}
	else
	{
	    SetVehicleToRespawn(vehicleid);
	}
	if ( DataCars[vehicleid][VehicleDeath] )
	{
		DataCars[vehicleid][VehicleDeath] = false;
		KillTimer(DataCars[vehicleid][TimerIdBug]);
	}
	GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
    DataCars[vehicleid][WorldLast]    = DataCars[vehicleid][World];
    DataCars[vehicleid][InteriorLast] = DataCars[vehicleid][Interior];
    GetVehiclePos(vehicleid, DataCars[vehicleid][LastX], DataCars[vehicleid][LastY], DataCars[vehicleid][LastZ]);
    GetVehicleZAngle(vehicleid, DataCars[vehicleid][LastZZ]);
}
public SetVehicleToRespawnExTwo(vehicleid)
{
	if ( coches_Todos_Type[DataCars[vehicleid][Modelo] - 400] != TREN )
	{

		RemoveVehicleHidden(vehicleid);
		DestroyVehicle(vehicleid);

		CreateVehicleEx(DataCars[vehicleid][Modelo],
		DataCars[vehicleid][PosX],
		DataCars[vehicleid][PosY],
		DataCars[vehicleid][PosZ],
		DataCars[vehicleid][PosZZ],
		DataCars[vehicleid][Color1],
		DataCars[vehicleid][Color2],
		vehicleid
		);

		if ( DataCars[vehicleid][Vinillo] != -1 && IsValidVehiclePaintJob(DataCars[vehicleid][Modelo]) )
		{
			ChangeVehiclePaintjob(vehicleid, DataCars[vehicleid][Vinillo]);
		}
		else
		{
			DataCars[vehicleid][Vinillo] = -1;
		}
		for (new t = 0; t < 14; t++ )
		{
		    if ( DataCars[vehicleid][SlotsTunning][t] )
		    {
				AddVehicleComponentEx(vehicleid, DataCars[vehicleid][SlotsTunning][t]);
			}
		}
	}
	else
	{
	    SetVehicleToRespawn(vehicleid);
	}
	if ( DataCars[vehicleid][VehicleDeath] )
	{
		DataCars[vehicleid][VehicleDeath] = false;
		KillTimer(DataCars[vehicleid][TimerIdBug]);
	}
	GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
    DataCars[vehicleid][WorldLast]    = DataCars[vehicleid][World];
    DataCars[vehicleid][InteriorLast] = DataCars[vehicleid][Interior];
    GetVehiclePos(vehicleid, DataCars[vehicleid][LastX], DataCars[vehicleid][LastY], DataCars[vehicleid][LastZ]);
    GetVehicleZAngle(vehicleid, DataCars[vehicleid][LastZZ]);
}
public ShowMenuDMWeapon(playerid)
{
	new CallDialog[1200];
	new TempConvert[45];
	new ConteoCall = -1;
	for (new i = 0; i < 47; i++)
	{
	    if(i!=19&&i!=20&&i!=21)
	    {
	        if ( WeaponEnableDM[i] )
	        {
				if ( ConteoCall != -1 )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%s (%i)",
					SlotNameWeapon[i],
					SlotIDWeapon[i]
					);
		    	}
				else
				{
			    	format(TempConvert, sizeof(TempConvert), "{00F50A}%s (%i)",
				    SlotNameWeapon[i],
				    SlotIDWeapon[i]
					);
				}
			}
			else
			{
				if ( ConteoCall != -1 )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%s (%i)",
					SlotNameWeapon[i],
					SlotIDWeapon[i]
					);
		    	}
				else
				{
			    	format(TempConvert, sizeof(TempConvert), "{F50000}%s (%i)",
				    SlotNameWeapon[i],
				    SlotIDWeapon[i]
					);
				}
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
        }
	}
	ShowPlayerDialogEx(playerid,67,DIALOG_STYLE_LIST,"{00A5FF}DeathMatch Mode - Armas permitidas", CallDialog, "Seleccionar", "Salir");
}
public ReverseEx(&number)
{
	if ( number )
	{
	    number = false;
	}
	else
	{
	    number = true;
	}
}
public Reverse(&bool:number)
{
	if ( number )
	{
	    number = false;
	}
	else
	{
	    number = true;
	}
}
public IsWeaponDmExist(weaponid)
{
	for (new i = 0; i < 47; i++)
	{
	    if ( weaponid != i && SlotIDWeapon[weaponid] == SlotIDWeapon[i] && WeaponEnableDM[i] )
	    {
	        WeaponEnableDM[i] = false;
		    return true;
		}
	}
    return false;
}
public UpdateTextDrawDM(teamid)
{
	new FreePoints[3]; FreePoints[0] = -1; FreePoints[1] = -1; FreePoints[2] = -1;
	new TotalPointsDM;
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] && PlayersDataOnline[i][TeamDM] == teamid)
		{
		   	TotalPointsDM += PlayersDataOnline[i][PointDm];
		    for ( new s = 0; s < 3; s++ )
			{
				if ( FreePoints[s] != -1 )
				{
					if ( PlayersDataOnline[i][PointDm] > PlayersDataOnline[FreePoints[s]][PointDm] )
					{
					    if ( s == 0 )
					    {
                        	FreePoints[2] = FreePoints[1];
                        	FreePoints[1] = FreePoints[0];
                        	FreePoints[0] = i;
                       	}
					    else if ( s == 1 )
					    {
                        	FreePoints[2] = FreePoints[1];
                        	FreePoints[1] = i;
                       	}
					    else if ( s == 2 )
					    {
                        	FreePoints[2] = i;
                       	}
	    				break;
					}
				}
				else
				{
				    FreePoints[s] = i;
    				break;
				}
			}
		}
	}
	new FreePositions[3][MAX_PLAYER_NAME + 10];
	format(FreePositions[0], MAX_PLAYER_NAME, "]Nadie]");
	format(FreePositions[1], MAX_PLAYER_NAME, "]Nadie]");
	format(FreePositions[2], MAX_PLAYER_NAME, "]Nadie]");
    for ( new i = 0; i < 3; i++ )
	{
		if ( FreePoints[i] != -1 )
		{
			format(FreePositions[i], MAX_PLAYER_NAME + 10, "%s ~W~(%i)", PlayersDataOnline[FreePoints[i]][NameOnline], PlayersDataOnline[FreePoints[i]][PointDm]);
		}
	}
	new TextForDMTextDraw[300];
	if ( teamid )
	{
		format(TextForDMTextDraw, sizeof(TextForDMTextDraw), "              ~R~Equipo %i~N~~W~Jugador   ~G~Puntos~N~~R~%s~N~~Y~%s~N~~P~%s~N~~N~~G~Total: ~W~%i", teamid + 1, FreePositions[0], FreePositions[1], FreePositions[2], TotalPointsDM);
	}
	else
	{
		format(TextForDMTextDraw, sizeof(TextForDMTextDraw), "              ~B~Equipo %i~N~~W~Jugador   ~G~Puntos~N~~R~%s~N~~Y~%s~N~~P~%s~N~~N~~G~Total: ~W~%i", teamid + 1, FreePositions[0], FreePositions[1], FreePositions[2], TotalPointsDM);
	}
	TextDrawSetString(ModeDMTextDraw[teamid], TextForDMTextDraw);
}
public SetPlayerSpectateToPlayer(playerid, spectateplayerid)
{
	if (PlayersDataOnline[playerid][Espectando] == -1 )
    {
        PlayersDataOnline[playerid][Spawn]      = false;
        GetSpawnInfo(playerid);
		PlayersDataOnline[playerid][StateDeath] = true;
		TogglePlayerSpectating(playerid, 1);
	}
	else
	{
		new IdLast = PlayersDataOnline[playerid][Espectando];
		PlayersDataOnline[spectateplayerid][IsEspectando] = true;
		CheckSpectToPlayer(IdLast);
	}
    PlayersDataOnline[playerid][Espectando] = spectateplayerid;
    SetPlayerVirtualWorldEx(playerid, GetPlayerVirtualWorld(spectateplayerid));
    SetPlayerInteriorEx(playerid, GetPlayerInteriorEx(spectateplayerid));
    if ( IsPlayerInAnyVehicle(spectateplayerid) && PlayersDataOnline[playerid][EspectVehOrPlayer])
    {
        PlayersDataOnline[playerid][EspectVehOrPlayer] = false;
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(spectateplayerid));
	}
	else
	{
        PlayersDataOnline[playerid][EspectVehOrPlayer] = true;
		PlayerSpectatePlayer(playerid, spectateplayerid);
	}
	if ( PlayersData[spectateplayerid][Admin] == 9 )
	{
	    new MsgPerNivel9[MAX_TEXT_CHAT];
	    format(MsgPerNivel9, sizeof(MsgPerNivel9), "%s %s está espectado a %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[spectateplayerid][NameOnlineFix]);
	    MsgCheatsReportsToAdminsEx(MsgPerNivel9, 9);
	}
}
public RemoveSpectatePlayer(playerid)
{
	if ( PlayersDataOnline[playerid][Espectando] != -1 )
	{
        PlayersDataOnline[playerid][Spawn]      = true;
		PlayersDataOnline[playerid][StateDeath] = true;
    	TogglePlayerSpectating(playerid, 0);
    	SetSpawnInfoEx(playerid);
    	CheckSpectToPlayer(PlayersDataOnline[playerid][Espectando]);
	    PlayersDataOnline[playerid][Espectando] = -1;
	    return true;
	}
	else
	{
	    return false;
	}
}
public CheckSpectToPlayer(playerid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( PlayersDataOnline[i][Espectando] == playerid )
	    {
			PlayersDataOnline[playerid][IsEspectando] = true;
			return true;
		}
	}
	PlayersDataOnline[playerid][IsEspectando] = false;
	return true;
}
public UpdateSpectatedPlayers(playerid, death, interiorid, world)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( PlayersDataOnline[i][Espectando] == playerid )
	    {
	        if ( !death )
	        {
			    SetPlayerVirtualWorldEx(i, world);
			    SetPlayerInteriorEx(i, interiorid);
	    		PlayerSpectatePlayer(i, playerid);
			}
			else
			{
	        	RemoveSpectatePlayer(i);
			}
		}
	}
}
public NextPlayerSpect(playerid)
{
	if ( PlayersDataOnline[playerid][Espectando] != -1 )
	{
		new i = PlayersDataOnline[playerid][Espectando] + 1;
		if ( i > 499 )
		{
		    i = 0;
		}
		for (; i < MAX_PLAYERS; i++)
		{
			if ( i == PlayersDataOnline[playerid][Espectando] )
			{
			    return true;
			}
			if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][StateDeath] != 2 )
			{
			    SetPlayerSpectateToPlayer(playerid, i);
			    return true;
			}
			if ( i == 499 )
			{
			    i = -1;
			}
		}
	}
	return false;
}
public LastPlayerSpect(playerid)
{
	if ( PlayersDataOnline[playerid][Espectando] != -1 )
	{
		new i = PlayersDataOnline[playerid][Espectando] - 1;
		if ( i < 0 )
		{
		    i = 499;
		}
		for (; i < MAX_PLAYERS; i--)
		{
			if ( i == PlayersDataOnline[playerid][Espectando] )
			{
			    return true;
			}
			if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][StateDeath] != 2)
			{
			    SetPlayerSpectateToPlayer(playerid, i);
			    return true;
			}
			if ( i == 0 )
			{
			    i = 500;
			}
		}
	}
	return false;
}
public CreateDynamicMapIconULP(Float:x, Float:y, Float:z, type)
{
	CreateDynamicMapIcon(x, y, z, type, 0, 0, 0, -1, MAX_RADIO_STREAM_MAP_ICON);
}
public GetMyNextBizz()
{
	for (new i = 1; i < MAX_BIZZ_COUNT; i++)
	{
		new query[200], Cache:cacheid, negocioExiste;
		mysql_format(dataBase, query, 200, "SELECT `ID` FROM `%s` WHERE `ID`='%i';", DIR_NEGOCIOS, i);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(negocioExiste);
		cache_delete(cacheid);
		if ( !negocioExiste )
		{
		    return i;
		}
	}
	return false;
}
public GetMyNextHouse()
{
	for (new i = 1; i < MAX_HOUSE_COUNT; i++)
	{
	    new query[200], Cache:cacheid, casaExiste;
		format(query, 200, "SELECT `ID` FROM `%s` WHERE `ID`=%i;", DIR_HOUSES, i);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(casaExiste);
		cache_delete(cacheid);
		if ( !casaExiste )
		{
		    return i;
		}
	}
	return false;
}
public PlayerRestoreVarExitedVehicle(playerid)
{
	PlayersDataOnline[playerid][ExitedVehicle] = false;
}
public IsPlayerOff(playerid)
{
	SendInfoMessage(playerid, 0, "1163", "Has sido kickeado, has tardado mucho tiempo en identificarte o regístrarte");
	KickEx(playerid, 8);
}
public SetVehicleBugToRespawn(vehicleid)
{
    DataCars[vehicleid][VehicleDeath] = false;
    SetVehicleToRespawnEx(vehicleid);
	SetVehicleHidden(vehicleid);
}
public LockTrain(vehicleid, LockV)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vehicleid )
	    	{
				for ( new f = 0; f < 4; f++ )
				{
				    DataCars[TrainGroups[t][f]][Lock] = LockV;
				}
				break;
			}
	   	}
   	}
}
public GetTrainByVehicleID(vehicleid)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vehicleid )
	    	{
				return TrainGroups[t][0];
			}
	   	}
   	}
   	return false;
}
public GetVagonByVehicleID(vehicleid)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vehicleid )
	    	{
				return i;
			}
	   	}
   	}
   	return false;
}
public GetVagonIDByVagonID(vagonid)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vagonid )
	    	{
				return TrainGroups[t][i];
			}
	   	}
   	}
   	return false;
}
public IsPlayerNearTram(playerid)
{
	if ( PlayersData[playerid][Faccion] == TAXI )
	{
	    if ( IsVehicleOpen(playerid, TramSFID, 0) )
	    {
			new Float:PosTram[3];
			GetVehiclePos(TramSFID, PosTram[0], PosTram[1], PosTram[2]);
			if ( IsPlayerInRangeOfPoint(playerid, 3.0, PosTram[0], PosTram[1], PosTram[2]) )
			{
				for (new i = 0; i < MAX_PLAYERS; i++)
				{
				    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsPlayerInVehicle(i, TramSFID) && GetPlayerVehicleSeat(i) == 0 )
				    {
				        return false;
				    }
			    }
			    PutPlayerInVehicle(playerid, TramSFID, 0);
				return true;
			}
			return false;
		}
	}
	return false;
}
public KickEx(playerid, option)
{
	printf("Playerid [%i] kiked OPTION: %i", playerid, option);
	SetTimerEx("KickTimer", 1000, false, "i", playerid);
}
forward KickTimer(playerid);
public KickTimer(playerid)
{
    Kick(playerid);
}
public ExistGarageInHouse(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
	    if ( Garages[houseid][i][Xg] != 0)
	    {
	        return true;
		}
	}
	return false;
}
public GetMyNextGarage(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
	    if (!Garages[houseid][i][WorldG])
	    {
	        return i;
		}
	}
	return -1;
}
public IsWorldOfGarage(world)
{
	for (new h = 1; h <= MAX_HOUSE; h++)
	{
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
		    if (Garages[h][i][WorldG] && Garages[h][i][WorldG] == world )
		    {
		        return true;
			}
		}
	}
	return false;
}
public CheckGarageRemove(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
	    if ( Garages[houseid][i][DeletedG] && Garages[houseid][i][WorldG] )
	    {
	        RemoveGarage(houseid, i);
		}
	}
}
public RemoveAllGarage(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
        RemoveGarage(houseid, i);
	}
}
public RemoveGarage(houseid, garageid)
{
    Garages[houseid][garageid][Xg]  = 0;
    Garages[houseid][garageid][Yg]  = 0;
    Garages[houseid][garageid][Zg]  = 0;
    Garages[houseid][garageid][ZZg] = 0;

    Garages[houseid][garageid][XgIn]  = 0;
    Garages[houseid][garageid][YgIn]  = 0;
    Garages[houseid][garageid][ZgIn]  = 0;
    Garages[houseid][garageid][ZZgIn] = 0;

    Garages[houseid][garageid][XgOut]  = 0;
    Garages[houseid][garageid][YgOut]  = 0;
    Garages[houseid][garageid][ZgOut]  = 0;
    Garages[houseid][garageid][ZZgOut] = 0;

    Garages[houseid][garageid][WorldG]        = 0;
    Garages[houseid][garageid][TypeGarageE]   = 0;
    Garages[houseid][garageid][DeletedG] = true;
}
public CreateGarage(playerid, houseid, desingid, TypeGarageEC)
{
	new NextGarage = GetMyNextGarage(houseid);
	if ( NextGarage != -1 )
	{
        Garages[houseid][NextGarage][Xg]  = GaragesDesing[desingid][Xg];
        Garages[houseid][NextGarage][Yg]  = GaragesDesing[desingid][Yg];
        Garages[houseid][NextGarage][Zg]  = GaragesDesing[desingid][Zg];
        Garages[houseid][NextGarage][ZZg] = GaragesDesing[desingid][ZZg];

        Garages[houseid][NextGarage][XgIn]  = GaragesDesing[desingid][XgIn];
        Garages[houseid][NextGarage][YgIn]  = GaragesDesing[desingid][YgIn];
        Garages[houseid][NextGarage][ZgIn]  = GaragesDesing[desingid][ZgIn];
        Garages[houseid][NextGarage][ZZgIn] = GaragesDesing[desingid][ZZgIn];

        Garages[houseid][NextGarage][XgOut]  = GaragesDesing[desingid][XgOut];
        Garages[houseid][NextGarage][YgOut]  = GaragesDesing[desingid][YgOut];
        Garages[houseid][NextGarage][ZgOut]  = GaragesDesing[desingid][ZgOut];
        Garages[houseid][NextGarage][ZZgOut] = GaragesDesing[desingid][ZZgOut];

        Garages[houseid][NextGarage][LockOut]   = true;
        Garages[houseid][NextGarage][LockIn] 	= true;

        Garages[houseid][NextGarage][TypeGarageE] = TypeGarageEC;
        Garages[houseid][NextGarage][WorldG] = random(999999 + 1000);

		Garages[houseid][NextGarage][DeletedG] = false;
        return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1183", "Ha está casa no se le puede agregar más garages!");
		return false;
	}
}
public ShowGarages(playerid, houseid)
{
	new GarageDialog[700];
	new TempConvert[50];
	new ConteoGarages = -1;
	for (new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++)
	{
	    if ( Garages[houseid][i][WorldG] )
	    {
			if ( ConteoGarages != -1 )
			{
			    if ( !Garages[houseid][i][DeletedG] )
			    {
		    		format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Garage ID[%i]", i);
	    		}
	    		else
	    		{
		    		format(TempConvert, sizeof(TempConvert), "\r\n{F50000}Garage ID[%i]", i);
				}
	    	}
			else
			{
			    if ( !Garages[houseid][i][DeletedG] )
			    {
		    		format(TempConvert, sizeof(TempConvert), "{00F50A}Garage ID[%i]", i);
	    		}
	    		else
	    		{
		    		format(TempConvert, sizeof(TempConvert), "{F50000}Garage ID[%i]", i);
				}
			}
	        strcat(GarageDialog, TempConvert, sizeof(GarageDialog));
	        ConteoGarages++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoGarages] = i;
        }
	}
	if (ConteoGarages != -1)
	{
		ShowPlayerDialogEx(playerid,68,DIALOG_STYLE_LIST,"{00A5FF}Garages - Casa", GarageDialog, "Ver", "Salir");
        PlayersDataOnline[playerid][SaveAfterAgenda][10] = houseid;
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Garages - Información", "{F0F0F0}No se encontrarón garages para está casa.", "Aceptar", "");
	}
}
public ShowDetailsGarage(playerid, houseid, garageid)
{
	new GarageDialog[700];
	format(GarageDialog, sizeof(GarageDialog), "{F50000}Garage ID[%i]\n{F50000}World ID[%i]\n{F50000}X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f\n{F50000}X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f\n{F50000}X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ",
	garageid,
	Garages[houseid][garageid][WorldG],
 	Garages[houseid][garageid][Xg],
	Garages[houseid][garageid][Yg],
	Garages[houseid][garageid][Zg],
	Garages[houseid][garageid][ZZg],
	Garages[houseid][garageid][XgOut],
	Garages[houseid][garageid][YgOut],
	Garages[houseid][garageid][ZgOut],
	Garages[houseid][garageid][ZZgOut],
	Garages[houseid][garageid][XgIn],
	Garages[houseid][garageid][YgIn],
	Garages[houseid][garageid][ZgIn],
	Garages[houseid][garageid][ZZgIn]);
	if ( Garages[houseid][garageid][DeletedG] )
	{
		ShowPlayerDialogEx(playerid,69,DIALOG_STYLE_MSGBOX,"{00A5FF}Garages - Detalles", GarageDialog, "No Borrar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,69,DIALOG_STYLE_MSGBOX,"{00A5FF}Garages - Detalles", GarageDialog, "Borrar", "Salir");
	}
}
public IsPlayerInGarageFun(playerid, &housesave, &garagesave)
{
    housesave 	= -1;
    garagesave 	= -1;

    if (!IsPlayerInAnyVehicle(playerid))
    {
        if (PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_GARAGE_CASA)
	    {
			garagesave = PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipoid];
			housesave = PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipoidextra];
		    return true;
		}
	    else if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_GARAGE_CASA_TYPE )
	    {
		    garagesave = PlayersData[playerid][IsPlayerInGarage];
			housesave = PlayersData[playerid][IsPlayerInHouse];
	        return true;
	    }
	    if ( garagesave != -1 )
	    {
	        return true;
		}
    }
	else
	{
	    if (PlayersData[playerid][IsPlayerInGarage] != -1 && PlayersData[playerid][IsPlayerInHouse])
        {
	        garagesave = PlayersData[playerid][IsPlayerInGarage];
			housesave = PlayersData[playerid][IsPlayerInHouse];
		    return true;
        }
        else
        {
            for (new h = 1; h <= MAX_HOUSE; h++)
			{
				for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
				{
			        if ( Garages[h][i][PickupidIn] )
					{
						if ( IsPlayerInRangeOfPoint(playerid, 3.0, Garages[h][i][XgOut], Garages[h][i][YgOut], Garages[h][i][ZgOut]))
						{
						    garagesave = i;
							housesave = h;
						    return true;
						}
					}
				}
			}
        }
	}
	SendInfoMessage(playerid, 0, "1184", "No te encuentras en ningún garage");
    return false;
}
public LoadGarageType()
{
	new PosZP;
	// 0
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2903.1259765625;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2437.4750976563;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.85000038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2905.6140136719;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2430.2329101563;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.85000038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2902.9169921875;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2430.9912109375;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.857509613037;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 1;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 1
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2784.8108;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2629.8093;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8203;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2779.5432128906;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2624.3771972656;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.8203125;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2779.5859375;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2628.2490234375;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.62031269073;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  2;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 2
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2783.6885;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2587.9719;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8271;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2784.5083007813;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2596.9426269531;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.8203125;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2783.9020996094;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2592.9458007813;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.620312690735;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 3;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 3
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2748.0764;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2636.8281;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 11.4423;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2742.8395996094;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2631.3056640625;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 11.442255020142;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2742.7019042969;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2635.9318847656;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 11.242255210876;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 4;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 4
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2748.6401;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2612.3386;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 11.3118;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2743.3200683594;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2617.4396972656;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 11.311784744263;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2742.7180175781;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2613.1538085938;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 11.111784934998;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 5;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 5
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2748.9348;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2604.1074;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 11.4423;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2754.2883300781;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2599.0959472656;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 11.442255020142;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2753.4196777344;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2603.6960449219;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 11.242255210876;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 6;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 6
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2796.1863;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2636.2778;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8206;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2788.9365234375;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2640.2585449219;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.820586204529;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2790.9309082031;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2637.2875976563;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.620586395264;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  7;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 7
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2767.0764;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2637.9668;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.9840;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2763.6127929688;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2635.6181640625;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.984013557434;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2767.2465820313;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2632.2570800781;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.784013748169;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 8;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 8
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2822.1416;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2629.0002;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8764;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2820.4426269531;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2638.3657226563;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.876442909241;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2823.1149902344;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2634.6164550781;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.676443099976;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  9;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 9
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2838.9561;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2630.1169,
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8291;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 360;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2837.3527832031;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2638.9331054688;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.836480140686;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2839.4033203125;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2635.3623046875;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.636480331421;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  10;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 10
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2846.4050;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2618.3450;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8322;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2843.1896972656;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2625.0754394531;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.832187652588;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2846.3708496094;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2624.4382324219;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.632187843323;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  11;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 11
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2807.9485;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2599.8291;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.9433;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2810.1206;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2602.1819;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 11;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2807.5671386719;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2602.951171875;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.73588848114;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  12;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 12
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2771.7998;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2523.4099;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.9007;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 360;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2767.9108886719;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2532.8200683594;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.893434524536;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2771.2622070313;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2530.3293457031;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.693676948547;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  13;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 13
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2762.2847;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2582.6541;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8351;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2758.4755859375;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2576.1965332031;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.835094451904;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2762.6628417969;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2576.6296386719;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.635094642639;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  14;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 14
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2770.2546;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2567.5901;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8380;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2777.4428710938;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2566.0651855469;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.837955474854;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2770.2780761719;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2563.0756835938;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.637955665588;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  15;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 15
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2755.8137;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2562.5759;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8329;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2750.3881835938;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2557.6606445313;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.832948684692;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2750.2775878906;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2562.1689453125;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.632948875427;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior] =  16;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 16
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2755.1431;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2512.7124;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 11.0956;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2753.5578613281;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2503.6491699219;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 11.095604896545;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2755.2993164063;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2507.4792480469;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.902544021606;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 17;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 17
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2743.9014;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2529.9314;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8694;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2740.2314453125;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2524.5197753906;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.862500190735;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2744.126953125;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2525.2817382813;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.66250038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 18;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 18
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2768.0227;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2446.9446;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.9000;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2773.4025878906;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2442.4389648438;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.89999961853;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2773.2446289063;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2447.0495605469;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.699999809265;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 90;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 19;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
	MAX_GARAGE_TYPE++;

	// 19
	TypeGarage[MAX_GARAGE_TYPE][PosX] = 2788.6536;
	TypeGarage[MAX_GARAGE_TYPE][PosY] = 2421.3318;
	TypeGarage[MAX_GARAGE_TYPE][PosZ] = 10.8548;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ] = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh] = 2784.8806152344;
	TypeGarage[MAX_GARAGE_TYPE][PosYh] = 2424.8825683594;
	TypeGarage[MAX_GARAGE_TYPE][PosZh] = 10.862500190735;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh] = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc] = 2788.6831054688;
	TypeGarage[MAX_GARAGE_TYPE][PosYc] = 2427.4235839844;
	TypeGarage[MAX_GARAGE_TYPE][PosZc] = 10.66250038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc] = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior] = 1;

	TypeGarage[MAX_GARAGE_TYPE][PickupId] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP, -1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh] = CreateGarageTipoDynamicPickup(1239, MAX_GARAGE_TYPE, TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh], -1);
}
public LinkVehicleToInteriorEx(vehicleid, interiorid)
{
    LinkVehicleToInterior(vehicleid, interiorid);
	DataCars[vehicleid][InteriorLast] = interiorid;
}
public SetVehicleVirtualWorldEx(vehicleid, worldid)
{
    SetVehicleVirtualWorld(vehicleid, worldid);
	DataCars[vehicleid][WorldLast] = worldid;
}
public IsPlayerNearGarage(vehicleid, playerid)
{
	new MyWorld = GetPlayerVirtualWorld(playerid);
	for (new h = 1; h <= MAX_HOUSE; h++)
	{
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
	        if ( Garages[h][i][PickupidIn] )
			{
				if ( IsPlayerInRangeOfPoint(playerid, 3.0,
								 Garages[h][i][XgOut],
								 Garages[h][i][YgOut],
								 Garages[h][i][ZgOut]) ||
				 	 IsPlayerInRangeOfPoint(playerid, 3.0,
								 TypeGarage[Garages[h][i][TypeGarageE]][PosXc],
								 TypeGarage[Garages[h][i][TypeGarageE]][PosYc],
								 TypeGarage[Garages[h][i][TypeGarageE]][PosZc])
								 &&
								 MyWorld == Garages[h][i][WorldG] &&
								 PlayersData[playerid][IsPlayerInHouse] &&
								 PlayersData[playerid][IsPlayerInGarage] >= 0 )
				 {
		            if ( !Garages[h][i][LockOut] || (PlayersDataOnline[playerid][AdminOn] && PlayersData[playerid][Admin] >= 4) )
		            {
						if ( IsPlayerInRangeOfPoint(playerid, 3.0,
										 TypeGarage[Garages[h][i][TypeGarageE]][PosXc],
										 TypeGarage[Garages[h][i][TypeGarageE]][PosYc],
										 TypeGarage[Garages[h][i][TypeGarageE]][PosZc])
										 &&
										 MyWorld == Garages[h][i][WorldG] &&
										 PlayersData[playerid][IsPlayerInHouse] &&
										 PlayersData[playerid][IsPlayerInGarage] >= 0 )
						{
							for (new s = 0; s < MAX_PLAYERS;s++)
							{
							    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
							    {
						        	SetPlayerVirtualWorldEx(s, 0);
						        	SetPlayerInteriorEx(s, 0);
						            PlayersData[s][IsPlayerInHouse]  =  0;
				                    PlayersData[s][IsPlayerInGarage] =  -1;
				                    OnPlayerExitHouse(s);
							    }
							}
				        	SetVehicleVirtualWorldEx(vehicleid, 0);
				        	LinkVehicleToInteriorEx(vehicleid, 0);
							SetVehiclePos(vehicleid, Garages[h][i][XgOut], Garages[h][i][YgOut],Garages[h][i][ZgOut]);
							SetVehicleZAngle(vehicleid, Garages[h][i][ZZgOut]);
			        	}
			        	else if ( MyWorld == 0 )
			        	{
							for (new s = 0; s < MAX_PLAYERS;s++)
							{
							    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
							    {
						        	SetPlayerVirtualWorldEx(s, Garages[h][i][WorldG]);
						        	SetPlayerInteriorEx(s, TypeGarage[Garages[h][i][TypeGarageE]][Interior]);
				            		PlayersData[s][IsPlayerInHouse]  = h;
		                    		PlayersData[s][IsPlayerInGarage] = i;
									OnPlayerEnterInHouse(s);
							    }
							}
				        	SetVehicleVirtualWorldEx(vehicleid, Garages[h][i][WorldG]);
				        	LinkVehicleToInteriorEx(vehicleid, TypeGarage[Garages[h][i][TypeGarageE]][Interior]);
							SetVehiclePos(vehicleid, TypeGarage[Garages[h][i][TypeGarageE]][PosXc], TypeGarage[Garages[h][i][TypeGarageE]][PosYc], TypeGarage[Garages[h][i][TypeGarageE]][PosZc]);
							SetVehicleZAngle(vehicleid, TypeGarage[Garages[h][i][TypeGarageE]][PosZZc]);
			        	}
						return true;
		        	}
		        	else
		        	{
						GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
						break;
					}
				}
			}
		}
	}
	return false;
}
public IsPlayerNearGarageEx(vehicleid, playerid)
{
	new MyWorld = GetPlayerVirtualWorld(playerid);
	for (new i = 0; i <= MAX_GARAGES_EX; i++)
	{
		if ( IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXOne],
						 GaragesEx[i][PosYOne],
						 GaragesEx[i][PosZOne]) && MyWorld == WORLD_DEFAULT_INTERIOR ||
		 IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXTwo],
						 GaragesEx[i][PosYTwo],
						 GaragesEx[i][PosZTwo]) )
		 {
            if ( !GaragesEx[i][Lock] || PlayersDataOnline[playerid][AdminOn] )
            {
				if ( IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXOne],
						 GaragesEx[i][PosYOne],
						 GaragesEx[i][PosZOne])  )
				{
		        	SetVehicleVirtualWorldEx(vehicleid, 0);
		        	LinkVehicleToInteriorEx(vehicleid, 0);
					SetVehiclePos(vehicleid, GaragesEx[i][PosXTwo], GaragesEx[i][PosYTwo],GaragesEx[i][PosZTwo]);
					SetVehicleZAngle(vehicleid, GaragesEx[i][PosZZTwo]);
					for (new s = 0; s < MAX_PLAYERS;s++)
					{
					    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
					    {
				        	SetPlayerVirtualWorldEx(s, 0);
				        	SetPlayerInteriorEx(s, 0);
					    }
					}
	        	}
	        	else if ( MyWorld == 0 )
	        	{
		        	SetVehicleVirtualWorldEx(vehicleid, GaragesEx[i][World]);
		        	LinkVehicleToInteriorEx(vehicleid, GaragesEx[i][Interior]);
					SetVehiclePos(vehicleid, GaragesEx[i][PosXOne], GaragesEx[i][PosYOne], GaragesEx[i][PosZOne]);
					SetVehicleZAngle(vehicleid, GaragesEx[i][PosZZOne]);

					for (new s = 0; s < MAX_PLAYERS;s++)
					{
					    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
					    {
				        	SetPlayerVirtualWorldEx(s, GaragesEx[i][World]);
				        	SetPlayerInteriorEx(s, GaragesEx[i][Interior]);
					    }
					}
	        	}
				return true;
        	}
        	else
        	{
				GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
				break;
			}
		}
	}
	return false;
}
public IsPlayerInGarageEx(playerid)
{
	if ( PickupIndex[PlayersDataOnline[playerid][InPickup]][Tipo] == PICKUP_TYPE_GARAGE_EX )
	{
	    return PickupIndex[ PlayersDataOnline[playerid][InPickup] ][Tipoid];
	}
	else if (IsPlayerInAnyVehicle(playerid))
	{
	    new MyWorld = GetPlayerVirtualWorld(playerid);
	    for (new g=0; g!=MAX_GARAGES_EX; g++)
	    {
	        if (IsPlayerInRangeOfPoint(playerid, 3.0, GaragesEx[g][PosXTwo], GaragesEx[g][PosYTwo], GaragesEx[g][PosZTwo]) ||
	            IsPlayerInRangeOfPoint(playerid, 3.0, GaragesEx[g][PosXOne], GaragesEx[g][PosYOne], GaragesEx[g][PosZOne]) && MyWorld == GaragesEx[g][World] )
			{
			    return g;
			}
	    }
	}
	return -1;
}
public LoadGarages()
{
	for (new h = 1; h <= MAX_HOUSE; h++)
	{
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
	        if ( Garages[h][i][WorldG] )
	        {
	            new pickupid = CreateDynamicPickup(1239, 1, Garages[h][i][Xg], Garages[h][i][Yg], Garages[h][i][Zg], WORLD_NORMAL, 0);
	            PickupIndex[pickupid][Tipo] = PICKUP_TYPE_GARAGE_CASA;
	            PickupIndex[pickupid][Tipoid] = i;
	            PickupIndex[pickupid][Tipoidextra] = h;

		        Garages[h][i][PickupidOut] = pickupid;

		        new interiorcasa = TypeHouse[ HouseData[h][TypeHouseId] ][Interior];

		        pickupid = CreateDynamicPickup(1239, 1, Garages[h][i][XgIn], Garages[h][i][YgIn], Garages[h][i][ZgIn], h, interiorcasa);
	            PickupIndex[pickupid][Tipo] = PICKUP_TYPE_GARAGE_CASA;
	            PickupIndex[pickupid][Tipoid] = i;
	            PickupIndex[pickupid][Tipoidextra] = h;

		        Garages[h][i][PickupidIn] = pickupid;

	            MAX_GARAGES++;
			}
		}
	}
}
public ExistGarageForHouse(houseid, garageid)
{
    if ( Garages[houseid][garageid][WorldG] )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public CheckAsignados(playerid)
{
	if ( PlayersData[playerid][Faccion] != CIVIL )
	{
		for (new i = 0; i < 3;i++)
		{
			if ( PlayersData[playerid][Asignados][i] && !IsVehicleMyFaccion(playerid, PlayersData[playerid][Asignados][i])  )
			{
				PlayersData[playerid][Asignados][i] = false;
			}
		}
	}
	else
	{
		PlayersData[playerid][Asignados][0] = false;
		PlayersData[playerid][Asignados][1] = false;
		PlayersData[playerid][Asignados][2] = false;
	}
}
public IsMyCarAsignados(playerid, vehicleid)
{
	for (new i = 0; i < 3;i++)
	{
		if ( PlayersData[playerid][Asignados][i] == vehicleid  )
		{
			return true;
		}
	}
	return false;
}
public AddAsignados(playerid, vehicleid)
{
	for (new i = 0; i < 3;i++)
	{
	    if ( PlayersData[playerid][Asignados][i] == vehicleid )
	    {
	        return 2;
		}
		if ( !PlayersData[playerid][Asignados][i]  )
		{
		    PlayersData[playerid][Asignados][i] = vehicleid;
			return true;
		}
	}
	return false;
}
public RemoveAsignados(playerid, asignarid)
{
	if ( PlayersData[playerid][Asignados][asignarid] )
	{
		new TempvehicleidA = PlayersData[playerid][Asignados][asignarid];
	    PlayersData[playerid][Asignados][asignarid] = false;
		return TempvehicleidA;
	}
	return false;
}
public ShowAsignados(playerid, playeridshow)
{
	new MsgAsignadosShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::Vehículos Autorizados:::::............");
	for (new i = 0; i < 3; i++)
	{
	    format(MsgAsignadosShow, sizeof(MsgAsignadosShow), "Vehículo %i: %s", i + 1, DataCars[PlayersData[playerid][Asignados][i]][MatriculaString]);
	    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgAsignadosShow);
	}
}
public ShowHouseFriends(playerid, houseid)
{
	new ConteoAgenda = -1;
	new HouseFriendsDialog[700];
    new TempConvert[150];
	for (new i = 0; i < MAX_HOUSE_FRIENDS; i++)
	{
		if ( ConteoAgenda != -1 )
		{
		    if ( strlen(HouseFriends[houseid][i][Name]) > 2 )
		    {
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Llaves %i: {"COLOR_AZUL"}%s", i + 1, HouseFriends[houseid][i][Name]);
	    	}
	    	else
	    	{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Llaves %i: {F50000}Nadie", i + 1);
			}
    	}
		else
		{
		    if ( strlen(HouseFriends[houseid][i][Name]) > 2 )
		    {
		    	format(TempConvert, sizeof(TempConvert), "{00F50A}Llaves %i: {"COLOR_AZUL"}%s", i + 1,  HouseFriends[houseid][i][Name]);
	    	}
	    	else
	    	{
		    	format(TempConvert, sizeof(TempConvert), "{00F50A}Llaves %i: {F50000}Nadie", i + 1);
			}
		}
        strcat(HouseFriendsDialog, TempConvert, sizeof(HouseFriendsDialog));
        ConteoAgenda++;
	}
	ShowPlayerDialogEx(playerid,70,DIALOG_STYLE_LIST,"{00A5FF}Casa - Llaves de los Amigos", HouseFriendsDialog, "Quitar", "Salir");
    PlayersDataOnline[playerid][SaveAfterAgenda][0] = houseid;
}
public IsPlayerInHouseFriend(playerid, houseid)
{
	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
		if ( strfind(HouseFriends[houseid][i][Name], PlayersDataOnline[playerid][NameOnline], false) == 0 && strlen(HouseFriends[houseid][i][Name]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
		{
		    return i;
		}
	}
	return -1;
}
public RemoveAllHouseFriend(houseid)
{
	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
		RemovePlayerHouseFriend(houseid, i);
	}
}
public RemovePlayerHouseFriend(houseid, housefriendid)
{
	if ( strlen(HouseFriends[houseid][housefriendid][Name]) > 2 )
	{
	    new LastFriend[MAX_PLAYER_NAME];
		format(LastFriend, MAX_PLAYER_NAME, "%s", HouseFriends[houseid][housefriendid][Name]);
		format(HouseFriends[houseid][housefriendid][Name], MAX_PLAYER_NAME, "No");
		new FriendID = IsPlayerConnectedEx(LastFriend);
		if ( FriendID != -1 )
		{
		    UpdateSpawnPlayer(FriendID);
		}
		return true;
	}
	else
	{
	    return false;
	}
}
public AddPlayerHouseFriend(playerid, houseid)
{
	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
	    if ( strlen(HouseFriends[houseid][i][Name]) <= 2 )
	    {
			format(HouseFriends[houseid][i][Name], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
	        return true;
	    }
	}
	return false;
}
public LoadTypeArticulosR()
{
	format(Articulos[A_NADA][NameA], MAX_PLAYER_NAME, "Nada");
	Articulos[A_NADA][Vida] = 0.0;

	format(Articulos[A_CERVEZA][NameA], MAX_PLAYER_NAME, "Cerveza");
	Articulos[A_CERVEZA][Vida] = 20.0;

	format(Articulos[A_VODKA][NameA], MAX_PLAYER_NAME, "Vodka");
	Articulos[A_VODKA][Vida] = 15.0;

	format(Articulos[A_REFRESCO][NameA], MAX_PLAYER_NAME, "Refresco");
	Articulos[A_REFRESCO][Vida] = 10.0;

	format(Articulos[A_POLLO][NameA], MAX_PLAYER_NAME, "Pollo crudo");
	Articulos[A_POLLO][Vida] = 0.0;

	format(Articulos[A_POLLO_C][NameA], MAX_PLAYER_NAME, "Pollo cocinado");
	Articulos[A_POLLO_C][Vida] = 30.0;

	format(Articulos[A_PAPAS][NameA], MAX_PLAYER_NAME, "Papas");
	Articulos[A_PAPAS][Vida] = 0.0;

	format(Articulos[A_PAPAS_C][NameA], MAX_PLAYER_NAME, "Papas cocinadas");
	Articulos[A_PAPAS_C][Vida] = 15.0;

	format(Articulos[A_ARROZ][NameA], MAX_PLAYER_NAME, "Arroz");
	Articulos[A_ARROZ][Vida] = 0.0;

	format(Articulos[A_ARROZ_C][NameA], MAX_PLAYER_NAME, "Arroz Cocinado");
	Articulos[A_ARROZ_C][Vida] = 35.0;
}
public AddArticuloBolsa(playerid, articuloid, cantidad)
{
	new AritcleEmpty = IsArticuloInBolsa(playerid, articuloid);
	if ( AritcleEmpty == -1 )
	{
		for(new i = 0; i<4; i++)
		{
		    if (!PlayersData[playerid][Bolsa][i])
		    {
	 			PlayersData[playerid][Bolsa][i] = articuloid;
			    PlayersData[playerid][BolsaC][i] += cantidad;
				return true;
			}
		}
	}
	else
	{
        if ( IsNotFullBolsa(playerid, AritcleEmpty) )
        {
		    PlayersData[playerid][Bolsa][AritcleEmpty] = articuloid;
		    PlayersData[playerid][BolsaC][AritcleEmpty] += cantidad;
		    return true;
	    }
	    else
	    {
	        return 2;
		}
	}
	return false;
}
public RemoveArticuloBolsa(playerid, bolsaid)
{
	PlayersData[playerid][Bolsa][bolsaid] = false;
	PlayersData[playerid][BolsaC][bolsaid] = 0;
}
public IsArticuloInBolsa(playerid, articuloid)
{
	for(new i = 0; i<4; i++)
	{
	    if (PlayersData[playerid][Bolsa][i] == articuloid)
	    {
			return i;
		}
	}
	return -1;
}
public CleanArticulosBolsa(playerid)
{
	for(new i = 0; i<4; i++)
	{
		RemoveArticuloBolsa(playerid, i);
	}
	return false;
}
public IsNotFullBolsa(playerid, bolsaid)
{
	if ( PlayersData[playerid][BolsaC][bolsaid] < 16 )
	{
		return true;
	}
	else
	{
	    return false;
	}
}
public GiveArticlePlayerToPlayer(playerid, playeridtogive, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( PlayersData[playeridtogive][HaveBolsa] )
		{
			if ( bolsaid > 0 && bolsaid  < 5 )
   			{
			    bolsaid--;
			    if ( PlayersData[playerid][Bolsa][bolsaid] )
			    {
				    switch (AddArticuloBolsa(playeridtogive, PlayersData[playerid][Bolsa][bolsaid], PlayersData[playerid][BolsaC][bolsaid]))
				    {
				        case 0:
				        {
							SendInfoMessage(playerid, 0, "1236", "Al jugador que desea darle un artículo, tiene la bolsa llena!");
						}
						case 1:
						{
							new MsgGiveArticle[MAX_TEXT_CHAT];
							new MsgGiveArticleME[MAX_TEXT_CHAT];
							new MsgGiveArticleYOU[MAX_TEXT_CHAT];
					        format(MsgGiveArticle, sizeof(MsgGiveArticle), "le da %s a %s", Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA], PlayersDataOnline[playeridtogive][NameOnlineFix]);
					        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "Le has dado %i %s a %s.", PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA], PlayersDataOnline[playeridtogive][NameOnlineFix]);
					        format(MsgGiveArticleYOU, sizeof(MsgGiveArticleYOU), "%s te ha dado %i %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
					        Acciones(playerid, 8, MsgGiveArticle);
					        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);
					        SendInfoMessage(playeridtogive, 2, "0", MsgGiveArticleYOU);
					        RemoveArticuloBolsa(playerid, bolsaid);
						}
						case 2:
						{
		       				SendInfoMessage(playerid, 0, "1245", "Al jugador que le deseas dar este artículo ya no puede llevar más de esos en su bolsa");
						}
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1237", "No tienes nada en esa parte de la bolsa!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1242", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1238", "Al jugador que desea darle un artículo no tiene bolsa");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1239", "Usted no tiene bolsa!");
	}
}
public DropArticlePlayerToPlayer(playerid, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( bolsaid > 0 && bolsaid  < 5 )
		{
		    bolsaid--;
		    if ( PlayersData[playerid][Bolsa][bolsaid] )
		    {
				new MsgGiveArticle[MAX_TEXT_CHAT];
				new MsgGiveArticleME[MAX_TEXT_CHAT];
		        format(MsgGiveArticle, sizeof(MsgGiveArticle), "ha tirado %s al suelo", Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
		        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "Tiraste %i %s al suelo.", PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
		        Acciones(playerid, 8, MsgGiveArticle);
		        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);
		        RemoveArticuloBolsa(playerid, bolsaid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "1240", "No tienes nada en esa parte de la bolsa!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1243", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1241", "Usted no tiene bolsa!");
	}
}
public AddArticleRefrigeradorCocinar(playerid, houseid, lastrefrigeradorid, articleid)
{
	for(new i = 0; i<MAX_REFRIGERADOR_SLOTS_COUNT; i++)
	{
	    if ( PlayersData[playerid][IsPlayerInHouse] )
	    {
		    if (!Refrigerador[houseid][Articulo][i])
		    {
		        Refrigerador[houseid][Articulo][i] = articleid;
		        Refrigerador[houseid][Cantidad][i] += 1;
		        Refrigerador[houseid][Cantidad][lastrefrigeradorid]--;
		        if ( !Refrigerador[houseid][Cantidad][lastrefrigeradorid] )
		        {
		            Refrigerador[houseid][Articulo][lastrefrigeradorid] = false;
				}
				return true;
			}
		}
		else
		{
		    if (!LRefrigerador[houseid][Articulo][i])
		    {
		        LRefrigerador[houseid][Articulo][i] = articleid;
		        LRefrigerador[houseid][Cantidad][i] += 1;
		        LRefrigerador[houseid][Cantidad][lastrefrigeradorid]--;
		        if ( !LRefrigerador[houseid][Cantidad][lastrefrigeradorid] )
		        {
		            LRefrigerador[houseid][Articulo][lastrefrigeradorid] = false;
				}
				return true;
			}
		}
	}
	return false;
}
public AddArticleRefrigeradorFun(playerid, houseid, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( bolsaid > 0 && bolsaid  < 5 )
		{
		    bolsaid--;
			if ( PlayersData[playerid][Bolsa][bolsaid] )
			{
				for(new i = 0; i<MAX_REFRIGERADOR_SLOTS_COUNT; i++)
				{
				    if (!Refrigerador[houseid][Articulo][i])
				    {
						new MsgGiveArticle[MAX_TEXT_CHAT];
						new MsgGiveArticleME[MAX_TEXT_CHAT];
				        format(MsgGiveArticle, sizeof(MsgGiveArticle), "deja %s en el refrigerador", Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
				        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "has dejado %i %s del refrigerador.", PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
				        Acciones(playerid, 8, MsgGiveArticle);
				        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);

				        Refrigerador[houseid][Articulo][i] = PlayersData[playerid][Bolsa][bolsaid];
				        Refrigerador[houseid][Cantidad][i] += PlayersData[playerid][BolsaC][bolsaid];
				        RemoveArticuloBolsa(playerid, bolsaid);
						return true;
					}
				}
				return -1;
			}
			else
			{
				SendInfoMessage(playerid, 0, "1249", "No tienes nada en esa parte de la bolsa!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1253", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1248", "Usted no tiene bolsa!");
	}
	return false;
}
public RemoveArticleRefrigeradorFun(playerid, houseid, refrigeradorid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( refrigeradorid > 0 && refrigeradorid  < 11 )
		{
		    refrigeradorid--;
		    if ( Refrigerador[houseid][Articulo][refrigeradorid] )
		    {
			    switch (AddArticuloBolsa(playerid, Refrigerador[houseid][Articulo][refrigeradorid], Refrigerador[houseid][Cantidad][refrigeradorid]))
			    {
			        case 0:
			        {
						SendInfoMessage(playerid, 0, "1246", "La bolsa se encuentra llena!");
					}
					case 1:
					{
						new MsgGiveArticle[MAX_TEXT_CHAT];
						new MsgGiveArticleME[MAX_TEXT_CHAT];
				        format(MsgGiveArticle, sizeof(MsgGiveArticle), "coge %s del refrigerador", Articulos[Refrigerador[houseid][Articulo][refrigeradorid]][NameA]);
				        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "has cogido %i %s del refrigerador.", Refrigerador[houseid][Cantidad][refrigeradorid], Articulos[Refrigerador[houseid][Articulo][refrigeradorid]][NameA]);
				        Acciones(playerid, 8, MsgGiveArticle);
				        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);

					    Refrigerador[houseid][Articulo][refrigeradorid] = false;
						Refrigerador[houseid][Cantidad][refrigeradorid] = 0;
					}
					case 2:
					{
		   				SendInfoMessage(playerid, 0, "1245", "No te caben más de esos artículos en la bolsa!");
					}
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1254", "No hay nada en esa parte del refrigerador!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1258", "El número de Slot del refrigerador debe estar comprendido entre 1 y 10");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1247", "Usted no tiene bolsa!");
	}
}
public EatArticle(playerid, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
	    if ( GetPlayerInteriorEx(playerid) !=  WORLD_NORMAL )
	    {
			if ( bolsaid > 0 && bolsaid  < 5 )
			{
			    bolsaid--;
			    if ( PlayersData[playerid][Bolsa][bolsaid] )
			    {
			        if ( UseAritcle(playerid, PlayersData[playerid][Bolsa][bolsaid]) )
			        {
		                PlayersData[playerid][BolsaC][bolsaid]--;
		                if ( !PlayersData[playerid][BolsaC][bolsaid] )
		                {
		                    RemoveArticuloBolsa(playerid, bolsaid);
		                    return true;
						}
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1257", "No hay nada en esa parte de la bolsa!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1256", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1369", "Sólo puedes usar artículos de la bolsa en interiores.");
		}

	}
	else
	{
		SendInfoMessage(playerid, 0, "1255", "Usted no tiene bolsa!");
	}
	return false;
}
public EatArticleRefrigerador(playerid, houseid, refrigeradorid)
{
	if ( refrigeradorid > 0 && refrigeradorid  < 11 )
	{
	    refrigeradorid--;
	    if( PlayersData[playerid][IsPlayerInHouse] )
	    {
		    if ( Refrigerador[houseid][Articulo][refrigeradorid] )
		    {
		        if ( UseAritcle(playerid, Refrigerador[houseid][Articulo][refrigeradorid]) )
		        {
		            Refrigerador[houseid][Cantidad][refrigeradorid]--;
		            if ( !Refrigerador[houseid][Cantidad][refrigeradorid] )
		            {
		                Refrigerador[houseid][Articulo][refrigeradorid] = false;
		                return true;
					}
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1268", "No hay nada en esa parte del refrigerador!");
			}
		}
		else
		{
		    if ( LRefrigerador[houseid][Articulo][refrigeradorid] )
		    {
		        if ( UseAritcle(playerid, LRefrigerador[houseid][Articulo][refrigeradorid]) )
		        {
		            LRefrigerador[houseid][Cantidad][refrigeradorid]--;
		            if ( !LRefrigerador[houseid][Cantidad][refrigeradorid] )
		            {
		                LRefrigerador[houseid][Articulo][refrigeradorid] = false;
		                return true;
					}
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1268", "No hay nada en esa parte del refrigerador!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1269", "El número de Slot del refrigerador debe estar comprendido entre 1 y 10");
	}
	return false;
}
public UseAritcle(playerid, articleid)
{
	switch(articleid)
	{
	    case A_CERVEZA:
	    {
	        Acciones(playerid, 8, "abre una cerveza");
			SetPlayerSpecialAction(playerid, 22); // CERVEZA
		}
	    case A_VODKA:
	    {
	        Acciones(playerid, 8, "abre una botella vodka");
	        SetPlayerSpecialAction(playerid, 22); // WINE
		}
	    case A_REFRESCO:
	    {
	        Acciones(playerid, 8, "abre un refresco");
			SetPlayerSpecialAction(playerid, 23); // SPUNK
		}
	    case A_POLLO_C:
	    {
	        Acciones(playerid, 8, "come pollo");
		}
	    case A_PAPAS_C:
	    {
	        Acciones(playerid, 8, "come papas");
		}
	    case A_ARROZ_C:
	    {
	        Acciones(playerid, 8, "come arroz");
		}
		default:
		{
			SendInfoMessage(playerid, 0, "1260", "Este artículo no se puede usar!");
			return false;
		}
	}
    SetPlayerHealthEx(playerid, Articulos[A_POLLO_C][Vida]);
	return true;
}
public Cocinar(playerid, houseid, refrigeradorid)
{
	if ( refrigeradorid > 0 && refrigeradorid  < 11 )
	{
	    refrigeradorid--;
	    if( PlayersData[playerid][IsPlayerInHouse] )
	    {
		    if ( Refrigerador[houseid][Articulo][refrigeradorid] )
		    {
		        if ( Refrigerador[houseid][Articulo][refrigeradorid] == A_POLLO ||
		             Refrigerador[houseid][Articulo][refrigeradorid] == A_PAPAS ||
		             Refrigerador[houseid][Articulo][refrigeradorid] == A_ARROZ )
	            {
	                new ArticuloN = Refrigerador[houseid][Articulo][refrigeradorid];
					if (AddArticleRefrigeradorCocinar(playerid, houseid, refrigeradorid, Refrigerador[houseid][Articulo][refrigeradorid] + 1) )
					{
						new MsgGiveArticle[MAX_TEXT_CHAT];
				        format(MsgGiveArticle, sizeof(MsgGiveArticle), "cocina %s", Articulos[ArticuloN][NameA]);
				        Acciones(playerid, 8, MsgGiveArticle);

						if ( !Refrigerador[houseid][Cantidad][refrigeradorid] )
						{
						    Refrigerador[houseid][Articulo][refrigeradorid] = false;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1262", "No hay más espacio para guardar la comida cocinada en el refrigerador!");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1263", "Este artículo no se puede cocinar!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1264", "No hay nada en esa parte del refrigerador!");
			}
		}
		else
		{
		    if ( LRefrigerador[houseid][Articulo][refrigeradorid] )
		    {
		        if ( LRefrigerador[houseid][Articulo][refrigeradorid] == A_POLLO ||
		             LRefrigerador[houseid][Articulo][refrigeradorid] == A_PAPAS ||
		             LRefrigerador[houseid][Articulo][refrigeradorid] == A_ARROZ )
	            {
	                new ArticuloN = LRefrigerador[houseid][Articulo][refrigeradorid];
					if (AddArticleRefrigeradorCocinar(playerid, houseid, refrigeradorid, LRefrigerador[houseid][Articulo][refrigeradorid] + 1) )
					{
						new MsgGiveArticle[MAX_TEXT_CHAT];
				        format(MsgGiveArticle, sizeof(MsgGiveArticle), "cocina %s", Articulos[ArticuloN][NameA]);
				        Acciones(playerid, 8, MsgGiveArticle);

						if ( !LRefrigerador[houseid][Cantidad][refrigeradorid] )
						{
						    LRefrigerador[houseid][Articulo][refrigeradorid] = false;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1262", "No hay más espacio para guardar la comida cocinada en el refrigerador!");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1263", "Este artículo no se puede cocinar!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1264", "No hay nada en esa parte del refrigerador!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1265", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
	}
}
public LoadIncendios()
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sIncendios.ulp", DIR_MISC);
	if ( fexist(DirBD) )
	{
	    new FireData[MAX_PLAYER_DATA];
	    new FireDataSlots[MAX_GASOLINERAS_COUNT][30];
		new File:LoadFire = fopen(DirBD, io_read);
		fread(LoadFire, FireData);
		fclose(LoadFire);

		new PosSplitAfter = 0;
		for ( new i = 0; i < MAX_INCENDIOS; i++ )
		{
			PosSplitAfter = strfind(FireData, ",", false);
			strmid(FireDataSlots[i], FireData, 0, PosSplitAfter, sizeof(FireData));
			strdel(FireData, 0, PosSplitAfter + 1);
			Incendios[i][HouseidI]	= strval(FireDataSlots[i]);
			if (Incendios[i][HouseidI])
			{
				CreateFire(Incendios[i][HouseidI], i);
			}
		}
	}
	else
	{
	    print(" ERROR AL CARGAR LOS INCENDIOS !!!!!!");
	}
}
public SaveIncendios()
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sIncendios.ulp", DIR_MISC);

	new FireData[MAX_PLAYER_DATA];
	new TempConvert[MAX_PLAYER_DATA];
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
	    format(TempConvert, sizeof(TempConvert), "%i,", Incendios[i][HouseidI]);
        strcat(FireData, TempConvert, sizeof(TempConvert));
	}

	new File:SaveFire = fopen(DirBD, io_write);
	fwrite(SaveFire, FireData);
	fclose(SaveFire);
}
public GetFireNext()
{
	for (new i; i < MAX_INCENDIOS; i++)
	{
		if ( !Incendios[i][HouseidI] )
		{
		    return i;
		}
	}
	return -1;
}
public CreateFire(houseid, fireid)
{
	if ( fireid != -1 )
	{
	    Incendios[fireid][HouseidI] = houseid;

		Incendios[fireid][ObjectsIDIn][14] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][13] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][12] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][11] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][10] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][9] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][8] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][7] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][6] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][5] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][4] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][3] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][2] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][1] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][0] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);

		Incendios[fireid][ObjectsIDOut][14] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][13] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][12] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][11] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][10] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][9] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][8] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][7] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][6] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][5] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][4] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][3] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][2] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][1] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + 2, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][0] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] -2, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		return true;
	}
	else
	{
	    return false;
	}
}
public DestroyFire(fireid)
{
	if ( Incendios[fireid][HouseidI] )
	{
		Incendios[fireid][HouseidI] = false;
		for (new i = 0; i < 15; i++)
		{
		    if ( Incendios[fireid][ObjectsIDIn][i] )
		    {
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDIn][i]);
			    Incendios[fireid][ObjectsIDIn][i] = false;
			}
			if ( Incendios[fireid][ObjectsIDOut][i] )
			{
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDOut][i]);
			    Incendios[fireid][ObjectsIDOut][i] = false;
			}
		}
		return true;
	}
	{
		return false;
	}
}
public IsPlayerNearFire(playerid)
{
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
		if ( Incendios[i][HouseidI] )
		{
		    new Float:PosFire[3];
		    if ( PlayersData[playerid][IsPlayerInHouse] == Incendios[i][HouseidI])
		    {
		        PosFire[0] = TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosX];
				PosFire[1] = TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosY];
				PosFire[2] = TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosZ];
			}
			else
			{
		        PosFire[0] = HouseData[Incendios[i][HouseidI]][PosX];
				PosFire[1] = HouseData[Incendios[i][HouseidI]][PosY];
				PosFire[2] = HouseData[Incendios[i][HouseidI]][PosZ];
			}
			if ( IsPlayerInRangeOfPoint(playerid, 20.0, PosFire[0], PosFire[1], PosFire[2]) )
			{
			    return i;
			}
		}
	}
	SendInfoMessage(playerid, 0, "1273", "Usted no se encuentra cerca de un incendio");
	return -1;
}
public DestroyParticleFire(fireid)
{
	for (new i = 0; i < 15; i++)
	{
	    if ( Incendios[fireid][ObjectsIDIn][i] )
	    {
		    if ( Incendios[fireid][ObjectsIDIn][i] )
		    {
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDIn][i]);
			    Incendios[fireid][ObjectsIDIn][i] = false;
			}
			if ( Incendios[fireid][ObjectsIDOut][i] )
			{
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDOut][i]);
			    Incendios[fireid][ObjectsIDOut][i] = false;
			}
			break;
		}

	}
	if ( !Incendios[fireid][ObjectsIDOut][14] )
	{
		DestroyFire(fireid);
	}
}
public ShowIncendios(playerid)
{
	new IncendiosDialog[700];
	new TempConvert[60];
	new ConteoFire = -1;
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
	    if ( Incendios[i][HouseidI] )
	    {
			if ( ConteoFire != -1 )
			{
			    format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][HouseidI]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][HouseidI]);
			}
	        strcat(IncendiosDialog, TempConvert, sizeof(IncendiosDialog));
	        ConteoFire++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoFire] = i;
        }
	}
	if (ConteoFire != -1)
	{
		ShowPlayerDialogEx(playerid,71,DIALOG_STYLE_LIST,"{00A5FF}Incendios - Lista", IncendiosDialog, "Destruir", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Incendios - Información", "{F0F0F0}No se encontrarón incendios.", "Aceptar", "");
	}
}
public CheckFire(playerid)
{
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
	    if ( Incendios[i][HouseidI] )
	    {
			if ( GetPlayerVirtualWorld(playerid) == Incendios[i][HouseidI] && IsPlayerInRangeOfPoint(playerid, 3.0, TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosX], TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosY], TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosZ]) ||
			     IsPlayerInRangeOfPoint(playerid, 3.0, HouseData[Incendios[i][HouseidI]][PosX], HouseData[Incendios[i][HouseidI]][PosY], HouseData[Incendios[i][HouseidI]][PosZ]) )
			{
			    SetPlayerHealthEx(playerid, -5);
			}
	    }
    }
}
public RandomFire()
{
	new HouseID = random(MAX_HOUSE) + 1;
    if ( strlen(HouseData[HouseID][Dueno]) != 2 )
    {
		if ( CreateFire(HouseID, GetFireNext()) )
		{
			printf("[Incendios]: La casa ID[%i] se incendió!", HouseID);
		}
    }
}
public RemoveCallSAMD(callid, samdid)
{
	CallSAMD[samdid][callid][Number] 			= 0;
}
public AddCallSAMD(departament, city, number, type)
{
	new callid;
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( !CallSAMD[departament][i][Number] )
		{
		    CallSAMD[departament][i][City] = city;
		    CallSAMD[departament][i][Type] = type;
		    callid = i;
		    break;
		}
	}
	CallSAMD[departament][callid][Number] = number;
}
public ShowConnectedRequest(playerid)
{
	if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
	{
		ShowPlayerDialogEx(playerid,73,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Emergencias", "{F0F0F0}¿Qué solicita?\n\n{F5FF00}LSMD {F0F0F0}presta los siguientes servicios:", "Médico", "Bombero");
	}
	else
	{
		ShowPlayerDialogEx(playerid,73,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Emergencias", "{F0F0F0}¿Qué solicita?\n\n{F5FF00}SFMD {F0F0F0}presta los siguientes servicios:", "Médico", "Bombero");
	}
}
public ShowConnectedSAMD(playerid)
{
	if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
	{
		ShowPlayerDialogEx(playerid,72,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Emergencias", "{F0F0F0}Bienvenido a el departamento de emergencias {F5FF00}LSMD", "Comenzar", "Colgar");
	}
	else
	{
		ShowPlayerDialogEx(playerid,72,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Emergencias", "{F0F0F0}Bienvenido a el departamento de emergencias {F5FF00}SFMD", "Comenzar", "Colgar");
	}
}
public ShowCallSAMD(playerid)
{
	new CallDialog[750];
	new TempConvert[45];
	new ConteoCall = -1;
	for (new i = 0; i < MAX_CALL_POLICE_COUNT; i++)
	{
	    if ( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Number] && PlayersDataOnline[playerid][NumberCallPublic] == CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Type] )
	    {
			if ( ConteoCall != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Número: {00F50A}%i (%s)",
				CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Number],
				Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Número: {00F50A}%i (%s)",
				CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Number],
			    Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCall] = i;
        }
	}
	if (ConteoCall != -1)
	{
	    if ( PlayersDataOnline[playerid][NumberCallPublic] )
	    {
			ShowPlayerDialogEx(playerid,139,DIALOG_STYLE_LIST,"{00A5FF}Médicos - Centro de Llamadas", CallDialog, "Opciones", "Salir");
		}
		else
		{
			ShowPlayerDialogEx(playerid,139,DIALOG_STYLE_LIST,"{00A5FF}Bomberos - Centro de Llamadas", CallDialog, "Opciones", "Salir");
		}
	}
	else
	{
	    if  ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
	    {
			ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}No se encontrarón llamadas! Intente más tarde.", "Aceptar", "");
		}
		else
		{
			ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}No se encontrarón llamadas! Intente más tarde.", "Aceptar", "");
		}
	}
}
public LoadGaragesEx()
{
	// 1/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1296.7440185547;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2648.61328125;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1291.6853027344;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2648.7053222656;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.846117019653;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2022.5163574219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 92.811820983887;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 28.448444366455;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2026.7365722656;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 92.712478637695;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 28.457437515259;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
    GaragesEx[MAX_GARAGES_EX][Interior] = 14;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
    GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SFMD;

	// 2/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1296.7440185547;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2655.94921875;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1291.6857910156;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2656.0095214844;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.86038684845;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2022.5163574219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 84.187217712402;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 28.448444366455;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2026.7346191406;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 84.050964355469;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 28.341444015503;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 14;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SFMD;

	// 3/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1296.7440185547;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2663.3015136719;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1291.6750488281;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2663.2922363281;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.864186286926;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2022.5163574219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 75.530609130859;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 28.448444366455;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2026.7357177734;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 75.499862670898;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 28.341310501099;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 14;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SFMD;

	// 4/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1336.7229003906;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2663.2060546875;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1331.6806640625;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2663.2189941406;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.864210128784;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2053.5014648438;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 92.807563781738;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 28.760625839233;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2047.8316650391;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 92.613609313965;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 28.407892227173;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 14;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SFMD;

	// 5/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1336.7229003906;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2655.9899902344;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1331.689453125;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2656.0004882813;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.860371589661;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2053.5014648438;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 84.094604492188;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 28.760625839233;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2047.8311767578;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 83.947914123535;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 28.390625;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 14;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SFMD;

	// 6/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1336.7229003906;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2648.7255859375;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1331.6868896484;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2648.6918945313;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.846092224121;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2053.2954;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 75.3610;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 28.6271;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2047.8316650391;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 75.347999572754;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 28.397680282593;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 14;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SFMD;

    ///////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 617.2243;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = -1.2861;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 1000.9219;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 622.1999;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = -1.3114;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 1000.9219;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 84.8417;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2874.0088;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 488.8052;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 4.7891;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2874.1960;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 493.4135;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 4.9141;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 180.7589;
	GaragesEx[MAX_GARAGES_EX][Interior] = 1;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = TALLER_SF;

	// LS
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 2450.3898925781;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2374.7368164063;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 74.422454833984;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 2445.6242675781;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2374.4838867188;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 74.541236877441;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1637.7884521484;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1681.7750244141;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 13.535420417786;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1642.2092285156;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1681.6961669922;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 13.529174804688;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 4;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = GOBIERNO;

	// SF
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 2395.1430664063;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2450.8840332031;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 69.795692443848;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 2390.4787597656;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2450.8610839844;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 70.314086914063;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -1979.2249755859;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 433.14822387695;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 25.684232711792;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -1979.4809570313;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 426.94644165039;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 24.621158599854;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 0;
	GaragesEx[MAX_GARAGES_EX][Interior] = 4;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = GOBIERNO;

	/// ENTRADA YKZ
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 926.10797119141;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1889.2600097656;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 926.12554931641;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1884.6147460938;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2157.1401367188;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 654.69183349609;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 52.3671875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2161.625;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 654.63641357422;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 52.3671875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 6;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = YKZ;

	/// SALIDA YKZ
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 938.30682373047;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1906.4091796875;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 938.23901367188;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1910.8675537109;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2176.0026855469;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 693.22210693359;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 53.890625;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2172.4536132813;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 692.95495605469;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 53.890625;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 6;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = YKZ;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1034.2763671875;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1272.2180175781;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 20.464794158936;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1030.4272460938;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1272.2495117188;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 20.464794158936;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2093.2861328125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 95.113067626953;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 35.3203125;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2089.1135253906;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 95.054679870605;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 35.3203125;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 7;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SICARIOS;


	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 2096.7895507813;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2373.5671386719;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 14.096832275391;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 2101.3508300781;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2373.4926757813;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 14.790173530579;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2647.4343261719;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 700.46228027344;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 27.924654006958;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2647.4978027344;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 694.88836669922;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 27.934589385986;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 0;
	GaragesEx[MAX_GARAGES_EX][Interior] = 0;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = SFMD;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1933.8507;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 658.4608;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 19.2471;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1928.0100;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 658.3610;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 19.3469;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2004.3203;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -142.8797;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 35.5859;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2010.1976;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -142.9584;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 35.7109;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 12;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1933.5496;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 649.3836;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 19.2213;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1928.0114;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 649.5203;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 19.3580;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2005.0909;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -133.3742;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 35.5859;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2010.1976;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -133.5117;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 35.7109;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 12;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1946.6403;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 649.4222;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 19.2431;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1952.5027;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 649.4376;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 19.3695;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2027.8466;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -133.6878;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 35.1508;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2022.2086;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -133.5925;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 35.2803;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 12;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1947.4674;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 658.5381;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 19.2275;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1952.5027;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 658.7502;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 19.3469;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2027.6161;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -143.2141;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 35.1960;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2022.2041;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -143.0264;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 35.3163;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 12;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = -514.93041992188;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2548.6140136719;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 53.559684753418;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = -515.00164794922;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2544.1303710938;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 53.795310974121;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -1935.802734375;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 273.49237060547;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 40.811248779297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -1936.1304931641;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 277.72778320313;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 41.046875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 180;
	GaragesEx[MAX_GARAGES_EX][Interior] = 16;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = -502.87152099609;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2548.5646972656;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 53.559684753418;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = -502.81423950195;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2544.1293945313;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 53.800487518311;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -1928.5319824219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 273.85021972656;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 40.811248779297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -1928.6348876953;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 277.72720336914;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 41.046875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 180;
	GaragesEx[MAX_GARAGES_EX][Interior] = 16;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = -500.93087768555;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2572.7307128906;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 53.559684753418;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = -496.75540161133;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2572.8754882813;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 53.865310668945;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -1920.5523681641;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 303.55364990234;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 40.811248779297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -1925.1882324219;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 303.41903686523;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 41.046875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 16;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 687.81872558594;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1839.5895996094;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 5.3098797798157;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 692.43817138672;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1839.4022216797;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 5.6091208457947;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 2366.7507;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -657.4847;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 128.2232;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 2361.9941;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -657.5042;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 128.0922;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 12;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LCN;

	MAX_GARAGES_EX++; // Talelr LS Puerta 1
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1769.3964;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = -2014.1255;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 87.5977;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1768.5817;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = -2017.8060;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 4.2969;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1769.2628;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -2022.9585;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 14.1458;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 268.4160;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1768.6616;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -2019.9989;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 14.1372;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 182.8985;
	GaragesEx[MAX_GARAGES_EX][Interior] = 15;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = TALLER_LS;

	MAX_GARAGES_EX++; // Talelr LS Puerta 2
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1758.8389;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = -2032.1647;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 91.2127;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1763.1155;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = -2032.0144;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 92.6578;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1768.6405;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -2032.0582;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 13.6160;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 271.8627;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1764.7140;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -2031.9274;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 14.0901;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 275.3095;
	GaragesEx[MAX_GARAGES_EX][Interior] = 15;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = TALLER_LS;

	MAX_GARAGES_EX++; // Talelr LS Puerta 3
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1757.9944;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = -2049.0181;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 20.6755;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 91.8393;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1763.0488;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = -2048.9666;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 20.6755;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 95.1645;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1768.0338;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -2049.0374;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 13.7018;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270.9227;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1764.8514;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -2049.1133;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 14.0862;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 267.1626;
	GaragesEx[MAX_GARAGES_EX][Interior] = 15;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = TALLER_LS;

	MAX_GARAGES_EX++; // Talelr LS Puerta 4
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1751.2491;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = -2048.4993;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0.5135;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1751.1980;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = -2052.7969;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 1.1636;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1751.6617;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -2057.7124;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 13.6694;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 186.9486;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1751.4055;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -2053.9897;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 14.1226;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 181.6218;
	GaragesEx[MAX_GARAGES_EX][Interior] = 15;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = TALLER_LS;

	MAX_GARAGES_EX++; // NFS Concesionario Grotti 1
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1640.4020;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = -2490.1943;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 180.6592;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1640.4576;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = -2485.8657;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 182.2259;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 542.1654;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1290.0685;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 3.7638;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 542.4535;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1293.7919;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 356.8705;
	GaragesEx[MAX_GARAGES_EX][Interior] = 3;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = NFS;

	MAX_GARAGES_EX++; // NFS Concesionario Grotti 2
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1639.9980;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = -2499.0281;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 358.3210;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1640.0181;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = -2502.4836;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 356.1276;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 540.4600;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1317.9385;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90.2445;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 540.2427;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1314.4807;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 178.6053;
	GaragesEx[MAX_GARAGES_EX][Interior] = 3;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1067.6529541016;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1740.3441162109;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 10.862812042236;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1067.6064453125;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1736.5032958984;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.872812271118;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 2644.8520507813;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -2035.0266113281;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 13.489999771118;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 2644.7341308594;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -2038.8057861328;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 13.550000190735;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 0;
	GaragesEx[MAX_GARAGES_EX][Interior] = 5;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = COLTS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 2650.5327148438;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 789.53802490234;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 11.072454452515;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 2655.0598144531;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 789.42309570313;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 11.072454452515;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2458.67578125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -123.25654602051;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 25.6171875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2454.6081542969;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -123.04374694824;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 26.130441665649;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 6;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = AK;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1957.6334228516;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1860.0373535156;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 27.5;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1957.6224365234;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1856.0446777344;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 27.63437461853;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1251.4061279297;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1181.3676757813;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 23.440000534058;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1247.2415771484;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1181.4162597656;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 23.578125;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 8;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = CNN;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 2813.6831054688;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2002.4719238281;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 16.83437538147;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 2817.0947265625;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2002.4854736328;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 16.83437538147;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1059.4097900391;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -342.16445922852;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 73.9921875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1059.6774902344;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -345.89593505859;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 73.9921875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 0;
	GaragesEx[MAX_GARAGES_EX][Interior] = 10;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = TRAFICANTES;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 2324.89453125;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1415.8875732422;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 42.887783050537;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 2320.1916503906;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1415.8560791016;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 42.888137817383;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 751.17236328125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1355.1157226563;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 13.5;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 751.25445556641;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1359.1877441406;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 13.5;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 0;
	GaragesEx[MAX_GARAGES_EX][Interior] = 11;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = CNN;

	///////////////////////////////////////////////////////////////////// NFS Parking Blueberry
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1561.1107;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1261.5313;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 10.5590;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270.9731;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1555.8536;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1261.6836;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 10.8337;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 271.7847;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -56.3266;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -224.0616;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 5.4297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 273.2132;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -60.5768;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -224.0244;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 5.4297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 268.8474;
	GaragesEx[MAX_GARAGES_EX][Interior] = 10;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = NFS;

	///////////////////////////////////////////////////////////////////// HEORS Garage HQ
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 2448.59765625;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2277.84375;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 91.909378051758;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 2448.52734375;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2272.7429199219;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 91.759376525879;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 2787.6667480469;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1624.4322509766;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 10.759050369263;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 2787.5769042969;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1628.7841796875;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 10.92715549469;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 0;
	GaragesEx[MAX_GARAGES_EX][Interior] = 4;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = HEORS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = -27.256742477417;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2520.5998535156;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 16.343023300171;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = -27.153844833374;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2525.5729980469;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 16.518749237061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2105.2783203125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 901.8046875;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 76.7109375;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2105.2778320313;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 897.35693359375;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 76.7109375;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 0;
	GaragesEx[MAX_GARAGES_EX][Interior] = 5;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = VELTRAN;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = -49.709205627441;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2521.1147460938;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 16.343023300171;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = -53.899585723877;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2521.0920410156;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 16.518749237061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2133.775390625;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 899.67431640625;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2129.2312011719;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 899.56573486328;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 5;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = VELTRAN;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = -49.725120544434;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 2510.0656738281;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 16.343023300171;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = -53.899185180664;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 2510.0354003906;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 16.518749237061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = -2133.763671875;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = 890.0751953125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = -2129.2338867188;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = 890.00640869141;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 90;
	GaragesEx[MAX_GARAGES_EX][Interior] = 5;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = VELTRAN;

	// LSMD Izquierda
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = -24.332330703735;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1520.1669921875;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 13.094888305664;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = -24.343612670898;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1515.1636962891;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 12.7953125;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1179.4501953125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1338.9814453125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 14.145274162292;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1173.2486572266;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1339.0900878906;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 13.990941047668;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 18;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LSMD;

	// LSMD Derecha
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 39.006175994873;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1520.7033691406;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 13.094888305664;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 39.112873077393;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1515.1691894531;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 12.7953125;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 1178.9580078125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1308.328125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 14.065633773804;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 1173.2722167969;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1308.2825927734;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 13.993656158447;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 270;
	GaragesEx[MAX_GARAGES_EX][Interior] = 18;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LSMD;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne] = 1906.8438720703;
	GaragesEx[MAX_GARAGES_EX][PosYOne] = 1177.7894287109;
	GaragesEx[MAX_GARAGES_EX][PosZOne] = 18.724687576294;
	GaragesEx[MAX_GARAGES_EX][PosZZOne] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP] = 1906.9635009766;
	GaragesEx[MAX_GARAGES_EX][PosYOneP] = 1171.5113525391;
	GaragesEx[MAX_GARAGES_EX][PosZOneP] = 18.354686737061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP] = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo] = 2012.5134277344;
	GaragesEx[MAX_GARAGES_EX][PosYTwo] = -1413.5830078125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo] = 17.275236129761;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo] = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP] = 2012.5570068359;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP] = -1408.4260253906;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP] = 16.9921875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP] = 180;
	GaragesEx[MAX_GARAGES_EX][Interior] = 18;
	GaragesEx[MAX_GARAGES_EX][World] = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], GaragesEx[MAX_GARAGES_EX][World], GaragesEx[MAX_GARAGES_EX][Interior]);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreateGarageExPickup(1239, MAX_GARAGES_EX, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL, 0);
	GaragesEx[MAX_GARAGES_EX][Lock] = false;
	GaragesEx[MAX_GARAGES_EX][Dueno] = LSMD;
	// END GARAGESEX
	/////////////////////////////////////////////////////////////////////
}
public UpdateLockDoorForPlayer(pickupid, lock, pickup2)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
	    {
	        if ( PlayersDataOnline[i][InPickup] == pickupid )
	        {
				PlayersDataOnline[i][MyPickupLock] = lock;
			}
			else if ( PlayersDataOnline[i][InPickup] == pickup2 )
			{
				PlayersDataOnline[i][MyPickupLock] = lock;
			}

		}
	}
}
public IsBizzBarra(playerid)
{
	if ( GetPlayerVirtualWorld(playerid) == 4 || PlayersData[playerid][IsPlayerInVehInt])
	{
		if ( IsPlayerInRangeOfPoint(playerid, 	3.0,
												-927.9366,2224.1982,43.2305) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-909.5477,2224.5791,43.2305) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-908.4485,2224.5012,51.3453) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-927.8519,2224.3909,51.34535)||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-917.7833,2206.2751,51.3453) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												2398.5273,1107.9354,34.6063) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												970.8110,-47.7546,1001.1172) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-786.2424,498.2604,1371.7422)	)
		{
		    return true;
		}
	}
	return false;
}
public GetGarageIdByWorld(houseid, world)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
        if ( Garages[houseid][i][WorldG] == world )
		{
		    return i;
        }
    }
	return -1;
}
public GetHouseidIdByWorld(world)
{
    for(new h=1;h<=MAX_HOUSE;h++)
    {
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
	        if ( Garages[h][i][PickupidIn] && Garages[h][i][WorldG] == world )
			{
			    return h;
	        }
        }
	}
	return false;
}
public Float:GetPointFromPoint(Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo)
{
	return (floatabs(XpointOne - XpointTwo) +
		 floatabs(YpointOne - YpointTwo) +
		 floatabs(ZpointOne - ZpointTwo));
}
public IsPointFromPoint(Float:RadioE, Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo)
{
	if ( floatabs(XpointOne - XpointTwo) <= RadioE &&
		 floatabs(YpointOne - YpointTwo) <= RadioE &&
		 floatabs(ZpointOne - ZpointTwo) <= RadioE
	   )
	{
	    return true;
    }
    else
    {
        return false;
	}
}
public IsVehicleInGarageEx(vehicleid)
{
	new Float:PosVehicleE[3]; GetVehiclePos(vehicleid, PosVehicleE[0], PosVehicleE[1], PosVehicleE[2]);
	for(new i=0;i<=MAX_GARAGES_EX;i++)
	{
		if ( GetVehicleVirtualWorld(vehicleid) == 4 && IsPointFromPoint(100.0, PosVehicleE[0], PosVehicleE[1], PosVehicleE[2], GaragesEx[i][PosXOneP], GaragesEx[i][PosYOneP], GaragesEx[i][PosZOneP]) )
		{
		    return i;
	    }
	}
	return -1;
}

public RemoveVehicleComponentEx(vehicleid, componentid)
{
	RemoveVehicleComponent(vehicleid, componentid);
	DataCars[vehicleid][SlotsTunning][GetVehicleComponentType(componentid)] = 0;
}
public GetVehicleComponentInSlotEx(vehicleid, slotid)
{
	if ( DataCars[vehicleid][SlotsTunning][slotid]  )
	{
		return true;
	}
	else
	{
	    return false;
	}
}
public AddVehicleCommponentTaller(vehicleid, componentid)
{
	if ( GetVehicleComponentInSlotEx(vehicleid, GetVehicleComponentType(componentid)) )
	{
	    RemoveVehicleComponentEx(vehicleid, componentid);
	}
	else
	{
	    AddVehicleComponentEx(vehicleid, componentid);
	}
}
public AddBomba(playerid, type, vehicleid, Float:Xbom, Float:Ybom, Float:Zbom, objectid)
{
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    if ( BombasO[i][TypeBomba] == BOMBA_TYPE_NONE )
	    {
   		    new MsgPonerBomba[MAX_TEXT_CHAT];
			if ( type == BOMBA_TYPE_FOOT )
			{
			    format(MsgPonerBomba, sizeof(MsgPonerBomba), "Has puesto una bomba en el piso! El número de contro de la bomba es #%i.", i);
			    new Float:ZZ[3];
				if ( playerid != -1 )
				{
				    switch ( objectid )
				    {
				        case 1654: // Dinámita
				        {
	                        Zbom 	= Zbom - 0.9;
	                        ZZ[0] 	= -90.0;
						}
				        case 1265: // Bolsa
				        {
	                        Zbom 	= Zbom - 0.6;
						}
				        case 1580:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1210: // Maletín
				        {
	                        Zbom 	= Zbom - 0.9;
	                        ZZ[0] 	= -90.0;
						}
				        case 1576:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1577:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1578:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1579:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
					}
				}
				else
				{
				    if ( objectid == 1654 || objectid == 1210 )
				    {
				        ZZ[0] = -90.0;
					}
				}
				BombasO[i][ObjectIDO] = objectid;
				BombasO[i][ObjectID]  = CreateDynamicObject(objectid, Xbom, Ybom, Zbom, ZZ[0], ZZ[1], ZZ[2], -1, -1, -1, MAX_RADIO_STREAM); //
				BombasO[i][PosX]      = Xbom;
				BombasO[i][PosY] 	  = Ybom;
				BombasO[i][PosZ]  	  = Zbom;
				BombasO[i][TypeBomba] = BOMBA_TYPE_FOOT;
			}
			else
			{
			    format(MsgPonerBomba, sizeof(MsgPonerBomba), "Has puesto una bomba en éste vehículo! El número de contro de la bomba es #%i.", i);
				BombasO[i][ObjectID]  = vehicleid;
				BombasO[i][TypeBomba] = BOMBA_TYPE_CAR;
			}
			if ( playerid != -1 )
			{
				SendInfoMessage(playerid, 2, "0", MsgPonerBomba);
			}
//			BombasO[i][TimerID] = SetTimerEx("ActivarBomba", MAX_BOMBA_TIME_INACTIVE, false, "d", i);
			return true;
		}
	}
	if ( playerid != -1 )
	{
		SendInfoMessage(playerid, 0, "1294", "Han alcanzado el número de bombas plantadas!");
	}
	return false;
}
public RemoveBomba(bombaid)
{
	if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
	{
	    if ( BombasO[bombaid][TypeBomba] == BOMBA_TYPE_FOOT )
	    {
		    DestroyDynamicObject(BombasO[bombaid][ObjectID]);
		}
		BombasO[bombaid][TypeBomba] = BOMBA_TYPE_NONE;
//		KillTimer(BombasO[bombaid][TimerID]);
	    return true;
	}
	return false;
}
public IsPlayerNearBomba(playerid, Float:Range, option)
{
	if ( option == -1 )
	{
		for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
		{
	        if ( IsPlayerNearBombaEx(playerid, i, Range) )
	        {
	            return i;
			}
		}
	}
	else
	{
        if ( IsPlayerNearBombaEx(playerid, option, Range) )
        {
            return option;
		}
	}
	return -1;
}
public IsPlayerNearBombaEx(playerid, bombaid, Float:Range)
{
    new Float:VehPos[3];
    if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
    {
	    if ( BombasO[bombaid][TypeBomba] == BOMBA_TYPE_FOOT )
		{
			if ( IsPlayerInRangeOfPoint(playerid, Range,
												 BombasO[bombaid][PosX], BombasO[bombaid][PosY], BombasO[bombaid][PosZ] ) )
			{
				return true;
			}
		}
		else
		{
			GetVehiclePos(BombasO[bombaid][ObjectID], VehPos[0], VehPos[1], VehPos[2]);
			if ( IsPlayerInRangeOfPoint(playerid, Range,
												 VehPos[0], VehPos[1], VehPos[2] ) )
			{
				return true;
			}
		}
	}
	return false;
}
public ActivarBomba(bombaid, count)
{
	if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
	{
	    if ( BombasO[bombaid][TypeBomba] == BOMBA_TYPE_CAR )
		{
		    GetVehiclePos(BombasO[bombaid][ObjectID], BombasO[bombaid][PosX], BombasO[bombaid][PosY], BombasO[bombaid][PosZ]);
		}
		for (new i = 0; i < count; i++)
		{
			CreateExplosion(BombasO[bombaid][PosX], BombasO[bombaid][PosY], BombasO[bombaid][PosZ], 2, 10.0);
		}
		RemoveBomba(bombaid);
		return true;
	}
	return false;
}
public DesactivarBomba(playerid, bombaid)
{
	if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
	{
    	PlayersData[playerid][Bombas]++;
		RemoveBomba(bombaid);
		return true;
	}
	return false;
}
public IsVehicleHaveBomba(vehicleid)
{
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    if ( BombasO[i][TypeBomba] == BOMBA_TYPE_CAR && BombasO[i][ObjectID] == vehicleid)
	    {
			return i;
		}
	}
	return -1;
}
public ShowBombas(playerid)
{
	new BombasDialog[1750];
	new TempConvert[60];
	new ConteoBombas = -1;
	new TiposBomb[2][9] = {"Piso", "Vehículo"};
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    if ( BombasO[i][TypeBomba] != BOMBA_TYPE_NONE )
	    {
			if ( ConteoBombas != -1 )
			{
			    format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Bomba {F5FF00}#%i {00A5FF}[%s]", i, TiposBomb[BombasO[i][TypeBomba] - 1]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}Bomba {F5FF00}#%i {00A5FF}[%s]", i, TiposBomb[BombasO[i][TypeBomba] - 1]);
			}
	        strcat(BombasDialog, TempConvert, sizeof(BombasDialog));
	        ConteoBombas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoBombas] = i;
        }
	}
	if (ConteoBombas != -1)
	{
		ShowPlayerDialogEx(playerid,77,DIALOG_STYLE_LIST,"{00A5FF}Bombas - Control", BombasDialog, "Detonar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control", "{F0F0F0}No se encontrarón bombas.", "Aceptar", "");
	}
}
public LoadBombas()
{
	new TempDirBombas[25];
    new BombasDataALL[MAX_PLAYER_DATA];
    new BombasDataSlots[6][MAX_PLAYER_NAME];
    new BombaType;
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    format(TempDirBombas, sizeof(TempDirBombas), "%s%i.ulp", DIR_BOMBAS, i);
		if ( fexist(TempDirBombas) )
		{
			new File:LoadBombasF = fopen(TempDirBombas, io_read);
			fread(LoadBombasF, BombasDataALL);
			fclose(LoadBombasF);

			new PosSplitAfter = 0;
			for ( new s = 0; s < 6; s++ )
			{
				PosSplitAfter = strfind(BombasDataALL, "|", false);
				strmid(BombasDataSlots[s], BombasDataALL, 0, PosSplitAfter, sizeof(BombasDataALL));
				strdel(BombasDataALL, 0, PosSplitAfter + 1);
			}
			BombaType 		= strval(BombasDataSlots[0]);
			if ( BombaType != BOMBA_TYPE_NONE )
			{
				AddBomba(-1, BombaType, strval(BombasDataSlots[1]), floatstr(BombasDataSlots[2]), floatstr(BombasDataSlots[3]), floatstr(BombasDataSlots[4]), strval(BombasDataSlots[5]));
			}
		}
	}
}
public SaveBombas()
{
	new TempDirBombas[25];
    new BombasDataALL[MAX_PLAYER_DATA];
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    format(TempDirBombas, sizeof(TempDirBombas), "%s%i.ulp", DIR_BOMBAS, i);

	 	format(BombasDataALL, MAX_PLAYER_DATA, "%i|%i|%f|%f|%f|%i|",
	 	BombasO[i][TypeBomba],
		BombasO[i][ObjectID],
		BombasO[i][PosX],
		BombasO[i][PosY],
		BombasO[i][PosZ],
		BombasO[i][ObjectIDO]);

		new File:LoadBombasF = fopen(TempDirBombas, io_write);
		fwrite(LoadBombasF, BombasDataALL);
		fclose(LoadBombasF);
	}
}
public LoadVCP()
{
	new TempDirSVCP[25];
    new VCPDataALL[MAX_PLAYER_DATA];
    new VPCDataSlots[5][MAX_PLAYER_NAME];
    new ObjectIDT;
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    format(TempDirSVCP, sizeof(TempDirSVCP), "%s%i.ulp", DIR_VCP, i);
		if ( fexist(TempDirSVCP) )
		{
			new File:LoadVCPF = fopen(TempDirSVCP, io_read);
			fread(LoadVCPF, VCPDataALL);
			fclose(LoadVCPF);

			new PosSplitAfter = 0;
			for ( new s = 0; s < 5; s++ )
			{
				PosSplitAfter = strfind(VCPDataALL, "|", false);
				strmid(VPCDataSlots[s], VCPDataALL, 0, PosSplitAfter, sizeof(VCPDataALL));
				strdel(VCPDataALL, 0, PosSplitAfter + 1);
			}
			ObjectIDT 		= strval(VPCDataSlots[0]);
			if ( ObjectIDT != -1 )
			{
				AddVCP(-1, strval(VPCDataSlots[0]), floatstr(VPCDataSlots[1]), floatstr(VPCDataSlots[2]), floatstr(VPCDataSlots[3]), floatstr(VPCDataSlots[4]));
			}
		}
	}
}
public SaveVCP()
{
	new TempDirSVCP[25];
    new PCVDataALL[MAX_PLAYER_DATA];
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    format(TempDirSVCP, sizeof(TempDirSVCP), "%s%i.ulp", DIR_VCP, i);

	 	format(PCVDataALL, MAX_PLAYER_DATA, "%i|%f|%f|%f|%f|",
		VCP[i][objectmodel],
		VCP[i][ObjX],
		VCP[i][ObjY],
		VCP[i][ObjZ],
		VCP[i][ObjZRot]);

		new File:SaveVCPF = fopen(TempDirSVCP, io_write);
		fwrite(SaveVCPF, PCVDataALL);
		fclose(SaveVCPF);
	}
}
public GivePlayerMoneyEx(playerid, money)
{
	PlayersDataOnline[playerid][StateMoneyPass] = gettime() + 5;
    PlayersData[playerid][Dinero] += money;
}
public MsgAdminUseCommands(level, playerid, const commands[])
{
	if ( PlayersData[playerid][Admin] != 9 )
	{
	    new MsgPerNivel9[256];
	    if ( PlayersData[playerid][Admin] )
	    {
	    	format(MsgPerNivel9, sizeof(MsgPerNivel9), "{A49C00}%s %s[%i] ha usado el comando: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix], playerid, commands);
	   	}
	   	else
	   	{
	    	format(MsgPerNivel9, sizeof(MsgPerNivel9), "{A49C00}%s %s[%i] {B90000}(NO ES ADMIN) {A49C00}ha usado el comando: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix], playerid, commands);
	   	}
		for (new e = 0; e < MAX_PLAYERS; e++)
		{
		    if ( IsPlayerConnected(e) && PlayersData[e][Admin] == level && PlayersDataOnline[e][State] == 3 && PlayersDataOnline[e][SendCommands] )
		    {
		        SendClientMessage(e, COLOR_CHEATS_REPORTES, MsgPerNivel9);
		    }
	    }
		printf("%s", MsgPerNivel9);
	}
}
public MsgCheatsReportsToAdminsEx(const text[], level)
{
	for (new e = 0; e < MAX_PLAYERS; e++)
	{
	    if ( IsPlayerConnected(e) && PlayersData[e][Admin] == level && PlayersDataOnline[e][State] == 3 )
	    {
	        SendClientMessage(e, COLOR_CHEATS_REPORTES, text);
	    }
    }
	printf("%s", text);
}
public MsgCheatsReportsToAdmins(const text[])
{
	for (new e = 0; e < MAX_PLAYERS; e++)
	{
	    if ( IsPlayerConnected(e) && PlayersData[e][Admin] >= 1 && PlayersDataOnline[e][State] == 3)
	    {
	        SendClientMessage(e, COLOR_CHEATS_REPORTES, text);
	    }
    }
	printf("%s", text);
}
public MsgKBJWReportsToAdmins(playerid, const text[])
{
	for (new e = 0; e < MAX_PLAYERS; e++)
	{
	    if ( IsPlayerConnected(e) && PlayersDataOnline[e][State] == 3 && ( PlayersData[e][Admin] >= 1 || playerid == e ) )
	    {
	        SendClientMessage(e, COLOR_KICK_JAIL_BAN, text);
	    }
    }
	printf("%s", text);
}
public MsgHelperChat(const text[])
{
	for (new e = 0; e < MAX_PLAYERS; e++)
	{
	    if ( IsPlayerConnected(e) && PlayersDataOnline[e][State] == 3 && (PlayersData[e][Ayudante] || PlayersData[e][Admin]) )
	    {
	        SendClientMessage(e, COLOR_MESSAGES[0], text);
	    }
    }
}
public ShowServerStats(playerid)
{
	new ListDialog[1000];
	new TempConvert[150];

	if ( playerid != -1 )
	{
		format(TempConvert, sizeof(TempConvert),
		"{E6E6E6}01- MAX_PLAYERS {00F50A}(%i)", MAX_PLAYERS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}02- MAX_DYNAMIC_OBJECTS {00F50A}(%i)", Streamer_CountItems(STREAMER_TYPE_OBJECT, 1));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}03- MAX_TEXT_DRAW {00F50A}(%i)", MAX_TEXT_DRAW);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}04- MAX_DYNAMIC_PICKUP {00F50A}(%i)", Streamer_CountItems(STREAMER_TYPE_PICKUP, 1));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));
		
		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}05- MAX_DYNAMIC_TEXTLABEL {00F50A}(%i)", Streamer_CountItems(STREAMER_TYPE_3D_TEXT_LABEL, 1));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}06- MAX_OBJECT_FIJOS {00F50A}(%i)", GetSVarInt("Static_Objects"));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}07- MAX_TELES {00F50A}(%i)", MAX_TELES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}08- MAX_CAMERAS {00F50A}(%i)", MAX_CAMERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}09- MAX_PEAJES {00F50A}(%i)", MAX_PEAJES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}10- MAX_BIZZ_TYPE {00F50A}(%i)", MAX_BIZZ_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}11- MAX_HOUSE_TYPE {00F50A}(%i)", MAX_HOUSE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}12- MAX_GARAGE_TYPE {00F50A}(%i)", MAX_GARAGE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}13- MAX_BIZZ {00F50A}(%i)", MAX_BIZZ);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}14- MAX_HOUSE {00F50A}(%i)", MAX_HOUSE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}15- MAX_GARAGES {00F50A}(%i)", MAX_GARAGES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}16- MAX_CAJEROS {00F50A}(%i)", MAX_CAJEROS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}17- MAX_PUERTAS {00F50A}(%i)", MAX_PUERTAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}18- MAX_CAR {00F50A}(%i)", MAX_CAR);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}19- MAX_CAR_DUENO {00F50A}(%i)", MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}20- MAX_CAR_FACCION {00F50A}(%i)", MAX_CAR_FACCION - MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}21- MAX_CAR_PUBLIC {00F50A}(%i)", MAX_CAR_PUBLIC - MAX_CAR_FACCION);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}22- MAX_GARAGES_EX {00F50A}(%i)", MAX_GARAGES_EX);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}23- MAX_GASOLINERAS {00F50A}(%i)", MAX_GASOLINERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}24- MAX_LOCAL {00F50A}(%i)", MAX_LOCAL);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}25- MAX_LOCAL_ID {00F50A}(%i)", MAX_LOCAL_ID+1);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_LIST,"{00A5FF}Estadísticas del servidor - "WEBPAGE" || RolePlay", ListDialog, "Ok", "");
	}
	else
	{
		format(TempConvert, sizeof(TempConvert),
		"01- MAX_PLAYERS\t\t\t%i", MAX_PLAYERS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n02- MAX_DYNAMIC_OBJECTS\t\t%i", Streamer_CountItems(STREAMER_TYPE_OBJECT, 1));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n03- MAX_TEXT_DRAW\t\t%i", MAX_TEXT_DRAW);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n04- MAX_DYNAMIC_PICKUP\t\t%i", Streamer_CountItems(STREAMER_TYPE_PICKUP, 1));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n05- MAX_DYNAMIC_TEXTLABEL\t%i", Streamer_CountItems(STREAMER_TYPE_3D_TEXT_LABEL, 1));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n06- MAX_OBJECT_FIJOS\t\t%i", GetSVarInt("Static_Objects"));
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n07- MAX_TELES\t\t\t%i", MAX_TELES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n08- MAX_CAMERAS\t\t\t%i", MAX_CAMERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n09- MAX_PEAJES\t\t\t%i", MAX_PEAJES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n10- MAX_BIZZ_TYPE\t\t%i", MAX_BIZZ_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n11- MAX_HOUSE_TYPE\t\t%i", MAX_HOUSE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n12- MAX_GARAGE_TYPE\t\t%i", MAX_GARAGE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n13- MAX_BIZZ\t\t\t%i", MAX_BIZZ);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n14- MAX_HOUSE\t\t\t%i", MAX_HOUSE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n15- MAX_GARAGES\t\t\t%i", MAX_GARAGES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n16- MAX_CAJEROS\t\t\t%i", MAX_CAJEROS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n17- MAX_PUERTAS\t\t\t%i", MAX_PUERTAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n18- MAX_CAR\t\t\t%i", MAX_CAR);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n19- MAX_CAR_DUENO\t\t%i", MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n20- MAX_CAR_FACCION\t\t%i", MAX_CAR_FACCION - MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n21- MAX_CAR_PUBLIC\t\t%i", MAX_CAR_PUBLIC - MAX_CAR_FACCION);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n22- MAX_GARAGES_EX\t\t%i", MAX_GARAGES_EX);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n23- MAX_GASOLINERAS\t\t%i", MAX_GASOLINERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n24- MAX_LOCAL\t\t\t%i", MAX_LOCAL);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

        format(TempConvert, sizeof(TempConvert),
		"\r\n25- MAX_LOCAL_ID\t\t%i", MAX_LOCAL_ID);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));


		printf("%s", ListDialog);
	}
}
public Text:TextDrawCreateEx(Float:Xt, Float:Yt, const text[])
{
    MAX_TEXT_DRAW++;
    return TextDrawCreate(Xt, Yt, text);
}
public ExistPlate(plate)
{
	for (new i = 1; i <= MAX_CAR_FACCION; i++ )
	{
		if ( DataCars[i][Matricula] == plate )
		{
		    return true;
	    }
	}
	return false;
}
public ChangeVehicle(playerid, vehicleid, modelid, worldid, interiorid)
{

	new Float:VelocityVehicle[3], Float:PosVehicle[4];
	new PosSeat[4]; PosSeat[0] = -1; PosSeat[1] = -1; PosSeat[2] = -1; PosSeat[3] = -1;
	new PanelesV, PuertasV, LucesV, GomasV;
	new LastAlarma = DataCars[vehicleid][AlarmOn];
	new LastEncendido = DataCars[vehicleid][StateEncendido];
	new LastPuente = DataCars[vehicleid][Puente];

	GetVehicleDamageStatus(vehicleid,PanelesV, PuertasV, LucesV, GomasV);

	GetVehicleVelocity(vehicleid, VelocityVehicle[0], VelocityVehicle[1], VelocityVehicle[2]);
	GetVehiclePos(vehicleid, PosVehicle[0], PosVehicle[1], PosVehicle[2]);
	GetVehicleZAngle(vehicleid, PosVehicle[3]);

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid )
		{
            if ( GetPlayerVehicleSeat(i) != 127 )
            {
            	PosSeat[GetPlayerVehicleSeat(i)] = i;
        	}
        	else
        	{
				for (new p = 1; p < sizeof(PosSeat); p++)
				{
				    if ( PosSeat[p] == -1 )
				    {
	            		PosSeat[p] = i;
	            		break;
            		}
				}
			}
		}
	}
	if ( playerid != -1 )
	{
        new MsgChangeVehicle[MAX_TEXT_CHAT];
		format(MsgChangeVehicle, sizeof(MsgChangeVehicle), "%s Has cambiado el vehículo con ID[%i] del modelo \"%s\" por el \"%s\"", LOGO_STAFF, vehicleid, coches_Todos_Nombres[DataCars[vehicleid][Modelo] - 400], coches_Todos_Nombres[modelid - 400]);
        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgChangeVehicle);
    	CleanTunningSlots(vehicleid);
    }

	if ( vehicleid <= MAX_CAR_DUENO )
    {
        DataCars[vehicleid][Modelo] = modelid;
    }
	DestroyVehicle(vehicleid);
	CreateVehicleEx(modelid,
	PosVehicle[0],
	PosVehicle[1],
	PosVehicle[2],
	PosVehicle[3],
	DataCars[vehicleid][Color1],
	DataCars[vehicleid][Color2],
	vehicleid);

	SetVehicleVirtualWorldEx(vehicleid, worldid);
	LinkVehicleToInteriorEx(vehicleid, interiorid);

	if ( playerid != -1 )
	{
		DataCars[vehicleid][AlarmOn] = false;
		DataCars[vehicleid][StateEncendido] = true;
		DataCars[vehicleid][Puente] = false;
	}
	else
	{
		DataCars[vehicleid][AlarmOn] = LastAlarma;
		DataCars[vehicleid][StateEncendido] = LastEncendido;
		DataCars[vehicleid][Puente] = LastPuente;
	}
	IsVehicleOff(vehicleid);
	for (new i = 0; i < sizeof(PosSeat); i++)
	{
	    if ( PosSeat[i] != -1 )
	    {
    		PutPlayerInVehicle(PosSeat[i], vehicleid, i);
		}
	}
	SetVehicleVelocity(vehicleid, VelocityVehicle[0], VelocityVehicle[1], VelocityVehicle[2]);

	if ( playerid != -1 )
	{
		RepairVehicle(vehicleid);
		DataCars[vehicleid][Gas] = MAX_GAS_VEHICLE;
		DataCars[vehicleid][Oil] = MAX_OIL_VEHICLE;
		DataCars[vehicleid][LastDamage] = 1000.0;
	    SetVehicleHealthEx(vehicleid, DataCars[vehicleid][LastDamage]);
	}
	else
	{
	    SetVehicleHealthEx(vehicleid, DataCars[vehicleid][LastDamage]);
		UpdateVehicleDamageStatus(vehicleid, PanelesV, PuertasV, LucesV, GomasV);
		for (new t = 0; t < 14; t++ )
		{
		    if ( DataCars[vehicleid][SlotsTunning][t] )
		    {
				AddVehicleComponentEx(vehicleid, DataCars[vehicleid][SlotsTunning][t]);
			}
		}

		if ( DataCars[vehicleid][Vinillo] != -1 && IsValidVehiclePaintJob(DataCars[vehicleid][Modelo]) )
		{
			ChangeVehiclePaintjob(vehicleid, DataCars[vehicleid][Vinillo]);
		}
		else
		{
			DataCars[vehicleid][Vinillo] = -1;
		}
	}
	if ( playerid != -1 && PlayersDataOnline[playerid][InCarId] )
	{
    	UpdateDamage(playerid, DataCars[vehicleid][LastDamage]);
		UpdateGasAndOil(vehicleid);
	}
}
public ShowChangePlate(playerid)
{
	ShowPlayerDialogEx(playerid, 79, DIALOG_STYLE_INPUT, "{00A5FF}Taller - Cambio de matrícula", "{F0F0F0}Ingrese el número de matrícula que\ndesea para éste vehículo.", "A gusto", "Aleatoria");
}
public ChangeVehiclePlate(vehicleid, newplate)
{
	if (!newplate)
	{
		do
		{
			DataCars[vehicleid][Matricula] = random(999999) + 100000;
		} while ( !ExistPlate(DataCars[vehicleid][Matricula]) );
	}
	else
	{
		DataCars[vehicleid][Matricula] = newplate;
	}
	format(DataCars[vehicleid][MatriculaString], 32, "%i", DataCars[vehicleid][Matricula]);

	ChangeVehicle(-1, vehicleid, DataCars[vehicleid][Modelo], DataCars[vehicleid][WorldLast], DataCars[vehicleid][InteriorLast]);
}
/*
	PlayersData[playerid][TimeEquipo] = gettime() + 300;

	new MsgMatriculaChanged[MAX_TEXT_CHAT];
	format(MsgMatriculaChanged, sizeof(MsgMatriculaChanged), "Cambiaste la matrícula de éste vehículo por una nueva! Su nueva matrícula es: %i", DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula]);
  	SendInfoMessage(playerid, 3, "0", MsgMatriculaChanged);

	PlayPlayerStreamSound(playerid, SOUND_TUNNING);

*/
public TogglePlayerControllableEx(playerid, toogle)
{
	if ( toogle )
	{
		if ( !PlayersDataOnline[playerid][IsAtado] && !PlayersDataOnline[playerid][IsEsposas] )
		{
			TogglePlayerControllable(playerid, toogle);
		}
	}
	else
	{
		TogglePlayerControllable(playerid, toogle);
	}
}
public ShowCarteraToPlayer(playerid, playeridshow)
{
    new MsgCartera[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
	 ">>>>>>>>>> .:Cartera:. <<<<<<<<<");
	for (new i = 0; i<=5;i++)
	{
	    if ( PlayersData[playerid][Cartera][i] != CARTERA_TYPE_NADA )
	    {
	        //if
	        switch ( PlayersData[playerid][Cartera][i] )
	        {
	            case CARTERA_TYPE_CHEQUE:
	            {
					format(MsgCartera, sizeof(MsgCartera), "%Cartera %i: %s [Cantidad: $%i] (Número del cheque #%i) [Cuenta a cobrar: %i]", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]], PlayersData[playerid][CarteraC][i], PlayersData[playerid][CarteraT][i], PlayersData[playerid][CarteraI][i]);
				}
				case CARTERA_TYPE_CONDONES:
				{
					format(MsgCartera, sizeof(MsgCartera), "Cartera %i: %s %i", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]], PlayersData[playerid][CarteraC][i]);
				}
				default:
				{
					format(MsgCartera, sizeof(MsgCartera), "Cartera %i: %s", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]]);
				}
			}
		}
		else
		{
			format(MsgCartera, sizeof(MsgCartera), "%Cartera %i: %s", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]]);
		}
		SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, MsgCartera);
	}
}
public IsNotFullCartera(playeridError, playerid, const error[])
{
	for(new i = 0; i< MAX_COUNT_CARTERA; i++)
	{
	    if (PlayersData[playerid][Cartera][i] == CARTERA_TYPE_NADA)
	    {
			return true;
		}
	}
	SendInfoMessage(playeridError, 0, "1321", error);
	return false;
}
public AddObjectToCartera(playerid, objectid, carteraC, carteraT, carteraI)
{
	for(new i = 0; i < MAX_COUNT_CARTERA; i++)
	{
		if (PlayersData[playerid][Cartera][i] == CARTERA_TYPE_NADA)
		{
		    PlayersData[playerid][Cartera][i] = objectid;
		    PlayersData[playerid][CarteraC][i] = carteraC;
		    PlayersData[playerid][CarteraT][i] = carteraT;
		    PlayersData[playerid][CarteraI][i] = carteraI;

			return i;
		}
	}
	return -1;
}
public RemoveObjectToCartera(playerid, carteraid)
{
	if ( PlayersData[playerid][Cartera][carteraid] != CARTERA_TYPE_NADA )
	{
	    new ObjectCartera = PlayersData[playerid][Cartera][carteraid];
		PlayersData[playerid][Cartera][carteraid]  = CARTERA_TYPE_NADA;
	    PlayersData[playerid][CarteraC][carteraid] = 0;
		PlayersData[playerid][CarteraT][carteraid] = 0;
		return ObjectCartera;
	}
	else
	{
	    return -1;
	}
}
public strvalEx(const string[])
{
	new stringConvert[20];
	format(stringConvert, sizeof(stringConvert), "%s", string);
    return strval(stringConvert);
}
public ShowManejarCuentas(playerid)
{
	ShowPlayerDialogEx(playerid,80,DIALOG_STYLE_LIST, "{00A5FF}Banco - Controlar mis cuentas","{006CAA}1- {E6E6E6}Ver estadísticas\r\n{006CAA}2- {E6E6E6}Transferir de {00F50A}CUENTA DE AHORROS {00A5FF}-->> {00F50A}CUENTA DE CHEQUES\r\n{006CAA}3- {E6E6E6}Transferir de {00F50A}CUENTA DE CHEQUES {00A5FF}-->> {00F50A}CUENTA DE AHORROS", "Seleccionar", "Volver");
}
public CreateAccountBank(playerid)
{
	new query[200], Cache:cacheid, bankAccountExist, Go = true;
	new AccountNumber;
	do
	{
	    AccountNumber = random(8999999) + 1000000;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i;", DIR_ACCOUNT_BANK, AccountNumber);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);
		cache_delete(cacheid);
		if (!bankAccountExist) Go = false;
	}
	while( Go );
	PlayersData[playerid][AccountBankingOpen] = AccountNumber;

	CleanPlayerAccountBank(playerid);
	SaveAccountBanking(playerid);
}
public IsNotChequesFull(playerid)
	{
	for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
	{
	    if ( !Cheques[playerid][c][UniqueID] )
	    {
	        return c;
		}
	}
	return -1;
}
public RemoveCheque(playerid, chequeid)
{
	if ( Cheques[playerid][chequeid][UniqueID] )
	{
		Cheques[playerid][chequeid][UniqueID] = 0;
		Cheques[playerid][chequeid][Type] = 0;
		format(Cheques[playerid][chequeid][NombreCh], MAX_PLAYER_NAME, "No");
		Cheques[playerid][chequeid][Ammount] = 0;
		return true;
	}
	else
	{
	    return false;
	}
}
public CleanPlayerAccountBank(playerid)
{
	for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
	{
		Cheques[playerid][c][UniqueID] = 0;
		Cheques[playerid][c][Type] = 0;
		format(Cheques[playerid][c][NombreCh], MAX_PLAYER_NAME, "No");
		Cheques[playerid][c][Ammount] = 0;
	}
}
public LoadAccountBanking(playerid)
{
    if ( PlayersData[playerid][AccountBankingOpen] )
    {
		new query[200], Cache:cacheid, bankAccountExist;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i", DIR_ACCOUNT_BANK, PlayersData[playerid][AccountBankingOpen]);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);

		if (bankAccountExist )
		{
			new ChequesData[700];
			cache_get_value_name(0, "Client", Banking[playerid][Owner], MAX_PLAYER_NAME);
			cache_get_value_name_int(0, "Balance", Banking[playerid][Balance]);
			cache_get_value_name_int(0, "LockIn", Banking[playerid][LockIn]);
			cache_get_value_name_int(0, "LockOut", Banking[playerid][LockOut]);
			cache_get_value_name(0, "Cheques", ChequesData, 700);
		    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
		    {
				new ChequeDataSlot[4][50], SplitPos[2];
				SplitPos[1] = strfind(ChequesData, ",", false);
				for ( new i = 0; i != 4; i++ )
				{
					SplitPos[0] = strfind(ChequesData, "|", false);
					strmid(ChequeDataSlot[i], ChequesData, 0, SplitPos[0]);
					strdel(ChequesData, 0, SplitPos[0]+1);
				}
				strdel(ChequesData, 0, SplitPos[1]+1);

				Cheques[playerid][c][UniqueID] = strval(ChequeDataSlot[0]);
				Cheques[playerid][c][Type]     = strval(ChequeDataSlot[1]);
				format(Cheques[playerid][c][NombreCh], MAX_PLAYER_NAME, "%s", ChequeDataSlot[2]);
				Cheques[playerid][c][Ammount]  = strval(ChequeDataSlot[3]);
			}
		}
		cache_delete(cacheid);
	}
	else
	{
		CreateAccountBank(playerid);
	}
}
public SaveAccountBanking(playerid)
{
	new query[1000], Cache:cacheid, bankAccountExist;
	format(query, 500, "SELECT `AccountNumber` FROM `%s` WHERE `AccountNumber`=%i;", DIR_ACCOUNT_BANK, PlayersData[playerid][AccountBankingOpen]);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(bankAccountExist);
	cache_delete(cacheid);

	if (!bankAccountExist)
	{
		format(query, 500, "INSERT INTO `%s` (`AccountNumber`) VALUES ('%i');", DIR_ACCOUNT_BANK, PlayersData[playerid][AccountBankingOpen]);
		mysql_query(dataBase, query, false);
	}

	format(query, 500, "UPDATE `%s` SET ", DIR_ACCOUNT_BANK);
	strcat(query, "`Client`='%e',`Balance`='%i',`LockIn`='%i',`LockOut`='%i'");
	strcat(query, " WHERE `AccountNumber`=%i;");
	mysql_format(dataBase, query, 500, query,
		PlayersDataOnline[playerid][NameOnline],
		Banking[playerid][Balance],
		Banking[playerid][LockIn],
		Banking[playerid][LockOut],
		PlayersData[playerid][AccountBankingOpen]);
	mysql_query(dataBase, query, false);

	format(query, 100, "UPDATE `%s` SET `Cheques`='", DIR_ACCOUNT_BANK);
    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
    {
		new chequesData[60];
		format(chequesData, sizeof(chequesData), "%i|%i|%s|%i|,",
		Cheques[playerid][c][UniqueID],
		Cheques[playerid][c][Type],
		Cheques[playerid][c][NombreCh],
		Cheques[playerid][c][Ammount]);

		strcat(query, chequesData, 1000);
	}
	strcat(query, "' WHERE `AccountNumber`=%i;");
	mysql_format(dataBase, query, 1000, query, PlayersData[playerid][AccountBankingOpen]);
	mysql_query(dataBase, query, false);
}
public IsPlayerAccountBankConnected(accountcheck)
{
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][AccountBankingOpen] == accountcheck )
		{
		    return i;
		}
	}
	return -1;
}
public ShowVerCheques(playerid)
{
	new ChequesDialog[1200];
	new TempConvert[100];
	new ConteoCheques = -1;
	for (new i = 0; i < MAX_COUNT_CHEQUES; i++)
	{
	    if ( Cheques[playerid][i][UniqueID])
	    {
			if ( ConteoCheques != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Cheques #[%i] {F5FF00}Tipo: %s",
				Cheques[playerid][i][UniqueID],
				Cheques[playerid][i][NombreCh]);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Cheques #[%i] {F5FF00}Tipo: %s",
				Cheques[playerid][i][UniqueID],
				Cheques[playerid][i][NombreCh]);
			}
	        strcat(ChequesDialog, TempConvert, sizeof(ChequesDialog));
	        ConteoCheques++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCheques] = i;
        }
	}
	if (ConteoCheques != -1)
	{
		ShowPlayerDialogEx(playerid,84,DIALOG_STYLE_LIST,"{00A5FF}Banco - Cheques", ChequesDialog, "Cancelar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Información", "{F0F0F0}No se encontrarón cheques repartidos.", "Aceptar", "Volver");
	}
}
public CrearCheque(playerid, giveplayerid, type, amount, chequeid)
{
	new IDCheque[3]; gettime(IDCheque[0], IDCheque[1], IDCheque[2]);
	new ChequeIDStr[10];
	format(ChequeIDStr, sizeof(ChequeIDStr), "%i%i%i%i", random(100) + 1, IDCheque[0], IDCheque[1], IDCheque[2]);
	printf("%s", ChequeIDStr);
	IDCheque[0] = strvalEx(ChequeIDStr);

	Cheques[playerid][chequeid][UniqueID] 	= IDCheque[0];
	Cheques[playerid][chequeid][Type]		= type;
	if ( type )
	{
		format(Cheques[playerid][chequeid][NombreCh], MAX_PLAYER_NAME, "%s", PlayersDataOnline[giveplayerid][NameOnlineFix]);
	}
	else
	{
		format(Cheques[playerid][chequeid][NombreCh], MAX_PLAYER_NAME, "Nadie");
	}
	Cheques[playerid][chequeid][Ammount]    = amount;

	AddObjectToCartera(giveplayerid, CARTERA_TYPE_CHEQUE, amount, IDCheque[0], PlayersData[playerid][AccountBankingOpen]);
}
public ShowPayCheque(playerid)
{
	new ChequesDialog[1000];
	new TempConvert[100];
	new ConteoCheques = -1;

	for (new i = 0; i<=5;i++)
	{
	    if ( PlayersData[playerid][Cartera][i] == CARTERA_TYPE_CHEQUE )
	    {
			if ( ConteoCheques != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Cantidad $%i (Cheque #[%i]) {F5FF00}Cuenta: %i",
				PlayersData[playerid][CarteraC][i],
				PlayersData[playerid][CarteraT][i],
				PlayersData[playerid][CarteraI][i]);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Cantidad $%i (Cheque #[%i]) {F5FF00}Cuenta: %i",
				PlayersData[playerid][CarteraC][i],
				PlayersData[playerid][CarteraT][i],
				PlayersData[playerid][CarteraI][i]);
			}
	        strcat(ChequesDialog, TempConvert, sizeof(ChequesDialog));
	        ConteoCheques++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCheques] = i;
        }
	}
	if (ConteoCheques != -1)
	{
		ShowPlayerDialogEx(playerid,85,DIALOG_STYLE_LIST,"{00A5FF}Banco - Cobrar un Cheque", ChequesDialog, "Cobrar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Información", "{F0F0F0}No llevas cheques en la cartera para cobrar.", "Aceptar", "Volver");
	}
}
public PayCheckToPlayer(playerid, carteraid)
{
	new playeridConnected = IsPlayerAccountBankConnected(PlayersData[playerid][CarteraI][carteraid]);
	if ( playeridConnected != -1 )
	{
	    ////////////////////////////
	    new Cobrado = -1;
	    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
	    {
	        if ( Cheques[playeridConnected][c][UniqueID] == PlayersData[playerid][CarteraT][carteraid] )
	        {
	            Cobrado = c;
				break;
			}
		}
		if ( Cobrado != -1 )
		{
		    if ( Banking[playeridConnected][LockOut] )
		    {
				if ( !Cheques[playeridConnected][Cobrado][Type] || Cheques[playeridConnected][Cobrado][Type] && strfind(Cheques[playeridConnected][Cobrado][NombreCh], PlayersDataOnline[playerid][NameOnlineFix], false) == 0 && strlen(Cheques[playeridConnected][Cobrado][NombreCh]) == strlen(PlayersDataOnline[playerid][NameOnlineFix]) )
				{
				    if ( Banking[playeridConnected][Balance] >= PlayersData[playerid][CarteraC][carteraid] )
				    {
						new StatsBank[400];
						format(StatsBank, sizeof(StatsBank), "{E6E6E6}Has cobrado éste cheque con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}Propietario: {00A5FF}%s\n{E6E6E6}# Cuenta: {F5FF00}%i\n{E6E6E6}# Cheque: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
						Banking[playeridConnected][Owner],
						PlayersData[playerid][CarteraI][carteraid],
						PlayersData[playerid][CarteraT][carteraid],
						PlayersData[playerid][CarteraC][carteraid]);

					    PlayersData[playerid][Banco] 		+= PlayersData[playerid][CarteraC][carteraid];
					    Banking[playeridConnected][Balance] -= PlayersData[playerid][CarteraC][carteraid];
					    if ( PlayersData[playeridConnected][AlertSMSBank] && PlayersDataOnline[playeridConnected][PhoneOnline])
					    {
					        new MsgBankSMS[MAX_TEXT_CHAT];
					        new MsgBankSMSReason[MAX_TEXT_CHAT];
					        format(MsgBankSMSReason, sizeof(MsgBankSMSReason), "Han cobrado un cheque tipo [%s] con #%i por la suma de $%i en su cuenta de cheques.",
							CarteraChequeType[Cheques[playeridConnected][Cobrado][Type]],
							PlayersData[playerid][CarteraT][carteraid],
							PlayersData[playerid][CarteraC][carteraid]
							);
					        format(MsgBankSMS, sizeof(MsgBankSMS), "[SMS] Recibido del BCSA 333: %s", MsgBankSMSReason);
					        AddSMS(playeridConnected, 333, MsgBankSMSReason);
					        printf("%s Cheque Cuenta: %i || %s", PlayersDataOnline[playerid][NameOnline], MsgBankSMSReason);

							Acciones(playeridConnected, 8, "recibe un SMS en el móvil");
						    SendClientMessage(playeridConnected, COLOR_INFO_MOVIL, MsgBankSMS);

						    Banking[playeridConnected][Balance] -= 10;
						}
						RemoveCheque(playeridConnected, Cobrado);
						RemoveObjectToCartera(playerid, carteraid);
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Cheque Cobrado",StatsBank, "Aceptar", "Volver");
				    }
				    else
				    {
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque no pudó ser cobrado por fondos\ninsuficientes en la cuenta de destino", "Aceptar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque que intenta cobrar es personal, sólo puede ser cobrado por la persona al que fue dado.", "Aceptar", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta donde intenta cobrar el cheque\ntiene deshabilitado el cobro de cheques", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Este cheque fue cancelado por el dueño de la cuenta", "Aceptar", "Volver");
		}
	    ////////////////////////////
	}
	else
	{
		new query[200], Cache:cacheid, bankAccountExist;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i", DIR_ACCOUNT_BANK, PlayersData[playerid][CarteraI][carteraid]);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);
		if ( bankAccountExist )
		{
			new BankingPay[AccountBankEnum];
			new ChequesPay[MAX_COUNT_CHEQUES][ChequesEnum];
			new ChequesPayData[700];
			cache_get_value_name(0, "Client", BankingPay[Owner], MAX_PLAYER_NAME);
			cache_get_value_name_int(0, "Balance", BankingPay[Balance]);
			cache_get_value_name_int(0, "LockIn", BankingPay[LockIn]);
			cache_get_value_name_int(0, "LockOut", BankingPay[LockOut]);
			cache_get_value_name(0, "Cheques", ChequesPayData, 700);
		    for ( new chequeid = 0; chequeid < MAX_COUNT_CHEQUES; chequeid++ )
		    {
				new ChequePayDataSlot[4][50], SplitPos[2];
				SplitPos[1] = strfind(ChequesPayData, ",", false);
				for ( new i = 0; i != 4; i++ )
				{
					SplitPos[0] = strfind(ChequesPayData, "|", false);
					strmid(ChequePayDataSlot[i], ChequesPayData, 0, SplitPos[0]);
					strdel(ChequesPayData, 0, SplitPos[0]+1);
				}
				strdel(ChequesPayData, 0, SplitPos[1]+1);

				ChequesPay[chequeid][UniqueID] = strval(ChequePayDataSlot[0]);
				ChequesPay[chequeid][Type]     = strval(ChequePayDataSlot[1]);
				format(ChequesPay[chequeid][NombreCh], MAX_PLAYER_NAME, "%s", ChequePayDataSlot[2]);
				ChequesPay[chequeid][Ammount]  = strval(ChequePayDataSlot[3]);
			}

		    new Cobrado = -1;
		    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
		    {
		        if ( ChequesPay[c][UniqueID] == PlayersData[playerid][CarteraT][carteraid] )
		        {
		            Cobrado = c;
					break;
				}
			}
			if ( Cobrado != -1 )
			{
			    if ( BankingPay[LockOut] )
			    {
					if ( !ChequesPay[Cobrado][Type] || ChequesPay[Cobrado][Type] && strfind(ChequesPay[Cobrado][NombreCh], PlayersDataOnline[playerid][NameOnlineFix], false) == 0 && strlen(ChequesPay[Cobrado][NombreCh]) == strlen(PlayersDataOnline[playerid][NameOnlineFix]) )
					{
					    if ( BankingPay[Balance] >= PlayersData[playerid][CarteraC][carteraid] )
					    {
							new StatsBank[400];
							format(StatsBank, sizeof(StatsBank), "{E6E6E6}Has cobrado éste cheque con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}Propietario: {00A5FF}%s\n{E6E6E6}# Cuenta: {F5FF00}%i\n{E6E6E6}# Cheque: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
							BankingPay[Owner],
							PlayersData[playerid][CarteraI][carteraid],
							PlayersData[playerid][CarteraT][carteraid],
							PlayersData[playerid][CarteraC][carteraid]);

						    PlayersData[playerid][Banco] 		+= PlayersData[playerid][CarteraC][carteraid];
						    BankingPay[Balance] 				-= PlayersData[playerid][CarteraC][carteraid];
						    //
							ChequesPay[Cobrado][UniqueID] = 0;
							ChequesPay[Cobrado][Type] = 0;
							format(ChequesPay[Cobrado][NombreCh], MAX_PLAYER_NAME, "No");
							ChequesPay[Cobrado][Ammount] = 0;
								//RemoveCheque(playeridConnected, Cobrado);
							//
							RemoveObjectToCartera(playerid, carteraid);

							/////////////////////////
							format(query, 500, "UPDATE `%s` SET ", DIR_ACCOUNT_BANK);
							strcat(query, "`Client`='%e',`Balance`='%i',`LockIn`='%i',`LockOut`='%i'");
							strcat(query, " WHERE `AccountNumber`=%i;");
							mysql_format(dataBase, query, 500, query,
								BankingPay[Owner],
								BankingPay[Balance],
								BankingPay[LockIn],
								BankingPay[LockOut],
								PlayersData[playerid][CarteraI][carteraid]);
							mysql_query(dataBase, query, false);

							format(query, 100, "UPDATE `%s` SET `Cheques`='", DIR_ACCOUNT_BANK);
						    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
						    {
								new chequesData[60];
								format(chequesData, sizeof(chequesData), "%i|%i|%s|%i|,",
								ChequesPay[c][UniqueID],
								ChequesPay[c][Type],
								ChequesPay[c][NombreCh],
								ChequesPay[c][Ammount]);

								strcat(query, chequesData, 1000);
							}
							strcat(query, "' WHERE `AccountNumber`=%i;");
							mysql_format(dataBase, query, 1000, query, PlayersData[playerid][CarteraI][carteraid]);
							mysql_query(dataBase, query, false);
							/////////////////////////

							ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Cheque Cobrado",StatsBank, "Aceptar", "Volver");
					    }
					    else
					    {
							ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque no pudó ser cobrado por fondos\ninsuficientes en la cuenta de destino", "Aceptar", "Volver");
						}
					}
					else
					{
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque que intenta cobrar es personal, sólo puede ser cobrado por la persona al que fue dado.", "Aceptar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta donde intenta cobrar el cheque\ntiene deshabilitado el cobro de cheques", "Aceptar", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Este cheque fue cancelado por el dueño de la cuenta", "Aceptar", "Volver");
			}
		    ////////////////////////////
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El número de cuenta donde desea cobrar el cheque no existe!", "Aceptar", "Volver");
		}
		cache_delete(cacheid);
	}
}
public TransferirMoney(playerid, account, amount)
{
	new playeridConnected = IsPlayerAccountBankConnected(account);
	if ( playeridConnected != -1 )
	{
	    ////////////////////////////
		if ( Banking[playeridConnected][LockIn] )
		{
		    if ( Banking[playerid][Balance] >= amount )
		    {
				new StatsBank[400];
				format(StatsBank, sizeof(StatsBank), "{E6E6E6}Tranferencia realizada con con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}# Cuenta origen: {F5FF00}%i\n{E6E6E6}# Cuenta destino: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
				PlayersData[playerid][AccountBankingOpen],
				account,
				amount);

			    Banking[playerid][Balance] 			-= amount;
			    Banking[playeridConnected][Balance] += amount;

			    if ( PlayersData[playeridConnected][AlertSMSBank] && PlayersDataOnline[playeridConnected][PhoneOnline] )
			    {
			        new MsgBankSMS[MAX_TEXT_CHAT];
			        new MsgBankSMSReason[MAX_TEXT_CHAT];
			        format(MsgBankSMSReason, sizeof(MsgBankSMSReason), "Has recibido una transferencia de la cuenta #%i por la suma de $%i.",
					PlayersData[playerid][AccountBankingOpen],
					amount
					);
			        format(MsgBankSMS, sizeof(MsgBankSMS), "[SMS] Recibido del BCSA 333: %s", MsgBankSMSReason);

			        AddSMS(playeridConnected, 333, MsgBankSMSReason);

					Acciones(playeridConnected, 8, "recibe un SMS en el móvil");
				    SendClientMessage(playeridConnected, COLOR_INFO_MOVIL, MsgBankSMS);

				    Banking[playeridConnected][Balance] -= 10;
				}

				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia Realizada",StatsBank, "Aceptar", "Volver");
		    }
		    else
		    {
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Su cuenta de cheques no tiene suficientes fondos\npara realizar está transferencia", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta a la que desea realizar una transferencia\ntiene prohibidas las transferencias entrantes.", "Aceptar", "Volver");
		}
	    ////////////////////////////
	}
	else
	{
	    new query[1000], Cache:cacheid, bankAccountExist;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i", DIR_ACCOUNT_BANK, account);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);
		if ( bankAccountExist )
		{
			new BankingPay[AccountBankEnum];
			new ChequesPay[MAX_COUNT_CHEQUES][ChequesEnum];
			new ChequesPayData[700];
			cache_get_value_name(0, "Client", BankingPay[Owner], MAX_PLAYER_NAME);
			cache_get_value_name_int(0, "Balance", BankingPay[Balance]);
			cache_get_value_name_int(0, "LockIn", BankingPay[LockIn]);
			cache_get_value_name_int(0, "LockOut", BankingPay[LockOut]);
			cache_get_value_name(0, "Cheques", ChequesPayData, 700);
		    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
		    {
				new ChequePayDataSlot[4][50], SplitPos[2];
				SplitPos[1] = strfind(ChequesPayData, ",", false);
				for ( new i = 0; i != 4; i++ )
				{
					SplitPos[0] = strfind(ChequesPayData, "|", false);
					strmid(ChequePayDataSlot[i], ChequesPayData, 0, SplitPos[0]);
					strdel(ChequesPayData, 0, SplitPos[0]+1);
				}
				strdel(ChequesPayData, 0, SplitPos[1]+1);

				ChequesPay[c][UniqueID] = strval(ChequePayDataSlot[0]);
				ChequesPay[c][Type]     = strval(ChequePayDataSlot[1]);
				format(ChequesPay[c][NombreCh], MAX_PLAYER_NAME, "%s", ChequePayDataSlot[2]);
				ChequesPay[c][Ammount]  = strval(ChequePayDataSlot[3]);
			}
		    ////////////////////////////
			if ( BankingPay[LockIn] )
			{
			    if ( Banking[playerid][Balance] >= amount )
			    {
   					new StatsBank[400];
					format(StatsBank, sizeof(StatsBank), "{E6E6E6}Tranferencia realizada con con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}# Cuenta origen: {F5FF00}%i\n{E6E6E6}# Cuenta destino: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
					PlayersData[playerid][AccountBankingOpen],
					account,
					amount);

				    Banking[playerid][Balance] 			-= amount;
				    BankingPay[Balance] 				+= amount;
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia Realizada",StatsBank, "Aceptar", "Volver");
					/////////////////////////
					format(query, 500, "UPDATE `%s` SET ", DIR_ACCOUNT_BANK);
					strcat(query, "`Client`='%e',`Balance`='%i',`LockIn`='%i',`LockOut`='%i'");
					strcat(query, " WHERE `AccountNumber`=%i;");
					mysql_format(dataBase, query, 500, query,
						BankingPay[Owner],
						BankingPay[Balance],
						BankingPay[LockIn],
						BankingPay[LockOut],
						account);
					mysql_query(dataBase, query, false);

					format(query, 100, "UPDATE `%s` SET `Cheques`='", DIR_ACCOUNT_BANK);
				    for ( new chequeid = 0; chequeid < MAX_COUNT_CHEQUES; chequeid++ )
				    {
						new chequesData[60];
						format(chequesData, sizeof(chequesData), "%i|%i|%s|%i|,",
						ChequesPay[chequeid][UniqueID],
						ChequesPay[chequeid][Type],
						ChequesPay[chequeid][NombreCh],
						ChequesPay[chequeid][Ammount]);

						strcat(query, chequesData, 1000);
					}
					strcat(query, "' WHERE `AccountNumber`=%i;");
					mysql_format(dataBase, query, 1000, query, account);
					mysql_query(dataBase, query, false);
					/////////////////////////
			    }
			    else
			    {
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Su cuenta de cheques no tiene suficientes fondos\npara realizar está transferencia", "Aceptar", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta a la que desea realizar una transferencia\ntiene prohibidas las transferencias entrantes.", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El número de cuenta a donde desea transferir dinero no existe!", "Aceptar", "Volver");
		}
		cache_delete(cacheid);
	}
}
public ShowBankConfiguration(playerid)
{
	new ConfigBankDialog[500];
	new TempConvert[100];

	format(TempConvert, sizeof(TempConvert), "{F0F0F0}Alertas por SMS: %s {F5FF00}(Recargo de $10 por aviso)",
	SiOrNoBank[PlayersData[playerid][AlertSMSBank]]);
    strcat(ConfigBankDialog, TempConvert, sizeof(ConfigBankDialog));

	format(TempConvert, sizeof(TempConvert), "\r\n{F0F0F0}Aceptar Transferencias Entrantes: %s",
	SiOrNoBank[Banking[playerid][LockIn]]);
    strcat(ConfigBankDialog, TempConvert, sizeof(ConfigBankDialog));

	format(TempConvert, sizeof(TempConvert), "\r\n{F0F0F0}Aceptar Cobro de Cheques: %s {F0F0F0}",
	SiOrNoBank[Banking[playerid][LockOut]]);
    strcat(ConfigBankDialog, TempConvert, sizeof(ConfigBankDialog));


	ShowPlayerDialogEx(playerid,86,DIALOG_STYLE_LIST,"{00A5FF}Banco - Configuración", ConfigBankDialog, "Seleccionar", "Volver");
}
public ShowBankTransferencia(playerid)
{
	ShowPlayerDialogEx(playerid,87,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Hacer una Transferencia", "{F0F0F0}Ingrese el número de cuenta a la que desea transferir dinero", "Siguiente", "Volver");
}
public ShowBankTransferenciaCantidad(playerid)
{
	ShowPlayerDialogEx(playerid,88,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Elegir Cantidad", "{F0F0F0}Ingrese la cantidad de dinero que desea transferir", "Siguiente", "Atrás");
}
public ShowBankTransferenciaResumen(playerid)
{
	new StatsTrans[400];
	format(StatsTrans, sizeof(StatsTrans), "{E6E6E6}Está a punto de realizar una transferencia!\n\n{E6E6E6}Porfavor revise que todos los datos a continuación están correctamente:\n{E6E6E6}# Cuenta origen: {F5FF00}%i\n{E6E6E6}# Cuenta destino: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i\n\n{E6E6E6}Sí la información proporcionada está correcta pulse en \"Realizar\"",
	PlayersData[playerid][AccountBankingOpen],
	PlayersDataOnline[playerid][SaveAfterAgenda][0],
	PlayersDataOnline[playerid][SaveAfterAgenda][1]);

	ShowPlayerDialogEx(playerid,89,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Verificar Datos", StatsTrans, "Realizar", "Atrás");
}
public AddPlayerToDM(playerid, teamid)
{
	if ( SkinDM[PlayersDataOnline[playerid][TeamDM]] )
	{
		SetPlayerSkin(playerid, SkinDM[PlayersDataOnline[playerid][TeamDM]]);
	}
	ResetPlayerWeaponsEx(playerid);
	TextDrawShowForPlayer(playerid, ModeDMTextDraw[0]);
	TextDrawShowForPlayer(playerid, ModeDMTextDraw[1]);
	PlayersDataOnline[playerid][ModeDM] = true;
	PlayersDataOnline[playerid][TeamDM] = teamid;

	UpdateTextDrawDM(0);
	UpdateTextDrawDM(1);
}
public RemovePlayerToDM(playerid)
{
	if ( SkinDM[PlayersDataOnline[playerid][TeamDM]] )
	{
		SetPlayerSkin(playerid, PlayersData[playerid][Skin]);
	}
	ResetPlayerWeaponsEx(playerid);
	TextDrawHideForPlayer(playerid, ModeDMTextDraw[0]);
	TextDrawHideForPlayer(playerid, ModeDMTextDraw[1]);
	PlayersDataOnline[playerid][ModeDM] = false;
	PlayersDataOnline[playerid][PointDm] = false;
	UpdateSpawnPlayer(playerid);

	UpdateTextDrawDM(0);
	UpdateTextDrawDM(1);
}
public IsVehicleExplotion(playerid, vehicleid, Float:damage, seat)
{
	new Salte;
	if ( damage < 250.0 )
	{
		if ( !PlayersDataOnline[playerid][CountIntentarVehicle] )
		{
		    if ( IntentarAccion(playerid, "salir del vehículo", random(2)) )
		    {
				PlayersDataOnline[playerid][CountIntentarVehicle] = 1;
			}
			else
			{
				Salte = true;
				PlayersDataOnline[playerid][CountIntentarVehicle] = 2;
			}
		}
		else if ( PlayersDataOnline[playerid][CountIntentarVehicle] == 2 )
		{
	    	Salte = true;
	    }

		if ( Salte )
		{
			ForcePutPlayerInVehicle(playerid, vehicleid, seat);
		}
	}
}
public OnPlayerEnterVehicleEx(playerid, vehicleid, ispassenger)
{
	PlayersDataOnline[playerid][CountIntentarVehicle] = false;
}
public OnPlayerExitVehicleEx(playerid, vehicleid, ispassenger)
{

}
public IsVehicleBug(vehicleid, SpawnBug)
{
	if ( GetVehicleVirtualWorld(vehicleid) != 999 )
	{
		if ( DataCars[vehicleid][WorldLast] > 999 )
		{
			new HouseID = GetHouseidIdByWorld(DataCars[vehicleid][WorldLast]);
			if ( HouseID )
			{
				new GarageID = GetGarageIdByWorld(HouseID, DataCars[vehicleid][WorldLast]);
				if ( GarageID != -1 )
				{
				    new Float:VehiclePosBug[3]; GetVehiclePos(vehicleid, VehiclePosBug[0], VehiclePosBug[1], VehiclePosBug[2]);
					if ( GetVehicleVirtualWorld(vehicleid) != DataCars[vehicleid][WorldLast] || !IsPointFromPoint(30.0, VehiclePosBug[0], VehiclePosBug[1], VehiclePosBug[2], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosXc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosYc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosZc]) )
					{
					    if ( SpawnBug )
					    {
							new MsgAviso[MAX_TEXT_CHAT];
						    format(MsgAviso, sizeof(MsgAviso), "%s Bug Report - El vehículo con ID[%i] se ha desbugueado automáticamente (Tipo de debug: Pos)", LOGO_STAFF, vehicleid);
							MsgCheatsReportsToAdmins(MsgAviso);

							SetVehicleVirtualWorldEx(vehicleid, Garages[HouseID][GarageID][WorldG]);
							LinkVehicleToInteriorEx(vehicleid, TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][Interior]);
							SetVehiclePos(vehicleid, TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosXc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosYc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosZc]);
							SetVehicleZAngle(vehicleid, TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosZZc]);
						}
						return true;
					}
	   			}
			}
		}
		else if ( DataCars[vehicleid][WorldLast] != GetVehicleVirtualWorld(vehicleid) )
		{
		    if ( SpawnBug )
		    {
				new MsgAviso[MAX_TEXT_CHAT];
			    format(MsgAviso, sizeof(MsgAviso), "%s Bug Report - El vehículo con ID[%i] se ha desbugueado automáticamente (Tipo de debug: Spawn)", LOGO_STAFF, vehicleid);
				MsgCheatsReportsToAdmins(MsgAviso);
	        	SetVehicleToRespawnExTwo(vehicleid);
        	}
	        return true;
		}
   }
	return false;
}
public LoadCamerasLogin()
{
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 2097.7078;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = 1825.1970;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 0.0;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 2097.7078;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = 1825.1970;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 10.8203;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 2057.4226;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = 1497.5380;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 103.0167;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1624.5200;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -1179.5583;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 75.5165;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1656.6953;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -1270.7322;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 82.6283;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1602.2152;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -1788.6689;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 37.0291;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1452.0786;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -912.4713;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 20.5950;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1454.3749;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -992.5303;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 101.6335;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1411.0945;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -804.6624;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 84.0893;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1406.3000;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -1620.8445;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = -48.2888;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1406.5889;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -1627.7599;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 62.9646;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1532.3053;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -1755.0554;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 11.4160;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1751.0354;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -1247.8403;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 69.6952;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1776.3820;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -1302.4565;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 114.8198;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1621.5737;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -1317.7003;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 114.8198;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = -1465.0914;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = 718.6000;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = -120.9556;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = -1450.2291;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = 662.2463;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 1.5133;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = -1297.3114;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = 731.4880;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 39.9422;
}
public SetCameraLogin(playerid, nextcamera, avanze)
{
	if ( avanze )
	{
		nextcamera++;
	}
	else
	{
	    nextcamera--;
	}

	if ( nextcamera > MAX_CAMERAS_LOGIN )
	{
	    nextcamera = 0;
	}
	else if ( nextcamera < 0 )
	{
	    nextcamera = MAX_CAMERAS_LOGIN;
	}
	PlayersData[playerid][CameraLogin] = nextcamera;

	SetPlayerPos(playerid, CamerasLogin[nextcamera][PlayerPosLogin][0], CamerasLogin[nextcamera][PlayerPosLogin][1], CamerasLogin[nextcamera][PlayerPosLogin][2]);
	SetPlayerCameraPos(playerid, 	CamerasLogin[nextcamera][CamerasPosLogin][0], CamerasLogin[nextcamera][CamerasPosLogin][1], CamerasLogin[nextcamera][CamerasPosLogin][2]);
	SetPlayerCameraLookAt(playerid, CamerasLogin[nextcamera][CamerasLookLogin][0], CamerasLogin[nextcamera][CamerasLookLogin][1], CamerasLogin[nextcamera][CamerasLookLogin][2]);
}
public SetCameraPresent(playerid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ, min, max)
{
	SetPlayerCameraLookAt(playerid, CamerasPresent[point][4], CamerasPresent[point][5], CamerasPresent[point][6]);
	new NextPoint;
	new PassPoint;
	Porcent += CamerasPresent[point][3];
	if ( point == max )
	{
		NextPoint = min;
	}
	else
	{
		NextPoint = point + 1;
	}
	/////////////////////////////// X POS
	if ( CamerasPresent[point][0] > CamerasPresent[NextPoint][0] )
	{
        CameraX -= ((CamerasPresent[point][0] - CamerasPresent[NextPoint][0]) * Porcent) / 100;
        if ( CameraX < CamerasPresent[NextPoint][0] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraX += ((CamerasPresent[NextPoint][0] - CamerasPresent[point][0]) * Porcent) / 100;
        if ( CameraX > CamerasPresent[NextPoint][0] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Y POS
	if ( CamerasPresent[point][1] > CamerasPresent[NextPoint][1] )
	{
        CameraY -= ((CamerasPresent[point][1] - CamerasPresent[NextPoint][1]) * Porcent) / 100;
        if ( CameraY < CamerasPresent[NextPoint][1] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraY += ((CamerasPresent[NextPoint][1] - CamerasPresent[point][1]) * Porcent) / 100;
        if ( CameraY > CamerasPresent[NextPoint][1] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Z POS
	if ( CamerasPresent[point][2] > CamerasPresent[NextPoint][2] )
	{
        CameraZ -= ((CamerasPresent[point][2] - CamerasPresent[NextPoint][2]) * Porcent) / 100;
        /*if ( CameraZ < CamerasPresent[NextPoint][2] )
        {
            PassPoint++;
        }*/
        PassPoint++;
	}
	else
	{
        CameraZ += ((CamerasPresent[NextPoint][2] - CamerasPresent[point][2]) * Porcent) / 100;
        /*if ( CameraZ > CamerasPresent[NextPoint][2] )
        {
            PassPoint++;
        }*/
        PassPoint++;
	}

	if ( PassPoint == 3 )
	{
	    point = NextPoint;
		CameraX = CamerasPresent[NextPoint][0];
		CameraY = CamerasPresent[NextPoint][1];
		CameraZ = CamerasPresent[NextPoint][2];
	    Porcent = 0.0;
	}
	SetPlayerCameraPos(playerid,CameraX,CameraY,CameraZ);
	PlayersDataOnline[playerid][TimerCamaraId] = SetTimerEx("SetCameraPresent", 20, false, "ddffffdd", playerid, point, Porcent, CameraX, CameraY, CameraZ, min, max);
}
public SetCameraPresentRace(playerid, raceid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ)
{
//	printf("%d %d %d %f %f %f %f", playerid, raceid, point, Porcent, CameraX, CameraY, CameraZ);
	SetPlayerCameraLookAt(playerid,
	PistasPosPlayers[raceid][PlayersDataOnline[playerid][PosIDp]][Xpos],
	PistasPosPlayers[raceid][PlayersDataOnline[playerid][PosIDp]][Ypos],
	PistasPosPlayers[raceid][PlayersDataOnline[playerid][PosIDp]][Zpos]);

	new NextPoint;
	new PassPoint;
	Porcent += PistasCameras[raceid][point][Vel];
	if ( point == Pistas[raceid][MaxCameras] )
	{
		NextPoint = 0;
	}
	else
	{
		NextPoint = point + 1;
	}
	/////////////////////////////// X POS
	if ( PistasCameras[raceid][point][Xpos] > PistasCameras[raceid][NextPoint][Xpos] )
	{
        CameraX -= ((PistasCameras[raceid][point][Xpos] - PistasCameras[raceid][NextPoint][Xpos]) * Porcent) / 100;
        if ( CameraX < PistasCameras[raceid][NextPoint][Xpos] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraX += ((PistasCameras[raceid][NextPoint][Xpos] - PistasCameras[raceid][point][Xpos]) * Porcent) / 100;
        if ( CameraX > PistasCameras[raceid][NextPoint][Xpos] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Y POS
	if ( PistasCameras[raceid][point][Ypos] > PistasCameras[raceid][NextPoint][Ypos] )
	{
        CameraY -= ((PistasCameras[raceid][point][Ypos] - PistasCameras[raceid][NextPoint][Ypos]) * Porcent) / 100;
        if ( CameraY < PistasCameras[raceid][NextPoint][Ypos] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraY += ((PistasCameras[raceid][NextPoint][Ypos] - PistasCameras[raceid][point][Ypos]) * Porcent) / 100;
        if ( CameraY > PistasCameras[raceid][NextPoint][Ypos] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Z POS
	if ( PistasCameras[raceid][point][Zpos] > PistasCameras[raceid][NextPoint][Zpos] )
	{
        CameraZ -= ((PistasCameras[raceid][point][Zpos] - PistasCameras[raceid][NextPoint][Zpos]) * Porcent) / 100;

        PassPoint++;
	}
	else
	{
        CameraZ += ((PistasCameras[raceid][NextPoint][Zpos] - PistasCameras[raceid][point][Zpos]) * Porcent) / 100;

        PassPoint++;
	}

	if ( PassPoint == 3 )
	{
	    point = NextPoint;
		CameraX = PistasCameras[raceid][NextPoint][Xpos];
		CameraY = PistasCameras[raceid][NextPoint][Ypos];
		CameraZ = PistasCameras[raceid][NextPoint][Zpos];
	    Porcent = 0.0;
	}
	SetPlayerCameraPos(playerid,CameraX,CameraY,CameraZ);
	PlayersDataOnline[playerid][TimerCamaraIdRace] = SetTimerEx("SetCameraPresentRace", 20, false, "dddffff", playerid, raceid, point, Porcent, CameraX, CameraY, CameraZ);
}
public LoadLastOptionsServer()
{
	SetTimer("CheckVehicleGas", TIME_CHECK_GAS_VEHICLES, false);

	// TextDraw DeathMatch TEAM 1
	ModeDMTextDraw[0] = TextDrawCreateEx(498.0, 105.0,"~W~Jugador   ~G~Puntos~N~~R~Jugador~N~~Y~Jugador~N~~P~Jugador~N~~N~~G~Total: ~W~0");
	TextDrawUseBox(ModeDMTextDraw[0], 1);
	TextDrawBackgroundColor(ModeDMTextDraw[0] ,0x000000A3);
	TextDrawColor(ModeDMTextDraw[0], 0x2DFF00FF);
	TextDrawBoxColor(ModeDMTextDraw[0], 0x000000A1);
	TextDrawTextSize(ModeDMTextDraw[0], 637, 107.0);
	TextDrawSetShadow(ModeDMTextDraw[0], 1);
	TextDrawLetterSize(ModeDMTextDraw[0], 0.2 , 0.9);
	TextDrawFont(ModeDMTextDraw[0], 2);

	// TextDraw DeathMatch TEAM 2
	ModeDMTextDraw[1] = TextDrawCreateEx(498.0, 175.0,"~W~Jugador   ~G~Puntos~N~~R~Jugador~N~~Y~Jugador~N~~P~Jugador~N~~N~~G~Total: ~W~0");
	TextDrawUseBox(ModeDMTextDraw[1], 1);
	TextDrawBackgroundColor(ModeDMTextDraw[1] ,0x000000A3);
	TextDrawColor(ModeDMTextDraw[1], 0x2DFF00FF);
	TextDrawBoxColor(ModeDMTextDraw[1], 0x000000A1);
	TextDrawTextSize(ModeDMTextDraw[1], 637, 177.0);
	TextDrawSetShadow(ModeDMTextDraw[1], 1);
	TextDrawLetterSize(ModeDMTextDraw[1], 0.2 , 0.9);
	TextDrawFont(ModeDMTextDraw[1], 2);

	format(DataCars[0][MatriculaString], 32, "Ninguno");

	// WideScreen Tutorial
	WideScreen = TextDrawCreate(0, 0, "~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~");
	TextDrawUseBox(WideScreen, 1);
	TextDrawTextSize(WideScreen, 650.0, 200.0);
	TextDrawBoxColor(WideScreen, 0x000000FF);

	WideScreen2 = TextDrawCreate(0, 340.0, "~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~");
	TextDrawUseBox(WideScreen2, 1);
	TextDrawTextSize(WideScreen2, 650.0, 500.0);
	TextDrawBoxColor(WideScreen2, 0x000000FF);

	// Race TextDraw
	ScoreRaceBox = TextDrawCreate(493.9, 140.0, "______~P~Posiciones~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~");
	TextDrawUseBox(ScoreRaceBox, 1);
	TextDrawSetShadow(ScoreRaceBox, 1);
	TextDrawTextSize(ScoreRaceBox, 615.8, 500.0);
	TextDrawBoxColor(ScoreRaceBox, 0x0000008A);
	TextDrawFont(ScoreRaceBox, 2);
	TextDrawLetterSize(ScoreRaceBox, 0.3, 1 );

	// Lock Off
/*	LockVehicleText[0] = TextDrawCreate(520.9, 450.0, "__");
	TextDrawUseBox(LockVehicleText[0], 1);
	TextDrawSetShadow(LockVehicleText[0], 1);
	TextDrawTextSize(LockVehicleText[0], 526.8, 500.0);
	TextDrawBoxColor(LockVehicleText[0], 0xE10000FF);
	TextDrawFont(LockVehicleText[0], 2);
	TextDrawLetterSize(LockVehicleText[0], 0.3, 1 );*/

	// LockVehicleText

	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
		ScorePosRace[p] = TextDrawCreate(498.2, 155.0, "~W~1-~N~~N~~W~2-~N~~N~~W~3-");
		TextDrawSetShadow(ScorePosRace[p], 1);
		TextDrawFont(ScorePosRace[p], 2);
		TextDrawLetterSize(ScorePosRace[p], 0.2, 1);
	}

	// TIMER GLOBAL
	SetTimerGlobal();
	//CheckPlayersAFK();
}
public ShowPlayerVerifiquedEmail(playerid, option)
{
    if ( option )
    {
		ShowPlayerDialogEx(playerid, 91, DIALOG_STYLE_INPUT, "{00A5FF}Confirmar E-mail", "{F0F0F0}Introduzca el E-mail que figura en\n{F0F0F0}su configuración, luego pulse en \"Verificar\"", "Verificar", "Volver");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = false;
   	}
   	else
   	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = true;
		ShowPlayerDialogEx(playerid, 91, DIALOG_STYLE_INPUT, "{00A5FF}Confirmar E-mail", "{F0F0F0}Intente nuevamente introducir su\n{F0F0F0}E-mail y pulse en ingresar \"Verificar\"", "Verificar", "Volver");
	}
}
public ShowPlayerLogin(playerid, option)
{
	new MsgWelcome[50];
	format(MsgWelcome, sizeof(MsgWelcome), "{00A5FF}Identifíquese %s!", PlayersDataOnline[playerid][NameOnlineFix]);

    if ( option )
    {
		ShowPlayerDialogEx(playerid, 1, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Escriba su contraseña y pulse en \"Ingresar\"", "Ingresar", "Cancelar");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = false;
   	}
   	else
   	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = true;
        ShowPlayerDialogEx(playerid, 1, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Intente nuevamente ingresar su contraseña y pulse en \"Ingresar\"\n\n{F50000}NOTA: {F0F0F0}Si ha olvidado su contraseña puede solicitarla mediante un E-mail pulsando en \"Recuperar\"\n{F0F0F0}o tratando directamente en el centro de soporte ("WEBPAGE"/Soporte)", "Ingresar", "Recuperar");
	}
}
public ShowPlayerRegister(playerid, option)
{
	new MsgWelcome[50];
    format(MsgWelcome, sizeof(MsgWelcome), "{00A5FF}Regístrese %s!", PlayersDataOnline[playerid][NameOnlineFix]);

    if ( option )
    {
    	ShowPlayerDialogEx(playerid, 2, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Ingresar una contraseña para regístrarse!", "Registrar", "Cancelar");
   	}
   	else
   	{
		ShowPlayerDialogEx(playerid, 2, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Escribe una contraseña mayor de 4 caracteres y menor de 25!", "Registrar", "Cancelar");
	}
}
public SendRequestPasswordRecovery(playerid)
{
	/*
	new StrRequestHTTP[400];
	format(StrRequestHTTP, sizeof(StrRequestHTTP), ""WEBPAGE"/recuperar_password_samp.php?passwordPass=%s&passwordUser=%s&EmailSend=%s&UserName=%s",
			PASSWORD_EMAIL,
			PlayersData[playerid][Password],
			PlayersData[playerid][Email],
			PlayersDataOnline[playerid][NameOnline]);

	printf("%s", StrRequestHTTP);

	HTTP(playerid, HTTP_POST, StrRequestHTTP, "", "RecoveryEmailPlayer");
	*/
}
public RecoveryEmailPlayer(playerid, response_code, const data[])
{
	if ( IsPlayerConnected(playerid) )
	{
	    printf("RecoveryEmailPlayer || %s[%i] || Error HTTP: %i || Data: %s", PlayersDataOnline[playerid][NameOnline], playerid, response_code, data);
		if ( response_code == 200 && strval(data) || response_code == HTTP_ERROR_MALFORMED_RESPONSE && strval(data) )
		{
		    new MsgEmailSend[400];
		    format(MsgEmailSend, sizeof(MsgEmailSend), "{F0F0F0}El proceso se ha realizado con éxito!\n\nSe ha enviado un E-mail con su contraseña actual a la siguiente dirección:\n{F5FF00}%s\n\n{F0F0F0}Revise la bandeja de Spam si no encuentra el E-mail.", PlayersData[playerid][Email]);
		    strcat(MsgEmailSend, "\n\n{F0F0F0}Cualquier duda no olvide dirígirse al centro de soporte en:\n{F5FF00}"WEBPAGE"/Soporte\n\n\n\n{00A5FF}Saludos Cordiales\n{00A5FF}Equipo de Old Players.", sizeof(MsgEmailSend));
	        ShowPlayerDialogEx(playerid, 999, DIALOG_STYLE_MSGBOX, "{00A5FF}Información - Recuperación de contraseña", MsgEmailSend, "Ok", "");

	        PlayersData[playerid][EmailTime] = gettime() + 7200;
		}
		else
		{
	        ShowPlayerDialogEx(playerid, 999, DIALOG_STYLE_MSGBOX, "{00A5FF}Información - Error! (Recuperación de contraseña)", "{F50000}Oops, un error ha ocurrído!\n\n{F0F0F0}Porfavor intenté luego realizar está operación\n{F0F0F0}Si el problema llega a persistir, nos puede contar el inconveniente en: {F5FF00}"WEBPAGE"/Soporte\n\n\n{F0F0F0}Disculpar las molestías.", "Ok", "");
		}
        KickEx(playerid, 9);
	}
}
public ShowPlayerDialogEx(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[])
{
    PlayersDataOnline[playerid][CurrentDialog] = dialogid;
	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}
public IsValidEmail(playerid, const email[])
{
   /*
	new StrRequestHTTP[400];
	format(StrRequestHTTP, sizeof(StrRequestHTTP), ""WEBPAGE"/IsValidEmail.php?email=%s",
			email);

	printf("%s", StrRequestHTTP);

	HTTP(playerid, HTTP_POST, StrRequestHTTP, "", "ValidingEmail");
	*/
	printf("IsValidEmail: %s", email);
	if (strfind(email, "@", true) != -1 && strlen(email) >= 14 )
	{
		new query[200], Cache:cacheid, emailInUse;
		mysql_format(dataBase, query, 200, "SELECT `Email` FROM `%s` WHERE `Email`='%e';", DIR_USERS, email);
		mysql_query(dataBase, query);
		cache_get_row_count(emailInUse);
		cache_delete(cacheid);
		if (emailInUse)
		{
		    SendInfoMessage(playerid, 0, "1606", "E-mail en uso.");
		    ShowPlayerEmailChange(playerid, true);
		}
		else CallLocalFunction("ValidingEmail", "iis", playerid, 200, email);
	}
	else CallLocalFunction("ValidingEmail", "iis", playerid, HTTP_ERROR_MALFORMED_RESPONSE, " ");
	return 1;
}
public ValidingEmail(playerid, response_code, const data[])
{
	if ( IsPlayerConnected(playerid) )
	{
	    printf("ValidingEmail || %s[%i] || Error HTTP: %i || Data: %s", PlayersDataOnline[playerid][NameOnline], playerid, response_code, data);
		if ( response_code == 200 || response_code == HTTP_ERROR_MALFORMED_RESPONSE  )
		{
		    if ( strlen(data) > 1 )
		    {
		        new query[200];

				format(PlayersData[playerid][Email], 60, "%s", data);
				mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Email`='%e' WHERE `Nombre`='%e';", DIR_USERS, data, PlayersDataOnline[playerid][NameOnline]);
				mysql_query(dataBase, query, false);

			    new MsgNewEmail[MAX_TEXT_CHAT];
			    format(MsgNewEmail, sizeof(MsgNewEmail), "Ha cambiado su E-mail satisfactoriamente. Su nuevo E-mail es: %s", data);

				SendInfoMessage(playerid, 3, "0", MsgNewEmail);
		    	ShowDialogAccount(playerid);
			}
			else
			{
				ShowPlayerEmailChange(playerid, false);
			}
		}
		else
		{
			ShowPlayerEmailChange(playerid, false);
		}
	}
}
public ShowPlayerEmailChange(playerid, option)
{
    if ( option )
    {
		ShowPlayerDialogEx(playerid, 90, DIALOG_STYLE_INPUT, "{00A5FF}Nuevo E-mail", "{F0F0F0}Ingrese un nuevo Email para su cuenta", "Cambiar", "Volver");
   	}
   	else
   	{
		ShowPlayerDialogEx(playerid, 90, DIALOG_STYLE_INPUT, "{00A5FF}Nuevo E-mail", "{F0F0F0}El E-mail introducido ni es válido, porfavor, revise el mismo.", "Cambiar", "Volver");
	}
}
public IsValidStringServer(playerid, const string[])
{
    if (strfind(string, InvalidSting, true) != -1)
    {
        SendInfoMessage(playerid, 0, "1380", "Ha introducido un carácter inválido.");
        return false;
    }
    for ( new i = 0; i < strlen(string); i++ )
	{
		if ( string[i] == ',' ||
	     	 string[i] == '³' ||
	     	 string[i] == '|' )
		{
		    SendInfoMessage(playerid, 0, "1380", "Ha introducido un carácter inválido.");
		    return false;
		}
	}
	return true;
}
public IsValidStringServerOther(playerid, const string[])
{
    if (strfind(string, InvalidSting, true) != -1)
    {
        SendInfoMessage(playerid, 0, "1380", "Ha introducido un carácter inválido.");
        return false;
    }
	for ( new i = 0; i < strlen(string); i++ )
	{
	    if ( string[i] == '³' ||
			 string[i] == ''' ||
	     	 string[i] == '|' )
		{
		    SendInfoMessage(playerid, 0, "1380", "Ha introducido un carácter inválido.");
		    return false;
		}
	}
	return true;
}
public CreateObjectEx(modelid, Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ, Float:DrawDistance)
{
	MAX_OBJECT_FIJOS++;
	return CreateObject(modelid, X, Y, Z, rX, rY, rZ, DrawDistance);
}
public GetVehicleVelocityEx(vehicleid)
{
	new Float:Velocity[3];
	GetVehicleVelocity(vehicleid, Velocity[0], Velocity[1], Velocity[2]);
	return floatround(floatsqroot(floatpower(floatabs(Velocity[0]), 2.0) + floatpower(floatabs(Velocity[1]), 2.0) + floatpower(floatabs(Velocity[2]), 2.0)) * 120.0);
}
public DetectSpam(playerid, text[])
{
	if ( strfind(text, " server ", false, 0) 					!= -1 ||
		 strfind(text, "server ", false, 0) 					== 0 ||
	     strfind(text, " servidor ", false, 0) 					!= -1 ||
		 strfind(text, "servidor ", false, 0) 					== 0 ||
		 strfind(text, " rol ", false, 0) 						!= -1 ||
		 strfind(text, "rol ", false, 0)						== 0 ||
		 strfind(text, "87.98.229.188:7232", false, 0)			!= -1 ||
		 strfind(text, "213.5.176.155:8888", false, 0) 			!= -1 ||
		 strfind(text, "217.18.70.93:8800", false, 0) 			!= -1 ||
		 strfind(text, "66.7.194.75:5555", false, 0) 			!= -1 ||
		 strfind(text, "173.192.22.150:7777", false, 0) 		!= -1 ||
		 strfind(text, "78.129.221.58:7787", false, 0)			!= -1 ||
 		 strfind(text, "184.82.169.84:7781", false, 0) 			!= -1 ||
 		 strfind(text, "188.138.106.41:7777", false, 0) 		!= -1 ||
 		 strfind(text, "Rol Iberico", false, 0) 				!= -1 ||
		 strfind(text, "Gamerol.net", false, 0) 				!= -1 ||
		 strfind(text, "Gamerol", false, 0) 					!= -1 ||
		 strfind(text, "CiudadMetropolis.com", false, 0) 		!= -1 ||
		 strfind(text, "Ciudad Metropolis", false, 0) 			!= -1 ||
		 strfind(text, "Spacerol.net", false, 0) 				!= -1 ||
		 strfind(text, "Spacerol", false, 0) 					!= -1
	  )
	{
		format(text, 256, "Anuncio: %s. Móvil: %i", text, PlayersData[playerid][Phone]);
		SendClientMessage(playerid, 0x0FFF00FF, text);
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s AntiSpam - %s[%i] posible spammer. Texto del anuncio: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, text);
	    MsgCheatsReportsToAdmins(MsgAviso);
		return true;
	}
	else
	{
	    return false;
	}
}
public ChangeEnfermedad(playerid, newenfermedad)
{
	PlayersData[playerid][Enfermedad] = newenfermedad;
	if ( newenfermedad )
	{
		new MsgEnfermado[50];
		format(MsgEnfermado, sizeof(MsgEnfermado), " Te has enfermado con %s!", EnfermedadName[newenfermedad]);
		SendClientMessage(playerid, COLOR_MESSAGES[0], MsgEnfermado);
	}
}
public IsPlayerHaveCondones(playerid)
{
	for (new i = 0; i<=5;i++)
	{
	    if ( PlayersData[playerid][Cartera][i] == CARTERA_TYPE_CONDONES )
		{
            PlayersData[playerid][CarteraC][i]--;
            if ( PlayersData[playerid][CarteraC][i] <= 0)
            {
				RemoveObjectToCartera(playerid, i);
			}
			return true;
	    }
    }
	return false;
}
public RemovePlayerFromVehicleEx(playerid, seat, time)
{
	if (!seat)
	{
	    if ( !PlayersDataOnline[playerid][StateDeath] && PlayersData[playerid][IsInJail] == -1 )
	    {
			if ( PlayersDataOnline[playerid][StateMoneyPass] <= time )
			{
			    if ( !DataCars[PlayersDataOnline[playerid][InCarId]][VehicleDeath] )
			    {
					new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
					new Float:VehiclePos[3]; GetVehiclePos(PlayersDataOnline[playerid][InCarId], VehiclePos[0], VehiclePos[1], VehiclePos[2]);
					if ( !IsPointFromPoint(50.0, PlayerPos[0], PlayerPos[1], PlayerPos[2], VehiclePos[0], VehiclePos[1], VehiclePos[2]) )
					{
				    	SetVehiclePos(PlayersDataOnline[playerid][InCarId], PlayerPos[0], PlayerPos[1] + 1, PlayerPos[2]);
			    	}
		    	}
			}
		}

	    if ( PlayersDataOnline[playerid][InCarId] == TramSFID )
		{
			SetCameraBehindPlayer(playerid);
		}

		HideTextDrawFijosVelocimentros(playerid);
		TextDrawHideForPlayer(playerid, BarsDamage[PlayersDataOnline[playerid][LastDamageInt]]);
		TextDrawHideForPlayer(playerid, BarsGas[PlayersDataOnline[playerid][LastGas]]);
		TextDrawHideForPlayer(playerid, BarsOil[PlayersDataOnline[playerid][LastOil]]);
		TextDrawHideForPlayer(playerid, VelocimetroNumber1[PlayersDataOnline[playerid][LastVel][0]]);
		TextDrawHideForPlayer(playerid, VelocimetroNumber2[PlayersDataOnline[playerid][LastVel][1]]);
		TextDrawHideForPlayer(playerid, VelocimetroNumber3[PlayersDataOnline[playerid][LastVel][2]]);
		TextDrawHideForPlayer(playerid, TemperaturaTextDraws[PlayersDataOnline[playerid][LastTextDrawTemperatura]]);

		PlayersDataOnline[playerid][InCarId] = false;
		TogglePlayerControllableEx(playerid, true);

	}
	else
	{
		if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
		{
			PayTaxi(playerid, true);
		}
    	PlayersDataOnline[playerid][InVehicle] = false;
	}
}
public LoadDataPistas()
{
	new LoadDataTemp[50];
	new DirPista[50];
	new File:FilePistas;
	new Conteo;
	new CurrentPos;

	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
		format(DirPista, sizeof(DirPista), "%sPista[%i].ulp", DIR_PISTAS, p);
		if (fexist(DirPista))
		{
		    FilePistas = fopen(DirPista, io_read);
		    fread(FilePistas, LoadDataTemp);
		    if ( strval(LoadDataTemp)  )
		    {
			    Pistas[p][Valid]		= strval(LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][Lock]			= strval(LoadDataTemp);
  			    fread(FilePistas, LoadDataTemp);
		    	format(Pistas[p][NamePista], strlen(LoadDataTemp)-1, "%s", LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][Interior]		= strval(LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][World]    	= strval(LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][IsCameras]    	= strval(LoadDataTemp);

			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_POS*4;i++)
				{
				    fread(FilePistas, LoadDataTemp);
					/*if ( p == 1 )
					{
					    printf("%i || %s", i, LoadDataTemp);
				    }*/
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasPos[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasPos[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasPos[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasPos[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 4 )
			        {
						/*if ( p == 1 )
						{
							printf("%i || %f- %f - %f", i, PistasPos[p][CurrentPos][Xpos], PistasPos[p][CurrentPos][Ypos], PistasPos[p][CurrentPos][Zpos]);
						}*/
			            Conteo = 0;
			            CurrentPos++;
					}
				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS*5;i++)
				{
				    fread(FilePistas, LoadDataTemp);
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasPosPlayers[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasPosPlayers[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasPosPlayers[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasPosPlayers[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasPosPlayers[p][CurrentPos][ZZpos] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 5 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}

				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS*5;i++)
				{
				    fread(FilePistas, LoadDataTemp);
					/*if ( p == 1 )
					{
					    printf("%i || %s", i, LoadDataTemp);
				    }*/
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasCarPointsExit[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasCarPointsExit[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasCarPointsExit[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasCarPointsExit[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasCarPointsExit[p][CurrentPos][ZZpos] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 5 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}
				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS*5;i++)
				{
				    fread(FilePistas, LoadDataTemp);
					/*if ( p == 1 )
					{
					    printf("%i || %s", i, LoadDataTemp);
				    }*/
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasCameras[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasCameras[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasCameras[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasCameras[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasCameras[p][CurrentPos][Vel] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 5 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}
				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_TOP*12;i++)
				{

				    fread(FilePistas, LoadDataTemp);
			        switch ( Conteo )
			        {
			            case 0:
			            {
			                if ( strlen(LoadDataTemp) > 3 )
			                {
		    		    		format(PistasTop[p][CurrentPos][PlayerName], strlen(LoadDataTemp)-1, "%s", LoadDataTemp);
     		    			}
	    		    		else
	    		    		{
		    		    		format(PistasTop[p][CurrentPos][PlayerName], MAX_PLAYER_NAME, "No", LoadDataTemp);
							}
						}
			            case 1:
			            {
		   				    PistasTop[p][CurrentPos][Time] = strval(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasTop[p][CurrentPos][Empty_1] = strval(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasTop[p][CurrentPos][Empty_2] = strval(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasTop[p][CurrentPos][Vueltas] = strval(LoadDataTemp);
						}
						case 5:
						{
		   				    PistasTop[p][CurrentPos][DateHour] = strval(LoadDataTemp);
						}
						case 6:
						{
		   				    PistasTop[p][CurrentPos][DateMinute] = strval(LoadDataTemp);
						}
						case 7:
						{
		   				    PistasTop[p][CurrentPos][DateSecond] = strval(LoadDataTemp);
						}
						case 8:
						{
		   				    PistasTop[p][CurrentPos][DateMonth] = strval(LoadDataTemp);
						}
						case 9:
						{
		   				    PistasTop[p][CurrentPos][DateDay] = strval(LoadDataTemp);
						}
						case 10:
						{
		   				    PistasTop[p][CurrentPos][DateYear] = strval(LoadDataTemp);
						}
						case 11:
						{
		   				    PistasTop[p][CurrentPos][CarModel] = strval(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 12 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}
				}
	    	}
	    	else
	    	{
				CleanPista(p);
			}
			Pistas[p][TiempoAntes] = 10;
			Pistas[p][ConteoR] 	= 3;
			Pistas[p][Radio] 	= 10;

			Pistas[p][Vueltas] = 1;

			ValidingPista(p, true);
			fclose(FilePistas);
		}
	}
}
public SaveDataPistas()
{
	new SaveDataTemp[150];
	new DirPista[50];
	new File:FilePistas;

	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
		format(DirPista, sizeof(DirPista), "%sPista[%i].ulp", DIR_PISTAS, p);
	    FilePistas = fopen(DirPista, io_write);

		format(SaveDataTemp, sizeof(SaveDataTemp), "%i\r\n%i\r\n%s\r\n%i\r\n%i\r\n%i", Pistas[p][Valid], Pistas[p][Lock], Pistas[p][NamePista], Pistas[p][Interior], Pistas[p][World], Pistas[p][IsCameras]);
	    fwrite(FilePistas, SaveDataTemp);

		for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f", PistasPos[p][i][Valid], PistasPos[p][i][Xpos], PistasPos[p][i][Ypos], PistasPos[p][i][Zpos]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f\r\n%f", PistasPosPlayers[p][i][Valid], PistasPosPlayers[p][i][Xpos], PistasPosPlayers[p][i][Ypos], PistasPosPlayers[p][i][Zpos], PistasPosPlayers[p][i][ZZpos]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f\r\n%f", PistasCarPointsExit[p][i][Valid], PistasCarPointsExit[p][i][Xpos], PistasCarPointsExit[p][i][Ypos], PistasCarPointsExit[p][i][Zpos], PistasCarPointsExit[p][i][ZZpos]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f\r\n%f", PistasCameras[p][i][Valid], PistasCameras[p][i][Xpos], PistasCameras[p][i][Ypos], PistasCameras[p][i][Zpos], PistasCameras[p][i][Vel]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_TOP;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%s\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i",
			PistasTop[p][i][PlayerName],
			PistasTop[p][i][Time],
			PistasTop[p][i][Empty_1],
			PistasTop[p][i][Empty_2],
			PistasTop[p][i][Vueltas],
		    PistasTop[p][i][DateHour],
		    PistasTop[p][i][DateMinute],
		    PistasTop[p][i][DateSecond],
		    PistasTop[p][i][DateMonth],
		    PistasTop[p][i][DateDay],
		    PistasTop[p][i][DateYear],
		    PistasTop[p][i][CarModel]);

			fwrite(FilePistas, SaveDataTemp);
		}
		fclose(FilePistas);
	}
}
public ValidingPista(pistaid, option)
{
	new AreValid;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
		if ( PistasPos[pistaid][i][Valid])
		{
		    AreValid++;
		    if ( AreValid > 1 )
		    {
				break;
			}
			else
			{
			    continue;
			}
		}
	}
	if ( AreValid > 1)
	{
	    AreValid = false;
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasPosPlayers[pistaid][i][Valid]&& PistasCarPointsExit[pistaid][i][Valid] ||
				!PistasPosPlayers[pistaid][i][Valid]&&!PistasCarPointsExit[pistaid][i][Valid])
			{
				if ( PistasPosPlayers[pistaid][i][Valid]&& PistasCarPointsExit[pistaid][i][Valid] )
				{
				    AreValid++;
				}
				continue;
			}
			else
			{
			    AreValid = false;
			    break;
			}
		}
		if ( AreValid )
		{
		    if ( Pistas[pistaid][IsCameras] )
		    {
		        AreValid = false;
				for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
				{
					if ( PistasCameras[pistaid][i][Valid] )
					{
					    AreValid++;
					}
					else
					{
					    break;
					}
				}
		    	if ( AreValid < 2 )
		    	{
		    	    AreValid = 999;
				}
				else
				{
					Pistas[pistaid][MaxCameras] = AreValid - 1;
				}
	    	}
		}
		if ( AreValid && AreValid != 999)
		{
			Pistas[pistaid][MaxCheckPointsTotal] = GetMaxCountPistasPos(pistaid);
			Pistas[pistaid][ValidR] = true;
			Pistas[pistaid][MinPP]	= GetMinPistaRace(pistaid);
			Pistas[pistaid][MaxPP] 	= GetMaxPistaRace(pistaid);
			CleanPistaForRace(pistaid);
			return true;
		}
	}
	if ( option )
	{
	    if ( AreValid != 999 )
	    {
			CleanPista(pistaid);
		}
	}
	return false;
}
public CleanPista(pistaid)
{
   	format(Pistas[pistaid][NamePista], 35, "No");
	Pistas[pistaid][ShowTagPos] = false;
	Pistas[pistaid][ShowTagPlayers] = false;
	Pistas[pistaid][ShowTagCamPoints] = false;
	ShowOrHideTagPistaPlayers(pistaid);
	ShowOrHideTagPistaPos(pistaid);
	ShowOrHideTagPistaCam(pistaid);
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
		CleanPistaPos(pistaid, i);
	}
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
		CleanPistaPosPlayers(pistaid, i);
		CleanPistaCarPointsExit(pistaid, i);
	}
	for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
	{
		CleanPistaCameras(pistaid, i);
	}
	for (new i = 0; i < MAX_COUNT_PISTAS_TOP;i++)
	{
		CleanPistaRecords(pistaid, i);
	}
	Pistas[pistaid][ValidR] 	 = false;
	Pistas[pistaid][Valid] 		 = false;
	Pistas[pistaid][Lock]   	 = false;
	Pistas[pistaid][IsCameras]   = false;
}
public CleanPistaRecords(pistaid, posid)
{
	format(PistasTop[pistaid][posid][PlayerName], MAX_PLAYER_NAME, "No");
    PistasTop[pistaid][posid][Time]		= 0;
    PistasTop[pistaid][posid][Empty_1] 	= 0;
    PistasTop[pistaid][posid][Empty_2] 	= 0;
    PistasTop[pistaid][posid][Vueltas] 	= 0;
    PistasTop[pistaid][posid][DateHour] 	= 0;
    PistasTop[pistaid][posid][DateMinute] = 0;
    PistasTop[pistaid][posid][DateSecond] = 0;
    PistasTop[pistaid][posid][DateMonth] 	= 0;
    PistasTop[pistaid][posid][DateDay] 	= 0;
    PistasTop[pistaid][posid][DateYear] 	= 0;
}
public CleanPistaPos(pistaid, posid)
{
    PistasPos[pistaid][posid][Valid] 	= false;
    PistasPos[pistaid][posid][Xpos] 	= 0.0;
    PistasPos[pistaid][posid][Ypos] 	= 0.0;
    PistasPos[pistaid][posid][Zpos] 	= 0.0;
}
public CleanPistaPosPlayers(pistaid, posplayersid)
{
    PistasPosPlayers[pistaid][posplayersid][Valid] = false;
    PistasPosPlayers[pistaid][posplayersid][Xpos] 	= 0.0;
    PistasPosPlayers[pistaid][posplayersid][Ypos] 	= 0.0;
    PistasPosPlayers[pistaid][posplayersid][Zpos] 	= 0.0;
    PistasPosPlayers[pistaid][posplayersid][ZZpos] = 0.0;
}
public CleanPistaCameras(pistaid, posplayersid)
{
    PistasCameras[pistaid][posplayersid][Valid] = false;
    PistasCameras[pistaid][posplayersid][Xpos] 	= 0.0;
    PistasCameras[pistaid][posplayersid][Ypos] 	= 0.0;
    PistasCameras[pistaid][posplayersid][Zpos] 	= 0.0;
    PistasCameras[pistaid][posplayersid][Vel] 	= 0.0;
}
public CleanPistaCarPointsExit(pistaid, posplayersid)
{
    PistasCarPointsExit[pistaid][posplayersid][Valid] = false;
    PistasCarPointsExit[pistaid][posplayersid][Xpos] 	= 0.0;
    PistasCarPointsExit[pistaid][posplayersid][Ypos] 	= 0.0;
    PistasCarPointsExit[pistaid][posplayersid][Zpos] 	= 0.0;
    PistasCarPointsExit[pistaid][posplayersid][ZZpos] 	= 0.0;
}
public CreatePistaPos(playerid, pistaid, posid)
{
	new Float:PosPos[3];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	}
    PistasPos[pistaid][posid][Valid] 	= true;
    PistasPos[pistaid][posid][Xpos] 	= PosPos[0];
    PistasPos[pistaid][posid][Ypos] 	= PosPos[1];
    PistasPos[pistaid][posid][Zpos] 	= PosPos[2];
	UpdateTagPistaPos(pistaid, posid);
}
public CreatePistaPlayers(playerid, pistaid, posid)
{
	new Float:PosPos[4];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), PosPos[3]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	    GetPlayerFacingAngle(playerid, PosPos[3]);
	}
    PistasPosPlayers[pistaid][posid][Valid] = true;
    PistasPosPlayers[pistaid][posid][Xpos] 	= PosPos[0];
    PistasPosPlayers[pistaid][posid][Ypos] 	= PosPos[1];
    PistasPosPlayers[pistaid][posid][Zpos] 	= PosPos[2];
    PistasPosPlayers[pistaid][posid][ZZpos] = PosPos[3];
	UpdateTagPistaPlayers(pistaid, posid);
}
public CreatePistaCarPoints(playerid, pistaid, posid)
{
	new Float:PosPos[4];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), PosPos[3]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	    GetPlayerFacingAngle(playerid, PosPos[3]);
	}
    PistasCarPointsExit[pistaid][posid][Valid] = true;
    PistasCarPointsExit[pistaid][posid][Xpos] 	= PosPos[0];
    PistasCarPointsExit[pistaid][posid][Ypos] 	= PosPos[1];
    PistasCarPointsExit[pistaid][posid][Zpos] 	= PosPos[2];
    PistasCarPointsExit[pistaid][posid][ZZpos] = PosPos[3];
	UpdateTagPistaPlayers(pistaid, posid);
}
public CreatePistaCameras(playerid, pistaid, posid)
{
	new Float:PosPos[4];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	}
    PistasCameras[pistaid][posid][Valid] = true;
    PistasCameras[pistaid][posid][Xpos]  = PosPos[0];
    PistasCameras[pistaid][posid][Ypos]  = PosPos[1];
    PistasCameras[pistaid][posid][Zpos]  = PosPos[2];
    PistasCameras[pistaid][posid][Vel] 	 = 0.01;
	UpdateTagPistaCameras(pistaid, posid);
}
public GetMaxCountPistas()
{
	new CountP;
	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
	    if ( Pistas[p][Valid] )
	    {
			CountP++;
		}
	}
	return CountP;
}
public GetMaxCountPistasPos(pistaid)
{
	new CountPPos;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
		if (PistasPos[pistaid][i][Valid])
		{
		    CountPPos++;
		}
	}
	return CountPPos;
}
public GetMaxCountPistasCamPoints(pistaid)
{
	new CountPPosP;
	for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
	{
		if (PistasCameras[pistaid][i][Valid])
		{
		    CountPPosP++;
		}
	}
	return CountPPosP;
}
public GetMaxCountPistasCarPointsExit(pistaid)
{
	new CountPPosP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
		if (PistasCarPointsExit[pistaid][i][Valid])
		{
		    CountPPosP++;
		}
	}
	return CountPPosP;
}
public GetMaxCountPistasPlayers(pistaid)
{
	new CountPPosP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
		if (PistasPosPlayers[pistaid][i][Valid])
		{
		    CountPPosP++;
		}
	}
	return CountPPosP;
}
public GetNextPista()
{
	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
	    if ( !Pistas[p][ValidR] && !Pistas[p][Valid])
	    {
	        return p;
	    }
	}
	return -1;
}
public ShowEditorPistas(playerid)
{
	new ListDialog[350];
	format(ListDialog, sizeof(ListDialog),
	"{00A5FF}1- {E6E6E6}Nueva Pista\r\n{00A5FF}2- {E6E6E6}Lista de Pistas {00F50A}(%i)",
		GetMaxCountPistas()
	);
	ShowPlayerDialogEx(playerid,95,DIALOG_STYLE_LIST,"{00A5FF}Editor de Pistas", ListDialog, "Seleccionar", "Salir");
}
public ShowNewPista(playerid)
{
	new NextPista = GetNextPista();
	if ( NextPista != -1 )
	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = NextPista;
		ShowPlayerDialogEx(playerid,96,DIALOG_STYLE_INPUT,"{00A5FF}Editor de Pistas - Nueva Pista", "{E6E6E6}Ingrese un nombre para la pista", "Crear", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Se ha alcanzado el máximo número de pistas", "Aceptar", "Volver");
	}
}
public ShowListPistas(playerid)
{
	new PistasDialog[1400];
	new TempConvert[50];
	new ConteoPistas = -1;
	for (new i = 0; i < MAX_COUNT_PISTAS; i++)
	{
	    if ( Pistas[i][Valid] )
	    {
			if ( ConteoPistas != -1 )
			{
				if ( !Pistas[i][ValidR] )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%s", Pistas[i][NamePista]);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%s", Pistas[i][NamePista]);
				}
	    	}
			else
			{
				if ( !Pistas[i][ValidR] )
				{
		    		format(TempConvert, sizeof(TempConvert), "{F50000}%s", Pistas[i][NamePista]);
	    		}
	    		else
	    		{
		    		format(TempConvert, sizeof(TempConvert), "{E6E6E6}%s", Pistas[i][NamePista]);
				}
			}
	        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
	        ConteoPistas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
        }
	}
	if (ConteoPistas != -1)
	{
		ShowPlayerDialogEx(playerid,97,DIALOG_STYLE_LIST,"{00A5FF}Editor de Pistas - Lista de Pistas", PistasDialog, "Seleccionar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}No se encontrarón pistas creadas", "Aceptar", "Volver");
	}
}
public PistaExist(playerid, pistaid)
{
	if ( Pistas[pistaid][Valid] )
	{
		return true;
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Oops, la pista con la que estabas trabajando fue borrada!", "Ok", "");
	    return false;
	}
}
public ShowListPistasOptions(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
		new ListDialog[700];
		format(ListDialog, sizeof(ListDialog),
		"{00A5FF}1- {E6E6E6}Modificar Nombre {00F50A}(%s)\r\n{00A5FF}2- {E6E6E6}CheckPoints {00F50A}(%i)\r\n{00A5FF}3- {E6E6E6}CarPoints {00F50A}(%i)\r\n{00A5FF}4- {E6E6E6}CarPointsExit {00F50A}(%i)\r\n{00A5FF}5- {E6E6E6}CamerasPoints {00F50A}(%i)\r\n{00A5FF}6- {E6E6E6}Mostrar CheckPoints {00F50A}(%s)\r\n",
		    Pistas[pistaid][NamePista],
		    GetMaxCountPistasPos(pistaid),
		    GetMaxCountPistasPlayers(pistaid),
		    GetMaxCountPistasCarPointsExit(pistaid),
		    GetMaxCountPistasCamPoints(pistaid),
		    SiOrNo[Pistas[pistaid][ShowTagPos]]
		);
		format(ListDialog, sizeof(ListDialog),
		"%s{00A5FF}7- {E6E6E6}Mostrar CarPoints {00F50A}(%s)\r\n{00A5FF}8- {E6E6E6}Mostrar CarPointsExit {00F50A}(%s)\r\n{00A5FF}9- {E6E6E6}Mostrar CamerasPoints {00F50A}(%s)\r\n{00A5FF}10- {E6E6E6}Validar\r\n{00A5FF}11- {E6E6E6}Interior {00F50A}(%i)\r\n{00A5FF}11- {E6E6E6}Mundo {00F50A}(%i)\r\n{00A5FF}12- {E6E6E6}Bloqueado {00F50A}(%s)\r\n{00A5FF}13- {E6E6E6}Cámaras {00F50A}(%s)\r\n{00A5FF}14- {E6E6E6}Eliminar",
			ListDialog,
		    SiOrNo[Pistas[pistaid][ShowTagPlayers]],
		    SiOrNo[Pistas[pistaid][ShowTagCarPointsExit]],
		    SiOrNo[Pistas[pistaid][ShowTagCamPoints]],
		    Pistas[pistaid][Interior],
		    Pistas[pistaid][World],
		    SiOrNo[Pistas[pistaid][Lock]],
		    SiOrNo[Pistas[pistaid][IsCameras]]
		);
		ShowPlayerDialogEx(playerid,98,DIALOG_STYLE_LIST,"{00A5FF}Editor de Pistas - Opciones de Edición", ListDialog, "Seleccionar", "Volver");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
}
public ShowPistaChangeName(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		ShowPlayerDialogEx(playerid,99,DIALOG_STYLE_INPUT,"{00A5FF}Editor de Pistas - Modificar nombre", "{E6E6E6}Ingrese un nuevo nombre para la pista", "Modificar", "Volver");
	}
}
public ShowPistaShowCheckPoints(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[2500];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_POS; i++)
			{
				if (i)
				{
					if ( PistasPos[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasPos[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CheckPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,100,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowPosPlayers(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[1400];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
			{
				if (i)
				{
					if ( PistasPosPlayers[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasPosPlayers[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,101,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowCheckPointsOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}3- {E6E6E6}Borrar\r\n{00A5FF}4- {E6E6E6}Mover",
			    PistasPos[pistaid][posid][Xpos],
			    PistasPos[pistaid][posid][Ypos],
			    PistasPos[pistaid][posid][Zpos]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CheckPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,102,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowPosPlayersOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f - ZZ: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}3- {E6E6E6}Borrar\r\n{00A5FF}4- {E6E6E6}Mover",
			    PistasPosPlayers[pistaid][posid][Xpos],
			    PistasPosPlayers[pistaid][posid][Ypos],
			    PistasPosPlayers[pistaid][posid][Zpos],
			    PistasPosPlayers[pistaid][posid][ZZpos]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,103,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaCamOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f - Velocidad: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}4- {E6E6E6}Velocidad (%f)\r\n{00A5FF}5- {E6E6E6}Borrar\r\n{00A5FF}6- {E6E6E6}Mover",
			    PistasCameras[pistaid][posid][Xpos],
			    PistasCameras[pistaid][posid][Ypos],
			    PistasCameras[pistaid][posid][Zpos],
			    PistasCameras[pistaid][posid][Vel],
   			    PistasCameras[pistaid][posid][Vel]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CamerasPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,124,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaCarPointsExitOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f - ZZ: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}3- {E6E6E6}Borrar\r\n{00A5FF}4- {E6E6E6}Mover",
			    PistasCarPointsExit[pistaid][posid][Xpos],
			    PistasCarPointsExit[pistaid][posid][Ypos],
			    PistasCarPointsExit[pistaid][posid][Zpos],
			    PistasCarPointsExit[pistaid][posid][ZZpos]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPointsExit)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,107,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowCarPointsExit(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[1400];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
			{
				if (i)
				{
					if ( PistasCarPointsExit[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasCarPointsExit[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPointsExit)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,106,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowCam(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[1400];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS; i++)
			{
				if (i)
				{
					if ( PistasCameras[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasCameras[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CamerasPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,123,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaRemove(playerid, pistaid)
{
    if ( !Pistas[pistaid][Used] )
    {
		ShowPlayerDialogEx(playerid,104,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Eliminar Pista", "{E6E6E6}¿Esta seguro que desea eliminar está pista?", "Si", "No");
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
	}
}
public ShowPistaValidar(playerid, pistaid)
{
    if ( !Pistas[pistaid][Used] )
    {
		if ( ValidingPista(pistaid, false) )
		{
			ShowPlayerDialogEx(playerid,105,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Validación OK", "{00F50A}La pista se ha validado correctamente", "Ok", "");
		}
		else
		{
			ShowPlayerDialogEx(playerid,105,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error en Validación", "{F50000}No se pudo validar la pista\nRevise la misma y intentelo de nuevo", "Ok", "");
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
	}
}
public ShowOrHideTagPistaPos(pistaid)
{
	if ( Pistas[pistaid][ShowTagPos] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
		{
			if ( PistasPos[pistaid][i][Valid] )
			{
				UpdateTagPistaPos(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
		{
			if ( PistasPos[pistaid][i][Valid] )
			{
			    RemoveTagPistaPos(pistaid, i);
			}
		}
	}
}
public ShowOrHideTagPistaPlayers(pistaid)
{
	if ( Pistas[pistaid][ShowTagPlayers] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasPosPlayers[pistaid][i][Valid] )
			{
				UpdateTagPistaPlayers(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasPosPlayers[pistaid][i][Valid] )
			{
			    RemoveTagPistaPlayers(pistaid, i);
			}
		}
	}
}
public RemoveTagPistaPos(pistaid, posid)
{
	if ( PistasPos[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPos[pistaid][posid][Text3DPista]);
		PistasPos[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaPos(pistaid, posid)
{
	if ( PistasPos[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPos[pistaid][posid][Text3DPista]);
	}
	if ( PistasPos[pistaid][posid][Valid] && Pistas[pistaid][ShowTagPos])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasPos[pistaid][posid][Xpos],
		PistasPos[pistaid][posid][Ypos],
		PistasPos[pistaid][posid][Zpos]
		);
		PistasPos[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,0x0055FFFF,
		PistasPos[pistaid][posid][Xpos],
		PistasPos[pistaid][posid][Ypos],
		PistasPos[pistaid][posid][Zpos],
		300.0,
		Pistas[pistaid][World]);
		PistasPos[pistaid][posid][Text3DPistaB] = true;
	}
	else
	{
		PistasPos[pistaid][posid][Text3DPistaB] = false;
	}
}
public RemoveTagPistaPlayers(pistaid, posid)
{
	if ( PistasPosPlayers[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPosPlayers[pistaid][posid][Text3DPista]);
		PistasPosPlayers[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaPlayers(pistaid, posid)
{
	if ( PistasPosPlayers[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPosPlayers[pistaid][posid][Text3DPista]);
	}
	if ( PistasPosPlayers[pistaid][posid][Valid] && Pistas[pistaid][ShowTagPlayers])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f\nPosZZ: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasPosPlayers[pistaid][posid][Xpos],
		PistasPosPlayers[pistaid][posid][Ypos],
		PistasPosPlayers[pistaid][posid][Zpos],
		PistasPosPlayers[pistaid][posid][ZZpos]
		);
		PistasPosPlayers[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,COLOR_3DLABEL_PISTAS,
		PistasPosPlayers[pistaid][posid][Xpos],
		PistasPosPlayers[pistaid][posid][Ypos],
		PistasPosPlayers[pistaid][posid][Zpos],
		300.0, Pistas[pistaid][World]);
		PistasPosPlayers[pistaid][posid][Text3DPistaB] = true;
	}
}
public RemoveTagPistaCarPointsExit(pistaid, posid)
{
	if ( PistasCarPointsExit[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCarPointsExit[pistaid][posid][Text3DPista]);
		PistasCarPointsExit[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaCarPointsExit(pistaid, posid)
{
	if ( PistasCarPointsExit[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCarPointsExit[pistaid][posid][Text3DPista]);
	}
	if ( PistasCarPointsExit[pistaid][posid][Valid] && Pistas[pistaid][ShowTagCarPointsExit])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f\nPosZZ: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasCarPointsExit[pistaid][posid][Xpos],
		PistasCarPointsExit[pistaid][posid][Ypos],
		PistasCarPointsExit[pistaid][posid][Zpos],
		PistasCarPointsExit[pistaid][posid][ZZpos]
		);
		PistasCarPointsExit[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,0x00AD28FF,
		PistasCarPointsExit[pistaid][posid][Xpos],
		PistasCarPointsExit[pistaid][posid][Ypos],
		PistasCarPointsExit[pistaid][posid][Zpos],
		300.0, Pistas[pistaid][World]);
		PistasCarPointsExit[pistaid][posid][Text3DPistaB] = true;
	}
}
public RemoveTagPistaCameras(pistaid, posid)
{
	if ( PistasCameras[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCameras[pistaid][posid][Text3DPista]);
		PistasCameras[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaCameras(pistaid, posid)
{
	if ( PistasCameras[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCameras[pistaid][posid][Text3DPista]);
	}
	if ( PistasCameras[pistaid][posid][Valid] && Pistas[pistaid][ShowTagCamPoints])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f\nVelocidad: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasCameras[pistaid][posid][Xpos],
		PistasCameras[pistaid][posid][Ypos],
		PistasCameras[pistaid][posid][Zpos],
		PistasCameras[pistaid][posid][Vel]
		);
		PistasCameras[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,0xFA00FFFF,
		PistasCameras[pistaid][posid][Xpos],
		PistasCameras[pistaid][posid][Ypos],
		PistasCameras[pistaid][posid][Zpos],
		300.0, Pistas[pistaid][World]);
		PistasCameras[pistaid][posid][Text3DPistaB] = true;
	}
}
public ShowOrHideTagPistaCam(pistaid)
{
	if ( Pistas[pistaid][ShowTagCamPoints] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
		{
			if ( PistasCameras[pistaid][i][Valid] )
			{
				UpdateTagPistaCameras(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
		{
			if ( PistasCameras[pistaid][i][Valid] )
			{
			    RemoveTagPistaCameras(pistaid, i);
			}
		}
	}
}
public ShowOrHideTagPistaCarPointsExit(pistaid)
{
	if ( Pistas[pistaid][ShowTagCarPointsExit] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasCarPointsExit[pistaid][i][Valid] )
			{
				UpdateTagPistaCarPointsExit(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasCarPointsExit[pistaid][i][Valid] )
			{
			    RemoveTagPistaCarPointsExit(pistaid, i);
			}
		}
	}
}
public ShowPistas(playerid)
{
	new PistasDialog[1500];
	new TempConvert[100];
	new ConteoPistas = -1;
	for (new i = 0; i < MAX_COUNT_PISTAS; i++)
	{
	    if ( Pistas[i][ValidR] )
	    {
	        if ( !Pistas[i][Lock] || Pistas[i][Lock] && PlayersData[playerid][Admin] >= 4 )
	        {
				if ( ConteoPistas != -1 )
				{
					if ( Pistas[i][Lock] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
					}
		    	}
				else
				{
					if ( Pistas[i][Lock] )
					{
			    		format(TempConvert, sizeof(TempConvert), "{00F50A}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
		    		}
		    		else
		    		{
			    		format(TempConvert, sizeof(TempConvert), "{E6E6E6}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
		        ConteoPistas++;
		        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
	        }
        }
	}
	if (ConteoPistas != -1)
	{
		ShowPlayerDialogEx(playerid,109,DIALOG_STYLE_LIST,"{00A5FF}Pistas - Lista de Pistas", PistasDialog, "Seleccionar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}No se encontrarón pistas creadas", "Ok", "");
	}
}
public ShowPistasOptions(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
		new ListDialog[850];
		format(ListDialog, sizeof(ListDialog),
		"{00A5FF}Info: {E6E6E6}Máximo de competidores: {00F50A}(%i)\r\n{00A5FF}1- {E6E6E6}Vueltas {00F50A}(%i)\r\n{00A5FF}2- {E6E6E6}Competidores {00F50A}(%i)\r\n{00A5FF}3- {E6E6E6}Guardar Record {00F50A}(%s)\r\n{00A5FF}4- {E6E6E6}Conteo {00F50A}(%i)\r\n{00A5FF}5- {E6E6E6}Tiempo antes de empezar {00F50A}(%i)\r\n{00A5FF}6- {E6E6E6}Radio de los CheckPoints {00F50A}(%.1f)\r\n",
			GetMaxCountPistasPlayers(pistaid),
			Pistas[pistaid][Vueltas],
			Pistas[pistaid][Competidores] + 1,
			SiOrNo[Pistas[pistaid][SaveRecord]],
			Pistas[pistaid][ConteoR],
			Pistas[pistaid][TiempoAntes],
			Pistas[pistaid][Radio]
		);
		format(ListDialog, sizeof(ListDialog),
		"%s{00A5FF}7- {E6E6E6}Tipo de Checkpoints: {00F50A}(%s)\r\n{00A5FF}8- {E6E6E6}Estado: {00F50A}(%s)\r\n{00A5FF}9- {E6E6E6}Coches Permitidos: {00F50A}(%s)\r\n{00A5FF}10- {E6E6E6}Al Revés: {00F50A}(%s)\r\n{00A5FF}11- {E6E6E6}Indestructible: {00F50A}(%s)\r\n{00A5FF}12- {E6E6E6}CheckPoint Final: {00F50A}(ID:%i)\r\n{00A5FF}13- {E6E6E6}Unir un Jugador\r\n{00A5FF}14- {E6E6E6}Ver Jugadores {00F50A}(%i)\r\n{00A5FF}15- {E6E6E6}Detener Carrera!\r\n{00A5FF}16- {E6E6E6}Comenzar Carrera!",
		    ListDialog,
			PistasType[Pistas[pistaid][Tipo]],
			PistasTypeEstados[Pistas[pistaid][EstadoR]],
			CochesPistaNames[Pistas[pistaid][CochesP]],
			SiOrNo[Pistas[pistaid][AlReves]],
			SiOrNo[Pistas[pistaid][Repair]],
			Pistas[pistaid][CheckPointFinal],
			GetMaxPlayerCurrentPista(pistaid)
		);
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Configuración)", Pistas[pistaid][NamePista]);
		ShowPlayerDialogEx(playerid,110,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
}
public ShowPistasSelectVueltas(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[600];
			new TempConvert[15];
			for ( new i = 0; i < 50; i++ )
			{
			    if ( i )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{00A5FF}%i",i + 1);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{00A5FF}%i",i + 1);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Vueltas)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,111,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectVelocidad(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
			new VelDialog[700];
			format(VelDialog, sizeof(VelDialog),
			"{00F50A}1- {00F50A}0.1 (Rápido)\r\n{00F50A}2- {00F50A}0.01 (Normal)\r\n{00F50A}3- {00F50A}0.001 (Lento)\r\n{00F50A}4- {00A5FF}A Gusto");

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Velocidad)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,125,DIALOG_STYLE_LIST, PistasDialogName, VelDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectCompetidores(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			new TempConvert[15];
			for ( new i = 0; i < GetMaxCountPistasPlayers(pistaid); i++ )
			{
			    if ( i )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{F50000}%i",i + 1);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{F50000}%i",i + 1);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Competidores)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,112,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectConteo(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			new TempConvert[15];
			for ( new i = 0; i < 15; i++ )
			{
			    if ( i )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{00A5FF}%i",i + 1);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{00A5FF}%i",i + 1);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Conteo)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,113,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectRadio(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[800];
			new TempConvert[15];
			for ( new i = 2; i < 61; i+=2)
			{
			    if ( i != 2 )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{AFFF00}%i",i);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{AFFF00}%i",i);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Radio CheckPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,122,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectTiempoAntes(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			new TempConvert[15];
			for ( new i = 10; i < 161; i+=10)
			{
			    if ( i != 10 )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{F5FF00}%i",i);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{F5FF00}%i",i);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Tiempo)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,114,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasCochesPermitidos(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
		new ListDialog[500];
		new TempConvert[20];
		for ( new i = 0; i < sizeof(CochesPistaNames); i++)
		{
		    if (i)
		    {
				format(TempConvert, sizeof(TempConvert),
				"\r\n{00A5FF}%s",CochesPistaNames[i]);
			}
			else
			{
				format(TempConvert, sizeof(TempConvert),
				"{00A5FF}%s",CochesPistaNames[i]);
			}

			strcat(ListDialog, TempConvert, sizeof(ListDialog));
		}

	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Coches)", Pistas[pistaid][NamePista]);
		ShowPlayerDialogEx(playerid,115,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
}
public ShowPistasUnirJugador(playerid, pistaid)
{
    if ( Pistas[pistaid][Used] == RACE_STATE_ESPERANDO )
    {
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Agregar)", Pistas[pistaid][NamePista]);
		ShowPlayerDialogEx(playerid,118,DIALOG_STYLE_INPUT, PistasDialogName, "{E6E6E6}Ingrese la ID del jugador que desea incluir a esta carrera", "Unir", "Volver");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1434", "No puede agregar jugadores si no ha iniciado la carrera, tampocó mientras este en ejecución la misma");
		ShowPistasOptions(playerid, pistaid);
	}
}
public ShowPistasVerJugadoresOptions(playerid, pistaid, posid)
{
	new ListDialog[150];
	format(ListDialog, sizeof(ListDialog),
	"{00A5FF}1- {E6E6E6}Enviar Mensaje\r\n{00A5FF}2- {E6E6E6}Expulsar"	);

    new PistasDialogName[MAX_TEXT_CHAT];
    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Jugadores)", Pistas[pistaid][NamePista]);
	ShowPlayerDialogEx(playerid,119,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

	PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
}
public ShowPistasVerJugadores(playerid, pistaid)
{
	PlayersDataOnline[playerid][SaveAfterAgenda][59] = pistaid;
    if ( Pistas[pistaid][Used] )
    {
		new ListDialog[1200];
		new TempConvert[55];
		new ConteoPista = -1;
		for ( new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
		{
		    if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
		    {
			    if (ConteoPista != -1)
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{00A5FF}%s{F5FF00}[%i]",PlayersDataOnline[PistasPosPlayers[pistaid][i][PlayerIDR]][NameOnlineFix], PistasPosPlayers[pistaid][i][PlayerIDR]);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{00A5FF}%s{F5FF00}[%i]",PlayersDataOnline[PistasPosPlayers[pistaid][i][PlayerIDR]][NameOnlineFix], PistasPosPlayers[pistaid][i][PlayerIDR]);
				}
				strcat(ListDialog, TempConvert, sizeof(ListDialog));
				ConteoPista++;
				PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPista] = i;
			}
		}
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Jugadores)", Pistas[pistaid][NamePista]);
		if (ConteoPista != -1)
		{
			ShowPlayerDialogEx(playerid,116,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,116,DIALOG_STYLE_MSGBOX, PistasDialogName, "{E6E6E6}No hay jugadores en esta pista todavía.", "Refrescar", "Volver");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1433", "Debe iniciar la carrera antes de ver la lista de jugadores");
		ShowPistasOptions(playerid, pistaid);
	}
}
public ShowPistasComenzar(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			if ( ValidingPista(pistaid, false) )
			{
                CleanPistaForRace(pistaid);
                StartRace(pistaid, true);
			    new PistasDialogName[MAX_TEXT_CHAT];
			    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s", Pistas[pistaid][NamePista]);
				ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{00F50A}Has abierto la carrera con éxito!", "Aceptar", "Volver");
			}
			else
			{
				ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{F50000}Esta pista no paso el proceso de validación!", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public CleanPistaForRace(pistaid)
{
    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
    {
        PistasPosPlayers[pistaid][i][PlayerIDR] 	 = -1;
        PistasPosPlayers[pistaid][i][VehicleIDR] 	 = -1;
        PistasPosPlayers[pistaid][i][VueltaR] 		 = 0;
        PistasPosPlayers[pistaid][i][ExitReason]     = -1;

        PistasPosPlayers[pistaid][i][PistaIDR]     	 = -1;
		PistasPosPlayers[pistaid][i][PosFinish]  	 = 50;

        if ( Pistas[pistaid][AlReves] )
        {
        	PistasPosPlayers[pistaid][i][LastCheckPoint] = Pistas[pistaid][MinPP];
       	}
       	else
       	{
        	PistasPosPlayers[pistaid][i][LastCheckPoint] = Pistas[pistaid][MaxPP];
		}
    }
	Pistas[pistaid][ConteoPlayers] = false;
}
public CancelRace(pistaid)
{
	if ( Pistas[pistaid][Used] )
	{
        KillTimer(Pistas[pistaid][RaceTimer]);

	    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	    {
		    if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
		    {
				RemovePlayerToRace(PistasPosPlayers[pistaid][i][PlayerIDR], true, false, STATE_RACE_EXIT_EXPULSADO);
			}
		}
		Pistas[pistaid][Used] = false;
		return true;
	}
	return false;
}
public StartRace(pistaid, option)
{
    new PistasDialogText[MAX_TEXT_CHAT];
	if ( option )
	{
	    format(PistasDialogText, sizeof(PistasDialogText), "Nueva carrera tipo {F5FF00}%s{E6E6E6}, comienza en {00F50A}%i {E6E6E6}segundos!", PistasTypeEstados[Pistas[pistaid][EstadoR]], Pistas[pistaid][TiempoAntes]);
       	Pistas[pistaid][Used] = RACE_STATE_ESPERANDO;
	    Pistas[pistaid][RaceTimer] = SetTimerEx("StartRace", Pistas[pistaid][TiempoAntes] * 1000, false, "dd", pistaid, false);
    }
    else
    {
        if ( GetMaxPlayerCurrentPista(pistaid) )
        {
		    format(PistasDialogText, sizeof(PistasDialogText), "Comienza un conteo de %i en 5 segundos para empezar!", Pistas[pistaid][ConteoR]);
	       	Pistas[pistaid][Used] = RACE_STATE_CONTEO;
		    Pistas[pistaid][RaceTimer] = SetTimerEx("ConteoRace", 5000, false, "dd", pistaid, Pistas[pistaid][ConteoR] + 1);
	    }
	    else
	    {
		    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}La carrera no comenzó por falta de concursantes!");
		    CancelRace(pistaid);
		}
	}
	SendMessageToRaceChat(pistaid, PistasDialogText, true);
}
public ConteoRace(pistaid, count)
{
	new ConteoText[10];
	new StyleText;
	count--;
	if(count)
	{
	    format(ConteoText, sizeof(ConteoText), "~R~%i", count);
	    StyleText = 5;
    }
    else
    {
		Pistas[pistaid][Used] 		= RACE_STATE_COMPITIENDO;

		Pistas[pistaid][TimeStart] 	= gettime();

	    format(ConteoText, sizeof(ConteoText), "~G~Go!", count);
	    StyleText = 0;
		new PistasDialogText[256];
	    format(PistasDialogText, sizeof(PistasDialogText), "La carrera comenzó con %i competidores!", GetMaxPlayerCurrentPista(pistaid));
		SendMessageToRaceChat(pistaid, PistasDialogText, true);
	}
    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
    {
	    if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
	    {
	    	GameTextForPlayer(PistasPosPlayers[pistaid][i][PlayerIDR], ConteoText, 1000, StyleText);
	    	if ( !StyleText )
	    	{
				SetPlayerNextCheckPointRace(PistasPosPlayers[pistaid][i][PlayerIDR]);
				TogglePlayerControllable(PistasPosPlayers[pistaid][i][PlayerIDR], true);
				PlayerPlaySound(PistasPosPlayers[pistaid][i][PlayerIDR], SOUND_START_RACE, 0.0, 0.0, 0.0);
				PistasPosPlayers[pistaid][i][ExitReason] = -1;

				TextDrawShowForPlayer(PistasPosPlayers[pistaid][i][PlayerIDR], ScorePosRace[pistaid]);
				TextDrawShowForPlayer(PistasPosPlayers[pistaid][i][PlayerIDR], ScoreRaceBox);

				/*DataCars[PistasPosPlayers[pistaid][i][VehicleIDR]][AlarmOn] = false;
				DataCars[PistasPosPlayers[pistaid][i][VehicleIDR]][StateEncendido] = true;
				DataCars[PistasPosPlayers[pistaid][i][VehicleIDR]][Puente] = false;

				IsVehicleOff(PistasPosPlayers[pistaid][i][VehicleIDR]);*/

				if ( Pistas[pistaid][IsCameras] )
				{
					KillTimer(PlayersDataOnline[PistasPosPlayers[pistaid][i][PlayerIDR]][TimerCamaraIdRace]);
				}
				SetCameraBehindPlayer(PistasPosPlayers[pistaid][i][PlayerIDR]);
			}
    	}
    }
    if ( count )
    {
	    Pistas[pistaid][RaceTimer] = SetTimerEx("ConteoRace", 2000, false, "dd", pistaid, count);
	}
	else
	{
	    Pistas[pistaid][RaceTimer] = SetTimerEx("UpdateTextDrawRacePositions", 500, false, "d", pistaid);
	}
}
public GetMaxPlayerCurrentPista(pistaid)
{
	new CountPista;
    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
    {
		if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
		{
		    CountPista++;
		}
    }
    return CountPista;
}
public IsVehiceInRace(vehicleid)
{
	for (new p = 0; p < MAX_COUNT_PISTAS;p++)
    {
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	    {
	        if ( Pistas[p][Used] && PistasPosPlayers[p][i][PlayerIDR] && PistasPosPlayers[p][i][VehicleIDR] == vehicleid )
	        {
	            return PistasPosPlayers[p][i][PlayerIDR];
	        }
		}
	}
	return -1;
}
public RemovePlayerToRace(playerid, option, optiontwo, reason)
{
    if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
    {
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastX] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][Xpos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastY] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][Ypos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastZ] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][Zpos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastZZ] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][ZZpos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][WorldLast] 	= Pistas[PlayersDataOnline[playerid][PistaIDp]][World];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][InteriorLast] = Pistas[PlayersDataOnline[playerid][PistaIDp]][Interior];
        DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastDamage] = 1000.0;
        if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR] > MAX_CAR_FACCION )
        {
            CleanTunningSlots(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);
		}
		DestroyVehicle(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);
        SetLastSettingVehicle(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);
		RepairVehicle(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);

		UpdateGasAndOil(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);

		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][AlarmOn] = false;
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][StateEncendido] = true;
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][Puente] = false;

		IsVehicleOff(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);

		if ( DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][VehicleDeath] )
		{
			DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][VehicleDeath] = false;
			KillTimer(DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][TimerIdBug]);
		}

        if (option)
        {
			DisablePlayerRaceCheckpoint(playerid);
	    	UpdateDamage(playerid, DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastDamage]);
			TextDrawHideForPlayer(playerid, ScorePosRace[PlayersDataOnline[playerid][PistaIDp]]);
			TextDrawHideForPlayer(playerid, ScoreRaceBox);

			SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][PistaIDp]][World]);
			SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][PistaIDp]][Interior]);
            PutPlayerInVehicle(playerid, PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR], 0);
            TogglePlayerControllable(playerid, true);
            SetCameraBehindPlayer(playerid);

            PlayersDataOnline[playerid][VidaOn] = 80.0;
		}

		if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][Used] 		== RACE_STATE_CONTEO ||
			 Pistas[PlayersDataOnline[playerid][PistaIDp]][Used] 		== RACE_STATE_ESPERANDO )
		{
			if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][IsCameras] )
			{
				KillTimer(PlayersDataOnline[playerid][TimerCamaraIdRace]);
			}
		}

		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][PlayerIDR] = -1;
		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR] = -1;
		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][ExitReason] = reason;

        new CarreraID = PlayersDataOnline[playerid][PistaIDp];
        PlayersDataOnline[playerid][PistaIDp] 	= -1;
        PlayersDataOnline[playerid][PosIDp] 	= -1;

        if ( optiontwo && Pistas[CarreraID][Used] != RACE_STATE_ESPERANDO && !GetMaxPlayerCurrentPista(CarreraID)  )
        {
            if ( !Pistas[CarreraID][ConteoPlayers] )
            {
	            new MsgCarreraFinish[MAX_TEXT_CHAT];
			    format(MsgCarreraFinish, sizeof(MsgCarreraFinish), "{00A5FF}La carrera finalizó debido a que los concursantes abandonarón la carrera!");
				SendMessageToRaceChat(CarreraID, MsgCarreraFinish, true);
			    CancelRace(CarreraID);
		    }
		    else
		    {
				ShowStatsRace(CarreraID);
			}
		}
        return CarreraID;
    }
    else
    {
        return -1;
	}
}
public AddPlayerToRace(playerid, pistaid, option)
{
	if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
	{
	    if ( Pistas[pistaid][Used] == RACE_STATE_ESPERANDO )
	    {
	        if ( !Pistas[pistaid][EstadoR] || option)
	        {
		        if ( IsPlayerInAnyVehicle(playerid) )
		        {
		            if ( !Pistas[pistaid][CochesP] || coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] == Pistas[pistaid][CochesP] )
		            {
		                if ( GetMaxPlayerCurrentPista(pistaid) < Pistas[pistaid][Competidores] + 1 )
		                {
		                    if ( GetPlayerVehicleSeat(playerid) == 0 )
		                    {
		                        if ( IsVehiceInRace(GetPlayerVehicleID(playerid)) == -1 )
		                        {
							        for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
							        {
							            if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] == -1 )
							            {
							                PistasPosPlayers[pistaid][i][VehicleIDR] = GetPlayerVehicleID(playerid);
							                PistasPosPlayers[pistaid][i][ExitReason] = -1;
											PistasPosPlayers[pistaid][i][PlayerIDR]  = playerid;
						   	                PlayersDataOnline[playerid][PistaIDp] 	 = pistaid;
						                   	PlayersDataOnline[playerid][PosIDp] 	 = i;
											/*DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][AlarmOn] = false;
											DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][StateEncendido] = false;
											DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][Puente] = false;

											IsVehicleOff(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);*/

				          					SetVehiclePos(PistasPosPlayers[pistaid][i][VehicleIDR], PistasPosPlayers[pistaid][i][Xpos], PistasPosPlayers[pistaid][i][Ypos], PistasPosPlayers[pistaid][i][Zpos]);
				          					SetVehicleZAngle(PistasPosPlayers[pistaid][i][VehicleIDR], PistasPosPlayers[pistaid][i][ZZpos]);
				          					SetVehicleVirtualWorldEx(PistasPosPlayers[pistaid][i][VehicleIDR], Pistas[pistaid][World]);
				          					LinkVehicleToInteriorEx(PistasPosPlayers[pistaid][i][VehicleIDR], Pistas[pistaid][Interior]);

				          					TogglePlayerControllable(playerid, false);

				          					SetCameraBehindPlayer(playerid);

				          					format(PistasPosPlayers[pistaid][i][NameR], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnlineFix]);

								            if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][IsCameras] )
								            {
									            SetCameraPresentRace(playerid, PlayersDataOnline[playerid][PistaIDp],
												0,
												0,
									            PistasCameras[PlayersDataOnline[playerid][PistaIDp]][0][Xpos],
									            PistasCameras[PlayersDataOnline[playerid][PistaIDp]][0][Ypos],
									            PistasCameras[PlayersDataOnline[playerid][PistaIDp]][0][Zpos]);
								            }

											//SetCameraPresent(playerid, 52, 0, CamerasPresent[52][0], CamerasPresent[52][1], CamerasPresent[52][2], 52, 57);
							                return 5;
							            }
									}
									return 4;
								}
								else
								{
								    return 9;
								}
							}
							else
							{
							    return 8;
							}
						}
						else
						{
						    return 6;
						}
					}
					else
					{
					    return 3;
					}
				}
				else
				{
				    return 2;
				}
			}
			else
			{
			    return 1;
			}
	    }
	    else
	    {
	        return false;
		}
	}
	else
	{
	    return 7;
	}
}
public ShowPistaSelectCheckPoint(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
	    PlayersDataOnline[playerid][SaveAfterAgenda][59] = pistaid;
		new PistasDialog[2500];
		new TempConvert[50];
		new ConteoPistas = -1;
		for (new i = 0; i < MAX_COUNT_PISTAS_POS; i++)
		{
		    if ( PistasPos[pistaid][i][Valid] )
		    {
				if (ConteoPistas != -1)
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i", i);
		    	}
				else
				{
			    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i", i);
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
		        ConteoPistas++;
		        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
			}
		}
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (CheckPoints)", Pistas[pistaid][NamePista]);
		if (ConteoPistas != -1)
		{
			ShowPlayerDialogEx(playerid,121,DIALOG_STYLE_LIST,PistasDialogName, PistasDialog, "Selecionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{F0F0F0}No se encontrarón checkpoints para esta carrera.", "Aceptar", "Volver");
		}
	}
}
public ShowPistaPlayerPublics(playerid)
{
	new PistasDialog[1400];
	new TempConvert[50];
	new ConteoPistas = -1;
	for (new i = 0; i < MAX_COUNT_PISTAS; i++)
	{
	    if ( Pistas[i][ValidR] && Pistas[i][Used] == RACE_STATE_ESPERANDO && !Pistas[i][EstadoR])
	    {
			if ( ConteoPistas != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00A5FF}%s {00F50A}(%i)", Pistas[i][NamePista], GetMaxPlayerCurrentPista(i));
	    	}
			else
			{
	    		format(TempConvert, sizeof(TempConvert), "{00A5FF}%s {00F50A}(%i)", Pistas[i][NamePista], GetMaxPlayerCurrentPista(i));
			}
	        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
	        ConteoPistas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
        }
	}
	if (ConteoPistas != -1)
	{
		ShowPlayerDialogEx(playerid,117,DIALOG_STYLE_LIST,"{00A5FF}Carreras - Unirme a una carrera pública", PistasDialog, "Unirme!", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No se encontrarón carreras públicas creadas", "Ok", "");
	}
}
public SendMessageToRaceChat(raceid, const text[], option)
{
	new MsgRace[256];
	new PistaNear = GetNextCheckPoint(raceid, Pistas[raceid][MaxPP], false);
	if ( option )
	{
		format(MsgRace, sizeof(MsgRace), "{F5FF00}\"%s\" Carrera: {E6E6E6}%s", Pistas[raceid][NamePista], text);
	}
	else
	{
		format(MsgRace, sizeof(MsgRace), "%s", text);
	}

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
		{
			if ( PlayersDataOnline[i][PistaIDp] != -1 ||
                 PlayersDataOnline[i][ModeRace] ||
				 IsPlayerInRangeOfPoint(i, 300.0,
							 PistasPos[raceid][PistaNear][Xpos],
							 PistasPos[raceid][PistaNear][Ypos],
							 PistasPos[raceid][PistaNear][Zpos]) )
			{
				SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgRace);
			}
		}
	}
}
public GetValidCheckPoint(pistaid, checkpointid, option)
{
	if ( checkpointid >= Pistas[pistaid][MaxPP] && !option)
	{
		checkpointid = Pistas[pistaid][MinPP];
	}
	else if ( checkpointid <= Pistas[pistaid][MinPP] && option)
	{
	    checkpointid = Pistas[pistaid][MaxPP];
	}
	else if ( option )
	{
	    checkpointid--;
	}
	else
	{
	    checkpointid++;
	}
	return	checkpointid;
}
public GetNextCheckPoint(pistaid, checkpointid, option)
{
//	printf("GetNextCheckPoint JOIN %i - %i - %i", pistaid, checkpointid, option);
	new CurrentPoint = checkpointid;
	for (checkpointid = GetValidCheckPoint(pistaid, checkpointid, option); checkpointid < Pistas[pistaid][MaxPP];checkpointid = GetValidCheckPoint(pistaid, checkpointid, option))
	{
		if ( checkpointid == CurrentPoint )
		{
			break;
		}
		else
		{
			if ( PistasPos[pistaid][checkpointid][Valid] )
			{
			    break;
			}
			else
			{
			    continue;
			}
		}
	}
//	printf("Sale: %i", checkpointid);
	return checkpointid;
}
public GetMaxPistaRace(raceid)
{
	new MaxP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
	    if ( PistasPos[raceid][i][Valid] )
	    {
	    	MaxP = i;
	    }
	}
	return MaxP;
}
public GetMinPistaRace(raceid)
{
	new MinP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
	    if ( PistasPos[raceid][i][Valid] )
	    {
	    	MinP = i;
	    	break;
	    }
	}
	return MinP;
}
public SetPlayerNextCheckPointRace(playerid)
{
	if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] 		  ==	Pistas[PlayersDataOnline[playerid][PistaIDp]][Vueltas] 			&&
		 PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] == 	Pistas[PlayersDataOnline[playerid][PistaIDp]][CheckPointFinal] )
	{
	    new PistasDialogText[MAX_TEXT_CHAT];
	    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}%s{00F50A} finalizó la carrera.", PlayersDataOnline[playerid][NameOnlineFix]);
		SendMessageToRaceChat(PlayersDataOnline[playerid][PistaIDp], PistasDialogText, true);
		Pistas[PlayersDataOnline[playerid][PistaIDp]][ConteoPlayers]++;
		PlayerPlaySound(playerid, SOUND_END_RACE, 0.0, 0.0, 0.0);

		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][TimeFinish] = gettime() - Pistas[PlayersDataOnline[playerid][PistaIDp]][TimeStart];

		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][PosFinish] = Pistas[PlayersDataOnline[playerid][PistaIDp]][ConteoPlayers];

		AddPlayerToRecordsLive(PlayersDataOnline[playerid][PistaIDp], PlayersDataOnline[playerid][PosIDp]);

		RemovePlayerToRace(playerid, true, true, STATE_RACE_EXIT_FINISH);
	}
	else
	{
		new NuevoCheckPoint =
		GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint],
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);
		new NextNuevoCheckPoint =
		GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		NuevoCheckPoint,
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);

		if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves] )
		{
			if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] == Pistas[PlayersDataOnline[playerid][PistaIDp]][MaxPP] )
			{
				if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] )
				{
			    	new PistasDialogText[70];
				    format(PistasDialogText, sizeof(PistasDialogText), "~B~]]]]]]~G~~n~Vuelta %i ~W~Completada!~N~~R~]]]]]]", PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]);
					GameTextForPlayer(playerid, PistasDialogText, 4000, 4);
					PlayerPlaySound(playerid, SOUND_VUELTA_VRACE, 0.0, 0.0, 0.0);
				}
			    PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]++;
			}
		}
		else
		{
			if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] == Pistas[PlayersDataOnline[playerid][PistaIDp]][MinPP] )
			{
				if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] )
				{
			    	new PistasDialogText[70];
				    format(PistasDialogText, sizeof(PistasDialogText), "~B~]]]]]]~G~~n~Vuelta %i ~W~Completada!~N~~R~]]]]]]", PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]);
					GameTextForPlayer(playerid, PistasDialogText, 4000, 4);
					PlayerPlaySound(playerid, SOUND_VUELTA_VRACE, 0.0, 0.0, 0.0);
				}
			    PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]++;
			}
		}

		new StyleCheckPoint;
		if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] 		  ==	Pistas[PlayersDataOnline[playerid][PistaIDp]][Vueltas] 			&&
		  	 NuevoCheckPoint == 	Pistas[PlayersDataOnline[playerid][PistaIDp]][CheckPointFinal] )
		{
		    if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][Tipo] )
		    {
            	StyleCheckPoint = 4;
           	}
           	else
           	{
				StyleCheckPoint = 1;
			}
		}
		else
		{
		    if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][Tipo] )
		    {
            	StyleCheckPoint = 3;
           	}
           	else
           	{
				StyleCheckPoint = 0;
			}
		}

	    PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] = NuevoCheckPoint;
		SetPlayerRaceCheckpoint(playerid, StyleCheckPoint,
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]][Xpos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]][Ypos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]][Zpos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextNuevoCheckPoint][Xpos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextNuevoCheckPoint][Ypos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextNuevoCheckPoint][Zpos],
		Pistas[PlayersDataOnline[playerid][PistaIDp]][Radio]);
	}
}
public ShowStatsRace(raceid)
{
	SendMessageToRaceChat(raceid, "{00FF46}La carrera a finalizado!", true);
	SendMessageToRaceChat(raceid, "{00EBFF}|______________ Resumen de la Carrera ______________|", true);

	new PistasDialogText[MAX_TEXT_CHAT];
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
	    if ( PistasPosPlayers[raceid][i][PistaIDR] != -1 )
	    {
	        new Timee[3];
			GetTimeBySeconds(PistasPosPlayers[raceid][PistasPosPlayers[raceid][i][PistaIDR]][TimeFinish], Timee[0], Timee[1], Timee[2]);

		    format(PistasDialogText, sizeof(PistasDialogText), "{F0F0F0}%i - %s {AFFF00}Tiempo: {EBFF00}%i:%i:%i", i + 1,
			PistasPosPlayers[raceid][PistasPosPlayers[raceid][i][PistaIDR]][NameR],
			Timee[0], Timee[1], Timee[2]);
	        SendMessageToRaceChat(raceid, PistasDialogText, true);
	    }
	}
//	        SendMessageToRaceChat(raceid, "{F50000} ** DESCALIFICADOS **", true);
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
	    if ( PistasPosPlayers[raceid][i][ExitReason] != -1 && PistasPosPlayers[raceid][i][ExitReason] != STATE_RACE_EXIT_FINISH )
	    {

		    format(PistasDialogText, sizeof(PistasDialogText), "{00B9FF}%s {F50000}(Descalificado) {0069FF}Razón: {EBFF00}%s",
			PistasPosPlayers[raceid][i][NameR],
			PistasTypeFinal[PistasPosPlayers[raceid][i][ExitReason]]);
	        SendMessageToRaceChat(raceid, PistasDialogText, true);
	    }
	}
	CancelRace(raceid);
}
public AddPlayerToRecordsLive(raceid, posid)
{
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
	    if ( PistasPosPlayers[raceid][i][PistaIDR] == -1 )
	    {
	    	PistasPosPlayers[raceid][i][PistaIDR]  	 = posid;
	    	return i;
    	}
    }
    return -1;
}
public GetTimeBySeconds(seconds, &hour, &minute, &second)
{
	if ( seconds / 3600 )
	{
	    hour = seconds / 3600;
	    if ( (seconds % 3600) )
	    {
	        minute = (seconds % 3600) / 60;
	        if ( ((seconds % 3600) % 60) )
	        {
	            second = ((seconds % 3600) % 60);
	        }
		}
	}
	if ( seconds / 60 )
	{
        minute = seconds / 60;
        if ( (seconds % 60) )
        {
            second = seconds % 60;
        }
	}
	else
	{
	    second = seconds;
	}
}
public UpdateTextDrawRacePositions(pistaid)
{
	new FiveOnePos[5] = {-1,-1,-1,-1,-1};
	new FiveOneScore[5];
	new Float:FiveOneDistance[5];
	new IsUpdate;
	new PosUpdate;
	new ScoreUpdate;
	new Float:DistanceUpdate;
	new a;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
	{
	    if ( PistasPosPlayers[pistaid][i][PlayerIDR] != -1)
	    {
	        for ( a = 0; a < 5; a++)
	        {
				if ( FiveOnePos[a] == -1 )
				{
					DistanceUpdate =  GetPlayerProgressRace(PistasPosPlayers[pistaid][i][PlayerIDR], ScoreUpdate);
					PosUpdate = i;
					ScoreUpdate += 111;
					IsUpdate = true;
					break;
				}
				else if ( FiveOneScore[a] > 100 )
				{
					DistanceUpdate =  GetPlayerProgressRace(PistasPosPlayers[pistaid][i][PlayerIDR], ScoreUpdate);

					if ( ComparePlayersRaceProgress(FiveOneScore[a] - 111, ScoreUpdate, FiveOneDistance[a], DistanceUpdate) )
					{
						PosUpdate = i;
						ScoreUpdate += 111;
						IsUpdate = true;
						break;
					}
				}
			}
		}
		else if ( PistasPosPlayers[pistaid][i][PosFinish] < 5 )
		{
	        for ( a = 0; a < 5; a++)
	        {
	            if ( FiveOnePos[a] == -1 ||
					 FiveOneScore[a] > 100 ||
					 PistasPosPlayers[pistaid][i][PosFinish] < FiveOneScore[a] && FiveOneScore[a] > 100 )
	            {
					PosUpdate = i;
					ScoreUpdate = PistasPosPlayers[pistaid][i][PosFinish];

					IsUpdate = true;
					break;
				}
			}
		}

	    if ( IsUpdate )
	    {
		    IsUpdate = 4;
			while ( IsUpdate != a )
			{
				FiveOnePos[IsUpdate] 		= FiveOnePos[IsUpdate - 1];
				FiveOneScore[IsUpdate]		= FiveOneScore[IsUpdate - 1];
				FiveOneDistance[IsUpdate]	= FiveOneDistance[IsUpdate - 1];
				IsUpdate--;
			}
			FiveOnePos[a] 		= PosUpdate;
			FiveOneScore[a]		= ScoreUpdate;
			FiveOneDistance[a]	= DistanceUpdate;
		}


		IsUpdate = false;

	}

	new TextDrawText[250];
	new TempString[50];
	for (a = 0; a < 5;a++)
	{
		if (FiveOnePos[a] != -1)
		{
			if ( a )
			{
				format(TempString, sizeof(TempString), "~N~~N~~W~%i- ~G~%s",
				a + 1,
				PistasPosPlayers[pistaid][FiveOnePos[a]][NameR]);
			}
			else
			{
				format(TempString, sizeof(TempString), "~W~%i- ~G~%s",
				a + 1,
				PistasPosPlayers[pistaid][FiveOnePos[a]][NameR]);
			}
		}
		else
		{
			if ( a )
			{
				format(TempString, sizeof(TempString), "~N~~N~~W~%i- ~R~Vac\xa2o",
				a + 1);
			}
			else
			{
				format(TempString, sizeof(TempString), "~W~%i- ~R~Vac\xa2o",
				a + 1);
			}
		}
		strcat(TextDrawText, TempString,sizeof(TextDrawText));
	}
	TextDrawSetString(ScorePosRace[pistaid], TextDrawText);
//	printf("El Final..");
    Pistas[pistaid][RaceTimer] = SetTimerEx("UpdateTextDrawRacePositions", 100, false, "d", pistaid);
}
public ComparePlayersRaceProgress(progress1, progress2, Float:Distance1, Float:Distance2)
{
	if ( progress2 >= progress1 )
	{
	    if ( progress2 == progress1 )
	    {
			if ( Distance2 < Distance1 )
			{
			    return true;
			}
		}
		else
		{
		    return true;
		}
	}
	return false;
}
public Float:GetPlayerProgressRace(playerid, &progress)
{
    progress = GetMaxCheckPointCurrentPista(PlayersDataOnline[playerid][PistaIDp],
	PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR],
	PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]);
    new Float:PlayerPos[3];
    GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);

	new NextCheckPoint;
	if ( progress >= Pistas[PlayersDataOnline[playerid][PistaIDp]][MaxCheckPointsTotal] )
	{
		NextCheckPoint = GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		(progress - 1) % Pistas[PlayersDataOnline[playerid][PistaIDp]][MaxCheckPointsTotal],
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);
	}
	else
	{
		NextCheckPoint = GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		progress - 1,
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);
	}

	//printf("->> %i", NextCheckPoint);

	return GetPointFromPoint(
	PlayerPos[0],
	PlayerPos[1],
	PlayerPos[2],
	PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextCheckPoint][Xpos],
	PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextCheckPoint][Ypos],
	PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextCheckPoint][Zpos]
	);
}
public GetMaxCheckPointCurrentPista(pistaid, countvuelta, checkpointcount)
{
//	printf("checkpointcount %i", checkpointcount);
    if ( !countvuelta )
    {
        return true;
	}
	else
	{
	    if ( checkpointcount != 0 )
	    {
			return (Pistas[pistaid][MaxCheckPointsTotal] * (countvuelta))
			- (Pistas[pistaid][MaxCheckPointsTotal] - (checkpointcount));
		}
		else
		{
			return (Pistas[pistaid][MaxCheckPointsTotal] * (countvuelta));
		}
	}
}
public ForcePutPlayerInVehicle(playerid, vehicleid, seat)
{
	if (!seat)
	{
		new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
		SetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
	}
	PutPlayerInVehicle(playerid, vehicleid, seat);
}
public ShowBuscarAgenda(playerid)
{
	ShowPlayerDialogEx(playerid,129,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - Buscar", "{F0F0F0}Ingrese la frase que desea buscar.", "Buscar", "Volver");
}
public ShowBuscarResultAgenda(playerid, const text[])
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 )
	    {
	        format(TempConvert, sizeof(TempConvert), "%i", AgendaData[playerid][i][NumberC]);
	        if ( strfind(TempConvert, text, true) != -1 || strfind(AgendaData[playerid][i][NameC], text, true) != -1)
	        {
				if ( ConteoAgenda != -1 )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
		    	}
				else
				{
				    format(TempConvert, sizeof(TempConvert), "{00F50A}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
				}
		        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
		        ConteoAgenda++;
		        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
	        }
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,130,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Resultados de la Busqueda", AgendaDialog, "Opciones", "Inicio");
	}
	else
	{
	    format(AgendaDialog, sizeof(AgendaDialog), "{F0F0F0}No se encontrarón resultados\n{F0F0F0}en la busqueda para {F50000}%s", text);
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", AgendaDialog, "Aceptar", "Volver");
	}
}
public ShowSendSMSAgenda(playerid, agendaid)
{
	PlayersDataOnline[playerid][SaveAfterAgenda][0] = agendaid;
	new TempFormat1[256];
	new TempFormat[35];

	format(TempFormat1, sizeof(TempFormat1),"{F0F0F0}Ingrese el contenido del SMS que desea enviarle a {F5FF00}%s {00F50A}(%i)",
	AgendaData[playerid][agendaid][NameC],
	AgendaData[playerid][agendaid][NumberC]);
	format(TempFormat, sizeof(TempFormat), "{00A5FF}Agenda - %s",
	AgendaData[playerid][agendaid][NameC]);

	ShowPlayerDialogEx(playerid,128,DIALOG_STYLE_INPUT, TempFormat, TempFormat1, "Enviar", "Cancelar");
}
public SetPlayerVirtualWorldEx(playerid, wolrdid)
{
	SetPlayerVirtualWorld(playerid, wolrdid);
	if ( PlayersDataOnline[playerid][State] == 3 )
	{
		AddPlayerDescription(playerid, true);
	}
}
public AddPlayerDescription(playerid, option)
{
	if ( PlayersData[playerid][EnableDescription])
	{
	    if ( option )
	    {
	        Delete3DTextLabelEx(playerid, PlayersDataOnline[playerid][Description3D]);
		}
		if ( PlayersData[playerid][DescriptionSelect] )
		{
			PlayersDataOnline[playerid][Description3D] = Create3DTextLabel(PlayersData[playerid][DescriptionString], DescriptionsPerColors[PlayersData[playerid][DescriptionColor]],0.0, 0.0, 0.0, NAME_TAG_DISTANCE_DEFAULT, GetPlayerVirtualWorld(playerid),1);
		}
		else
		{
			PlayersDataOnline[playerid][Description3D] = Create3DTextLabel(DescriptionsText[PlayersData[playerid][Description]], DescriptionsColors[PlayersData[playerid][Description]],0.0, 0.0, 0.0, NAME_TAG_DISTANCE_DEFAULT, GetPlayerVirtualWorld(playerid),1);
		}
		Attach3DTextLabelToPlayer(PlayersDataOnline[playerid][Description3D], playerid, 0.0, 0.0, 0.3);
		return true;
	}
    return false;
}
public RemovePlayerDescription(playerid, option, optiontwo)
{
	if ( PlayersData[playerid][EnableDescription] || optiontwo )
	{
		if ( option )
		{
	    	PlayersData[playerid][EnableDescription] = false;
    	}
        Delete3DTextLabelEx(playerid, PlayersDataOnline[playerid][Description3D]);
        return true;
	}
	else
	{
	    return false;
	}
}
public ShowMenuDescription(playerid)
{
	new DialogDescription[700];
	if ( PlayersData[playerid][EnableDescription] )
	{
	    format(DialogDescription, sizeof(DialogDescription), "{00A5FF}Estado Estática:  {F5FF00}%s\r\n{00A5FF}Estado Personalizado:  {F5FF00}%s\r\n{00A5FF}Usando: {00F50A}%s\r\n{00F50A}1- {E6E6E6}Modificar Estática\r\n{00F50A}2- {E6E6E6}Modificar Personalizada\r\n{00F50A}3- {E6E6E6}Estado: {00F50A}Habilitada",
	    DescriptionsText[PlayersData[playerid][Description]],
		PlayersData[playerid][DescriptionString],
     	DescriptionsPerType[PlayersData[playerid][DescriptionSelect]]	);
	}
	else
	{
	    format(DialogDescription, sizeof(DialogDescription), "{00A5FF}Estado Estática:  {F5FF00}%s\r\n{00A5FF}Estado Personalizado:  {F5FF00}%s\r\n{00A5FF}Usando: {00F50A}%s\r\n{00F50A}1- {E6E6E6}Modificar Estática\r\n{00F50A}2- {E6E6E6}Modificar Personalizada\r\n{00F50A}3- {E6E6E6}Estado: {F50000}Deshabilitada",
	    DescriptionsText[PlayersData[playerid][Description]],
		PlayersData[playerid][DescriptionString],
     	DescriptionsPerType[PlayersData[playerid][DescriptionSelect]]	);
	}
	ShowPlayerDialogEx(playerid,131,DIALOG_STYLE_LIST, "{00A5FF}Estado - Configuración",DialogDescription, "Seleccionar", "Salir");
}
public ShowMenuDescriptionChange(playerid)
{
	new DialogDescription[800];
	new TempConvert[30];
	for ( new i = 0;i < sizeof(DescriptionsText); i++)
	{
	    if ( i )
	    {
			format(TempConvert, sizeof(TempConvert), "\r\n{F5FF00}%s", DescriptionsText[i]);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert), "{F5FF00}%s", DescriptionsText[i]);
		}
	    strcat(DialogDescription, TempConvert, sizeof(DialogDescription));
	}
	ShowPlayerDialogEx(playerid,132,DIALOG_STYLE_LIST, "{00A5FF}Estado - Modificar Estático",DialogDescription, "Cambiar", "Volver");
}
public ShowMenuDescriptionChangePer(playerid)
{
	new DialogDescription[200];
	format(DialogDescription, sizeof(DialogDescription),  "{00F50A}1- {E6E6E6}Color: {%s}%s\r\n{00F50A}2- {E6E6E6}Cambiar Texto", DescriptionsPerColorsHTML[PlayersData[playerid][DescriptionColor]], DescriptionsPerNames[PlayersData[playerid][DescriptionColor]]);
	ShowPlayerDialogEx(playerid,133,DIALOG_STYLE_LIST, "{00A5FF}Estado - Modificar Personalizado", DialogDescription, "Seleccionar", "Volver");
}
public ShowMenuDescriptionChangeColors(playerid)
{
	new DialogDescription[700];
	new TempConvert[50];
	for ( new i = 0;i < sizeof(DescriptionsPerNames); i++)
	{
	    if ( i )
	    {
			format(TempConvert, sizeof(TempConvert), "\r\n{%s}%s", DescriptionsPerColorsHTML[i], DescriptionsPerNames[i]);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert), "{%s}%s", DescriptionsPerColorsHTML[i], DescriptionsPerNames[i]);
		}
	    strcat(DialogDescription, TempConvert, sizeof(DialogDescription));
	}
	ShowPlayerDialogEx(playerid,134,DIALOG_STYLE_LIST, "{00A5FF}Estado - Escoger Color",DialogDescription, "Escoger", "Volver");
}
public ShowMenuDescriptionChangeText(playerid)
{
	ShowPlayerDialogEx(playerid,135,DIALOG_STYLE_INPUT, "{00A5FF}Estado - Escoger Color","{E6E6E6}Introduzca un texto para su estado", "Cambiar", "Volver");
}
public Delete3DTextLabelEx(playerid, Text3D:id)
{
	if ( !Delete3DTextLabel(id) )
	{
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s Debuguer - Text3D Jugador bugueado %s[%i].", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
	    MsgCheatsReportsToAdmins(MsgAviso);
	}
}
public OnPlayerEnterInHouse(playerid)
{
	PlayAudioPlayerHouse(playerid);
}
public OnPlayerExitHouse(playerid)
{
    StopAudioStreamForPlayer(playerid);
}
public PlayAudioPlayerHouse(playerid)
{
	if (HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID] != -1)
	{
	    PlayAudioStreamForPlayer(playerid, Stations[ HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID] ][1]);
	}
}
public PlayAudioPlayerVehicle(playerid, vehicleid)
{
	if (DataCars[vehicleid][StationID] != -1)
	{
	    PlayAudioStreamForPlayer(playerid, Stations[ DataCars[vehicleid][StationID] ][1]);
	}
}
public ShowStations(playerid, selected, option)
{
	new StationsDialog[2500];
	new TempConvert[150];
	new SelectedColor[10];

    strcat(StationsDialog, "{F50000}|| DETENER MÚSICA ||", sizeof(StationsDialog));

	for (new i = 0; i < sizeof(Stations); i++)
	{
	    if ( selected == i )
	    {
	        SelectedColor = "{00A5FF}";
	    }
	    else
	    {
			SelectedColor = "{00F50A}";
		}

	    format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s%s", i + 1, SelectedColor, Stations[i][0]);
        strcat(StationsDialog, TempConvert, sizeof(StationsDialog));
	}
	if ( option == 1 )
	{
		ShowPlayerDialogEx(playerid,141,DIALOG_STYLE_LIST,"{00A5FF}Música - Casa", StationsDialog, "Seleccionar", "Salir");
	}
	else if ( option == 2 )
	{
		ShowPlayerDialogEx(playerid,155,DIALOG_STYLE_LIST,"{00A5FF}Música - Local", StationsDialog, "Seleccionar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,143,DIALOG_STYLE_LIST,"{00A5FF}Estéreo - Vehículo", StationsDialog, "Seleccionar", "Salir");
	}
}
public BuyPhone24_7(playerid)
{
	new Go = true;
	do
	{
	    new savehere = random(99999) + 1000;
        if ( CheckNumberAvalible(savehere) )
        {
			BuyPhoneNow(playerid, savehere);
			Go = false;
		}
	}
	while( Go );
	return true;
}
public CheckNumberAvalible(number)
{
    new query[200], Cache:cacheid, numberExist;
	format(query, 200, "SELECT `Phone` FROM `%s` WHERE `Phone`='%i';", DIR_USERS, number);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(numberExist);
	cache_delete(cacheid);
	if ( !numberExist )
	{
		return true;
	}
	else return false;
}
public BuyPhoneNow(playerid, number)
{
    if ( CheckNumberAvalible(number) )
    {
		new query[200];
		PlayersData[playerid][Phone] = number;
        mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='%i' WHERE `Nombre`='%e';", DIR_USERS, PlayersData[playerid][Phone], PlayersDataOnline[playerid][NameOnline]);
		mysql_query(dataBase, query, false);
		return true;
	}
	else
	{
	    return false;
	}
}
public AreHelpersOnline()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && (PlayersData[i][Ayudante] || PlayersData[i][Admin]))
		{
			return true;
		}
	}
	return false;
}
public ShowDudasDialog(playerid)
{
	ShowPlayerDialogEx(playerid,136,DIALOG_STYLE_INPUT,"{00A5FF}Envíanos tu duda", "{F0F0F0}Recuerde que puede consultar cualquier comando en {00F50A}/Ayuda", "Enviar", "Salir");
}
public LoadRobosInfo()
{
	// Cotls
    RobosInfo[COLTS_R][FaccionIDR] 	= COLTS;
	RobosInfo[COLTS_R][TimerID] 	= -1;

	// AK
	MAX_ROBOS++;
	RobosInfo[AK_R][FaccionIDR] 		= AK;
	RobosInfo[AK_R][TimerID] 		= -1;

	// VELTRAN
	MAX_ROBOS++;
	RobosInfo[VELTRAN_R][FaccionIDR] 		= VELTRAN;
	RobosInfo[VELTRAN_R][TimerID] 		= -1;

	// HEORS
	MAX_ROBOS++;
	RobosInfo[HEORS_R][FaccionIDR] 		= HEORS;
	RobosInfo[HEORS_R][TimerID] 		= -1;
}
public CancelRobo(roboid)
{
	RobosInfo[roboid][BizzIDR] 	 = false;
	RobosInfo[roboid][RoboState] = false;
	RobosInfo[roboid][ConteoR]   = false;

	if ( RobosInfo[roboid][TimerID] != -1 )
	{
	    KillTimer(RobosInfo[roboid][TimerID]);
	}
	RobosInfo[roboid][TimerID] 		= -1;
}
public AddRobo(roboid, bizzid)
{
	RobosInfo[roboid][BizzIDR] = bizzid;
	RobosInfo[roboid][TimerID] = SetTimerEx("SendAvisoRobo", 180000, true, "i", roboid);
	SendMessageRobosFaccion(RobosInfo[roboid][FaccionIDR], "[Robo]: Ha comenzado el robo! A robar sin que nos pillen!");
	SendAvisoRobo(roboid);
}
public GetMaxPlayersByFaccion(faccionid)
{
	new countf;
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid)
		{
		    countf++;
		}
	}
 	return countf;
}
public SendAvisoRobo(roboid)
{
	RobosInfo[roboid][ConteoR]++;
    if ( !RobosInfo[roboid][RoboState] )
    {
	    new SaveCityReal;
	    if ( RobosInfo[roboid][City] == LSPD)
	    {
	        SaveCityReal = false;
	    }
	    else
	    {
	        SaveCityReal = true;
		}
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
			{
			    if ( IsMyBizz(i, RobosInfo[roboid][BizzIDR], false) || IsMyExtorsion(i, RobosInfo[roboid][BizzIDR]) )
			    {
				    new MsgRoboSMSReason[MAX_TEXT_CHAT];
			        format(MsgRoboSMSReason, sizeof(MsgRoboSMSReason), "[Alarma] Aviso %i - Esta sonando la alarma de el local \"%s\" localizado en %s", RobosInfo[roboid][ConteoR], NegociosType[NegociosData[RobosInfo[roboid][BizzIDR]][Type]][TypeName], Ciudades[SaveCityReal]);
			        AddSMS(i, 911, MsgRoboSMSReason);
			        format(MsgRoboSMSReason, sizeof(MsgRoboSMSReason), "[SMS] Recibido de SAPD 911: %s", MsgRoboSMSReason);
					Acciones(i, 8, "recibe un SMS en el móvil");
				    SendClientMessage(i, COLOR_INFO_MOVIL, MsgRoboSMSReason);
				}
				if ( PlayersData[i][Faccion] == RobosInfo[roboid][City] )
				{
					SendClientMessage(i, 0x0069FFFF, "[Avisos Alarmas SA]: La alarma de un local se ha activado! Se solicita personal urgente! Use (/Alarmas)");
				}
			}
		}
	}
	if ( RobosInfo[roboid][ConteoR] >= 5 )
	{
	    RobosInfo[roboid][RoboState] = true;
	    KillTimer(RobosInfo[roboid][TimerID]);
		SendMessageRobosFaccion(RobosInfo[roboid][FaccionIDR], "[Robo]: Ya pueden terminar el robo al negocio! Usen (/Terminar Robo)");
		RobosInfo[roboid][TimerID] = SetTimerEx("RobarConteo", 60000, false, "i", roboid);
	}
}
public RobarConteo(roboid)
{
	SendMessageRobosFaccion(RobosInfo[roboid][FaccionIDR], "[Robo]: Han tardado demasiado para robar el negocio! Para la próxima será...");
	CancelRobo(roboid);
}
public SendMessageRobosFaccion(faccionid, const text[])
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid)
		{
		    SendClientMessage(i, 0x006500FF, text); // 0x00FF0A50
		}
	}
}
public IsBizzOnRobo(playerid, bizzid)
{
	for ( new i = 0; i <=  MAX_ROBOS; i++ )
	{
		if ( RobosInfo[i][BizzIDR] == bizzid )
		{
			SendInfoMessage(playerid, 0, "1499", "No puedes utilizar este comando mientras tu negocio o extorsión esta en medio de un robo!");
    		return true;
   		}
	}
	return false;
}
public ShowAlarmas(playerid)
{
	new AlarmasDialog[700];
	new TempConvert[100];
	new ConteoAlarmas = -1;
    new SaveCityReal;
	for (new i = 0; i <= MAX_ROBOS; i++)
	{
	    if ( RobosInfo[i][BizzIDR] )
	    {
		    if ( RobosInfo[i][City] == LSPD )
		    {
		        SaveCityReal = false;
		    }
		    else
		    {
		        SaveCityReal = true;
			}
			if ( ConteoAlarmas != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Negocio: %s  - {00A5FF}Ciudad: %s",
		    	NegociosType[NegociosData[RobosInfo[i][BizzIDR]][Type]][TypeName],
				Ciudades[SaveCityReal]);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{00F50A}Negocio: %s  - {00A5FF}Ciudad: %s",
		    	NegociosType[NegociosData[RobosInfo[i][BizzIDR]][Type]][TypeName],
				Ciudades[SaveCityReal]);
			}
	        strcat(AlarmasDialog, TempConvert, sizeof(AlarmasDialog));
	        ConteoAlarmas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAlarmas] = i;
        }
	}
	if (ConteoAlarmas != -1)
	{
		ShowPlayerDialogEx(playerid,137,DIALOG_STYLE_LIST,"{00A5FF}Alarmas SA - Alarmas activadas", AlarmasDialog, "Ver", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Alarmas - Información", "{F0F0F0}No hay alarmas activadas en la ciudad.", "Aceptar", "");
	}
}
public IsGarageToHouse(playerid, pickupid)
{
	for ( new i = 0; i <= MAX_GARAGE_TYPE; i++ )
	{
		if ( TypeGarage[i][PickupIdh] == pickupid )
		{
		    return true;
		}
	}
	return false;
}
public IsValidSeatTaxi(seatid)
{
	if ( seatid >= 1 && seatid <= 3 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public CheckValidPlayerToTaxi(playerid, taxiid)
{
	if ( GetPlayerVehicleID(playerid) == TaxisTaximetro[taxiid][TaxiVehicleid] &&
		 PlayersDataOnline[playerid][IsTaxi] == -1 &&
		 IsValidSeatTaxi(GetPlayerVehicleSeat(playerid)) )
	{
	    return true;
    }
    else
    {
        return false;
	}
}
public SetPlayerTaxi(playerid, taxiid, seat)
{
    seat--;
	PlayersDataOnline[playerid][IsTaxi] = taxiid;
    PlayersDataOnline[playerid][SeatTaxi] = seat;
	TextDrawShowForPlayer(playerid, TaxisTaximetro[taxiid][Seats][seat]);
    TaxisTaximetro[taxiid][TaxiTime][seat] = gettime();
}
public UpdateTaximetroSeat(playerid)
{
//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde
//		\xa6 = O Con tílde

	new TimeNow = gettime();
	new TaxiStringUpdate[100];
	new MinutesT;
	new SecondsT;
	if ( (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) <= 59 )
	{
        SecondsT = (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]);
	}
	else
	{
        SecondsT = (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) % 60;
	}
	if ( (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) <= 3600 )
	{
        MinutesT = (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) / 60;
	}
	else
	{
        MinutesT = ((TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) % 3600) / 60;
	}
	format(TaxiStringUpdate, sizeof(TaxiStringUpdate), "  ~R~.::Tax\xa2~R~metro::.~N~~N~~B~ Tiempo:~W~%2i:%2i:%2i~N~~B~    Pagar: ~G~$%4i",

	(TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) / 3600,
	MinutesT,
	SecondsT,
	CalcularTaxiMoney(playerid)
	);
	TextDrawSetString(TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][Seats][PlayersDataOnline[playerid][SeatTaxi]], TaxiStringUpdate);

	if ( PlayersData[playerid][Dinero] <= CalcularTaxiMoney(playerid) )
	{
	    PayTaxi(playerid, true);
	    RemovePlayerFromVehicle(playerid);
		SendClientMessage(playerid, COLOR_MESSAGES[0], " No tienes dinero para pagar el taxí!");
	}
	else if ( !TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiOn] )
	{
		PayTaxi(playerid, true);
	}
}
public PayTaxi(playerid, option)
{
	if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
	{
	    new MoneyTaxi = CalcularTaxiMoney(playerid);
	    new NoPay;
	    GivePlayerMoneyEx(playerid, -MoneyTaxi);
	    for ( new i = 0; i < MAX_PLAYERS; i++ )
	    {
			if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 &&
				 IsPlayerInAnyVehicle(i) &&
				 GetPlayerVehicleID(i) == TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiVehicleid] &&
				 GetPlayerVehicleSeat(playerid) == 0 &&
				 PlayersData[playerid][Faccion] == TAXI )
			{
				GivePlayerMoneyEx(i, MoneyTaxi);
				NoPay = true;
				break;
			}
	    }
	    if ( !NoPay )
	    {
	    	FaccionData[TAXI][Deposito] += MoneyTaxi;
    	}
		if ( option )
		{
			TextDrawHideForPlayer(playerid, TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][Seats][PlayersDataOnline[playerid][SeatTaxi]]);
			if ( MoneyTaxi > 0 )
			{
				new MsgPayTaxi[MAX_TEXT_CHAT];
				format(MsgPayTaxi, sizeof(MsgPayTaxi), "Has pagado $%i por el servicio del taxí.", MoneyTaxi);
				SendInfoMessage(playerid, 3, "0", MsgPayTaxi);
			}
		}
	    PlayersDataOnline[playerid][IsTaxi] = -1;
	}
}
public CalcularTaxiMoney(playerid)
{
	return ((gettime() - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) / SECONDS_TAXI);
}
public SetVehicleHealthEx(vehicleid, Float:health)
{
    DataCars[vehicleid][VehicleAnticheat] = gettime() + 5;
    SetVehicleHealth(vehicleid, health);
}
public StopMusicOnHouse(houseid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][IsPlayerInHouse] == houseid )
		{
		    StopAudioStreamForPlayer(i);
		}
	}
}
public StopMusicOnVehicle(vehicleid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && (PlayersDataOnline[i][InVehicle] == vehicleid || PlayersDataOnline[i][InCarId] == vehicleid) )
		{
		    StopAudioStreamForPlayer(i);
		}
	}
}
public ChangeMusicOnHouse(houseid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][IsPlayerInHouse] == houseid )
		{
			PlayAudioPlayerHouse(i);
		}
	}
}
public ChangeHouseOrOther(playerid, newhouse)
{
	if ( PlayersData[playerid][IsPlayerInHouse] )
	{
		StopAudioStreamForPlayer(playerid);
	}
	PlayersData[playerid][IsPlayerInHouse] = newhouse;
	if ( newhouse )
	{
		PlayAudioPlayerHouse(playerid);
	}
}
public ChangeMusicOnVehicle(vehicleid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && (PlayersDataOnline[i][InVehicle] == vehicleid || PlayersDataOnline[i][InCarId] == vehicleid) )
		{
			PlayAudioPlayerVehicle(i, vehicleid);
		}
	}
}
public ShowLockTextDraws(vehicleid, last)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][InCarId] == vehicleid)
		{
		    if ( last != -1 )
		    {
		        if ( !last )
		        {
					TextDrawHideForPlayer(i, VelocimetroFijos[7]);
				}
				else
				{
					TextDrawHideForPlayer(i, VelocimetroFijos[8]);
				}
		    }
		    if ( !DataCars[vehicleid][Lock] )
		    {
			    TextDrawShowForPlayer(i, VelocimetroFijos[7]);
		    }
		    else
		    {
			    TextDrawShowForPlayer(i, VelocimetroFijos[8]);
		    }
		    return true;
		}
	}
	return false;
}
public IsPlayerNotFullObjects(playerid, msg)
{
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( !PlayersData[playerid][Objetos][i] )
	    {
	        return i;
	    }
	}
	if ( msg )
	{
		SendInfoMessage(playerid, 0, "1575", "No puedes llevar más objetos encima!");
	}
	return -1;
}
public AddObjectHoldToPlayer(playerid, objectid)
{
	new SaveNotFull = IsPlayerNotFullObjects(playerid, false);
	if ( SaveNotFull != -1 )
	{
	    PlayersData[playerid][Objetos][SaveNotFull] = objectid;
		if ( AllowForItSkin(PlayersData[playerid][Skin], GetTypeObjectEx(objectid)) )
		{
	    	PlayersData[playerid][ObjetosVision][SaveNotFull]       = false;
    	}
    	else
    	{
			PlayersData[playerid][ObjetosVision][SaveNotFull]       = true;
    	}
		SetObjectHoldToPlayer(playerid, objectid, SaveNotFull);
		return true;
	}
	else
	{
	    return false;
	}
}
public RemoveObjectHoldToPlayer(playerid, objectid, index)
{
    RemovePlayerAttachedObject(playerid, index);
	if ( objectid != -1 )
	{
	    index = HaveObjectPlayer(playerid, objectid);
	    if ( index == -1 )
	    {
	        return false;
        }
	}
    PlayersData[playerid][Objetos][index] = false;
    return true;
}
public GetObjectByType(playerid, type)
{
	new TypeSaveTemp;
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] )
	    {
            TypeSaveTemp = GetTypeObject(PlayersData[playerid][Objetos][i]);
            if ( type == ObjectPlayersInt[TypeSaveTemp][2] )
            {
                return i;
            }
	    }
    }
    return -1;
}
public HaveObjectPlayer(playerid, objectid)
{
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] == objectid )
	    {
	        return i;
	    }
	}
	return -1;
}
public AllowForItSkin(skinid, type)
{
	if ( type == TYPE_PELO && !IsAllowItSkinForHair(skinid) ||
	     type == TYPE_BOINA && !IsAllowItSkinForBoina(skinid) ||
		 type == TYPE_GORRAS && !IsAllowItSkinForGorras(skinid) ||
		 type == TYPE_RELOJES && !IsAllowItSkinForRelojes(skinid) ||
		 type == TYPE_GAFAS && !IsAllowItSkinForGafas(skinid) ||
		 type == TYPE_CASCO && !IsAllowItSkinForCasco(skinid))
	{
	    return false;
	}
	else
	{
	    return true;
	}
}
public ReturnObjetsToPlayer(playerid)
{
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] )
	    {
	        if ( !AllowForItSkin(PlayersData[playerid][Skin], GetTypeObjectEx(PlayersData[playerid][Objetos][i])) )
	        {
				if ( !PlayersData[playerid][ObjetosVision][i] )
				{
					PlayersData[playerid][ObjetosVision][i] = true;
					RemovePlayerAttachedObject(playerid, i);
				}
	            continue;
           	}
           	SetObjectHoldToPlayer(playerid, PlayersData[playerid][Objetos][i], i);
	    }
    }
}
public IsNotOcupedObject(playerid, objectid)
{
	new SaveRowID = GetTypeObject(objectid);
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] && ObjectPlayersInt[GetTypeObject(PlayersData[playerid][Objetos][i])][2] == ObjectPlayersInt[SaveRowID][2] )
	    {
	        return i;
	    }
	}
	return -1;
}
public SetObjectHoldToPlayer(playerid, objectid, index)
{
	if ( !PlayersData[playerid][ObjetosVision][index] )
	{
		new Float:OffsetsPos[9];
		new SaveRowID = GetTypeObject(objectid);
		if ( SaveRowID != -1 )
		{
			switch (ObjectPlayersInt[SaveRowID][2])
			{
			    case TYPE_MALETIN:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = ObjectsPlayers[0][i];
	            	}
				}
			    case TYPE_GAFAS:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos) - 3; i++ )
			        {
		            	OffsetsPos[i] = SkinesGlasesPos[PlayersData[playerid][Skin]][i];
	            	}
	            	OffsetsPos[6] = 1;
	            	OffsetsPos[7] = 1;
	            	OffsetsPos[8] = 1;
			    }
			    case TYPE_PELO:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos) - 3; i++ )
			        {
		            	OffsetsPos[i] = SkinesHairPos[PlayersData[playerid][Skin]][i];
	            	}
	            	OffsetsPos[6] = SkinesHairPos[PlayersData[playerid][Skin]][8];
	            	OffsetsPos[7] = SkinesHairPos[PlayersData[playerid][Skin]][8];
	            	OffsetsPos[8] = SkinesHairPos[PlayersData[playerid][Skin]][8];
		        }
			    case TYPE_BOINA:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesBoina[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_GORRAS:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesGorras[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_RELOJES:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesRelojes[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_CASCO:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesCascos[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_TASER:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = ObjectsPlayers[1][i];
	            	}
				}
			}
			SetPlayerAttachedObject(playerid, index, objectid, ObjectPlayersInt[SaveRowID][1], OffsetsPos[0],OffsetsPos[1],OffsetsPos[2],OffsetsPos[3],OffsetsPos[4],OffsetsPos[5],OffsetsPos[6],OffsetsPos[7],OffsetsPos[8]);
			return true;
		}
	}
	return false;
}
public GetTypeObject(objectid)
{
	for (new i = 0; i < sizeof(ObjectPlayersInt); i++)
	{
		if ( ObjectPlayersInt[i][0] == objectid )
		{
		    return i;
		}
	}
	return -1;
}
public GetTypeObjectEx(objectid)
{
	for (new i = 0; i < sizeof(ObjectPlayersInt); i++)
	{
		if ( ObjectPlayersInt[i][0] == objectid )
		{
		    return ObjectPlayersInt[i][2];
		}
	}
	return -1;
}
public SpawnPlayerEx(playerid)
{
    SpawnPlayer(playerid);
	ReturnObjetsToPlayer(playerid);
}
public SetPlayerSkinEx(playerid, skinid)
{
	SetPlayerSkin(playerid, skinid);
	ReturnObjetsToPlayer(playerid);
}
public IsAllowItSkinForCasco(skinid)
{
	if ( SkinesCascos[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForHair(skinid)
{
	if ( SkinesHairPos[skinid][8] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForBoina(skinid)
{
	if ( SkinesBoina[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForGorras(skinid)
{
	if ( SkinesGorras[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForRelojes(skinid)
{
	if ( SkinesRelojes[skinid][8] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForGafas(skinid)
{
	if ( SkinesGlasesPos[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public ShowObjectos(playerid)
{
	new ObjetosDialog[500];
	new TempConvert[50];
	new ConteoObjetos = -1;
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] )
	    {
			if ( ConteoObjetos != -1 )
			{
			    if ( PlayersData[playerid][ObjetosVision][i] )
			    {
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00A5FF}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
	    	}
			else
			{
			    if ( PlayersData[playerid][ObjetosVision][i] )
			    {
			    	format(TempConvert, sizeof(TempConvert), "{00A5FF}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "{00F50A}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
			}
	        strcat(ObjetosDialog, TempConvert, sizeof(ObjetosDialog));
	        ConteoObjetos++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoObjetos] = i;
        }
	}
	if (ConteoObjetos != -1)
	{
		ShowPlayerDialogEx(playerid,148,DIALOG_STYLE_LIST,"{00A5FF}Objetos - Control de los objetos", ObjetosDialog, "Opciones", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Objetos - Información", "{F0F0F0}No llevas objetos.", "Aceptar", "");
	}
}
public ShowObjetosOpciones(playerid)
{
	new ObjetTitleName[MAX_TEXT_CHAT];
	format(ObjetTitleName, sizeof(ObjetTitleName), "{00A5FF}Objetos - Opciones del {F5FF00}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
	if ( !PlayersData[playerid][ObjetosVision][PlayersDataOnline[playerid][SaveAfterAgenda][10]] )
	{
		ShowPlayerDialogEx(playerid,149,DIALOG_STYLE_LIST, ObjetTitleName, "{00A5FF}1 - {F0F0F0}Dar\r\n{00A5FF}2 - {F0F0F0}Dejar\r\n{00A5FF}3 - {F0F0F0}Tirar\r\n{00A5FF}4 - {F0F0F0}Guardar", "Seleccionar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,149,DIALOG_STYLE_LIST, ObjetTitleName, "{00A5FF}1 - {F0F0F0}Dar\r\n{00A5FF}2 - {F0F0F0}Dejar\r\n{00A5FF}3 - {F0F0F0}Tirar\r\n{00A5FF}4 - {F0F0F0}Sacar", "Seleccionar", "Volver");
	}
}
public ShowDejarObjeto(playerid)
{
	ShowPlayerDialogEx(playerid,151,DIALOG_STYLE_LIST, "{00A5FF}Objetos - Dejar", "{00A5FF}1 - {F0F0F0}Maletero\r\n{00A5FF}2 - {F0F0F0}Gaveta\r\n{00A5FF}", "Seleccionar", "Volver");
}
public ShowDejarObjetoInput(playerid)
{
	ShowPlayerDialogEx(playerid,152,DIALOG_STYLE_INPUT, "{00A5FF}Objetos - Dejar", "{F0F0F0}Ingrese la ID del slot que desea dejarlo.\nSi desea dejarlo en el primero disponible,\ndeje en blanco el campo de texto.", "Dejar", "Volver");
}
public ShowDarObjeto(playerid)
{
	new ObjetTitleName[MAX_TEXT_CHAT];
	format(ObjetTitleName, sizeof(ObjetTitleName), "{00A5FF}Objetos - Dar {F5FF00}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
	ShowPlayerDialogEx(playerid,150,DIALOG_STYLE_INPUT, ObjetTitleName, "{F0F0F0}Ingrese la ID del jugador al que desea dar éste objeto.", "Dar", "Volver");
}
public ShowAndHideSirena(playerid, vehicleid)
{
	if ( DataCars[vehicleid][AttachObjectID] )
	{
	    DestroyObject(DataCars[vehicleid][AttachObjectID]);
		DataCars[vehicleid][AttachObjectID] = false;
		SendInfoMessage(playerid, 2, "0", "Sirena desactivada!");
	}
	else
	{
	    DataCars[vehicleid][AttachObjectID] = CreateObject(18646, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
		AttachObjectToVehicle(DataCars[vehicleid][AttachObjectID], vehicleid, 0.4, 0.6, 0.3, 0, 0, 0);
		SendInfoMessage(playerid, 2, "0", "Sirena encendida!");
	}
}
public HaveObjectByTypeAndShow(playerid, type)
{
	new responseHave = GetObjectByType(playerid, type);
	if ( responseHave != -1 && !PlayersData[playerid][ObjetosVision][responseHave] )
	{
	    return true;
	}
	return false;
}
public GetPlayerInteriorEx(playerid)
{
	return PlayersDataOnline[playerid][LastInterior];
}
public SetPlayerInteriorEx(playerid, newinterior)
{
	if (newinterior >= 0 && newinterior < MAX_INTERIORS)
	{
     	PlayersDataOnline[playerid][LastInterior] = newinterior;
    	SetPlayerInterior(playerid, newinterior);
   	}
   	else
   	{
	   	KickEx(playerid, 10);
   	}
}
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if (DataCars[vehicleid][Freno])
	{
	    if (GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > MAX_FRENO_DISTANCE)

	    SetVehiclePos(vehicleid, DataCars[vehicleid][LastX], DataCars[vehicleid][LastY], DataCars[vehicleid][LastZ]);
		SetVehicleZAngle(vehicleid, DataCars[vehicleid][LastZZ]);
		return 0;
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if (PlayersDataOnline[playerid][AdminOn])
	{
	    if (GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendInfoMessage(playerid, 0, "", "Solo te puedes tpear estando en exteriores.");
	    
	    if (IsPlayerInAnyVehicle(playerid))
		SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ);
	    else SetPlayerPosFindZ(playerid, fX, fY, fZ);
	}
    return 1;
}

stock ConvertToRGBColor(const string[])
{
    new LenGet = strlen(string);
    new stringtemp[200];
    format(stringtemp, 200, "%s", string);
	new go = true, i = 0;
	do
	{
	    if ( stringtemp[i] == '~' && stringtemp[i+2] == '~')
	    {
			if ( stringtemp[i+1] == 'r' || stringtemp[i+1] == 'R' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "{"COLOR_ROJO"}", i, sizeof(stringtemp));
			    i = -1;
			}
			else if ( stringtemp[i+1] == 'g' || stringtemp[i+1] == 'G' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "{"COLOR_VERDE"}", i, sizeof(stringtemp));
			    i = -1;
			}
			else if ( stringtemp[i+1] == 'b' || stringtemp[i+1] == 'B' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "{"COLOR_AZUL"}", i, sizeof(stringtemp));
			    i = -1;
			}
			else if ( stringtemp[i+1] == 'y' || stringtemp[i+1] == 'Y' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "{"COLOR_AMARILLO"}", i, sizeof(stringtemp));
			    i = -1;
			}
			else if ( stringtemp[i+1] == 'w' || stringtemp[i+1] == 'W' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "{"COLOR_CREMA"}", i, sizeof(stringtemp));
			    i = -1;
			}
			else if ( stringtemp[i+1] == 'p' || stringtemp[i+1] == 'P' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "{CC97F2}", i, sizeof(stringtemp));
			    i = -1;
			}
			else if ( stringtemp[i+1] == 'l' || stringtemp[i+1] == 'L' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "{303030}", i, sizeof(stringtemp));
			    i = -1;
			}
			else if ( stringtemp[i+1] == 'n' || stringtemp[i+1] == 'N' )
			{
			    strdel(stringtemp, i, i+3);
			    strins(stringtemp, "\n", i, sizeof(stringtemp));
			    i = -1;
			}
			LenGet = strlen(stringtemp);
	    }
	    i++;
	    if (i == LenGet) go = false;
	}
	while(go);
	return stringtemp;
}

public CreatePickupEx(modelid, type, Float:x, Float:y, Float:z, worldid, interiorid)
{
	return CreateDynamicPickup(modelid, type, x, y, z, worldid, interiorid);
}

public CreateFaccionDynamicPickup(modelid, faccionid, Float:x, Float:y, Float:z, worldid, interiorid, playerid, Float:streamdistance)
{
    new pickupid = CreateDynamicPickup(modelid, 1, x, y, z, worldid, interiorid, playerid, streamdistance);
	PickupIndex[pickupid][Tipo] = PICKUP_TYPE_FACCION;
	PickupIndex[pickupid][Tipoid] = faccionid;
    return pickupid;
}

public CreateNegocioDynamicPickup(modelid, negociotipo, Float:x, Float:y, Float:z, worldid)
{
    new pickupid = CreateDynamicPickup(19607, 1, x, y ,z - 1, worldid, NegociosType[negociotipo][InteriorId]);
    PickupIndex[pickupid][Tipo] = PICKUP_TYPE_NEGOCIO_TYPE;
	PickupIndex[pickupid][Tipoid] = negociotipo;
	return pickupid;
}

public CreateCasaTipoDynamicPickup(modelid, casatipo, Float:x, Float:y, Float:z, worldid)
{
	new pickupid = CreateDynamicPickup(19606, 1, x, y, z - 1, worldid, TypeHouse[casatipo][Interior]);
    PickupIndex[pickupid][Tipo] = PICKUP_TYPE_CASA_TYPE;
	PickupIndex[pickupid][Tipoid] = casatipo;
	return pickupid;
}

public CreateGarageTipoDynamicPickup(modelid, garagetipo, Float:x, Float:y, Float:z, worldid)
{
	new pickupid = CreateDynamicPickup(modelid, 1, x, y, z, worldid, TypeGarage[garagetipo][Interior]);
    PickupIndex[pickupid][Tipo] = PICKUP_TYPE_GARAGE_CASA_TYPE;
	PickupIndex[pickupid][Tipoid] = garagetipo;
	return pickupid;
}

public CreateInfoPickup(modelid, pickupinfoid, Float:x, Float:y, Float:z, worldid, interiorid)
{
    new pickupid = CreatePickupEx(modelid, 1, x, y, z, worldid, interiorid);
    PickupIndex[pickupid][Tipo] = PICKUP_TYPE_INFO;
    PickupIndex[pickupid][Tipoid] = pickupinfoid;
	return pickupid;
}

public CreateGarageExPickup(modelid, garageid, Float:x, Float:y, Float:z, worldid, interiorid)
{
    CreateDynamic3DTextLabel("Lugar: {"COLOR_CREMA"}Garage", 0x00A5FFFF, x, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, true, worldid, interiorid);
    /////////////////////////
	new pickupid = CreatePickupEx(modelid, 1, x, y, z, worldid, interiorid);
    PickupIndex[pickupid][Tipo] = PICKUP_TYPE_GARAGE_EX;
    PickupIndex[pickupid][Tipoid] = garageid;
	return pickupid;
}

stock ClearPlayerPickups(playerid)
{
    PlayersDataOnline[playerid][InPickup] = 0;
	PlayersDataOnline[playerid][InPickupFaccion] = 0;
	PlayersDataOnline[playerid][InPickupTele] = -1;
	PlayersDataOnline[playerid][InPickupNegocio] = 0;
	PlayersDataOnline[playerid][InPickupCasa] = 0;
	PlayersDataOnline[playerid][InPickupLocal] = -1;
}

public IsPlayerInPickup(playerid)
{
    if (IsPlayerInRangeOfPoint(playerid, 2.0, PlayersDataOnline[playerid][MyPickupX_Now], PlayersDataOnline[playerid][MyPickupY_Now], PlayersDataOnline[playerid][MyPickupZ_Now]))
    {
        return 1;
    }
    else
    {
		ClearPlayerPickups(playerid);
		return 0;
	}
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    new mapeoid = PlayersDataOnline[playerid][EditingMapeo];
    if (response == EDIT_RESPONSE_CANCEL)
    {
        if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO && Mapeo[mapeoid][ID_Objeto] == objectid && PlayersDataOnline[playerid][EditingObjectID] == objectid)
        {
            SetDynamicObjectPos(objectid, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
        	SetDynamicObjectRot(objectid, Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ]);
        	ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
			PlayersDataOnline[playerid][EditingMovement] = false;
        }
    }
	if (response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayersDataOnline[playerid][EditingType] == EDITING_TYPE_MAPEO && Mapeo[mapeoid][ID_Objeto] == objectid && PlayersDataOnline[playerid][EditingObjectID] == objectid)
		{
		    if (PlayersDataOnline[playerid][EditingMovement] == 0)
		    {
			    Mapeo[mapeoid][PosX] = x;
				Mapeo[mapeoid][PosY] = y;
				Mapeo[mapeoid][PosZ] = z;
				Mapeo[mapeoid][PosRX] = rx;
				Mapeo[mapeoid][PosRY] = ry;
				Mapeo[mapeoid][PosRZ] = rz;
				SetDynamicObjectPos(objectid, x, y, z);
        		SetDynamicObjectRot(objectid, rx, ry, rz);
        		SaveMapeo(mapeoid);
			}
   			else if (PlayersDataOnline[playerid][EditingMovement] == 1)
			{
			    if (Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PUERTA)
			    {
			        new puertaid = Mapeo[mapeoid][Tipoid];
	       			Puerta[puertaid][PosX] = x;
					Puerta[puertaid][PosY] = y;
					Puerta[puertaid][PosZ] = z;
					Puerta[puertaid][PosRX] = rx;
					Puerta[puertaid][PosRY] = ry;
					Puerta[puertaid][PosRZ] = rz;
					SavePuerta(puertaid);
			    }
			    else if (Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PEAJE)
			    {
					new peajeid = Mapeo[mapeoid][Tipoid];
					Peajes[peajeid][PosXFalse] = x;
					Peajes[peajeid][PosYFalse] = y;
					Peajes[peajeid][PosZFalse] = z;
					Peajes[peajeid][PosRotXFalse] = rx;
					Peajes[peajeid][PosRotYFalse] = ry;
					Peajes[peajeid][PosRotZFalse] = rz;
					SavePeaje(peajeid);
			    }
			    else if (Mapeo[mapeoid][Tipo] == MAPEO_TYPE_PARQUEO)
			    {
					new parqueoid = Mapeo[mapeoid][Tipoid];
					Parqueo[parqueoid][PosXFalse] = x;
					Parqueo[parqueoid][PosYFalse] = y;
					Parqueo[parqueoid][PosZFalse] = z;
					Parqueo[parqueoid][PosRotXFalse] = rx;
					Parqueo[parqueoid][PosRotYFalse] = ry;
					Parqueo[parqueoid][PosRotZFalse] = rz;
					SaveParqueo(parqueoid);
			    }
				SetDynamicObjectPos(objectid, Mapeo[mapeoid][PosX], Mapeo[mapeoid][PosY], Mapeo[mapeoid][PosZ]);
	        	SetDynamicObjectRot(objectid, Mapeo[mapeoid][PosRX], Mapeo[mapeoid][PosRY], Mapeo[mapeoid][PosRZ]);
				PlayersDataOnline[playerid][EditingMovement] = 0;
			}
			ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
		}
	}
	if (response == EDIT_RESPONSE_UPDATE)
	{
	    if (PlayersDataOnline[playerid][EditingType])
		{
		    SetPVarFloat(playerid, "editingobjectX", x);
			SetPVarFloat(playerid, "editingobjectY", y);
			SetPVarFloat(playerid, "editingobjectZ", z);
			SetPVarFloat(playerid, "editingobjectRX", rx);
			SetPVarFloat(playerid, "editingobjectRY", ry);
			SetPVarFloat(playerid, "editingobjectRZ", rz);
		}
	}
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	if (PlayersData[playerid][InLocal] == -1 ||
		PlayersData[playerid][IsPlayerInHouse] == 0 ||
		PlayersData[playerid][IsPlayerInBizz] == 0    )
	{
	    for(new mapeoid=0; mapeoid != MAX_MAPEOS_COUNT; mapeoid++)
		{
		    if (Mapeo[mapeoid][ID_Objeto] == objectid)
			{
			    new string[144];
			    CancelEdit(playerid);
			    PlayersDataOnline[playerid][EditingType] = EDITING_TYPE_MAPEO;
			    PlayersDataOnline[playerid][EditingMapeo] = mapeoid;
				PlayersDataOnline[playerid][EditingObjectID] = objectid;
			    ShowObjectMenu(playerid, EDITING_TYPE_MAPEO);
			    format(string, sizeof(string), "Seleccionaste el mapeo %i, Objetoid %i, Modelo: %i", mapeoid, objectid, Mapeo[mapeoid][Modelo]);
			    SendAdviseMessage(playerid, string);
			    break;
			}
		}
	}
	return 1;
}

public ShowDialog247(playerid)
{
	new info[500];
	strcat(info, "Camara de Fotos\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Patines\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Dados\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Movil\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Agenda\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Flores\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "{"COLOR_ROSA"}Comprar Saldo\t\n");
	strcat(info, "Bolsa\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Condones\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Maleta\t{"COLOR_VERDE"}$%i\n");
	strcat(info, "Modelo de Moviles\t{"COLOR_VERDE"}$%i\n");

	format(info, 500, info,
		M24_7_Precios[0],
		M24_7_Precios[1],
		M24_7_Precios[2],
		M24_7_Precios[3],
		M24_7_Precios[4],
		M24_7_Precios[5],
		M24_7_Precios[7],
		M24_7_Precios[8],
		M24_7_Precios[9],
		M24_7_Precios[10]);

	ShowPlayerDialogEx(playerid, 162, DIALOG_STYLE_TABLIST, "{"COLOR_AZUL"}24/7", info, "Comprar", "Salir");
}

stock ShowDialogTypePhones(playerid)
{
	new info[100];
	strcat(info, "Normal\n");
	strcat(info, "Color Oro\n");
	strcat(info, "Azul Claro\n");
	strcat(info, "Naranja\n");
	strcat(info, "Negro\n");
	strcat(info, "Rosa\n");
	strcat(info, "Rojo\n");
	strcat(info, "Verde\n");
	strcat(info, "Azul Oscuro\n");
	strcat(info, "Amarillo\n");
	strcat(info, "Blanco");
	ShowPlayerDialogEx(playerid, 163, DIALOG_STYLE_LIST, "{"COLOR_AZUL"}24/7 -> Modelo de Moviles", info, "Comprar", "Volver");
}

stock ShowDialogSuperMercado(playerid)
{
	new info[200];
	strcat(info, "{"COLOR_CREMA"}Articulo\t{"COLOR_CREMA"}Precio\n");
	
    strcat(info, "Pack 6 Cervezas\t{"COLOR_VERDE"}$%i\n");
    strcat(info, "5 Vodkas\t{"COLOR_VERDE"}$%i\n");
    strcat(info, "5 Refrescos\t{"COLOR_VERDE"}$%i\n");
    strcat(info, "Pollo Crudo\t{"COLOR_VERDE"}$%i\n");
    strcat(info, "Papas\t{"COLOR_VERDE"}$%i\n");
    strcat(info, "Arroz\t{"COLOR_VERDE"}$%i\n");

    format(info, 500, info,
		SupermercadoArticulosPrecios[0],
		SupermercadoArticulosPrecios[1],
		SupermercadoArticulosPrecios[2],
		SupermercadoArticulosPrecios[3],
		SupermercadoArticulosPrecios[4],
		SupermercadoArticulosPrecios[5]);

    ShowPlayerDialogEx(playerid, 37, DIALOG_STYLE_TABLIST_HEADERS, "{"COLOR_AZUL"}Super Mercado", info, "Comprar", "Salir");
}


